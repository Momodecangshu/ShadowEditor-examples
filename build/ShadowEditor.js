(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.Shadow = {})));
}(this, (function (exports) { 'use strict';

	window.URL = window.URL || window.webkitURL;
	window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder;

	Number.prototype.format = function () {
	    return this.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
	};

	String.prototype.format = function () {
	    var str = this;
	    for (var i = 0; i < arguments.length; i++) {
	        str = str.replace('{' + i + '}', arguments[i]);
	    }
	    return str;
	};

	Object.assign(window, {
	    // command
	    L_ADD_OBJECT_COLON: 'Add Object:',
	    L_ADD_SCRIPT: 'Add Script',
	    L_MOVE_OBJECT: 'Move Object',
	    L_MULTI_MODIFY: 'Multi Modify',
	    L_REMOVE_OBJECT: 'Remove Object',
	    L_REMOVE_SCRIPT: 'Remove Script',
	    L_SET: 'Set',
	    L_SET_GEOMETRY: 'Set Geometry',
	    L_SET_MATERIAL: 'Set Material',
	    L_NEW_MATERIAL: 'New Material',
	    L_SET_POSITION: 'Set Position',
	    L_SET_ROTATION: 'Set Rotation',
	    L_SET_SCALE: 'Set Scale',
	    L_SET_SCENE: 'Set Scene',
	    L_SET_SCRIPT: 'Set Script',
	    L_UPDATE_UUID: 'Update UUID',

	    // component
	    L_BASIC_INFO: 'Basic Info',
	    L_NAME: 'Name',
	    L_TYPE: 'Type',
	    L_VISIBLE: 'Visible',
	    L_CAMERA_COMPONENT: 'Camera Component',
	    L_FOV: 'Fov',
	    L_NEAR: 'Near',
	    L_FAR: 'Far',
	    L_FIRE_COMPONENT: 'Fire Component',
	    L_WIDTH: 'Width',
	    L_HEIGHT: 'Height',
	    L_DEPTH: 'Depth',
	    L_SLICE_SPACING: 'SliceSpacing',
	    L_PREVIEW: 'Preview',
	    L_GEOMETRY_COMPONENT: 'Geometry Component',
	    L_LIGHT_COMPONENT: 'Light Component',
	    L_COLOR: 'Color',
	    L_INTENSITY: 'Intensity',
	    L_DISTANCE: 'Distance',
	    L_ANGLE: 'Angle',
	    L_PENUMBRA: 'Penumbra',
	    L_DECAY: 'Decay',
	    L_SKY_COLOR: 'SkyColor',
	    L_GROUND_COLOR: 'GroundColor',
	    L_LMESH_COMPONENT: 'LMesh Component',
	    L_ANIMATION: 'Animation',
	    L_MATERIAL_COMPONENT: 'Material Component',
	    L_SAVE: 'Save',
	    L_SELECT: 'Select',
	    L_LINE_BASIC_MATERIAL: 'LineBasicMaterial',
	    L_LINE_DASHED_MATERIAL: 'LineDashedMaterial',
	    L_MESH_BASIC_MATERIAL: 'MeshBasicMaterial',
	    L_MESH_DEPTH_MATERIAL: 'MeshDepthMaterial',
	    L_MESH_NORMAL_MATERIAL: 'MeshNormalMaterial',
	    L_MESH_LAMBERT_MATERIAL: 'MeshLambertMaterial',
	    L_MESH_PHONG_MATERIAL: 'MeshPhongMaterial',
	    L_POINT_CLOUD_MATERIAL: 'PointCloudMaterial',
	    L_MESH_STANDARD_MATERIAL: 'MeshStandardMaterial',
	    L_MESH_PHYSICAL_MATERIAL: 'MeshPhysicalMaterial',
	    L_SPRITE_MATERIAL: 'SpriteMaterial',
	    L_SHADER_MATERIAL: 'ShaderMaterial',
	    L_RAW_SHADER_MATERIAL: 'RawShaderMaterial',
	    L_SHADER_PROGRAM: 'Shader Program',
	    L_INFO: 'Information',
	    L_VERTEX: 'Vertex',
	    L_FRAGMENT: 'Fragment',
	    L_ROUGHNESS: 'Roughness',
	    L_METALNESS: 'MetalNess',
	    L_EMISSIVE: 'Emissive',
	    L_SPECULAR: 'Specular',
	    L_SHININESS: 'Shininess',
	    L_CLEAR_COAT: 'ClearCoat',
	    L_CLEAR_COAT_ROUGHNESS: 'ClearCoatRoughness',
	    L_VERTEX_COLOR: 'Vertex Color',
	    L_NO_COLORS: 'No Colors',
	    L_FACE_COLORS: 'Face Colors',
	    L_VERTEX_COLORS: 'Vertex Colors',
	    L_SKIN: 'Skin',
	    L_TEXTURE: 'Texture',
	    L_SET_MAP: 'Set',
	    L_ALPHA_MAP: 'AlphaMap',
	    L_BUMP_MAP: 'BumpMap',
	    L_NORMAL_MAP: 'NormalMap',
	    L_DISPLACEMENT_MAP: 'DisplacementMap',
	    L_ROUGHNESS_MAP: 'RoughnessMap',
	    L_METALNESS_MAP: 'MetalnessMap',
	    L_SPECULAR_MAP: 'SpecularMap',
	    L_ENV_MAP: 'EnvMap',
	    L_LIGHT_MAP: 'LightMap',
	    L_AO_MAP: 'AoMap',
	    L_EMISSIVE_MAP: 'EmissiveMap',
	    L_SIDE: 'Side',
	    L_FRONT_SIDE: 'Front Side',
	    L_BACK_SIDE: 'Back Side',
	    L_DOUBLE_SIDE: 'Double Side',
	    L_FLAT_SHADING: 'Flat Shading',
	    L_BLENDING: 'Blending',
	    L_NO_BLENDING: 'No Blending',
	    L_NORMAL_BLENDING: 'Normal Blending',
	    L_ADDITIVE_BLENDING: 'Additive Blending',
	    L_SUBSTRACTIVE_BLENDING: 'Substractive Blending',
	    L_MULTIPLY_BLENDING: 'Multiply Blending',
	    L_CUSTOM_BLENDING: 'Custom Blending',
	    L_OPACITY: 'Opacity',
	    L_TRANSPARENT: 'Transparent',
	    L_ALPHA_TEST: 'AlphaTest',
	    L_WIREFRAME: 'Wireframe',
	    L_CANNOT_SET_TEXTURE: 'Cannot set texture, ',
	    L_MATERIAL_HAS_NO_COORDINATES: ' material has no coordinates.',
	    L_SHADER_INFO: 'ShaderInfo',
	    L_SHADER_CANNOT_PARSE: 'Shader cannot be parsed.',
	    L_VERTEX_SHADER: 'Vertex Shader',
	    L_FRAGMENT_SHADER: 'Fragment Shader',
	    L_SELECT_TEXTURE_FIRST: 'Please select texture first.',
	    L_ENTER_MATERIAL_NAME: 'Please enter material name',
	    L_CLICK_MATERIAL_ON_PANEL: 'Please click material on material panel.',
	    L_MMD_MODEL: 'MMD Model',
	    L_MODEL_ANIMATION: 'Model Animation',
	    L_CAMERA_ANIMATION: 'Camera Animation',
	    L_AUDIO: 'Audio',
	    L_CLICK_ANIMATION_PANEL: 'Please click the animation in the animation panel.',
	    L_SELECT_MMD_ANIMATION_ONLY: 'Please select MMD animation only.',
	    L_CLICK_CAMERA_ANIMATION: 'Please select camera animation.',
	    L_SELECT_CAMERA_ANIMATION_ONLY: 'Please select camera animation only.',
	    L_SELECT_MMD_AUDIO: 'Please select MMD audio.',
	    L_PARTICLE_EMITTER: 'Particle Emitter',
	    L_POSITION: 'Position',
	    L_POSITION_SPREAD: 'PositionSpread',
	    L_VELOCITY: 'Velocity',
	    L_VELOCITY_SPREAD: 'VelocitySpread',
	    L_ACCELERATION: 'Acceleration',
	    L_ACCELERATION_SPREAD: 'AccelerationSpread',
	    L_SIZE: 'Size',
	    L_SIZE_SPREAD: 'SizeSpread',
	    L_PARTICLE_COUNT: 'ParticleCount',
	    L_MAX_AGE: 'MaxAge',
	    L_MAX_AGE_SPREAD: 'maxAgeSpread',
	    L_CANCEL: 'Cancel',
	    L_REFLECTOR_COMPONENT: 'Reflector Component',
	    L_REFLECT: 'Reflect',
	    L_TEXTURE_SIZE: 'TextureSize',
	    L_CLIP_BIAS: 'ClipBias',
	    L_RECURSION: 'Recursion',
	    L_SCENE_COMPONENT: 'SceneComponent',
	    L_BACKGROUND: 'Background',
	    L_SOLID_COLOR: 'Solid Color',
	    L_BACKGROUND_IMAGE: 'Background Image',
	    L_CUBE_TEXTURE: 'Cube Texture',
	    L_BACKGROUND_COLOR: 'BackgroundColor',
	    L_POS_X: 'PosX',
	    L_NEG_X: 'NegX',
	    L_POS_Y: 'PosY',
	    L_NEG_Y: 'NegY',
	    L_POS_Z: 'PosZ',
	    L_NEG_Z: 'NegZ',
	    L_UPLOAD: 'Upload',
	    L_FOG: 'Fog',
	    L_NONE: 'None',
	    L_LINEAR: 'Linear',
	    L_EXPONENTIAL: 'Exponential',
	    L_FOG_COLOR: 'FogColor',
	    L_FOG_NEAR: 'FogNear',
	    L_FOG_FAR: 'FogFar',
	    L_FOG_DENSITY: 'FogDensity',
	    L_CLICK_MAP_PANEL: 'Please click the map in the Map Panel.',
	    L_ONLY_SELECT_CUBE_TEXTURE: 'You should select Cube Texture.',
	    L_CUBE_TEXTURE_FETCH_FAILED: 'Cube Texture fetch failed.',
	    L_UPLOAD_ALL_BEFORE_SAVE: 'Please upload all the textures before save.',
	    L_CUBE_TEXTURE_EXISTED: 'Cube texture has already been uploaded.',
	    L_SHADOW_COMPONENT: 'Shadow Component',
	    L_SHADOW: 'Shadow',
	    L_CAST: 'Cast',
	    L_RECEIVE: 'Receive',
	    L_RADIUS: 'Radius',
	    L_MAP_SIZE: 'MapSize',
	    L_BIAS: 'Bias',
	    L_CAMERA_LEFT: 'CameraLeft',
	    L_CAMERA_RIGHT: 'CameraRight',
	    L_CAMERA_TOP: 'CameraTop',
	    L_CAMERA_BOTTOM: 'CameraBottom',
	    L_CAMERA_NEAR: 'CameraNear',
	    L_CAMERA_FAR: 'CameraFar',
	    L_SMOKE_COMPONENT: 'SmokeComponent',
	    L_TRANSFORM_COMPONENT: 'Transform Component',
	    L_TRANSLATE: 'Translate',
	    L_ROTATE: 'Rotate',
	    L_SCALE: 'Scale',
	    L_BASIC_INFORMATION: 'Basic Information',
	    L_TARGET: 'Target',
	    L_TWEEN_ANIMATION: 'Tween Animation',
	    L_SKELETAL_ANIMATION: 'Skeletal Animation',
	    L_PLAY_AUDIO: 'Play Audio',
	    L_FILTER_ANIMATION: 'Filter Animation',
	    L_PARTICLE_ANIMATION: 'Particle Animation',
	    L_BEGIN_TIME: 'BeginTime',
	    L_END_TIME: 'EndTime',
	    L_ANIMATION_OBJECT: 'Animation Object',
	    L_NOT_EXISTED_IN_SCENE: 'is not existed in the scene.',
	    L_BEGIN_STATUS: 'BeginStatus',
	    L_CURRENT_STATUS: 'Current Status',
	    L_CUSTOM_STATUS: 'Custom Status',
	    L_EASE_FUNC: 'Ease Func',
	    L_END_STATUS: 'EndStatus',
	    L_AUDIO_LISTENER: 'Audio Listener',
	    L_MAX_VOLUME: 'Max Volume',
	    L_BACKGROUND_MUSIC: 'Background Music',
	    L_AUTO_PLAY: 'Auto Play',
	    L_LOOP: 'Loop',
	    L_VOLUME: 'Volume',
	    L_PLAY: 'Play',
	    L_STOP: 'Stop',
	    L_CLICK_AUDIO_IN_PANEL: 'Please click the audio in the Audio Panel.',
	    L_SCENE_CONTROLLER: 'Scene Controller',
	    L_FIRST_PERSON_CONTROLS: 'First Person Controls',
	    L_FLY_CONTROLS: 'Fly Controls',
	    L_ORBIT_CONTROLS: 'Orbit Controls',
	    L_POINTER_LOCK_CONTROLS: 'Pointer Lock Controls',
	    L_TRACEBALL_CONTROLS: 'Traceball Controls',
	    L_MOVEMENT_SPEED: 'MovementSpeed',
	    L_LOOK_SPEED: 'LookSpeed',
	    L_LOOK_VERTICAL: 'LookVertical',
	    L_AUTO_FORWARD: 'AutoForward',
	    L_ACTIVE_LOCK: 'ActiveLock',
	    L_HEIGHT_SPEED: 'HeightSpeed',
	    L_HEIGHT_COEF: 'HeightCoef',
	    L_HEIGHT_MIN: 'HeightMin',
	    L_HEIGHT_MAX: 'HeightMax',
	    L_CONSTRAIN_VERTICAL: 'ConstrainVertical',
	    L_VERTICAL_MIN: 'VerticalMin',
	    L_VERTICAL_MAX: 'VerticalMax',
	    L_ROTATE_SPEED: 'RotateSpeed',
	    L_DRAG_TO_LOOK: 'DragToLook',
	    L_MIN_DISTANCE: 'MinDistance',
	    L_MAX_DISTANCE: 'MaxDistance',
	    L_MIN_POLAR_ANGLE: 'MinPolarAngle',
	    L_MAX_POLAR_ANGLE: 'MaxPolarAngle',
	    L_MIN_AZIMUTH_ANGLE: 'MinAzimuthAngle',
	    L_MAX_AZIMUTH_ANGLE: 'MaxAzimuthAngle',
	    L_ENABLE_DAMPING: 'EnableDamping',
	    L_DAMPING_FACTOR: 'DampingFactor',
	    L_ENABLE_ZOOM: 'EnableZoom',
	    L_ZOOM_SPEED: 'ZoomSpeed',
	    L_ENABLE_ROTATE: 'EnableRotate',
	    L_ENABLE_PAN: 'EnablePan',
	    L_PAN_SPEED: 'PanSpeed',
	    L_SCREEN_SPACE_PANNING: 'ScreenSpacePanning',
	    L_KEY_PAN_SPEED: 'KeyPanSpeed',
	    L_AUTO_ROTATE: 'AutoRotate',
	    L_AUTO_ROTATE_SPEED: 'AutoRotateSpeed',
	    L_ENABLE_KEYS: 'EnableKeys',
	    L_IS_LOCKED: 'IsLocked',
	    L_NO_ROTATE: 'NoRotate',
	    L_NO_ZOOM: 'NoZoom',
	    L_NO_PAN: 'NoPan',
	    L_STATIC_MOVING: 'StaticMoving',
	    L_DYNAMIC_DAMPING_FACTOR: 'DampingFactor',
	    L_WIDTH_SEGMENTS: 'WidthSegments',
	    L_HEIGHT_SEGMENTS: 'HeightSegments',
	    L_DEPTH_SEGMENTS: 'DepthSegments',
	    L_SEGMENTS: 'Segments',
	    L_THETA_START: 'ThetaStart',
	    L_THETA_LENGTH: 'ThetaLength',
	    L_RADIUS_TOP: 'RadiusTop',
	    L_RADIUS_BOTTOM: 'RadiusBottom',
	    L_RADIAL_SEGMENTS: 'RadialSegments',
	    L_OPEN_ENDED: 'OpenEnded',
	    L_DETAIL: 'Detail',
	    L_PHI_START: 'PhiStart',
	    L_PHI_LENGTH: 'PhiLength',
	    L_BOTTOM: 'Bottom',
	    L_LID: 'Lid',
	    L_BODY: 'Body',
	    L_FIT_LID: 'FitLid',
	    L_BLINN: 'Blinn',
	    L_TUBE: 'Tube',
	    L_TUBULAR_SEGMENTS: 'TubelarSegments',
	    L_ARC: 'Arc',
	    L_TUBE_ARC: 'TubeArc',
	    L_DISTORTED_ARC: 'DistortedArc',
	    L_CLOTH_COMPONENT: 'ClothComponent',
	    L_PERLIN_TERRAIN: 'PerlinTerrain',
	    L_QUALITY: 'Quality',
	    L_SKY: 'Sky',
	    L_TURBIDITY: 'Turbidity',
	    L_RAYLEIGH: 'Rayleigh',
	    L_LUMINANCE: 'Luminance',
	    L_MIE_COEFFICIENT: 'MieCofficient',
	    L_MIE_DIRECTIONAL_G: 'MieDirectionalG',
	    L_PHYSICS_TYPE: 'PhysicsType',
	    L_ENABLED: 'Enabled',
	    L_RIGID_BODY: 'RigidBody',
	    L_SOFT_VOLUME: 'SoftVolume',
	    L_PHYSICS_ENVIRONMENT: 'PhysicsEnvironment',
	    L_COLLISION_CONFIG: 'CollisionConfig',
	    L_DEFAULT_COLLISION_CONFIG: 'DefaultCollisionConfig',
	    L_SOFTBODY_RIGIDBODY_COLLISIONCONFIG: 'SoftBodyRigidBodyCollisionConfig',
	    L_GRAVITY: 'Gravity',
	    L_SHAPE: 'Shape',
	    L_BOX_SHAPE: 'BoxShape',
	    L_SPHERE_SHAPE: 'SphereShape',
	    L_MASS: 'Mass',
	    L_INERTIA: 'Inertia',
	    L_HAS_NO_PHYSICS_HELPER: 'has no physics helper.',
	    L_PRESSURE: 'Pressure',
	    L_AFTERIMAGE_EFFECT: 'AfterimageEffect',
	    L_ENABLE_STATE: 'EnableState',
	    L_DAMP: 'Damp',
	    L_BOKEH_EFFECT: 'Bokeh Effect',
	    L_FOCUS: 'Focus',
	    L_APERTURE: 'Aperture',
	    L_MAX_BLUR: 'MaxBlur',
	    L_DOT_SCREEN_EFFECT: 'DotScreenEffect',
	    L_FXAA: 'FXAA Component',
	    L_GLITCH_EFFECT: 'Glitch Effect',
	    L_WILD_MODE: 'WildMode',
	    L_HALFTONE_EFFECT: 'Halftone Effect',
	    L_POINT: 'Point',
	    L_ELLIPSE: 'Ellipse',
	    L_LINE: 'Line',
	    L_SQUARE: 'Square',
	    L_ROTATE_RED: 'RotateRed',
	    L_ROTATE_GREEN: 'RotateGreen',
	    L_ROTATE_BLUE: 'RotateBlue',
	    L_SCATTER: 'Scatter',
	    L_BLENDING: 'Blending',
	    L_BLENDING_MODE: 'BlendingMode',
	    L_MULTIPLY: 'Multiply',
	    L_ADD: 'Add',
	    L_LIGHTER: 'Lighter',
	    L_DARKER: 'Darker',
	    L_GREY_SCALE: 'GreyScale',
	    L_PIXEL_EFFECT: 'PixelEffect',
	    L_PIXEL_SIZE: 'PixelSize',
	    L_RGB_SHIFT_EFFECT: 'RGB Shift Effect',
	    L_AMOUNT: 'Amount',
	    L_SAO: 'SAO',
	    L_OUTPUT: 'Output',
	    L_BEAUTY: 'Beauty',
	    L_BEAUTY_AND_OCCLUSION: 'Beauty&Occlusion',
	    L_OCCLUSION: 'Occlusion',
	    L_NORMAL: 'Normal',
	    L_KERNAL_RADIUS: 'KernalRadius',
	    L_MIN_RESOLUTION: 'MinResolution',
	    L_BLUR: 'Blur',
	    L_BLUR_RADIUS: 'BlurRadius',
	    L_BLUR_STD_DEV: 'BlurStdDev',
	    L_BLUR_DEPTH_CUTOFF: 'BlurDepthCutoff',
	    L_SMAA: 'SMAA',
	    L_SSAA: 'SSAA',
	    L_ONE_SAMPLE: '1 Sample',
	    L_TWO_SAMPLES: '2 Samples',
	    L_FOUR_SAMPLES: '4 Samples',
	    L_EIGHT_SAMPLES: '8 Samples',
	    L_SIXTEEN_SAMPLES: '16 Samples',
	    L_THIRTYTWO_SAMPLES: '32 Samples',
	    L_UNBIASED: 'Unbiased',
	    L_SSAO: 'SSAO',
	    L_DEFAULT: 'Default',
	    L_OCCLUSION_AND_BLUR: 'Occlusion&Blur',
	    L_TAA: 'TAA',
	    L_LEVEL: 'Level',

	    // core
	    L_IS_NOT_AVAILABLE: 'is not available.',
	    L_SAVE_INTO_INDEXEDDB: 'Saved into indexDB.',
	    L_CLEAR_INDEXED_DB: 'Clear indexedDB.',

	    // editor
	    L_SCENE: 'Scene',
	    L_DEFAULT_CAMERA: 'DefaultCamera',
	    L_AUDIO_LISTENER: 'AudioListener',
	    L_ANIMATION_LAYER_1: 'AnimLayer1',
	    L_ANIMATION_LAYER_2: 'AnimLayer2',
	    L_ANIMATION_LAYER_3: 'AnimLayer3',
	    L_AMBIENT: 'Ambient',
	    L_DIRECTIONAL: 'Directional',
	    L_OBJECT_NUM: 'Object',
	    L_VERTEX_NUM: 'Vertex',
	    L_TRIANGLE_NUM: 'Triangle',
	    L_THROW_BALL: 'ThrowBall',
	    L_SELECT: 'Select',
	    L_TRANSLATE_W: 'Translate(W)',
	    L_ROTATE_E: 'Rotate(E)',
	    L_SCALE_R: 'Scale(R)',
	    L_DRAW_POINT: 'Draw Point',
	    L_DRAW_LINE: 'Draw Line',
	    L_DRAW_POLYGON: 'Draw Pologon',
	    L_SPRAY: 'Spray',
	    L_POLYGON: 'Polygon',
	    L_DECAL: 'Decal',
	    L_UPLOAD_FAILED: 'Upload failed.',
	    L_CONFIRM: 'Confirm',
	    L_DELETE: 'Delete',
	    L_TIME: 'Time',
	    L_MODEL: 'Model',
	    L_MAP: 'Map',
	    L_MATERIAL: 'Material',
	    L_PARTICLE: 'Particle',
	    L_PREFAB: 'Prefab',
	    L_CHARACTER: 'Character',
	    L_LOG: 'Logs',
	    L_COLLAPSE: 'Collapse',
	    L_CLEAR: 'Clear',
	    L_CLEAR_LOGS: 'Clear Logs',
	    L_LOAD_SUCCESS: 'Load Successfully!',
	    L_ILLUSTRATE_DOUBLE_CLICK_ADD_ANIM: 'Illustrate: Double click area below to add animation.',
	    L_ANIM_LAYER: 'AnimLayer',
	    L_CHECK_DELETE_LAYER: 'Please check the layer.',
	    L_DELETE_LAYER_WILL_DELETE_ANIM: 'Delete layer will delete all the anims on the layer. Are you sure?',
	    L_NO_IMAGE: 'No Image',
	    L_CLICK_MAP_IN_PANEL: 'Please click the map in the map panel.',
	    L_ASSETS: 'Assets',
	    L_EXPORT_GEOMETRY: 'Export Geometry',
	    L_EXPORT_OBJECT: 'Export Object',
	    L_EXPORT_GLTF: 'Export GLTF',
	    L_EXPORT_OBJ: 'Export OBJ',
	    L_EXPORT_PLY: 'Export PLY',
	    L_EXPORT_STL_BINARY: 'Export STL Binary',
	    L_EXPORT_STL: 'Export STL',
	    L_PLEASE_SELECT_OBJECT: 'Please select object!',
	    L_OBJECT_SELECTED_IS_NOT_GEOMETRY: 'The object you selected is not geometry.',
	    L_COMPONENT: 'Component',
	    L_BACKGROUND_MUSIC: 'Background Music',
	    L_PARTICLE_EMITTER: 'ParticleEmitter',
	    L_SKY: 'Sky',
	    L_FIRE: 'Fire',
	    L_WATER: 'Water',
	    L_SMOKE: 'Smoke',
	    L_CLOTH: 'Cloth',
	    L_PHYSICS_CLOTH: 'Physics Cloth',
	    L_ADD_PHYSICS_CLOTH_SUCCESS: 'Add physics cloth successfully',
	    L_EDIT: 'Edit',
	    L_UNDO: 'Undo',
	    L_REDO: 'Redo',
	    L_CLEAR_HISTORY: 'Clear History',
	    L_CLONE: 'Clone',
	    L_HISTORY_WILL_CLEAR: 'Undo/Redo history will be cleared. Are you sure?',
	    L_GEOMETRY: 'Geometry',
	    L_GROUP: 'Group',
	    L_PLANE: 'Plane',
	    L_BOX: 'Box',
	    L_CIRCLE: 'Circle',
	    L_CYLINDER: 'Cylinder',
	    L_SPHERE: 'Sphere',
	    L_ICOSAHEDRON: 'Icosahedron',
	    L_TORUS: 'Torus',
	    L_TORUS_KNOT: 'Torus Knot',
	    L_TEAPOT: 'Teapot',
	    L_LATHE: 'Lathe',
	    L_SPRITE: 'Sprite',
	    L_TEXT: 'Text',
	    L_SPLINE: 'Spline',
	    L_PLEASE_INPUT: 'Please input',
	    L_SOME_WORDS: 'Sone Words',
	    L_HELP: 'Help',
	    L_SOURCE: 'Source',
	    L_EXAMPLES: 'Examples',
	    L_DOCUMENTS: 'Documents',
	    L_ABOUT: 'About',
	    L_AUTHOR: 'Author',
	    L_LISENSE: 'Lisense',
	    L_LIGHT: 'Light',
	    L_AMBIENT_LIGHT: 'Ambient Light',
	    L_DIRECTIONAL_LIGHT: 'Directional Light',
	    L_POINT_LIGHT: 'Point Light',
	    L_SPOT_LIGHT: 'Spot Light',
	    L_HEMISPHERE_LIGHT: 'Hemisphere Light',
	    L_RECT_AREA_LIGHT: 'Rect Area Light',
	    L_OPTIONS: 'Options',
	    L_SURFACE: 'Furface',
	    L_RENDERER: 'Renderer',
	    L_NEW: 'New',
	    L_SAVE_AS: 'Save As',
	    L_EXPORT_STATIC_WEBSITE: 'Export Static Website',
	    L_NO_NAME: 'No Name',
	    L_UNSAVED_WILL_LOSE_CONFIRM: 'All unsaved data will be lost. Are you sure?',
	    L_SAVE_SCENE: 'Save Scene',
	    L_NEW_SCENE: 'New Scene',
	    L_PUBLISH_WEBSITE: 'Publish website',
	    L_CONFIRM_PUBLISH_WEBSITE: 'Are you sure to publish all scenes and assets?',
	    L_TERRAIN: 'Terrain',
	    L_PERLIN_TERRAIN: 'Perlin Terrain',
	    L_SHADER_TERRAIN: 'Shader Terrain',
	    L_RAISE_TERRAIN: 'Raise Terrain',
	    L_REDUCE_TERRAIN: 'Reduce Terrain',
	    L_PLANT_TREES: 'Plant Trees',
	    L_SCRIPT_SAVED_SUCCESS: 'Script saved successfully!',
	    L_EXECUTE_BEFORE_SCENE_RENDER: 'Execute before scene render',
	    L_EXECUTE_AFTER_SCENE_RENDER: 'Execute after scene render',
	    L_EXECUTE_EACH_FRAME_DURING_RUNNING: 'Execute each frame during running',
	    L_EXECUTE_AFTER_PROGRAM_STOP: 'Execute after program stopped',
	    L_LISTEN_TO_CLICK_EVENT: 'Listen to click event',
	    L_LISTEN_TO_DBLCLICK_EVENT: 'Listen to dblclick event',
	    L_LISTEN_TO_KEYDOWN_EVENT: 'Listen to keydown event',
	    L_LISTEN_TO_KEYUP_EVENT: 'Listen to keyup event',
	    L_LISTEN_TO_MOUSEDOWN_EVENT: 'Listen to mousedown event',
	    L_LISTEN_TO_MOUSEMOVE_EVENT: 'Listen to mousemove event',
	    L_LISTEN_TO_MOUSEUP_EVENT: 'Listen to mouseup event',
	    L_LISTEN_TO_MOUSEWHEEL_EVENT: 'Listen to mousewheel event',
	    L_LISTEN_TO_RESIZE_EVENT: 'Listen to resize event',
	    L_CREATE_SCRIPT: 'Create Script',
	    L_SHADER_PROGRAM_INFO: 'Shader Program Info',
	    L_OK: 'OK',
	    L_SCRIPT_NAME_EXISTED: 'Script name existed.',
	    L_HISTORY: 'History',
	    L_HELPERS: 'Helpers',
	    L_GRID: 'Grid',
	    L_CAMERA: 'Camera',
	    L_SKELETON: 'Skeleton',
	    L_PROPERTY: 'Property',
	    L_SETTINGS: 'Settings',
	    L_NEW_SCRIPT: 'New Script',
	    L_HIERACHY: 'Hierachy',
	    L_SCRIPT: 'Script',
	    L_THUMBNAIL: 'Thumbnail',
	    L_NOT_SET: 'Not Set',
	    L_CATEGORY: 'Category',
	    L_OPTIONS_WINDOW: 'Options Window',
	    L_THEME: 'Theme',
	    L_LIGHT_COLOR: 'Light Color',
	    L_DARK_COLOR: 'Dark Color',
	    L_SHADOW: 'Shadow',
	    L_DISABLED: 'Disabled',
	    L_BASIC_SHADOW: 'Basic Shadow',
	    L_PCF_SHADOW: 'PCF Shadow',
	    L_PCF_SOFT_SHADOW: 'PCF Soft Shadow',
	    L_GAMMA_INPUT: 'Gamma Input',
	    L_GAMMA_OUTPUT: 'Gamma Output',
	    L_GAMMA_FACTOR: 'Gamma Factor',
	    L_SAVE_SUCCESS: 'Save Successfully.',
	    L_TEXTURE_SETTINGS: 'Texture Settings',
	    L_OFFSET: 'Offset',
	    L_ROTATE_CENTER: 'Rotate Center',
	    L_WRAP_S: 'WrapS',
	    L_CLAMP_TO_EDGE: 'Clamp To Edge',
	    L_REPEAT: 'Repeat',
	    L_MIRRORED_REPEAT: 'Mirrored Repeat',
	    L_WRAP_T: 'WrapT',
	    L_REPEAT_NUM: 'RepeatNum',
	    L_FLIP_Y: 'FlipY',
	    L_MAG_FILTER: 'MagFilter',
	    L_MIN_FILTER: 'MinFilter',
	    L_ENCODING: 'Encoding',
	    L_FORMAT: 'Format',
	    L_GENERATE_MIPMAPS: 'GenerateMipmaps',
	    L_MAPPING: 'Mapping',
	    L_PREMULTIPLY_ALPHA: 'PremultiplyAlpha',
	    L_UNPACK_ALIGNMENT: 'UnpackAlignment',
	    L_ANISOTROPY: 'Anisotropy',
	    L_CATEGORY_EDIT: 'Category Edit',
	    L_CATEGORY_LIST: 'Category List',
	    L_PLEASE_SELECT_CATEGORY: 'Please select category.',
	    L_DELETE_SUCCESS: 'Delete successfully!',

	    // object
	    L_HALO: 'Halo',
	    L_FrontSide: 'FrontSide',
	    L_BackSide: 'BackSide',

	    // ui
	    L_MESSAGE: 'Message',
	    L_NO_IMAGE: 'No Image',
	    L_IMAGE_UPLOAD_SUCCESS: 'Image upload successfully!',
	    L_IMAGE_UPLOAD_FAILED: 'Image upload failed!',
	    L_PLEASE_INPUT: 'Please input',
	    L_SEARCH_CONTENT: 'Search Content',
	    L_ERROR: 'Error',

	    L_LINE_CURVE: 'Line Curve',
	    L_CATMULL_ROM_CURVE: 'CatmullRom Curve',
	    L_QUADRATIC_BEZIER_CURVE: 'QuadraticBezier Curve',
	    L_CUBIC_BEZIER_CURVE: 'CubicBezier Curve',
	    L_ELLIPSE_CURVE: 'Ellipse Curve',

	    L_PLAY_FULLSCREEN: 'Play Fullscreen',
	    L_PLAY_NEW_WINDOW: 'Play New Window',

	    L_TOOL: 'Tool',
	    L_ARRANGE_MAP: 'Arrange Map',
	    L_ARRANGE_MESH: 'Arrange Mesh',
	    L_ARRANGE_THUMBNAIL: 'Arrange Thumbnail',

	    L_EXPORT_SCENE: 'Export Scene',

	    L_FILTER: 'Filter',
	    L_HUE: 'HueRotate',
	    L_SATURATE: 'Saturate',
	    L_BRIGHTNESS: 'Brightness',
	    L_BLUR: 'Blur',
	    L_CONTRAST: 'Contrast',
	    L_GRAYSCALE: 'Grayscale',
	    L_INVERT: 'Invert',
	    L_SEPIA: 'Sepia',

	    L_EMPTY_SCENE: 'Empty Scene',
	    L_GIS_SCENE: 'GIS Scene',
	    L_CREATE_EMPTY_SCENE_SUCCESS: 'Create empty scene successfully.',

	    L_GLOBE: 'Globe',
	    L_EXPORT_EDITOR: 'Export Editor',
	    L_GIS_COMPONENT: 'GIS Component',
	    L_TILE_MAP: 'Map',
	    L_GOOGLE_MAP: 'Google Map',
	    L_BING_MAP: 'Bing Map',
	    L_TIANDITU_MAP: 'Tianditu Map',
	});

	var applyMatrix4 = "\r\nvec3 applyMatrix4(vec3 v, mat4 m) {\r\n    float x = v.x;\r\n    float y = v.y;\r\n    float z = v.z;\r\n    \r\n    float w = 1.0 / ( m[0][3] * x + m[1][3] * y + m[2][3] * z + m[3][3] );\r\n\r\n    return vec3(\r\n        (m[0][0] * x + m[1][0] * y + m[2][0] * z + m[3][0]) * w,\r\n        (m[0][1] * x + m[1][1] * y + m[2][1] * z + m[3][1]) * w,\r\n        (m[0][2] * x + m[1][2] * y + m[2][2] * z + m[3][2] ) * w\r\n    );\r\n}";

	var lengthSq = "\r\nfloat lengthSq(vec3 v) {\r\n    return v.x * v.x + v.y * v.y + v.z * v.z;\r\n}";

	var angleTo = "#include <lengthSq>\r\n\r\n\r\nfloat angleTo(vec3 v1, vec3 v2) {\r\n    float theta = dot(v1, v2) / sqrt(lengthSq(v1) * lengthSq(v2) );\r\n    \r\n    // clamp, to handle numerical problems\r\n    return acos(clamp(theta, -1.0, 1.0));\r\n}";

	var makeOrthographic = "\r\nmat4 makeOrthographic(float left, float right, float top, float bottom, float near, float far) {\r\n    float w = 1.0 / ( right - left );\r\n    float h = 1.0 / ( top - bottom );\r\n    float p = 1.0 / ( far - near );\r\n    \r\n    float x = ( right + left ) * w;\r\n    float y = ( top + bottom ) * h;\r\n    float z = ( far + near ) * p;\r\n\r\n    return mat4(\r\n        2 * w, 0.0,     0.0,      0.0,\r\n        0.0,   2.0 * h, 0.0,      0.0,\r\n        0.0,   0.0,     -2.0 * p, 0.0,\r\n        -x,    -y,      -z,       1.0\r\n    );\r\n}";

	var makePerspective = "\r\nmat4 makePerspective(float left, float right, float top, float bottom, float near, float far) {\r\n    float x = 2.0 * near / ( right - left );\r\n    float y = 2.0 * near / ( top - bottom );\r\n    \r\n    float a = ( right + left ) / ( right - left );\r\n    float b = ( top + bottom ) / ( top - bottom );\r\n    float c = - ( far + near ) / ( far - near );\r\n    float d = - 2.0 * far * near / ( far - near );\r\n\r\n    return mat4(\r\n        x,   0.0, 0.0, 0.0,\r\n        0.0, y,   0.0, 0.0,\r\n        a,   b,   c,   -1.0,\r\n        0.0, 0.0, d,   0.0\r\n    );\r\n}";

	var makePerspective2 = "#include <makePerspective>\r\n\r\n\r\nmat4 makePerspective2(float fov, float aspect, float near, float far) {\r\n    const float DEG2RAD = 0.017453292519943295; // PI / 180\r\n\r\n    float top = near * tan( DEG2RAD * 0.5 * fov );\r\n\tfloat height = 2.0 * top;\r\n\tfloat width = aspect * height;\r\n\tfloat left = - 0.5 * width;\r\n    \r\n    return makePerspective(left, left + width, top, top - height, near, far );\r\n}";

	var determinant = "\r\nfloat determinant(mat4 te) {\r\n    float n11 = te[0][0], n12 = te[1][0], n13 = te[2][0], n14 = te[3][0];\r\n\tfloat n21 = te[0][1], n22 = te[1][1], n23 = te[2][1], n24 = te[3][1];\r\n\tfloat n31 = te[0][2], n32 = te[1][2], n33 = te[2][2], n34 = te[3][2];\r\n\tfloat n41 = te[0][3], n42 = te[1][3], n43 = te[2][3], n44 = te[3][3];\r\n\r\n\t//TODO: make this more efficient\r\n\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\r\n\treturn (\r\n\t\tn41 * (\r\n\t\t\t+ n14 * n23 * n32\r\n\t\t\t - n13 * n24 * n32\r\n\t\t\t - n14 * n22 * n33\r\n\t\t\t + n12 * n24 * n33\r\n\t\t\t + n13 * n22 * n34\r\n\t\t\t - n12 * n23 * n34\r\n\t\t) +\r\n\t\tn42 * (\r\n\t\t\t+ n11 * n23 * n34\r\n\t\t\t - n11 * n24 * n33\r\n\t\t\t + n14 * n21 * n33\r\n\t\t\t - n13 * n21 * n34\r\n\t\t\t + n13 * n24 * n31\r\n\t\t\t - n14 * n23 * n31\r\n\t\t) +\r\n\t\tn43 * (\r\n\t\t\t+ n11 * n24 * n32\r\n\t\t\t - n11 * n22 * n34\r\n\t\t\t - n14 * n21 * n32\r\n\t\t\t + n12 * n21 * n34\r\n\t\t\t + n14 * n22 * n31\r\n\t\t\t - n12 * n24 * n31\r\n\t\t) +\r\n\t\tn44 * (\r\n\t\t\t- n13 * n22 * n31\r\n\t\t\t - n11 * n23 * n32\r\n\t\t\t + n11 * n22 * n33\r\n\t\t\t + n13 * n21 * n32\r\n\t\t\t - n12 * n21 * n33\r\n\t\t\t + n12 * n23 * n31\r\n\t\t)\r\n\t);\r\n}";

	var compose = "\r\nmat4 compose( vec3 position, vec4 quaternion, vec3 scale ) {\r\n\tfloat x = quaternion.x,\r\n          y = quaternion.y,\r\n          z = quaternion.z,\r\n          w = quaternion.w;\r\n\r\n\tfloat x2 = x + x,\r\n          y2 = y + y,\r\n          z2 = z + z;\r\n\r\n\tfloat xx = x * x2, xy = x * y2, xz = x * z2;\r\n\tfloat yy = y * y2, yz = y * z2, zz = z * z2;\r\n\tfloat wx = w * x2, wy = w * y2, wz = w * z2;\r\n\t\r\n    float sx = scale.x, sy = scale.y, sz = scale.z;\r\n\r\n    return mat4(\r\n        ( 1.0 - ( yy + zz ) ) * sx,\r\n        ( xy + wz ) * sx,\r\n        ( xz - wy ) * sx,\r\n        0.0,\r\n        ( xy - wz ) * sy,\r\n        ( 1.0 - ( xx + zz ) ) * sy,\r\n        ( yz + wx ) * sy,\r\n        0.0,\r\n        ( xz + wy ) * sz,\r\n        ( yz - wx ) * sz,\r\n        ( 1.0 - ( xx + yy ) ) * sz,\r\n        0.0,\r\n        position.x,\r\n        position.y,\r\n        position.z,\r\n        1.0\r\n    );\r\n}";

	var decomposeMatrix = "#include <determinant>\r\n\r\n\r\nvoid decomposeMatrix(in mat4 te, out mat4 position, out mat4 rotation, out mat4 scale) {\r\n    float sx = length(vec3(te[0][0], te[0][1], te[0][2]));\r\n    float sy = length(vec3(te[1][0], te[1][1], te[1][2]));\r\n    float sz = length(vec3(te[2][0], te[2][1], te[2][2]));\r\n    \r\n    // if determine is negative, we need to invert one scale\r\n\tfloat det = determinant(te);\r\n    \r\n    if (det < 0.0) sx = -sx;\r\n\r\n\tposition = mat4(\r\n\t\t1.0, 0.0, 0.0, 0.0,\r\n\t\t0.0, 1.0, 0.0, 0.0,\r\n\t\t0.0, 0.0, 1.0, 0.0,\r\n\t\tte[3][0], te[3][1], te[3][2], 1.0\r\n\t);\r\n    \r\n    // scale the rotation part\r\n    float invSX = 1.0 / sx;\r\n\tfloat invSY = 1.0 / sy;\r\n\tfloat invSZ = 1.0 / sz;\r\n\r\n\trotation = mat4(\r\n\t\tte[0][0] * invSX, te[0][1] * invSX, te[0][2] * invSX, 0.0,\r\n\t\tte[1][0] * invSY, te[1][1] * invSY, te[1][2] * invSY, 0.0,\r\n\t\tte[2][0] * invSZ, te[2][1] * invSZ, te[2][2] * invSZ, 0.0,\r\n\t\t0.0,              0.0,              0.0,              1.0\r\n\t);\r\n    \r\n\tscale = mat4(\r\n\t\tsx, 0.0, 0.0, 0.0,\r\n\t\t0.0, sy, 0.0, 0.0,\r\n\t\t0.0, 0.0, sz, 0.0,\r\n\t\t0.0, 0.0, 0.0, 1.0\r\n\t);\r\n}";

	var mercator = "\r\nvec2 mercator(vec2 lonlat) \r\n{\r\n    return vec2(\r\n        lonlat.x,\r\n        log(tan((PI / 2.0 + lonlat.y) / 2.0))\r\n    );\r\n}";

	var mercatorInvert = "\r\nvec2 mercatorInvert(vec2 mercatorXY) \r\n{\r\n    return vec2(\r\n        mercatorXY.x,\r\n        2.0 * atan(exp(mercatorXY.y)) - PI / 2.0\r\n    );\r\n}";

	Object.assign(THREE.ShaderChunk, {
	    // vec3
	    applyMatrix4: applyMatrix4,
	    lengthSq: lengthSq,
	    angleTo: angleTo,

	    // mat4
	    makeOrthographic: makeOrthographic,
	    makePerspective: makePerspective,
	    makePerspective2: makePerspective2,
	    determinant: determinant,
	    compose: compose,
	    decomposeMatrix: decomposeMatrix,

	    // geo
	    mercator: mercator,
	    mercatorInvert: mercatorInvert,
	});

	/**
	 * 配置选项
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 配置选项
	 */
	function Options(options = {}) {
	    // 服务端配置
	    this.server = options.server === undefined ? location.origin : options.server; // 服务端地址
	    this.sceneType = options.sceneType === undefined ? 'Empty' : options.sceneType; // 场景类型：Empty, GIS

	    // 阴影配置
	    this.shadowMapType = THREE.PCFSoftShadowMap;

	    // gamma校正
	    this.gammaInput = false;
	    this.gammaOutput = false;
	    this.gammaFactor = 2.0;

	    // 滤镜
	    this.hueRotate = 0;
	    this.saturate = 1;
	    this.brightness = 1;
	    this.blur = 0;
	    this.contrast = 1;
	    this.grayscale = 0;
	    this.invert = 0;
	    this.sepia = 0;
	}

	var ID = -1;

	/**
	 * 所有控件基类
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 * @see https://github.com/tengge1/xtype.js
	 * @see https://github.com/tengge1/xtype-html5
	 */
	function Control(options = {}) {
	    this.parent = options.parent || document.body;
	    this._id = options.id || this.constructor.name + ID--;
	    this._scope = options.scope || 'global';

	    this.children = options.children || [];
	    this.html = options.html || null;

	    this.attr = options.attr || null; // 控件属性(setAttribute)
	    this.prop = options.prop || null; // 控件属性(使用等号赋值)
	    this.cls = options.cls || null; // class属性
	    this.style = options.style || null; // 控件样式
	    this.listeners = options.listeners || null; // 监听器
	    this.data = options.data || null; // 自定义数据

	    this.manager = null; // Manager.create时自动赋值
	}

	Object.defineProperties(Control.prototype, {
	    /**
	     * 控件id
	     */
	    id: {
	        get: function () {
	            return this._id;
	        },
	        set: function (id) {
	            console.warn(`Control: It is not allowed to assign new value to id.`);
	            this._id = id;
	        }
	    },

	    /**
	     * 命名空间
	     */
	    scope: {
	        get: function () {
	            return this._scope;
	        },
	        set: function (scope) {
	            console.warn(`Control: It is not allowed to assign new value to scope.`);
	            this._scope = scope;
	        }
	    }
	});

	/**
	 * 添加子控件
	 * @param {*} obj 
	 */
	Control.prototype.add = function (obj) {
	    this.children.push(obj);
	};

	/**
	 * 插入子控件
	 * @param {*} index 
	 * @param {*} obj 
	 */
	Control.prototype.insert = function (index, obj) {
	    this.children.splice(index, 0, obj);
	};

	/**
	 * 移除子控件
	 * @param {*} obj 
	 */
	Control.prototype.remove = function (obj) {
	    var index = this.children.indexOf(obj);
	    if (index > -1) {
	        this.children[index].manager = null;
	        this.children.splice(index, 1);
	    }
	};

	/**
	 * 渲染控件
	 */
	Control.prototype.render = function () {
	    this.children.forEach(n => {
	        var obj = this.manager.create(n);
	        obj.parent = this.parent;
	        obj.render();
	    });
	};

	/**
	 * 创建元素
	 * @param {*} tag 标签
	 */
	Control.prototype.createElement = function (tag) {
	    return document.createElement(tag);
	};

	/**
	 * 渲染dom，将dom添加到父dom并给dom赋值，然后循环渲染子dom
	 * @param {*} dom 
	 */
	Control.prototype.renderDom = function (dom) {
	    this.dom = dom;
	    this.parent.appendChild(this.dom);

	    // 属性，通过setAttribute给节点赋值
	    if (this.attr) {
	        Object.keys(this.attr).forEach(n => {
	            this.dom.setAttribute(n, this.attr[n]);
	        });
	    }

	    // 属性，直接赋值给dom
	    if (this.prop) {
	        Object.assign(this.dom, this.prop);
	    }

	    // class属性
	    if (this.cls) {
	        this.dom.className = this.cls;
	    }

	    // 样式，赋值给dom.style
	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    // 监听器，赋值给dom
	    if (this.listeners) {
	        Object.keys(this.listeners).forEach(n => {
	            this.dom['on' + n] = this.listeners[n];
	        });
	    }

	    // 自定义数据，赋值给dom.data
	    if (this.data) {
	        this.dom.data = {};
	        Object.assign(this.dom.data, this.data);
	    }

	    // innerHTML属性
	    if (this.html) {
	        this.dom.innerHTML = this.html;
	    }

	    // 渲染子节点
	    this.children.forEach(n => {
	        var control = this.manager.create(n);
	        control.parent = this.dom;
	        control.render();
	    });
	};

	/**
	 * 清空控件（可调用render函数重新渲染）
	 */
	Control.prototype.clear = function () {
	    var _this = this;

	    (function remove(items) {
	        if (items == null || items.length === 0) {
	            return;
	        }

	        items.forEach(n => {
	            if (n.id) {
	                _this.manager.remove(n.id, n.scope);
	            }
	            if (n.listeners) {
	                Object.keys(n.listeners).forEach(m => {
	                    if (n.dom) {
	                        n.dom['on' + m] = null;
	                    }
	                });
	            }
	            remove(n.children);
	        });
	    })(this.children);

	    this.children.length = 0;

	    if (this.dom) {
	        this.parent.removeChild(this.dom);

	        if (this.listeners) {
	            this.listeners.forEach(n => {
	                this.dom['on' + n] = null;
	            });
	        }

	        this.dom = null;
	    }
	};

	/**
	 * 摧毁控件
	 */
	Control.prototype.destroy = function () {
	    this.clear();
	    if (this.parent) {
	        this.parent = null;
	    }
	    if (this.id) {
	        this.manager.remove(this._id, this._scope);
	    }
	    this.manager = null;
	};

	const svgNS = 'http://www.w3.org/2000/svg';
	const xlinkNS = "http://www.w3.org/1999/xlink";

	/**
	 * SVG控件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 选项
	 * @see https://github.com/tengge1/xtype.js
	 * @see https://github.com/tengge1/xtype-svg
	 */
	function SvgControl(options = {}) {
	    Control.call(this, options);
	}

	SvgControl.prototype = Object.create(Control.prototype);
	SvgControl.prototype.constructor = SvgControl;

	SvgControl.prototype.createElement = function (tag) {
	    return document.createElementNS(svgNS, tag);
	};

	SvgControl.prototype.renderDom = function (dom) {
	    this.dom = dom;
	    this.parent.appendChild(this.dom);

	    if (this.attr) {
	        Object.keys(this.attr).forEach(n => {
	            if (n.startsWith('xlink')) {
	                this.dom.setAttributeNS(xlinkNS, n, this.attr[n]);
	            } else {
	                this.dom.setAttribute(n, this.attr[n]);
	            }
	        });
	    }

	    if (this.prop) {
	        Object.assign(this.dom, this.prop);
	    }

	    if (this.cls) {
	        this.dom.className = this.cls;
	    }

	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    if (this.listeners) {
	        Object.keys(this.listeners).forEach(n => {
	            this.dom['on' + n] = this.listeners[n];
	        });
	    }

	    if (this.data) {
	        this.dom.data = {};
	        Object.assign(this.dom.data, this.data);
	    }

	    if (this.html) {
	        this.dom.innerHTML = this.html;
	    }

	    this.children.forEach(n => {
	        var control = this.manager.create(n);
	        control.parent = this.dom;
	        control.render();
	    });
	};

	/**
	 * Manager类
	 * @author tengge / https://github.com/tengge1
	 */
	function Manager() {
	    this.xtypes = {};
	    this.objects = {};
	}

	/**
	 * 添加xtype
	 * @param {*} name xtype字符串
	 * @param {*} cls xtype对应类
	 */
	Manager.prototype.addXType = function (name, cls) {
	    if (this.xtypes[name] === undefined) {
	        this.xtypes[name] = cls;
	    } else {
	        console.warn(`Manager: xtype named ${name} has already been added.`);
	    }
	};

	/**
	 * 删除xtype
	 * @param {*} name xtype字符串
	 */
	Manager.prototype.removeXType = function (name) {
	    if (this.xtypes[name] !== undefined) {
	        delete this.xtypes[name];
	    } else {
	        console.warn(`Manager: xtype named ${name} is not defined.`);
	    }
	};

	/**
	 * 获取xtype
	 * @param {*} name xtype字符串
	 */
	Manager.prototype.getXType = function (name) {
	    if (this.xtypes[name] === undefined) {
	        console.warn(`Manager: xtype named ${name} is not defined.`);
	    }
	    return this.xtypes[name];
	};

	/**
	 * 添加一个对象到缓存
	 * @param {*} id 对象id
	 * @param {*} obj 对象
	 * @param {*} scope 对象作用域（默认为global）
	 */
	Manager.prototype.add = function (id, obj, scope = "global") {
	    var key = `${scope}:${id}`;
	    if (this.objects[key] !== undefined) {
	        console.warn(`Manager: object named ${id} has already been added.`);
	    }

	    obj.manager = this;
	    this.objects[key] = obj;
	};

	/**
	 * 从缓存中移除一个对象
	 * @param {*} id 对象id
	 * @param {*} scope 对象作用域（默认为global）
	 */
	Manager.prototype.remove = function (id, scope = 'global') {
	    var key = `${scope}:${id}`;
	    if (this.objects[key] != undefined) {
	        this.objects[key].manager = null;
	        delete this.objects[key];
	    } else {
	        console.warn(`Manager: object named ${id} is not defined.`);
	    }
	};

	/**
	 * 从缓存中获取一个对象
	 * @param {*} id 控件id
	 * @param {*} scope 对象作用域（默认为global）
	 */
	Manager.prototype.get = function (id, scope = 'global') {
	    var key = `${scope}:${id}`;
	    return this.objects[key];
	};

	/**
	 * 通过json配置创建Control实例，并自动将包含id的控件添加到缓存
	 * @param {*} config xtype配置
	 */
	Manager.prototype.create = function (config) {
	    if (config instanceof Control) { // config是Control实例
	        var key = `${config.scope}:${config.id}`;
	        if (this.objects[key] === undefined) {
	            // 如果config是控件，则可能已使用Manager管理，增加判断，避免出现太多警告信息。
	            this.add(config.id, config, config.scope);
	        }
	        return config;
	    }

	    // config是json配置
	    if (config == null || config.xtype == null) {
	        console.warn('Manager: config is undefined.');
	    }

	    if (config.xtype === undefined) {
	        console.warn('Manager: config.xtype is undefined.');
	    }

	    var cls = this.xtypes[config.xtype];
	    if (cls == null) {
	        console.warn(`Manager: xtype named ${config.xtype} is undefined.`);
	    }

	    var control = new cls(config);

	    this.add(control.id, control, control.scope);

	    return control;
	};

	var UI$1 = new Manager();

	/**
	 * 容器（外层无div等元素包裹）
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function Container(options) {
	    Control.call(this, options);
	    options = options || {};

	    this.children = options.children || [];
	}

	Container.prototype = Object.create(Control.prototype);
	Container.prototype.constructor = Container;

	Container.prototype.add = function (obj) {
	    if (!(obj instanceof Control)) {
	        throw 'Container: obj is not an instance of Control.';
	    }
	    this.children.push(obj);
	};

	Container.prototype.remove = function (obj) {
	    var index = this.children.indexOf(obj);
	    if (index > -1) {
	        this.children.splice(index, 1);
	    }
	};

	Container.prototype.render = function () {
	    var _this = this;
	    this.children.forEach(function (n) {
	        var obj = UI$1.create(n);
	        obj.parent = _this.parent;
	        obj.render();
	    });
	};

	UI$1.addXType('container', Container);

	/**
	 * 模态框
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function Modal(options) {
	    Container.call(this, options);
	    options = options || {};

	    this.cls = options.cls || 'Modal';
	    this.style = options.style || null;
	    this.containerStyle = options.containerStyle || null;
	    this.width = options.width || '500px';
	    this.height = options.height || '300px';
	    this.shade = options.shade === false ? false : true;
	    this.shadeClose = options.shadeClose || false;
	}
	Modal.prototype = Object.create(Container.prototype);
	Modal.prototype.constructor = Modal;

	Modal.prototype.render = function () {
	    this.dom = document.createElement('div');

	    if (this.cls) {
	        this.dom.className = this.cls;
	    }

	    if (this.shade === false) {
	        this.dom.classList.add('NoShade');
	    }

	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    this.parent.appendChild(this.dom);

	    this.container = document.createElement('div');

	    this.container.className = 'Container';

	    if (this.containerStyle) {
	        Object.assign(this.container.style, this.containerStyle);
	    }

	    this.container.style.width = this.width;
	    this.container.style.height = this.height;

	    this.dom.appendChild(this.container);

	    this.container.addEventListener('mousedown', function (event) {
	        event.stopPropagation();
	    });

	    if (this.shadeClose) {
	        this.dom.addEventListener('mousedown', this.hide.bind(this));
	    }

	    var _this = this;

	    this.children.forEach(function (n) {
	        var obj = UI$1.create(n);
	        obj.parent = _this.container;
	        obj.render();
	    });
	};

	Modal.prototype.show = function () {
	    if (this.dom) {
	        this.dom.style.display = 'flex';
	    }
	    return this;
	};

	Modal.prototype.hide = function () {
	    if (this.dom) {
	        this.dom.style.display = 'none';
	    }
	    return this;
	};

	UI$1.addXType('modal', Modal);

	/**
	 * 按钮
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function Button(options) {
	    Control.call(this, options);
	    options = options || {};

	    this.text = options.text || 'Button';
	    this.cls = options.cls || 'Button';
	    this.style = options.style || null;
	    this.title = options.title || null;

	    this.onClick = options.onClick || null;
	}
	Button.prototype = Object.create(Control.prototype);
	Button.prototype.constructor = Button;

	Button.prototype.render = function () {
	    this.dom = document.createElement('button');

	    this.dom.innerHTML = this.text;

	    this.dom.className = this.cls;

	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    if (this.title) {
	        this.dom.title = this.title;
	    }

	    this.parent.appendChild(this.dom);

	    if (this.onClick) {
	        this.dom.addEventListener('click', this.onClick.bind(this), false);
	    }
	};

	Button.prototype.setText = function (text) {
	    this.text = text;
	    this.dom.innerHTML = this.text;
	};

	Button.prototype.setTitle = function (title) {
	    this.title = title;
	    this.dom.title = this.title;
	};

	Button.prototype.select = function () {
	    this.dom.classList.add('selected');
	};

	Button.prototype.unselect = function () {
	    this.dom.classList.remove('selected');
	};

	Button.prototype.show = function () {
	    this.dom.style.display = '';
	};

	Button.prototype.hide = function () {
	    this.dom.style.display = 'none';
	};

	UI$1.addXType('button', Button);

	/**
	 * 关闭按钮
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function CloseButton(options) {
	    Control.call(this, options);
	    options = options || {};

	    this.cls = options.cls || 'CloseButton';
	    this.style = options.style || null;

	    this.onClick = options.onClick || null;
	}

	CloseButton.prototype = Object.create(Control.prototype);
	CloseButton.prototype.constructor = CloseButton;

	CloseButton.prototype.render = function () {
	    this.dom = document.createElement('div');

	    this.dom.className = this.cls;

	    // TODO: 由于按钮默认白色，在白色背景上按钮将不可见！
	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    this.parent.appendChild(this.dom);

	    if (this.onClick) {
	        this.dom.addEventListener('click', this.onClick.bind(this));
	    }

	    this.icon = document.createElement('i');
	    this.icon.className = 'iconfont icon-close';

	    this.dom.appendChild(this.icon);
	};

	UI$1.addXType('closebutton', CloseButton);

	/**
	 * 窗口
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function Window(options) {
	    Modal.call(this, options);
	    options = options || {};

	    this.cls = options.cls || 'Modal Window';
	    this.style = options.style || null;
	    this.containerStyle = options.containerStyle || null;
	    this.bodyStyle = options.bodyStyle || null;
	    this.title = options.title || '';
	    this.buttons = options.buttons || [];
	}
	Window.prototype = Object.create(Modal.prototype);
	Window.prototype.constructor = Window;

	Window.prototype.render = function () {
	    this.content = this.children; // 内容
	    this.children = []; // 标题栏、内容区域、按钮工具栏

	    // 标题
	    this.caption = UI$1.create({
	        xtype: 'container',
	        children: [{
	            xtype: 'div',
	            scope: this.scope,
	            cls: 'caption',
	            html: this.title
	        }]
	    });

	    // 关闭按钮
	    this.closeBtn = UI$1.create({
	        xtype: 'closebutton',
	        scope: this.scope,
	        onClick: () => {
	            this.hide();
	        }
	    });

	    // 标题栏
	    this.header = UI$1.create({
	        xtype: 'div',
	        scope: this.scope,
	        cls: 'header',
	        children: [
	            this.caption,
	            this.closeBtn
	        ]
	    });
	    this.children.push(this.header);

	    // 内容区域
	    this.body = UI$1.create({
	        xtype: 'div',
	        scope: this.scope,
	        cls: 'body',
	        style: this.bodyStyle,
	        children: this.content
	    });
	    this.children.push(this.body);

	    // 按钮区域
	    this.footer = UI$1.create({
	        xtype: 'div',
	        scope: this.scope,
	        cls: 'footer',
	        children: this.buttons
	    });
	    this.children.push(this.footer);

	    Modal.prototype.render.call(this);

	    // 拖动标题栏
	    var isDown = false;
	    var offsetX = 0;
	    var offsetY = 0;

	    var _this = this;

	    function mouseDown(event) {
	        isDown = true;
	        var left = _this.container.style.left === '' ? 0 : parseInt(_this.container.style.left.replace('px', ''));
	        var top = _this.container.style.top === '' ? 0 : parseInt(_this.container.style.top.replace('px', ''));
	        offsetX = event.clientX - left;
	        offsetY = event.clientY - top;
	    }

	    function mouseMove(event) {
	        if (!isDown) {
	            return;
	        }
	        var dx = event.clientX - offsetX;
	        var dy = event.clientY - offsetY;

	        _this.container.style.left = dx + 'px';
	        _this.container.style.top = dy + 'px';
	    }

	    function mouseUp(event) {
	        isDown = false;
	        offsetX = 0;
	        offsetY = 0;
	    }

	    this.header.dom.addEventListener('mousedown', mouseDown);
	    document.body.addEventListener('mousemove', mouseMove);
	    document.body.addEventListener('mouseup', mouseUp);
	};

	UI$1.addXType('window', Window);

	/**
	 * 提示框
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 选项
	 */
	function Alert(options) {
	    Window.call(this, options);
	    options = options || {};

	    this.title = options.title || L_MESSAGE;
	    this.content = options.content || '';

	    this.okText = options.okText || L_OK;

	    this.width = options.width || '320px';
	    this.height = options.height || '150px';

	    this.callback = options.callback || null;
	}

	Alert.prototype = Object.create(Window.prototype);
	Alert.prototype.constructor = Alert;

	Alert.prototype.render = function () {
	    this.children = [{
	        xtype: 'html',
	        html: this.content
	    }];

	    this.buttons = [{
	        xtype: 'button',
	        text: this.okText,
	        onClick: (event) => {
	            var result = true;

	            if (this.callback) {
	                result = this.callback.call(this, event);
	            }

	            if (result !== false) {
	                this.hide();
	            }
	        }
	    }];

	    Window.prototype.render.call(this);
	};

	UI$1.addXType('alert', Alert);

	/**
	 * 布尔值
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function Boolean(options) {
	    Control.call(this, options);
	    options = options || {};

	    this.text = options.text || '';
	    this.value = options.value || false;
	    this.cls = options.cls || 'Checkbox';
	    this.style = options.style || null;

	    this.onChange = options.onChange || null;
	}
	Boolean.prototype = Object.create(Control.prototype);
	Boolean.prototype.constructor = Boolean;

	Boolean.prototype.render = function () {
	    this.dom = document.createElement('span');

	    if (this.cls) {
	        this.dom.className = this.cls;
	    }

	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    this.parent.appendChild(this.dom);

	    this.input = document.createElement('input');
	    this.input.type = 'checkbox';
	    this.dom.appendChild(this.input);

	    this.span = document.createElement('span');
	    this.span.innerHTML = this.text;
	    this.dom.appendChild(this.span);

	    this.setValue(this.value);

	    if (this.onChange) {
	        this.input.addEventListener('change', this.onChange.bind(this), false);
	    }
	};

	Boolean.prototype.getValue = function () {
	    return this.input.checked;
	};

	Boolean.prototype.setValue = function (value) {
	    this.input.checked = value;
	};

	UI$1.addXType('boolean', Boolean);

	/**
	 * 换行符
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function Break(options) {
	    Control.call(this, options);
	    options = options || {};

	    this.cls = options.cls || null;
	}
	Break.prototype = Object.create(Control.prototype);
	Break.prototype.constructor = Break;

	Break.prototype.render = function () {
	    this.dom = document.createElement('br');

	    if (this.cls) {
	        this.dom.className = this.cls;
	    }

	    this.parent.appendChild(this.dom);
	};

	UI$1.addXType('br', Break);

	/**
	 * Canvas元素
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function Canvas(options) {
	    Control.call(this, options);
	    options = options || {};

	    this.cls = options.cls || null;
	    this.style = options.style || null;
	}
	Canvas.prototype = Object.create(Control.prototype);
	Canvas.prototype.constructor = Canvas;

	Canvas.prototype.render = function () {
	    this.dom = document.createElement('canvas');

	    if (this.cls) {
	        this.dom.className = this.cls;
	    }

	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    this.parent.appendChild(this.dom);
	};

	UI$1.addXType('canvas', Canvas);

	/**
	 * 类别组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 选项
	 */
	function Category(options = {}) {
	    Control.call(this, options);

	    this.options = options.options || {}; // { [value1]: label1, [value2]: label2, ... }

	    this.cls = options.cls || 'Category';
	    this.style = options.style || null;

	    this.onChange = options.onChange || null;
	}

	Category.prototype = Object.create(Control.prototype);
	Category.prototype.constructor = Category;

	Category.prototype.render = function () {
	    if (this.dom === undefined) {
	        this.dom = document.createElement('div');
	        this.parent.appendChild(this.dom);
	    }

	    if (this.cls) {
	        this.dom.className = this.cls;
	    }

	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    Object.keys(this.options).forEach(n => {
	        var item = document.createElement('div');
	        item.className = 'item';
	        this.dom.appendChild(item);

	        var checkbox = document.createElement('input');
	        checkbox.setAttribute('type', 'checkbox');
	        checkbox.setAttribute('value', n);
	        checkbox.addEventListener('change', this._onChange.bind(this));
	        item.appendChild(checkbox);

	        var label = document.createElement('label');
	        label.innerHTML = this.options[n];
	        item.appendChild(label);
	    });
	};

	Category.prototype._onChange = function (event) {
	    var checked = this.getValue();
	    this.onChange && this.onChange(checked);
	};

	Category.prototype.getValue = function () {
	    var checked = [];

	    for (var i = 0; i < this.dom.children.length; i++) {
	        var checkbox = this.dom.children[i].children[0];
	        if (checkbox.checked) {
	            checked.push(checkbox.value);
	        }
	    }

	    return checked;
	};

	Category.prototype.clear = function () {
	    while (this.dom.children.length) {
	        var child = this.dom.children[0];
	        child.children[0].removeEventListener('change', this._onChange);
	        this.dom.removeChild(child);
	    }
	};

	UI$1.addXType('category', Category);

	/**
	 * 复选框
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function Checkbox(options) {
	    Control.call(this, options);
	    options = options || {};

	    this.value = options.value || false;
	    this.cls = options.cls || 'Checkbox';
	    this.style = options.style || null;

	    this.onChange = options.onChange || null;
	}
	Checkbox.prototype = Object.create(Control.prototype);
	Checkbox.prototype.constructor = Checkbox;

	Checkbox.prototype.render = function () {
	    this.dom = document.createElement('input');

	    this.dom.type = 'checkbox';

	    this.dom.className = this.cls;

	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    this.parent.appendChild(this.dom);

	    if (this.onChange) {
	        this.dom.addEventListener('change', this.onChange.bind(this));
	    }

	    this.setValue(this.value);
	};

	Checkbox.prototype.getValue = function () {
	    return this.dom.checked;
	};

	Checkbox.prototype.setValue = function (value) {
	    if (value !== undefined) {
	        this.dom.checked = value;
	    }

	    return this;
	};

	UI$1.addXType('checkbox', Checkbox);

	/**
	 * 颜色选择器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function Color(options) {
	    Control.call(this, options);
	    options = options || {};

	    this.value = options.value || null;
	    this.cls = options.cls || 'Color';
	    this.style = options.style || null;

	    this.onChange = options.onChange || null;
	}
	Color.prototype = Object.create(Control.prototype);
	Color.prototype.constructor = Color;

	Color.prototype.render = function () {
	    this.dom = document.createElement('input');

	    this.dom.className = this.cls;

	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    try {
	        this.dom.type = 'color';

	        if (this.value && this.value.toString().startsWith('#')) { // #ffffff
	            this.setValue(this.value);
	        } else if (this.value) { // 0xffffff
	            this.setHexValue(this.value);
	        } else {
	            this.dom.value = '#ffffff';
	        }
	    } catch (exception) {
	        console.warn(exception);
	    }

	    this.parent.appendChild(this.dom);

	    if (this.onChange) {
	        this.dom.addEventListener('change', this.onChange.bind(this));
	    }
	};

	Color.prototype.getValue = function () {
	    return this.dom.value;
	};

	Color.prototype.getHexValue = function () {
	    return parseInt(this.dom.value.substr(1), 16);
	};

	Color.prototype.setValue = function (value) {
	    this.dom.value = value;
	    return this;
	};

	Color.prototype.setHexValue = function (hex) {
	    this.dom.value = '#' + ('000000' + hex.toString(16)).slice(- 6);
	    return this;
	};

	UI$1.addXType('color', Color);

	/**
	 * 询问对话框
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 选项
	 */
	function Confirm(options) {
	    Window.call(this, options);
	    options = options || {};

	    this.title = options.title || L_CONFIRM;
	    this.content = options.content || '';

	    this.okText = options.okText || L_OK;
	    this.cancelText = options.cancelText || L_CANCEL;

	    this.width = options.width || '320px';
	    this.height = options.height || '150px';

	    this.callback = options.callback || null;
	}

	Confirm.prototype = Object.create(Window.prototype);
	Confirm.prototype.constructor = Confirm;

	Confirm.prototype.render = function () {
	    this.children = [{
	        xtype: 'html',
	        html: this.content
	    }];

	    var _this = this;

	    function onClick(event, btn) {
	        if (_this.callback) {
	            if (_this.callback.call(_this, event, btn) !== false) {
	                _this.hide();
	            }
	        }
	    }

	    this.buttons = [{
	        xtype: 'button',
	        text: this.okText,
	        onClick: (event) => {
	            onClick(event, 'ok');
	        }
	    }, {
	        xtype: 'button',
	        text: this.cancelText,
	        onClick: (event) => {
	            onClick(event, 'cancel');
	        }
	    }];

	    Window.prototype.render.call(this);
	};

	UI$1.addXType('confirm', Confirm);

	/**
	 * 数据表格
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function DataTable(options = {}) {
	    Control.call(this, options);

	    this.cols = options.cols || []; // 结构： { field: 'name', title: '姓名', width: 100 }
	    this.rows = options.rows || []; // 结构： { name: '小明', age: 18 }

	    this.url = options.url || null; // 返回数据格式：{ total: 100, rows: [{ name: '小明', age: 18 }, ...] }

	    this.cls = options.cls || 'Table';
	    this.style = options.style || null;

	    this.selected = null;
	}

	DataTable.prototype = Object.create(Control.prototype);
	DataTable.prototype.constructor = DataTable;

	DataTable.prototype.render = function () {
	    this.dom = document.createElement('div');
	    this.parent.appendChild(this.dom);

	    if (this.cls) {
	        this.dom.className = this.cls;
	    }

	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    // 计算列的总宽度
	    this.totalWidth = 0;

	    this.cols.forEach(n => {
	        this.totalWidth += n.width || 100;
	    });

	    // 表格头
	    this.head = document.createElement('table');
	    this.head.className = 'head';
	    this.dom.appendChild(this.head);

	    var tr = document.createElement('tr');

	    var th = document.createElement('th'); // 序号列
	    th.innerHTML = '#';
	    Object.assign(th.style, {
	        width: '60px',
	        textAlign: 'center'
	    });
	    tr.appendChild(th);

	    this.cols.forEach(n => { // 数据列
	        var th = document.createElement('th');
	        th.innerHTML = n.title || '&nbsp;';
	        Object.assign(th.style, {
	            width: `${this.dom.clientWidth / this.totalWidth * (n.width || 100)}px`
	        });
	        tr.appendChild(th);
	    });

	    this.head.appendChild(tr);

	    this.reload();
	};

	DataTable.prototype.reload = function () {
	    this.clear();

	    if (this.url) {
	        fetch(url).then(response => {
	            if (response.ok) {
	                response.json().then(json => {
	                    this.rows = json.rows;
	                    this._renderData();
	                });
	            }
	        });
	    } else {
	        this._renderData();
	    }
	};

	DataTable.prototype._renderData = function () {
	    // 表格体
	    this.body = document.createElement('table');
	    this.body.className = 'body';
	    this.dom.appendChild(this.body);

	    if (!this.rows) {
	        return;
	    }

	    this.rows.forEach((n, i) => {
	        var tr = document.createElement('tr');

	        var td = document.createElement('td'); // 序号列
	        td.innerHTML = `${i + 1}`;
	        Object.assign(td.style, {
	            width: '60px',
	            textAlign: 'center'
	        });
	        tr.appendChild(td);

	        this.cols.forEach(m => { // 数据列
	            var td = document.createElement('td');

	            if (n[m.field]) {
	                td.innerHTML = n[m.field];
	            }

	            Object.assign(td.style, {
	                width: `${this.dom.clientWidth / this.totalWidth * (n.width || 100)}px`
	            });

	            tr.appendChild(td);
	        });

	        tr.setAttribute('data-index', i);

	        tr.addEventListener('click', this._clickRow.bind(this));

	        this.body.appendChild(tr);
	    });
	};

	DataTable.prototype._clickRow = function (event) {
	    var tr = event.target.parentNode;
	    var index = tr.getAttribute('data-index'); // tr
	    this.selected = this.rows[index];

	    var tds = tr.parentNode.children;

	    for (var i = 0; i < tds.length; i++) {
	        Object.assign(tds[i].style, {
	            backgroundColor: '',
	            color: ''
	        });
	    }

	    Object.assign(tds[index].style, {
	        backgroundColor: '#08f',
	        color: '#fff'
	    });
	};

	DataTable.prototype.getSelected = function () {
	    return this.selected;
	};

	DataTable.prototype.clear = function () {
	    if (!this.body) {
	        return;
	    }

	    var body = this.body;

	    while (body.children.length) {
	        var tr = body.children[0];
	        tr.removeEventListener('click', this._clickRow);
	        body.removeChild(tr);
	    }

	    this.dom.removeChild(body);

	    this.body = null;
	    this.selected = null;
	};

	UI$1.addXType('datatable', DataTable);

	/**
	 * Div元素
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function Div(options) {
	    Container.call(this, options);
	    options = options || {};

	    this.html = options.html || null;
	    this.cls = options.cls || null;
	    this.style = options.style || null;

	    this.onClick = options.onClick || null;
	}
	Div.prototype = Object.create(Container.prototype);
	Div.prototype.constructor = Div;

	Div.prototype.render = function () {
	    this.dom = document.createElement('div');

	    if (this.cls) {
	        this.dom.className = this.cls;
	    }

	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    this.parent.appendChild(this.dom);

	    if (this.onClick) {
	        this.dom.onclick = this.onClick.bind(this);
	    }

	    var _this = this;

	    if (this.html) {
	        this.dom.innerHTML = this.html;
	    } else {
	        this.children.forEach(function (n) {
	            var obj = UI$1.create(n);
	            obj.parent = _this.dom;
	            obj.render();
	        });
	    }
	};

	UI$1.addXType('div', Div);

	/**
	 * 水平线
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function HorizontalRule(options) {
	    Control.call(this, options);
	    options = options || {};

	    this.cls = options.cls || 'HorizontalRule';
	}
	HorizontalRule.prototype = Object.create(Control.prototype);
	HorizontalRule.prototype.constructor = HorizontalRule;

	HorizontalRule.prototype.render = function () {
	    this.dom = document.createElement('hr');

	    this.dom.className = this.cls;

	    this.parent.appendChild(this.dom);
	};

	UI$1.addXType('hr', HorizontalRule);

	/**
	 * 原生html
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 选项
	 */
	function Html(options) {
	    Control.call(this, options);
	    options = options || {};

	    this.html = options.html || null;
	}

	Html.prototype = Object.create(Control.prototype);
	Html.prototype.constructor = Html;

	/**
	 * 渲染控件
	 */
	Html.prototype.render = function () {
	    if (this.html) {
	        this.parent.innerHTML += this.html;
	    }
	};

	UI$1.addXType('html', Html);

	/**
	 * 图标按钮
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function IconButton(options) {
	    Button.call(this, options);

	    this.cls = options.cls || 'Button IconButton';
	    this.icon = options.icon || null; // 对应assets/css/icon/iconfont.css中的css
	    this.title = options.title || null;
	}

	IconButton.prototype = Object.create(Button.prototype);
	IconButton.prototype.constructor = IconButton;

	IconButton.prototype.render = function () {
	    Button.prototype.render.call(this);
	    if (this.icon) {
	        this.dom.innerHTML = `<i class="iconfont ${this.icon}"></i>`;
	    }
	};

	IconButton.prototype.setIcon = function (iconCls) {
	    this.icon = iconCls;
	    this.dom.innerHTML = `<i class="iconfont ${this.icon}"></i>`;
	};

	UI$1.addXType('iconbutton', IconButton);

	/**
	 * 图片
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 选项
	 */
	function Image$1(options) {
	    Control.call(this, options);
	    options = options || {};

	    // 背景图片
	    this.src = options.src || null;
	    this.title = options.title || null;
	    this.alt = options.alt || null;
	    this.cls = options.cls || 'Item';
	    this.style = options.style || null;

	    // 字体图标
	    this.icon = options.icon || null;

	    // 左上角文本
	    this.cornerText = options.cornerText || null;

	    this.onClick = options.onClick || null;
	}

	Image$1.prototype = Object.create(Control.prototype);
	Image$1.prototype.constructor = Image$1;

	Image$1.prototype.render = function () {
	    this.dom = document.createElement('div');
	    this.parent.appendChild(this.dom);

	    if (this.cls) {
	        this.dom.className = this.cls;
	    }

	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    // 背景图片
	    if (this.src && this.src !== 'null') {
	        this.img = document.createElement('img');

	        this.img.src = this.src;

	        if (this.title) {
	            this.img.title = this.title;
	        }

	        if (this.alt) {
	            this.img.alt = this.alt;
	        }

	        this.dom.appendChild(this.img);
	    } else if (this.icon) { // 没图片则显示字体图标
	        this.i = document.createElement('i');
	        this.i.className = `iconfont ${this.icon}`;
	        this.dom.appendChild(this.i);
	    }

	    // 左上角文本
	    if (this.cornerText) {
	        this.corner = document.createElement('span');
	        this.corner.className = 'cornerText';
	        this.corner.innerHTML = this.cornerText;
	        this.dom.appendChild(this.corner);
	    }

	    // 事件
	    var _this = this;

	    function onClick(event, type) {
	        event.stopPropagation();
	        event.preventDefault();
	        if (_this.onClick) {
	            _this.onClick.call(_this, event, type);
	        }
	    }
	    this.dom.addEventListener('click', (event) => onClick(event, 'default'));

	    // 操作按钮
	    this.editBtn = UI$1.create({
	        xtype: 'iconbutton',
	        icon: 'icon-edit',
	        cls: 'Button IconButton EditButton',
	        title: L_EDIT,
	        onClick: (event) => onClick(event, 'edit')
	    });
	    this.editBtn.render();

	    this.dom.appendChild(this.editBtn.dom);

	    this.deleteBtn = UI$1.create({
	        xtype: 'iconbutton',
	        icon: 'icon-delete',
	        cls: 'Button IconButton DeleteButton',
	        title: L_DELETE,
	        onClick: (event) => onClick(event, 'delete')
	    });
	    this.deleteBtn.render();

	    this.dom.appendChild(this.deleteBtn.dom);
	};

	UI$1.addXType('image', Image$1);

	/**
	 * 图片列表
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 选项
	 */
	function ImageList(options = {}) {
	    Container.call(this, options);

	    this.cls = options.cls || 'ImageList';
	    this.style = options.style || {
	        width: '800px',
	        height: '500px'
	    };

	    this.onClick = options.onClick || null;
	}

	ImageList.prototype = Object.create(Container.prototype);
	ImageList.prototype.constructor = ImageList;

	ImageList.prototype.render = function () {
	    this.dom = document.createElement('div');

	    if (this.cls) {
	        this.dom.className = this.cls;
	    }

	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    this.dom.style.width = this.width;
	    this.dom.style.height = this.height;

	    this.dom.style.flex = this.flex;

	    this.parent.appendChild(this.dom);

	    function onClick(event, type) {
	        var index;
	        if (type === 'edit' || type === 'delete') {
	            index = event.target.parentNode.dataIndex;
	        } else {
	            index = event.target.dataIndex;
	        }

	        if (this.onClick) {
	            this.onClick(event, index, type, this);
	        }
	    }
	    this.children.forEach((n, i) => {
	        // 容器
	        var container = document.createElement('div');
	        container.className = 'Container';
	        this.dom.appendChild(container);

	        // 图片
	        var title = n.title;
	        n.title = null;
	        var obj = UI$1.create(n);
	        if (!(obj instanceof Image$1)) {
	            console.warn(`ImageList: obj is not an instance of Image.`);
	        }

	        obj.parent = container;
	        obj.onClick = onClick.bind(this);
	        obj.render();
	        obj.dom.dataIndex = i; // 序号
	        obj.editBtn.dom.dataIndex = i;
	        obj.deleteBtn.dom.dataIndex = i;

	        // 说明
	        var description = document.createElement('div');
	        description.className = 'title';
	        description.innerHTML = title;
	        container.appendChild(description);
	    });
	};

	UI$1.addXType('imagelist', ImageList);

	/**
	 * 文件上传器
	 * @author tengge / https://github.com/tengge1
	 */
	function Uploader() {

	}

	/**
	 * 上传文件
	 * @param {*} input_id 文件input的id
	 * @param {*} url 后台接收上传文件url
	 * @param {*} onload 上传完成回调函数
	 * @param {*} onerror 上传出错回调函数
	 * @param {*} onprogress 上传过程回调函数
	 */
	Uploader.prototype.upload = function (input_id, url, onload, onerror, onprogress) {
	    var fileObj = document.getElementById(input_id).files[0];

	    var form = new FormData();
	    form.append("file", fileObj);

	    var xhr = new XMLHttpRequest();
	    xhr.open("post", url, true);
	    xhr.onload = onload;
	    xhr.onerror = onerror;
	    xhr.upload.onprogress = onprogress;
	    xhr.send(form);
	};

	const uploader = new Uploader();

	/**
	 * 上传工具类
	 */
	const UploadUtils = {
	    upload: uploader.upload
	};

	/**
	 * 图片上传控件
	 * @param {*} options 
	 */
	function ImageUploader(options) {
	    Control.call(this, options);
	    options = options || {};

	    this.url = options.url || null;
	    this.server = options.server || '';

	    this.input = document.createElement('input');
	    this.input.id = `file_${this.id}`;
	    this.input.type = 'file';
	    this.input.style.display = 'none';
	    this.input.addEventListener('change', this.onChange.bind(this));
	    document.body.appendChild(this.input);
	}

	ImageUploader.prototype = Object.create(Control.prototype);
	ImageUploader.prototype.constructor = ImageUploader;

	ImageUploader.prototype.render = function () {
	    if (this.dom) {
	        this.dom.removeEventListener('click', this.onClick.bind(this));
	        this.parent.removeChild(this.dom);
	    }

	    if (this.url && this.url !== 'null') {
	        this.dom = document.createElement('img');
	        this.dom.className = 'Uploader';
	        this.dom.src = this.server + this.url;
	    } else {
	        this.dom = document.createElement('div');
	        this.dom.className = 'NoImage';
	        this.dom.innerHTML = L_NO_IMAGE;
	    }
	    this.parent.appendChild(this.dom);
	    this.dom.addEventListener('click', this.onClick.bind(this));
	    this.input.value = null;
	};

	ImageUploader.prototype.onClick = function () {
	    this.input.click();
	};

	ImageUploader.prototype.getValue = function () {
	    return this.url;
	};

	ImageUploader.prototype.setValue = function (url) {
	    this.url = url;
	    this.render();
	};

	ImageUploader.prototype.onChange = function () {
	    UploadUtils.upload(`file_${this.id}`, `${this.server}/api/Upload/Upload`, event => {
	        if (event.target.status === 200) {
	            var response = event.target.response;
	            var obj = JSON.parse(response);
	            if (obj.Code === 200) {
	                var url = obj.Data.url;
	                this.setValue(url);
	            }
	            UI$1.msg(obj.Msg);
	        } else {
	            UI$1.msg(L_IMAGE_UPLOAD_SUCCESS);
	        }
	    }, () => {
	        UI$1.msg(L_IMAGE_UPLOAD_FAILED);
	    });
	};

	UI$1.addXType('imageuploader', ImageUploader);

	/**
	 * 输入框
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function Input(options) {
	    Control.call(this, options);
	    options = options || {};

	    this.value = options.value || '';
	    this.cls = options.cls || 'Input';
	    this.style = options.style || null;
	    this.disabled = options.disabled || false;
	    this.placeholder = options.placeholder || null;

	    this.onChange = options.onChange || null;
	    this.onInput = options.onInput || null;
	}
	Input.prototype = Object.create(Control.prototype);
	Input.prototype.constructor = Input;

	Input.prototype.render = function () {
	    this.dom = document.createElement('input');

	    this.dom.className = this.cls;

	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    if (this.disabled) {
	        this.dom.disabled = 'disabled';
	    }

	    if (this.placeholder) {
	        this.dom.placeholder = this.placeholder;
	    }

	    this.dom.addEventListener('keydown', function (event) {
	        event.stopPropagation();
	    }, false);

	    this.parent.appendChild(this.dom);

	    if (this.onChange) {
	        this.dom.addEventListener('change', this.onChange.bind(this));
	    }

	    if (this.onInput) {
	        this.dom.addEventListener('input', this.onInput.bind(this));
	    }

	    this.setValue(this.value);
	};

	Input.prototype.getValue = function () {
	    return this.dom.value;
	};

	Input.prototype.setValue = function (value) {
	    this.dom.value = value;
	    return this;
	};

	UI$1.addXType('input', Input);

	/**
	 * 整数
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function Integer(options) {
	    Control.call(this, options);
	    options = options || {};

	    this.value = options.value || 0;
	    this.min = options.range ? options.range[0] : -Infinity;
	    this.max = options.range ? options.range[1] : Infinity;
	    this.step = options.step || 1; // TODO: step无效
	    this.cls = options.cls || 'Number';
	    this.style = options.style || null;

	    this.onChange = options.onChange || null;
	}
	Integer.prototype = Object.create(Control.prototype);
	Integer.prototype.constructor = Integer;

	Integer.prototype.render = function () {
	    this.dom = document.createElement('input');

	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    this.dom.className = this.cls;
	    this.dom.value = '0';

	    this.dom.addEventListener('keydown', function (event) {
	        event.stopPropagation();
	    }, false);

	    this.setValue(this.value);

	    var changeEvent = document.createEvent('HTMLEvents');
	    changeEvent.initEvent('change', true, true);

	    var distance = 0;
	    var onMouseDownValue = 0;

	    var pointer = [0, 0];
	    var prevPointer = [0, 0];

	    var _this = this;

	    function onMouseDown(event) {
	        event.preventDefault();

	        distance = 0;
	        onMouseDownValue = _this.value;
	        prevPointer = [event.clientX, event.clientY];

	        document.addEventListener('mousemove', onMouseMove, false);
	        document.addEventListener('mouseup', onMouseUp, false);
	    }

	    function onMouseMove(event) {
	        var currentValue = _this.value;
	        pointer = [event.clientX, event.clientY];
	        distance += (pointer[0] - prevPointer[0]) - (pointer[1] - prevPointer[1]);

	        var value = onMouseDownValue + (distance / (event.shiftKey ? 5 : 50)) * _this.step;
	        value = Math.min(_this.max, Math.max(_this.min, value)) | 0;

	        if (currentValue !== value) {
	            _this.setValue(value);
	            _this.dom.dispatchEvent(changeEvent);
	        }
	        prevPointer = [event.clientX, event.clientY];
	    }

	    function onMouseUp(event) {
	        document.removeEventListener('mousemove', onMouseMove, false);
	        document.removeEventListener('mouseup', onMouseUp, false);

	        if (Math.abs(distance) < 2) {
	            _this.dom.focus();
	            _this.dom.select();
	        }
	    }

	    function onChange(event) {
	        _this.setValue(_this.dom.value);
	        if (_this.onChange) {
	            _this.onChange.call(_this, _this.dom.value);
	        }
	    }

	    function onFocus(event) {
	        _this.dom.style.backgroundColor = '';
	        _this.dom.style.cursor = '';
	    }

	    function onBlur(event) {
	        _this.dom.style.backgroundColor = 'transparent';
	        _this.dom.style.cursor = 'col-resize';
	    }

	    onBlur();

	    this.dom.addEventListener('mousedown', onMouseDown, false);
	    this.dom.addEventListener('change', onChange, false);
	    this.dom.addEventListener('focus', onFocus, false);
	    this.dom.addEventListener('blur', onBlur, false);

	    this.parent.appendChild(this.dom);
	};

	Integer.prototype.getValue = function () {
	    return this.value;
	};

	Integer.prototype.setValue = function (value) {
	    if (value !== undefined) {
	        value = parseInt(value);

	        this.value = value;
	        this.dom.value = value;
	    }

	    return this;
	};

	Integer.prototype.setStep = function (step) {
	    this.step = parseInt(step);
	    return this;
	};

	Integer.prototype.setRange = function (min, max) {
	    this.min = min;
	    this.max = max;

	    return this;
	};

	UI$1.addXType('int', Integer);

	/**
	 * 标签控件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function Label(options) {
	    Control.call(this, options);
	    options = options || {};

	    this.text = options.text || '';
	    this.cls = options.cls || null;
	    this.style = options.style || null;
	}
	Label.prototype = Object.create(Control.prototype);
	Label.prototype.constructor = Label;

	Label.prototype.render = function () {
	    this.dom = document.createElement('label');

	    if (this.text) {
	        this.setValue(this.text);
	    }

	    if (this.cls) {
	        this.dom.className = this.cls;
	    }

	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    this.parent.appendChild(this.dom);
	};

	Label.prototype.getValue = function () {
	    return this.dom.textContent;
	};

	Label.prototype.setValue = function (value) {
	    if (value !== undefined) {
	        this.dom.textContent = value;
	    }
	    return this;
	};

	UI$1.addXType('label', Label);

	/**
	 * 链接按钮
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function LinkButton(options) {
	    Control.call(this, options);
	    options = options || {};

	    this.text = options.text || 'Button';
	    this.cls = options.cls || null;
	    this.style = options.style || null;
	    this.title = options.title || null;

	    this.onClick = options.onClick || null;
	}
	LinkButton.prototype = Object.create(Control.prototype);
	LinkButton.prototype.constructor = LinkButton;

	LinkButton.prototype.render = function () {
	    this.dom = document.createElement('a');

	    this.dom.href = 'javascript:;';

	    this.dom.innerHTML = this.text;

	    if (this.cls) {
	        this.dom.className = this.cls;
	    }

	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    if (this.title) {
	        this.dom.title = this.title;
	    }

	    this.parent.appendChild(this.dom);

	    if (this.onClick) {
	        this.dom.addEventListener('click', this.onClick.bind(this), false);
	    }
	};

	LinkButton.prototype.setText = function (text) {
	    this.text = text;
	    this.dom.innerHTML = this.text;
	};

	UI$1.addXType('linkbutton', LinkButton);

	/**
	 * 消息框
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function MessageBox(options) {
	    Container.call(this, options);
	    options = options || {};

	    this.time = options.time || 3000;
	}
	MessageBox.prototype = Object.create(Container.prototype);
	MessageBox.prototype.constructor = MessageBox;

	MessageBox.prototype.render = function () {
	    this.dom = document.createElement('div');
	    this.dom.className = 'MessageBox';
	    this.parent.appendChild(this.dom);
	};

	MessageBox.prototype.show = function (html) {
	    this.dom.innerHTML = html;
	    this.dom.display = 'block';

	    // 设置居中
	    this.dom.style.left = (this.parent.clientWidth - this.dom.clientWidth) / 2 + 'px';
	    this.dom.style.top = (this.parent.clientHeight - this.dom.clientHeight) / 2 + 'px';

	    if (this.time > 0) {
	        setTimeout(() => {
	            this.destroy();
	        }, this.time);
	    }
	};

	MessageBox.prototype.hide = function () {
	    this.dom.display = 'none';
	};

	UI$1.addXType('msg', MessageBox);

	/**
	 * 数字
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function Number$1(options) {
	    Control.call(this, options);
	    options = options || {};

	    this.value = options.value === undefined ? 0 : options.value;

	    this.min = options.range ? options.range[0] : -Infinity;
	    this.max = options.range ? options.range[1] : Infinity;

	    this.precision = options.precision === undefined ? 3 : options.precision; // 显示时保留几位小数
	    this.step = options.step === undefined ? 0.1 : options.step; // 步长
	    this.unit = options.unit === undefined ? '' : options.unit; // 单位（显示时跟在数字后面）
	    this.cls = options.cls || 'Number';
	    this.style = options.style || null;

	    this.onChange = options.onChange || null;
	}
	Number$1.prototype = Object.create(Control.prototype);
	Number$1.prototype.constructor = Number$1;

	Number$1.prototype.render = function () {
	    this.dom = document.createElement('input');

	    this.dom.className = this.cls;

	    this.dom.value = '0.00';

	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    var _this = this;

	    // 回车事件
	    this.dom.addEventListener('keydown', function (event) {
	        event.stopPropagation();

	        if (event.keyCode === 13) {
	            _this.dom.blur();
	        }
	    }, false);

	    this.setValue(this.value);

	    var changeEvent = document.createEvent('HTMLEvents');
	    changeEvent.initEvent('change', true, true);

	    var distance = 0;
	    var onMouseDownValue = 0;

	    var pointer = [0, 0];
	    var prevPointer = [0, 0];

	    function onMouseDown(event) {
	        event.preventDefault();
	        distance = 0;
	        onMouseDownValue = _this.value;
	        prevPointer = [event.clientX, event.clientY];
	        document.addEventListener('mousemove', onMouseMove, false);
	        document.addEventListener('mouseup', onMouseUp, false);
	    }

	    function onMouseMove(event) {
	        var currentValue = _this.value;
	        pointer = [event.clientX, event.clientY];
	        distance += (pointer[0] - prevPointer[0]) - (pointer[1] - prevPointer[1]);
	        var value = onMouseDownValue + (distance / (event.shiftKey ? 5 : 50)) * _this.step;
	        value = Math.min(_this.max, Math.max(_this.min, value));

	        if (currentValue !== value) {
	            _this.setValue(value);
	            _this.dom.dispatchEvent(changeEvent);
	        }

	        prevPointer = [event.clientX, event.clientY];
	    }

	    function onMouseUp(event) {
	        document.removeEventListener('mousemove', onMouseMove, false);
	        document.removeEventListener('mouseup', onMouseUp, false);

	        if (Math.abs(distance) < 2) {
	            _this.dom.focus();
	            _this.dom.select();
	        }
	    }

	    function onChange(event) {
	        _this.setValue(_this.dom.value);

	        if (_this.onChange) {
	            _this.onChange.call(_this, parseFloat(_this.dom.value));
	        }
	    }

	    function onFocus(event) {
	        _this.dom.style.backgroundColor = '';
	        _this.dom.style.cursor = '';
	    }

	    function onBlur(event) {
	        _this.dom.style.backgroundColor = 'transparent';
	        _this.dom.style.cursor = 'col-resize';
	    }

	    onBlur();

	    this.dom.addEventListener('mousedown', onMouseDown, false);
	    this.dom.addEventListener('change', onChange, false);
	    this.dom.addEventListener('focus', onFocus, false);
	    this.dom.addEventListener('blur', onBlur, false);

	    this.parent.appendChild(this.dom);
	};

	Number$1.prototype.getValue = function () {
	    return this.value;
	};

	Number$1.prototype.setValue = function (value) {
	    if (value !== Infinity && value !== - Infinity) {
	        value = parseFloat(value);
	    }

	    if (value < this.min) {
	        value = this.min;
	    }

	    if (value > this.max) {
	        value = this.max;
	    }

	    this.value = value;

	    if (value === Infinity || value === -Infinity) {
	        this.dom.value = value;
	    } else {
	        this.dom.value = value.toFixed(this.precision) + this.unit;
	    }
	};

	UI$1.addXType('number', Number$1);

	/**
	 * 提示输入框
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 选项
	 */
	function Prompt(options) {
	    Window.call(this, options);
	    options = options || {};

	    this.title = options.title || L_PLEASE_INPUT;
	    this.label = options.label || '';
	    this.value = options.value || '';

	    this.okText = options.okText || L_OK;
	    this.cancelText = options.cancelText || L_CANCEL;

	    this.width = options.width || '320px';
	    this.height = options.height || '150px';

	    this.bodyStyle = options.bodyStyle || {
	        display: 'flex',
	        flexDirection: 'row',
	        alignItems: 'center',
	        justifyContent: this.label == null || this.label.trim() == '' ? 'center' : 'space-around'
	    };

	    this.callback = options.callback || null;
	}

	Prompt.prototype = Object.create(Window.prototype);
	Prompt.prototype.constructor = Prompt;

	Prompt.prototype.render = function () {
	    this.children = [{
	        xtype: 'label',
	        text: this.label
	    }, {
	        xtype: 'input',
	        id: `${this.id}-input`,
	        value: this.value
	    }];

	    this.buttons = [{
	        xtype: 'button',
	        text: this.okText,
	        onClick: (event) => {
	            var result = true;

	            var value = UI$1.get(`${this.id}-input`).dom.value;

	            if (this.callback) {
	                result = this.callback.call(this, event, value);
	            }

	            if (result !== false) {
	                this.hide();
	            }
	        }
	    }, {
	        xtype: 'button',
	        text: this.cancelText,
	        onClick: (event) => {
	            this.hide();
	        }
	    }];

	    Window.prototype.render.call(this);
	};

	UI$1.addXType('prompt', Prompt);

	/**
	 * 行控件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function Row(options) {
	    Container.call(this, options);
	    options = options || {};

	    this.cls = options.cls || 'Row';
	    this.style = options.style || null;
	}
	Row.prototype = Object.create(Container.prototype);
	Row.prototype.constructor = Row;

	Row.prototype.render = function () {
	    this.dom = document.createElement('div');

	    this.dom.className = this.cls;

	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    this.parent.appendChild(this.dom);

	    var _this = this;

	    this.children.forEach(function (n) {
	        var obj = UI$1.create(n);
	        obj.parent = _this.dom;
	        obj.render();
	    });
	};

	UI$1.addXType('row', Row);

	/**
	 * 搜索框
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 搜索框
	 */
	function SearchField(options) {
	    Control.call(this, options);
	    options = options || {};

	    this.showSearchButton = options.showSearchButton === undefined ? true : options.showSearchButton;
	    this.showResetButton = options.showResetButton === undefined ? false : options.showResetButton;

	    this.cls = options.cls || 'SearchField';
	    this.style = options.style || {};

	    this.onSearch = options.onSearch || null;
	    this.onInput = options.onInput || null;
	}

	SearchField.prototype = Object.create(Control.prototype);
	SearchField.prototype.constructor = SearchField;

	SearchField.prototype.render = function () {
	    this.children = [{
	        xtype: 'div',
	        parent: this.parent,
	        cls: this.cls,
	        style: this.style,
	        children: [{
	            xtype: 'input',
	            id: `${this.id}-input`,
	            scope: this.scope,
	            placeholder: L_SEARCH_CONTENT,
	            onInput: this.onFieldInput.bind(this)
	        }]
	    }];

	    if (this.showSearchButton) {
	        this.children[0].children.push({
	            xtype: 'iconbutton',
	            icon: 'icon-search',
	            onClick: this.onFieldSearch.bind(this)
	        });
	    }

	    if (this.showResetButton) {
	        this.children[0].children.push({
	            xtype: 'iconbutton',
	            icon: 'icon-close',
	            onClick: (event) => {
	                this.reset();
	                this.onFieldInput();
	                this.onFieldSearch();
	            }
	        });
	    }

	    var control = UI$1.create(this.children[0]);
	    control.render();

	    this.dom = control.dom;
	};

	SearchField.prototype.getValue = function () {
	    return UI$1.get(`${this.id}-input`, this.scope).dom.value;
	};

	SearchField.prototype.setValue = function (value) {
	    UI$1.get(`${this.id}-input`, this.scope).dom.value = value;
	};

	SearchField.prototype.reset = function () {
	    this.setValue('');
	};

	SearchField.prototype.onFieldInput = function () {
	    var value = this.getValue();

	    if (this.onInput) {
	        this.onInput(value);
	    }
	};

	SearchField.prototype.onFieldSearch = function () {
	    var value = this.getValue();

	    if (this.onSearch) {
	        this.onSearch(value);
	    }
	};

	UI$1.addXType('searchfield', SearchField);

	/**
	 * 选择列表
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function Select(options) {
	    Control.call(this, options);
	    options = options || {};

	    this.options = options.options || [];
	    this.value = options.value || '';
	    this.cls = options.cls || 'Select';
	    this.style = options.style || null;
	    this.multiple = options.multiple || false;
	    this.disabled = options.disabled || false;

	    this.onChange = options.onChange || null;
	}
	Select.prototype = Object.create(Control.prototype);
	Select.prototype.constructor = Select;

	Select.prototype.render = function () {
	    this.dom = document.createElement('select');

	    this.dom.className = this.cls;

	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    if (this.multiple) {
	        this.dom.multiple = this.multiple;
	    }

	    if (this.disabled) {
	        this.dom.disabled = 'disabled';
	    }

	    if (this.options) {
	        Object.keys(this.options).forEach(n => {
	            var option = document.createElement('option');
	            option.value = n;
	            option.innerHTML = this.options[n];

	            if (this.value === n) {
	                option.selected = 'selected';
	            }

	            this.dom.appendChild(option);
	        });
	    }

	    if (this.onChange) {
	        this.dom.addEventListener('change', this.onChange.bind(this));
	    }

	    this.parent.appendChild(this.dom);
	};

	Select.prototype.setMultiple = function (boolean) {
	    this.dom.multiple = boolean;
	    return this;
	};

	Select.prototype.setOptions = function (options) {
	    var selected = this.dom.value;
	    while (this.dom.children.length > 0) {
	        this.dom.removeChild(this.dom.firstChild);
	    }

	    for (var key in options) {
	        var option = document.createElement('option');
	        option.value = key;
	        option.innerHTML = options[key];
	        this.dom.appendChild(option);
	    }

	    this.dom.value = selected;

	    return this;

	};

	Select.prototype.getValue = function () {
	    return this.dom.value;
	};

	Select.prototype.setValue = function (value) {
	    value = String(value);

	    if (this.dom.value !== value) {
	        this.dom.value = value;
	    }

	    return this;
	};

	UI$1.addXType('select', Select);

	/**
	 * 文本块
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function Span(options) {
	    Container.call(this, options);
	}
	Span.prototype = Object.create(Container.prototype);
	Span.prototype.constructor = Span;

	Span.prototype.render = function () {
	    this.dom = document.createElement('span');
	    this.parent.appendChild(this.dom);

	    var _this = this;
	    this.children.forEach(function (n) {
	        var obj = UI$1.create(n);
	        obj.parent = _this.dom;
	        obj.render();
	    });
	};

	UI$1.addXType('span', Span);

	/**
	 * 文本框
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function Text(options) {
	    Control.call(this, options);
	    options = options || {};

	    this.text = options.text || '';
	    this.cls = options.cls || 'Text';
	    this.style = options.style || null;

	    this.onClick = options.onClick || null;
	}
	Text.prototype = Object.create(Control.prototype);
	Text.prototype.constructor = Text;

	Text.prototype.render = function () {
	    this.dom = document.createElement('span');

	    this.dom.className = this.cls;

	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    this.setValue(this.text);

	    if (this.onClick) {
	        this.dom.addEventListener('click', this.onClick.bind(this));
	    }

	    this.parent.appendChild(this.dom);
	};

	Text.prototype.getValue = function () {
	    return this.dom.textContent;
	};

	Text.prototype.setValue = function (value) {
	    if (value !== undefined) {
	        this.dom.textContent = value;
	    }
	    return this;
	};

	UI$1.addXType('text', Text);

	/**
	 * 文本域
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function TextArea(options) {
	    Control.call(this, options);
	    options = options || {};

	    this.value = options.value || '';
	    this.cls = options.cls || 'TextArea';
	    this.style = options.style || null;

	    this.onChange = options.onChange || null;
	    this.onKeyUp = options.onKeyUp || null;
	}
	TextArea.prototype = Object.create(Control.prototype);
	TextArea.prototype.constructor = TextArea;

	TextArea.prototype.render = function () {
	    this.dom = document.createElement('textarea');

	    this.dom.className = this.cls;

	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    this.dom.spellcheck = false;

	    var _this = this;

	    this.dom.addEventListener('keydown', function (event) {
	        event.stopPropagation();

	        if (event.keyCode === 9) {
	            event.preventDefault();

	            var cursor = _this.dom.selectionStart;
	            _this.dom.value = _this.dom.value.substring(0, cursor) + '\t' + _this.dom.value.substring(cursor);
	            _this.dom.selectionStart = cursor + 1;
	            _this.dom.selectionEnd = _this.dom.selectionStart;
	        }

	    }, false);

	    this.parent.appendChild(this.dom);

	    if (this.onChange) {
	        this.dom.addEventListener('change', this.onChange.bind(this));
	    }

	    if (this.onKeyUp) {
	        this.dom.addEventListener('keyup', this.onKeyUp.bind(this));
	    }

	    this.setValue(this.value);
	};

	TextArea.prototype.getValue = function () {
	    return this.dom.value;
	};

	TextArea.prototype.setValue = function (value) {
	    this.dom.value = value;
	    return this;
	};

	UI$1.addXType('textarea', TextArea);

	/**
	 * 纹理
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function Texture(options) {
	    Control.call(this, options);
	    options = options || {};

	    this.mapping = options.mapping || THREE.UVMapping;

	    this.onChange = options.onChange || null;
	}

	Texture.prototype = Object.create(Control.prototype);
	Texture.prototype.constructor = Texture;

	Texture.prototype.render = function () {
	    this.dom = document.createElement('div');

	    this.dom.className = 'Texture';

	    this.form = document.createElement('form');

	    this.input = document.createElement('input');
	    this.input.type = 'file';

	    var _this = this;

	    this.input.addEventListener('change', function (event) {
	        _this.loadFile(event.target.files[0]);
	    });

	    this.form.appendChild(this.input);

	    this.canvas = document.createElement('canvas');
	    this.canvas.width = 32;
	    this.canvas.height = 16;

	    this.canvas.addEventListener('click', function (event) {
	        _this.input.click();
	    }, false);

	    this.canvas.addEventListener('drop', function (event) {
	        event.preventDefault();
	        event.stopPropagation();
	        _this.loadFile(event.dataTransfer.files[0]);
	    }, false);

	    this.dom.appendChild(this.canvas);

	    this.name = document.createElement('input');
	    this.name.disabled = true;
	    this.dom.appendChild(this.name);

	    this.parent.appendChild(this.dom);

	    this.texture = null;
	};

	Texture.prototype.getValue = function () {
	    return this.texture;
	};

	Texture.prototype.setValue = function (texture) {
	    var canvas = this.dom.children[0];
	    var name = this.dom.children[1];
	    var context = canvas.getContext('2d');

	    if (texture !== null) {
	        var image = texture.image;

	        if (image !== undefined && image.width > 0) {
	            if (texture.sourceFile) {
	                name.value = texture.sourceFile;
	            } else {
	                name.value = '';
	            }

	            var scale = canvas.width / image.width;
	            context.drawImage(image, 0, 0, image.width * scale, image.height * scale);
	        } else {
	            name.value = (texture.sourceFile == null ? '' : texture.sourceFile) + L_ERROR;
	            context.clearRect(0, 0, canvas.width, canvas.height);
	        }

	    } else {
	        name.value = '';

	        if (context !== null) {
	            // Seems like context can be null if the canvas is not visible
	            context.clearRect(0, 0, canvas.width, canvas.height);
	        }
	    }

	    this.texture = texture;
	};

	Texture.prototype.loadFile = function (file) {
	    var _this = this;

	    if (file.type.match('image.*')) {
	        var reader = new FileReader();

	        if (file.type === 'image/targa') {
	            reader.addEventListener('load', function (event) {
	                var canvas = new THREE.TGALoader().parse(event.target.result);
	                var texture = new THREE.CanvasTexture(canvas, _this.mapping);

	                texture.sourceFile = file.name;

	                _this.setValue(texture);

	                if (_this.onChange) {
	                    _this.onChange();
	                }
	            }, false);

	            reader.readAsArrayBuffer(file);
	        } else {
	            reader.addEventListener('load', function (event) {
	                var image = document.createElement('img');

	                image.addEventListener('load', function (event) {
	                    var texture = new THREE.Texture(this, _this.mapping);
	                    texture.sourceFile = file.name;
	                    texture.format = file.type === 'image/jpeg' ? THREE.RGBFormat : THREE.RGBAFormat;
	                    texture.needsUpdate = true;

	                    _this.setValue(texture);

	                    if (_this.onChange) {
	                        _this.onChange();
	                    }
	                }, false);

	                image.src = event.target.result;
	            }, false);

	            reader.readAsDataURL(file);
	        }
	    }

	    this.form.reset();
	};

	UI$1.addXType('texture', Texture);

	/**
	 * 时间轴
	 * @author mrdoob / http://mrdoob.com/
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 * @description 时间轴代码来自https://github.com/mrdoob/frame.js/blob/master/editor/js/Timeline.js
	 */
	function Timeline(options) {
	    Control.call(this, options);
	    options = options || {};

	    this.duration = options.duration || 120; // 持续时长(秒)
	    this.scale = options.scale || 30; // 尺寸，1秒=30像素

	    this.cls = options.cls || 'TimeLine';
	    this.style = options.style || null;
	}
	Timeline.prototype = Object.create(Control.prototype);
	Timeline.prototype.constructor = Timeline;

	Timeline.prototype.render = function () {
	    this.dom = document.createElement('canvas');
	    this.parent.appendChild(this.dom);

	    this.dom.width = this.dom.clientWidth;
	    this.dom.height = this.dom.clientHeight;

	    this.dom.className = this.cls;

	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }

	    this.drawTimeline();
	};

	Timeline.prototype.drawTimeline = function () {
	    var duration = this.duration; // 持续秒数
	    var scale = this.scale; // 1秒像素数
	    var width = duration * scale; // 画布宽度
	    var scale5 = scale / 5; // 0.2秒像素数
	    var margin = 0; // 时间轴前后间距

	    this.dom.style.width = (width + margin * 2) + 'px';
	    this.dom.width = this.dom.clientWidth;

	    var context = this.dom.getContext('2d');

	    // 时间轴背景
	    context.fillStyle = '#eee';
	    context.fillRect(0, 0, this.dom.width, this.dom.height);

	    // 时间轴刻度
	    context.strokeStyle = '#555';
	    context.beginPath();

	    for (var i = margin; i <= width + margin; i += scale) { // 绘制每一秒
	        for (var j = 0; j < 5; j++) { // 绘制每个小格
	            if (j === 0) { // 长刻度
	                context.moveTo(i + scale5 * j, 22);
	                context.lineTo(i + scale5 * j, 30);
	            } else { // 短刻度
	                context.moveTo(i + scale5 * j, 26);
	                context.lineTo(i + scale5 * j, 30);
	            }
	        }
	    }

	    context.stroke();

	    // 时间轴文字
	    context.font = '12px Arial';
	    context.fillStyle = '#888';

	    for (var i = 0; i <= duration; i += 2) { // 对于每两秒
	        var minute = Math.floor(i / 60);
	        var second = Math.floor(i % 60);

	        var text = (minute > 0 ? minute + ':' : '') + ('0' + second).slice(-2);

	        if (i === 0) {
	            context.textAlign = 'left';
	        } else if (i === duration) {
	            context.textAlign = 'right';
	        } else {
	            context.textAlign = 'center';
	        }

	        context.fillText(text, margin + i * scale, 16);
	    }
	};

	Timeline.prototype.updateUI = function () {
	    if (this.dom === undefined) {
	        this.render();
	        return;
	    }

	    this.dom.width = this.dom.clientWidth;
	    this.dom.height = this.dom.clientHeight;

	    this.drawTimeline();
	};

	UI$1.addXType('timeline', Timeline);

	/**
	 * 工具栏填充器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function ToolbarFiller(options) {
	    Control.call(this, options);
	}

	ToolbarFiller.prototype = Object.create(Control.prototype);
	ToolbarFiller.prototype.constructor = ToolbarFiller;

	ToolbarFiller.prototype.render = function () {
	    this.children = [{
	        xtype: 'div',
	        parent: this.parent,
	        style: {
	            flex: 1
	        }
	    }];

	    var control = UI$1.create(this.children[0]);
	    control.render();
	    this.dom = control.dom;
	};

	UI$1.addXType('toolbarfiller', ToolbarFiller);

	/**
	 * 树状控件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function Tree(options = {}) {
	    Control.call(this, options);

	    this.data = options.data || []; // [{ value: '值', text: '文本', expand: 'true/false, 默认关闭', draggable: 'true/false, 默认不可拖动', 其他属性 }, ...]
	    this.cls = options.cls || 'Tree';

	    this.onClick = options.onClick || null;
	    this.onDblClick = options.onDblClick || null;
	    this.onDrag = options.onDrag || null;

	    this._selected = null;
	    this._nodes = {}; // value: li
	    this._expands = {}; // value: true/false, 记录每个节点展开关闭状态
	}
	Tree.prototype = Object.create(Control.prototype);
	Tree.prototype.constructor = Tree;

	Tree.prototype.render = function () {
	    if (this.dom === undefined) {
	        this.dom = document.createElement('ul');
	        this.parent.appendChild(this.dom);

	        Object.assign(this.dom, {
	            className: this.cls
	        });
	    }

	    this._clearNode(this.dom);

	    this.data.forEach(n => {
	        this._createNode(n, this.dom);
	    });
	};

	Tree.prototype._createNode = function (data, dom) {
	    var li = document.createElement('li');
	    dom.appendChild(li);

	    if (data.value === undefined) {
	        console.warn(`Tree: data.value is not defined. Something unwanted may happen.`);
	    }

	    var value = data.value || '';
	    var text = data.text || '';
	    var leaf = !Array.isArray(data.children) || data.children.length === 0;
	    var expand = data.expand || this._expands[value] === true;
	    var draggable = data.draggable || false;
	    var cls = data.cls || '';

	    data.leaf = leaf;
	    data.expand = expand;

	    Object.assign(li, {
	        className: 'Node ' + cls,
	        data: data
	    });

	    li.setAttribute('title', text);

	    if (draggable) {
	        li.setAttribute('draggable', draggable);
	    }

	    // 刷新前已经选中的节点仍然选中
	    if (this._selected && value === this._selected.value) {
	        li.classList.add('selected');
	    }

	    li.addEventListener('click', this._onClick.bind(this));
	    li.addEventListener('dblclick', this._onDblClick.bind(this));
	    li.addEventListener('drag', this._onDrag.bind(this), false);
	    li.addEventListener('dragstart', this._onDragStart.bind(this), false);
	    li.addEventListener('dragover', this._onDragOver.bind(this), false);
	    li.addEventListener('dragleave', this._onDragLeave.bind(this), false);
	    li.addEventListener('drop', this._onDrop.bind(this), false);

	    this._nodes[value] = li;

	    var icon = document.createElement('i');

	    if (!leaf && expand) { // 非叶子节点展开
	        icon.className = 'iconfont icon-down-triangle';
	    } else if (!leaf && !expand) { // 非叶子节点关闭
	        icon.className = 'iconfont icon-right-triangle';
	    } else { // 叶子节点
	        icon.className = 'iconfont icon-rect';
	        icon.style.visibility = 'hidden';
	    }

	    icon.addEventListener('click', this._toggleNode.bind(this));

	    li.appendChild(icon);

	    // 链接
	    var a = document.createElement('a');
	    a.setAttribute('href', 'javascript:;');

	    a.innerHTML = text;

	    li.appendChild(a);

	    if (!leaf) {
	        var ul = document.createElement('ul');
	        ul.className = 'SubTree';
	        ul.style.display = expand ? '' : 'none';
	        li.appendChild(ul);

	        data.children.forEach(n => {
	            this._createNode(n, ul);
	        });
	    }
	};

	Tree.prototype._clearNode = function (dom) {
	    if (dom.classList.contains('Tree')) { // 树
	        while (dom.children.length) {
	            this._clearNode(dom.children[0]);
	            dom.removeChild(dom.children[0]);
	        }
	    } else if (dom.classList.contains('SubTree')) { // 子树
	        while (dom.children.length) {
	            this._clearNode(dom.children[0]);
	            dom.removeChild(dom.children[0]);
	        }
	    } else if (dom.classList.contains('Node')) { // 节点
	        delete this._nodes[dom.data.value];
	        dom.removeEventListener('click', this._onClick);
	        dom.removeEventListener('dblclick', this._onDblClick);
	        dom.removeEventListener('drag', this._onDrag);
	        dom.removeEventListener('dragstart', this._onDragStart);
	        dom.removeEventListener('dragover', this._onDragOver);
	        dom.removeEventListener('dragleave', this._onDragLeave);
	        dom.removeEventListener('drop', this._onDrop);
	        var icon = dom.children[0];
	        icon.removeEventListener('click', this._toggleNode);
	    } else {
	        console.warn(`Tree: Unknown node type.`);
	    }
	};

	Tree.prototype.getValue = function () {
	    return this.data;
	};

	Tree.prototype.setValue = function (value) {
	    this.data = value;
	    this.render();
	};

	/**
	 * 根据value获取节点数据
	 * @param {*} value 
	 */
	Tree.prototype.getNode = function (value) {
	    var li = this._nodes[value];
	    if (!li) {
	        return null;
	    }

	    return li;
	};

	/**
	 * 展开节点
	 * @param {*} value 
	 */
	Tree.prototype.expand = function (value) {
	    var li = this.getNode(value);
	    if (!li) {
	        return;
	    }

	    var data = li.data;
	    if (data.leaf || data.expand) {
	        return;
	    }

	    data.expand = true;
	    this._expands[data.value] = true;

	    for (var i = 0; i < li.children.length; i++) {
	        var node = li.children[i];
	        if (node.classList.contains('iconfont')) {
	            node.classList.remove('icon-right-triangle');
	            node.classList.add('icon-down-triangle');
	        }
	        if (node.classList.contains('SubTree')) {
	            node.style.display = '';
	        }
	    }
	};

	/**
	 * 折叠节点
	 * @param {*} value 
	 */
	Tree.prototype.collapse = function (value) {
	    var li = this.getNode(value);
	    if (!li) {
	        return;
	    }

	    var data = li.data;
	    if (data.leaf || !data.expand) {
	        return;
	    }

	    data.expand = false;
	    this._expands[data.value] = false;

	    for (var i = 0; i < li.children.length; i++) {
	        var node = li.children[i];
	        if (node.classList.contains('iconfont')) {
	            node.classList.remove('icon-down-triangle');
	            node.classList.add('icon-right-triangle');
	        }
	        if (node.classList.contains('SubTree')) {
	            node.style.display = 'none';
	        }
	    }
	};

	Tree.prototype.getSelected = function () {
	    return this._selected;
	};

	/**
	 * 根据过滤器查找节点
	 * @param {*} filter 
	 */
	Tree.prototype.find = function (filter) {
	    return Object.values(this._nodes).map(n => n.data).filter(filter);
	};

	/**
	 * 根据value选中节点
	 * @param {*} value 
	 */
	Tree.prototype.select = function (value) {
	    var li = this.getNode(value);
	    if (!li) {
	        return;
	    }

	    // 移除选中
	    if (this._selected) {
	        this.unselect(this._selected.value);
	    }

	    this._selected = li.data;
	    li.classList.add('selected');

	    this._expandSelected(li);
	    this._scrollSelected(li);
	};

	/**
	 * 展开选中的节点的所有父节点
	 * @param {*} dom 
	 * @param {*} isParent 
	 */
	Tree.prototype._expandSelected = function (dom, isParent = false) {
	    if (dom.classList.contains('Tree')) { // 根节点，默认展开
	        return;
	    } else if (dom.classList.contains('SubTree')) { // 子树，展开父节点
	        this._expandSelected(dom.parentNode, true);
	    } else if (dom.classList.contains('Node')) { // 节点，展开
	        if (isParent) {
	            this.expand(dom.data.value);
	        }
	        this._expandSelected(dom.parentNode, true);
	    } else {
	        console.warn(`Tree: Unknown node.`);
	    }
	};

	/**
	 * 滚动到选中的节点
	 * @param {*} dom 
	 */
	Tree.prototype._scrollSelected = function (dom) {
	    var container = this.dom.parentNode;
	    var y = dom.offsetTop - container.offsetTop;
	    var bottomY = y + 24; // dom.offsetHeight
	    var minScroll = bottomY - container.offsetHeight;

	    if (container.scrollTop > y) { // 选中节点在当前位置上面
	        container.scrollTop = y - 8;
	    } else if (container.scrollTop < minScroll) { // 选中节点在当前位置下面
	        container.scrollTop = minScroll + 8;
	    }
	};

	/**
	 * 取消选中节点
	 * @param {*} value 
	 */
	Tree.prototype.unselect = function (value) {
	    var li = this.getNode(value);
	    if (!li) {
	        return;
	    }

	    this._selected = null;
	    li.classList.remove('selected');
	};

	Tree.prototype._onClick = function (event) {
	    var data = event.currentTarget.data;
	    event.stopPropagation();

	    this.select(data.value);

	    if (typeof (this.onClick) === 'function') {
	        this.onClick(data, event);
	    }
	};

	Tree.prototype._onDblClick = function (event) {
	    var data = event.currentTarget.data;
	    event.stopPropagation();

	    if (typeof (this.onDblClick) === 'function') {
	        this.onDblClick(data, event);
	    }
	};

	Tree.prototype._toggleNode = function (event) {
	    var li = event.currentTarget.parentNode;
	    var data = li.data;

	    event.stopPropagation();

	    if (data.leaf) {
	        return;
	    } else if (data.expand) {
	        this.collapse(data.value);
	    } else {
	        this.expand(data.value);
	    }
	};

	// --------------------- 拖拽事件 ---------------------------

	Tree.prototype._onDrag = function (event) {
	    event.stopPropagation();
	    this.currentDrag = event.currentTarget;
	};

	Tree.prototype._onDragStart = function (event) {
	    event.stopPropagation();
	    event.dataTransfer.setData('text', 'foo');
	};

	Tree.prototype._onDragOver = function (event) {
	    event.preventDefault();
	    event.stopPropagation();

	    var target = event.currentTarget;

	    if (target === this.currentDrag) {
	        return;
	    }

	    var area = event.offsetY / target.clientHeight;

	    if (area < 0.25) {
	        target.classList.add('dragTop');
	    } else if (area > 0.75) {
	        target.classList.add('dragBottom');
	    } else {
	        target.classList.add('drag');
	    }
	};

	Tree.prototype._onDragLeave = function (event) {
	    event.preventDefault();
	    event.stopPropagation();

	    var target = event.currentTarget;

	    if (target === this.currentDrag) {
	        return;
	    }

	    target.classList.remove('dragTop');
	    target.classList.remove('dragBottom');
	    target.classList.remove('drag');
	};

	Tree.prototype._onDrop = function (event) {
	    event.preventDefault();
	    event.stopPropagation();

	    var target = event.currentTarget;

	    if (target === this.currentDrag) {
	        return;
	    }

	    target.classList.remove('dragTop');
	    target.classList.remove('dragBottom');
	    target.classList.remove('drag');

	    if (typeof (this.onDrag) === 'function') {
	        var area = event.offsetY / target.clientHeight;

	        if (area < 0.25) { // 放在当前元素前面
	            this.onDrag(
	                this.currentDrag.data, // 拖动要素
	                target.parentNode.parentNode.data, // 新位置父级
	                target.data, // 新位置索引
	            ); // 拖动, 父级, 索引
	        } else if (area > 0.75) { // 放在当前元素后面
	            this.onDrag(
	                this.currentDrag.data,
	                target.parentNode.parentNode.data,
	                target.nextSibling == null ? null : target.nextSibling.data, // target.nextSibling为null，说明是最后一个位置
	            );
	        } else { // 成为该元素子级
	            this.onDrag(
	                this.currentDrag.data,
	                target.data,
	                null,
	            );
	        }
	    }
	};

	UI$1.addXType('tree', Tree);

	/**
	 * 图标
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function Icon(options) {
	    Control.call(this, options);

	    this.icon = options.icon || null; // 对应assets/css/icon/iconfont.css中的css
	    this.style = options.style || null;
	}

	Icon.prototype = Object.create(Control.prototype);
	Icon.prototype.constructor = Icon;

	Icon.prototype.render = function () {
	    this.dom = document.createElement('i');
	    this.parent.appendChild(this.dom);

	    if (this.icon) {
	        this.dom.className = `iconfont ${this.icon}`;
	    }

	    if (this.style) {
	        Object.assign(this.dom.style, this.style);
	    }
	};

	UI$1.addXType('icon', Icon);

	// 添加一些实用功能
	Object.assign(UI$1, {
	    Control: Control,
	    SvgControl: SvgControl,

	    msg: function (text) { // 简洁消息提示框，5秒自动消息并销毁dom
	        var msg = UI$1.create({ xtype: 'msg' });
	        msg.render();
	        msg.show(text);
	    },

	    alert: function (title, content, callback) { // 消息框，点击确认/关闭窗口后自动销毁dom
	        var alert = UI$1.create({
	            xtype: 'alert',
	            title: title,
	            content: content,
	            callback: function (event) {
	                var result = true;

	                if (callback) {
	                    result = callback(event);
	                }

	                if (result !== false) {
	                    this.destroy(); // 销毁dom
	                }

	                return result; // 返回true关闭窗口，返回false不关闭窗口
	            }
	        });
	        alert.render();
	        alert.show();
	    },

	    confirm: function (title, content, callback) { // 询问对话框，点击确认/取消/关闭后自动销毁dom
	        var confirm = UI$1.create({
	            xtype: 'confirm',
	            title: title,
	            content: content,
	            callback: function (event, btn) {
	                var result = true;

	                if (callback) {
	                    result = callback(event, btn);
	                }

	                if (result !== false) {
	                    this.destroy(); // 销毁dom
	                }

	                return result; // 返回true关闭窗口，返回false不关闭窗口
	            }
	        });
	        confirm.render();
	        confirm.show();
	    },

	    prompt: function (title, label, value, callback) {
	        var prompt = UI$1.create({
	            xtype: 'prompt',
	            title: title,
	            label: label,
	            value: value,
	            callback: function (event, value) {
	                var result = true;

	                if (callback) {
	                    result = callback(event, value);
	                }

	                if (result !== false) {
	                    this.destroy(); // 销毁dom
	                }

	                return result; // 返回true关闭窗口，返回false不关闭窗口
	            }
	        });
	        prompt.render();
	        prompt.show();
	    }
	});

	window.UI = UI$1;

	/**
	 * 场景序列化信息
	 * @author tengge / https://github.com/tengge1
	 */
	var Metadata = {
	    generator: 'ShadowEditor',
	    type: 'Object',
	    version: '0.0.1'
	};

	var ID$1 = -1;

	/**
	 * 序列化器基类
	 * @author tengge / https://github.com/tengge1
	 */
	function BaseSerializer() {
	    this.id = 'BaseSerializer' + ID$1--;
	    this.metadata = Object.assign({}, Metadata, {
	        generator: this.constructor.name
	    });
	}

	/**
	 *对象转json
	 * @param {*} obj 对象
	 */
	BaseSerializer.prototype.toJSON = function (obj) {
	    var json = {
	        metadata: this.metadata
	    };
	    return json;
	};

	/**
	 * json转对象
	 * @param {*} json json对象
	 * @param {*} parent 父对象
	 */
	BaseSerializer.prototype.fromJSON = function (json, parent) {
	    if (parent) {
	        return parent;
	    }

	    return {};
	};

	/**
	 * Object3DSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function Object3DSerializer() {
	    BaseSerializer.call(this);
	}

	Object3DSerializer.prototype = Object.create(BaseSerializer.prototype);
	Object3DSerializer.prototype.constructor = Object3DSerializer;

	Object3DSerializer.prototype.toJSON = function (obj) {
	    var json = BaseSerializer.prototype.toJSON.call(this, obj);

	    json.castShadow = obj.castShadow;
	    json.children = obj.children.map(child => {
	        return child.uuid;
	    });
	    json.frustumCulled = obj.frustumCulled;
	    json.layers = obj.layers;
	    json.matrix = obj.matrix;
	    json.matrixAutoUpdate = obj.matrixAutoUpdate;
	    json.matrixWorld = obj.matrixWorld;
	    json.matrixWorldNeedsUpdate = obj.matrixWorldNeedsUpdate;
	    json.modelViewMatrix = obj.modelViewMatrix;
	    json.name = obj.name;
	    json.normalMatrix = obj.normalMatrix;
	    json.parent = obj.parent == null ? null : obj.parent.uuid;
	    json.position = obj.position;
	    json.quaternion = {
	        x: obj.quaternion.x,
	        y: obj.quaternion.y,
	        z: obj.quaternion.z,
	        w: obj.quaternion.w
	    };
	    json.receiveShadow = obj.receiveShadow;
	    json.renderOrder = obj.renderOrder;
	    json.rotation = {
	        x: obj.rotation.x,
	        y: obj.rotation.y,
	        z: obj.rotation.z,
	        order: obj.rotation.order
	    };
	    json.scale = obj.scale;
	    json.type = obj.type;
	    json.up = obj.up;

	    json.userData = {};

	    Object.assign(json.userData, obj.userData);

	    // 重要bug：由于obj.userData.obj缓存下载模型
	    // 如果不把json.userData上的obj删除，则会导致播放器中的obj和场景中的obj是同一个。
	    delete json.userData.obj;
	    delete json.userData.root;
	    delete json.userData.helper;

	    json.uuid = obj.uuid;
	    json.visible = obj.visible;
	    json.isObject3D = obj.isObject3D;

	    return json;
	};

	Object3DSerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? THREE.Object3D : parent;

	    BaseSerializer.prototype.fromJSON.call(this, json, obj);

	    obj.castShadow = json.castShadow;
	    obj.frustumCulled = json.frustumCulled;
	    obj.type = json.type;
	    obj.uuid = json.uuid;

	    obj.matrix.copy(json.matrix);
	    obj.matrixAutoUpdate = json.matrixAutoUpdate;
	    obj.name = json.name;
	    obj.position.copy(json.position);
	    obj.quaternion.copy(json.quaternion);
	    obj.receiveShadow = json.receiveShadow;
	    obj.renderOrder = json.renderOrder;
	    obj.rotation.set(json.rotation.x, json.rotation.y, json.rotation.z, json.rotation.order);
	    obj.scale.copy(json.scale);
	    obj.up.copy(json.up);
	    obj.visible = json.visible;

	    for (var i in json.userData) {
	        if (json.userData[i]) {
	            obj.userData[i] = json.userData[i];
	        }
	    }

	    return obj;
	};

	/**
	 * 产生一个单像素画布
	 * @param {*} color 默认颜色
	 */
	function onePixelCanvas(color = '#000000') {
	    var canvas = document.createElement('canvas');
	    canvas.width = 1;
	    canvas.height = 1;
	    var ctx = canvas.getContext('2d');
	    ctx.fillStyle = color;
	    ctx.fillRect(0, 0, 1, 1);
	    return canvas;
	}

	/**
	 * 图片工具类
	 */
	const ImageUtils = {
	    onePixelCanvas: onePixelCanvas
	};

	/**
	 * TextureSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function TextureSerializer() {
	    BaseSerializer.call(this);
	}

	TextureSerializer.prototype = Object.create(BaseSerializer.prototype);
	TextureSerializer.prototype.constructor = TextureSerializer;

	TextureSerializer.prototype.toJSON = function (obj) {
	    var json = BaseSerializer.prototype.toJSON.call(this, obj);

	    json.anisotropy = obj.anisotropy;
	    json.center = obj.center;
	    json.encoding = obj.encoding;
	    json.flipY = obj.flipY;
	    json.format = obj.format;
	    json.generateMipmaps = obj.generateMipmaps;

	    // 说明：立体贴图obj.image是一个图片数组。
	    if (obj.image && !Array.isArray(obj.image) && obj.image.tagName.toLowerCase() === 'img') { // 图片
	        var src = obj.image.src;
	        if (!src.startsWith('blob')) { // blob地址不应该被修改
	            var url = new URL(obj.image.src); // 修复贴图路径自带服务端路径bug
	            src = url.pathname;
	        }

	        json.image = {
	            tagName: 'img',
	            src: src,
	            width: obj.image.width,
	            height: obj.image.height
	        };
	    } else if (obj.image && !Array.isArray(obj.image) && obj.image.tagName.toLowerCase() === 'canvas') { // 画布
	        json.image = {
	            tagName: 'canvas',
	            src: obj.image.toDataURL(),
	            width: obj.image.width,
	            height: obj.image.height
	        };
	    } else {
	        json.image = null;
	    }

	    json.magFilter = obj.magFilter;
	    json.mapping = obj.mapping;
	    json.matrix = obj.matrix;
	    json.matrixAutoUpdate = obj.matrixAutoUpdate;
	    json.minFilter = obj.minFilter;
	    json.mipmaps = obj.mipmaps;
	    json.name = obj.name;
	    json.offset = obj.offset;
	    json.premultiplyAlpha = obj.premultiplyAlpha;
	    json.repeat = obj.repeat;
	    json.rotation = obj.rotation;
	    json.type = obj.type;
	    json.unpackAlignment = obj.unpackAlignment;
	    json.uuid = obj.uuid;
	    json.version = obj.version;
	    json.wrapS = obj.wrapS;
	    json.wrapT = obj.wrapT;
	    json.isTexture = obj.isTexture;
	    json.needsUpdate = obj.needsUpdate;

	    return json;
	};

	TextureSerializer.prototype.fromJSON = function (json, parent, server) {
	    // 用一个像素的图片初始化Texture，避免图片载入前的警告信息。
	    var img = ImageUtils.onePixelCanvas();
	    var obj = parent === undefined ? new THREE.Texture(img) : parent;

	    obj.anisotropy = json.anisotropy;
	    obj.center.copy(json.center);
	    obj.encoding = json.encoding;
	    obj.flipY = json.flipY;
	    obj.format = json.format;
	    obj.generateMipmaps = json.generateMipmaps;

	    if (json.image && !Array.isArray(json.image) && json.image.tagName === 'img') { // 图片
	        var img = document.createElement('img');

	        if(json.image.src && json.image.src.startsWith('/')) {
	            img.src = server + json.image.src;
	        } else {
	            img.src = json.image.src;
	        }
	        
	        img.width = json.image.width;
	        img.height = json.image.height;
	        img.onload = function () {
	            obj.image = img;
	            obj.needsUpdate = true;
	        };
	    } else if (json.image && !Array.isArray(obj.image) && json.image.tagName === 'canvas') { // 画布
	        var canvas = document.createElement('canvas');
	        canvas.width = 256;
	        canvas.height = 256;
	        var ctx = canvas.getContext('2d');

	        var img = document.createElement('img');
	        
	        if(json.image.src && json.image.src.startsWith('/')) {
	            img.src = server + json.image.src;
	        } else {
	            img.src = json.image.src;
	        }

	        img.onload = function () {
	            canvas.width = img.width;
	            canvas.height = img.height;
	            ctx.drawImage(img, 0, 0);

	            obj.needsUpdate = true;
	        };

	        obj.image = canvas;
	    }

	    obj.magFilter = json.magFilter;
	    obj.mapping = json.mapping;
	    obj.matrix.copy(json.matrix);
	    obj.matrixAutoUpdate = json.matrixAutoUpdate;
	    obj.minFilter = json.minFilter;
	    obj.mipmaps = json.mipmaps;
	    obj.name = json.name;
	    obj.offset.copy(json.offset);
	    obj.premultiplyAlpha = json.premultiplyAlpha;
	    obj.repeat.copy(json.repeat);
	    obj.rotation = json.rotation;
	    obj.type = json.type;
	    obj.unpackAlignment = json.unpackAlignment;
	    obj.uuid = json.uuid;
	    obj.version = json.version;
	    obj.wrapS = json.wrapS;
	    obj.wrapT = json.wrapT;
	    obj.isTexture = json.isTexture;
	    obj.needsUpdate = true;

	    return obj;
	};

	/**
	 * CanvasTextureSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function CanvasTextureSerializer() {
	    BaseSerializer.call(this);
	}

	CanvasTextureSerializer.prototype = Object.create(BaseSerializer.prototype);
	CanvasTextureSerializer.prototype.constructor = CanvasTextureSerializer;

	CanvasTextureSerializer.prototype.toJSON = function (obj) {
	    return TextureSerializer.prototype.toJSON.call(this, obj);
	};

	CanvasTextureSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.CanvasTexture() : parent;

	    TextureSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	/**
	 * CompressedTextureSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function CompressedTextureSerializer() {
	    BaseSerializer.call(this);
	}

	CompressedTextureSerializer.prototype = Object.create(BaseSerializer.prototype);
	CompressedTextureSerializer.prototype.constructor = CompressedTextureSerializer;

	CompressedTextureSerializer.prototype.toJSON = function (obj) {
	    return TextureSerializer.prototype.toJSON.call(this, obj);
	};

	CompressedTextureSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.CompressedTexture() : parent;

	    TextureSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	/**
	 * CubeTextureSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function CubeTextureSerializer() {
	    BaseSerializer.call(this);
	}

	CubeTextureSerializer.prototype = Object.create(BaseSerializer.prototype);
	CubeTextureSerializer.prototype.constructor = CubeTextureSerializer;

	CubeTextureSerializer.prototype.toJSON = function (obj) {
	    var json = TextureSerializer.prototype.toJSON.call(this, obj);

	    json.image = [];

	    obj.image.forEach(n => {
	        var url = new URL(n.src); // 修复贴图路径自带服务端路径bug
	        json.image.push({
	            tagName: 'img',
	            src: url.pathname,
	            width: n.width,
	            height: n.height
	        });
	    });

	    return json;
	};

	CubeTextureSerializer.prototype.fromJSON = function (json, parent, server) {
	    // 用一个像素的图片初始化CubeTexture，避免图片载入前的警告信息。
	    var img = ImageUtils.onePixelCanvas();
	    var obj = parent === undefined ? new THREE.CubeTexture([img, img, img, img, img, img]) : parent;

	    TextureSerializer.prototype.fromJSON.call(this, json, obj, server);

	    if (Array.isArray(json.image)) {
	        var promises = json.image.map(n => {
	            return new Promise(resolve => {
	                var img = document.createElement('img');

	                if (n.src && n.src.startsWith('/')) {
	                    img.src = server + n.src;
	                } else {
	                    img.src = n.src;
	                }

	                img.width = n.width;
	                img.height = n.height;
	                img.onload = () => {
	                    resolve(img);
	                };
	            });
	        });
	        Promise.all(promises).then(imgs => {
	            obj.image = imgs;
	            obj.needsUpdate = true;
	        });
	    }

	    return obj;
	};

	/**
	 * DataTextureSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function DataTextureSerializer() {
	    BaseSerializer.call(this);
	}

	DataTextureSerializer.prototype = Object.create(BaseSerializer.prototype);
	DataTextureSerializer.prototype.constructor = DataTextureSerializer;

	DataTextureSerializer.prototype.toJSON = function (obj) {
	    return TextureSerializer.prototype.toJSON.call(this, obj);
	};

	DataTextureSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.DataTexture() : parent;

	    TextureSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	/**
	 * DepthTextureSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function DepthTextureSerializer() {
	    BaseSerializer.call(this);
	}

	DepthTextureSerializer.prototype = Object.create(BaseSerializer.prototype);
	DepthTextureSerializer.prototype.constructor = DepthTextureSerializer;

	DepthTextureSerializer.prototype.toJSON = function (obj) {
	    return TextureSerializer.prototype.toJSON.call(this, obj);
	};

	DepthTextureSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.DataTexture() : parent;

	    TextureSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	/**
	 * VideoTextureSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function VideoTextureSerializer() {
	    BaseSerializer.call(this);
	}

	VideoTextureSerializer.prototype = Object.create(BaseSerializer.prototype);
	VideoTextureSerializer.prototype.constructor = VideoTextureSerializer;

	VideoTextureSerializer.prototype.toJSON = function (obj) {
	    return TextureSerializer.prototype.toJSON.call(this, obj);
	};

	VideoTextureSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.VideoTexture() : parent;

	    TextureSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	var Serializers = {
	    'CanvasTexture': CanvasTextureSerializer,
	    'CompressedTexture': CompressedTextureSerializer,
	    'CubeTexture': CubeTextureSerializer,
	    'DataTexture': DataTextureSerializer,
	    'DepthTexture': DepthTextureSerializer,
	    'VideoTexture': VideoTextureSerializer,
	    'Texture': TextureSerializer
	};

	/**
	 * TexturesSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function TexturesSerializer() {
	    BaseSerializer.call(this);
	}

	TexturesSerializer.prototype = Object.create(BaseSerializer.prototype);
	TexturesSerializer.prototype.constructor = TexturesSerializer;

	TexturesSerializer.prototype.toJSON = function (obj) {
	    var serializer = Serializers[obj.constructor.name];

	    if (serializer === undefined) {
	        console.warn(`TexturesSerializer: No serializer with ${obj.type}.`);
	        return null;
	    }

	    return (new serializer()).toJSON(obj);
	};

	TexturesSerializer.prototype.fromJSON = function (json, parent, server) {
	    var generator = json.metadata.generator;

	    var serializer = Serializers[generator.replace('Serializer', '')];

	    if (serializer === undefined) {
	        console.warn(`TexturesSerializer: No deserializer with ${generator}.`);
	        return null;
	    }

	    return (new serializer()).fromJSON(json, parent, server);
	};

	/**
	 * MaterialSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function MaterialSerializer() {
	    BaseSerializer.call(this);
	}

	MaterialSerializer.prototype = Object.create(BaseSerializer.prototype);
	MaterialSerializer.prototype.constructor = MaterialSerializer;

	MaterialSerializer.prototype.toJSON = function (obj) {
	    var json = BaseSerializer.prototype.toJSON.call(this, obj);

	    json.alphaMap = obj.alphaMap == null ? null : (new TexturesSerializer()).toJSON(obj.alphaMap);
	    json.alphaTest = obj.alphaTest;
	    json.aoMap = obj.aoMap == null ? null : (new TexturesSerializer()).toJSON(obj.aoMap);
	    json.aoMapIntensity = obj.aoMapIntensity;
	    json.blendDst = obj.blendDst;
	    json.blendDstAlpha = obj.blendDstAlpha;
	    json.blendEquation = obj.blendEquation;
	    json.blendEquationAlpha = obj.blendEquationAlpha;
	    json.blendSrc = obj.blendSrc;
	    json.blendSrcAlpha = obj.blendSrcAlpha;
	    json.blending = obj.blending;
	    json.bumpMap = obj.bumpMap == null ? null : (new TexturesSerializer()).toJSON(obj.bumpMap);
	    json.bumpScale = obj.bumpScale;
	    json.clipIntersection = obj.clipIntersection;
	    json.clipShadow = obj.clipShadow;
	    json.clippingPlanes = obj.clippingPlanes;
	    json.color = obj.color;
	    json.colorWrite = obj.colorWrite;
	    json.depthFunc = obj.depthFunc;
	    json.depthTest = obj.depthTest;
	    json.depthWrite = obj.depthWrite;
	    json.displacementBias = obj.displacementBias;
	    json.displacementMap = obj.displacementMap == null ? null : (new TexturesSerializer()).toJSON(obj.displacementMap);
	    json.displacementScale = obj.displacementScale;
	    json.dithering = obj.dithering;
	    json.emissive = obj.emissive;
	    json.emissiveIntensity = obj.emissiveIntensity;
	    json.emissiveMap = obj.emissiveMap == null ? null : (new TexturesSerializer()).toJSON(obj.emissiveMap);
	    json.envMap = obj.envMap == null ? null : (new TexturesSerializer()).toJSON(obj.envMap);
	    json.envMapIntensity = obj.envMapIntensity;
	    json.flatShading = obj.flatShading;
	    json.fog = obj.fog;
	    json.lightMap = obj.lightMap == null ? null : (new TexturesSerializer()).toJSON(obj.lightMap);
	    json.lightMapIntensity = obj.lightMapIntensity;
	    json.lights = obj.lights;
	    json.linewidth = obj.linewidth;
	    json.map = obj.map == null ? null : (new TexturesSerializer()).toJSON(obj.map);
	    json.metalness = obj.metalness;
	    json.metalnessMap = obj.metalnessMap == null ? null : (new TexturesSerializer()).toJSON(obj.metalnessMap);
	    json.morphNormals = obj.morphNormals;
	    json.morphTargets = obj.morphTargets;
	    json.name = obj.name;
	    json.normalMap = obj.normalMap == null ? null : (new TexturesSerializer()).toJSON(obj.normalMap);
	    json.normalScale = obj.normalScale;
	    json.opacity = obj.opacity;
	    json.polygonOffset = obj.polygonOffset;
	    json.polygonOffsetFactor = obj.polygonOffsetFactor;
	    json.polygonOffsetUnits = obj.polygonOffsetUnits;
	    json.precision = obj.precision;
	    json.premultipliedAlpha = obj.premultipliedAlpha;
	    json.refractionRatio = obj.refractionRatio;
	    json.roughness = obj.roughness;
	    json.roughnessMap = obj.roughnessMap == null ? null : (new TexturesSerializer()).toJSON(obj.roughnessMap);
	    json.shadowSide = obj.shadowSide;
	    json.side = obj.side;
	    json.skinning = obj.skinning;
	    json.transparent = obj.transparent;
	    json.type = obj.type;
	    json.userData = obj.userData;
	    json.uuid = obj.uuid;
	    json.vertexColors = obj.vertexColors;
	    json.visible = obj.visible;
	    json.wireframe = obj.wireframe;
	    json.wireframeLinecap = obj.wireframeLinecap;
	    json.wireframeLinejoin = obj.wireframeLinejoin;
	    json.wireframeLinewidth = obj.wireframeLinewidth;

	    return json;
	};

	MaterialSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.Material() : parent;

	    obj.alphaMap = json.alphaMap == null ? null : (new TexturesSerializer()).fromJSON(json.alphaMap, undefined, server);
	    obj.alphaTest = json.alphaTest;
	    obj.aoMap = json.aoMap == null ? null : (new TexturesSerializer()).fromJSON(json.aoMap, undefined, server);
	    obj.aoMapIntensity = json.aoMapIntensity;
	    obj.blendDst = json.blendDst;
	    obj.blendDstAlpha = json.blendDstAlpha;
	    obj.blendEquation = json.blendEquation;
	    obj.blendEquationAlpha = json.blendEquationAlpha;
	    obj.blendSrc = json.blendSrc;
	    obj.blendSrcAlpha = json.blendSrcAlpha;
	    obj.blending = json.blending;
	    obj.bumpMap = json.bumpMap == null ? null : (new TexturesSerializer()).fromJSON(json.bumpMap, undefined, server);
	    obj.bumpScale = json.bumpScale;
	    obj.clipIntersection = json.clipIntersection;
	    obj.clipShadow = json.clipShadow;
	    obj.clippingPlanes = json.clippingPlanes;
	    obj.color = json.color == null ? null : new THREE.Color(json.color);
	    obj.colorWrite = json.colorWrite;
	    obj.depthFunc = json.depthFunc;
	    obj.depthTest = json.depthTest;
	    obj.depthWrite = json.depthWrite;
	    obj.displacementBias = json.displacementBias;
	    obj.displacementMap = json.displacementMap == null ? null : (new TexturesSerializer()).fromJSON(json.displacementMap, undefined, server);
	    obj.displacementScale = json.displacementScale;
	    obj.dithering = json.dithering;
	    obj.emissive = json.emissive == null ? undefined : new THREE.Color(json.emissive);
	    obj.emissiveIntensity = json.emissiveIntensity;
	    obj.emissiveMap = json.emissiveMap == null ? null : (new TexturesSerializer()).fromJSON(json.emissiveMap, undefined, server);
	    obj.envMap = json.envMap == null ? null : (new TexturesSerializer()).fromJSON(json.envMap, undefined, server);
	    obj.envMapIntensity = json.envMapIntensity;
	    obj.flatShading = json.flatShading;
	    obj.fog = json.fog;
	    obj.lightMap = json.lightMap == null ? null : (new TexturesSerializer()).fromJSON(json.lightMap, undefined, server);
	    obj.lightMapIntensity = json.lightMapIntensity;
	    obj.lights = json.lights;
	    obj.linewidth = json.linewidth;
	    obj.map = json.map == null ? null : (new TexturesSerializer()).fromJSON(json.map, undefined, server);
	    obj.metalness = json.metalness;
	    obj.metalnessMap = json.metalnessMap == null ? null : (new TexturesSerializer()).fromJSON(json.metalnessMap, undefined, server);
	    obj.morphNormals = json.morphNormals;
	    obj.morphTargets = json.morphTargets;
	    obj.name = json.name;
	    obj.normalMap = json.normalMap == null ? null : (new TexturesSerializer()).fromJSON(json.normalMap, undefined, server);
	    obj.normalScale = json.normalScale == null ? null : new THREE.Vector2().copy(json.normalScale);
	    obj.opacity = json.opacity;
	    obj.polygonOffset = json.polygonOffset;
	    obj.polygonOffsetFactor = json.polygonOffsetFactor;
	    obj.polygonOffsetUnits = json.polygonOffsetUnits;
	    obj.precision = json.precision;
	    obj.premultipliedAlpha = json.premultipliedAlpha;
	    obj.refractionRatio = json.refractionRatio;
	    obj.roughness = json.roughness;
	    obj.roughnessMap = json.roughnessMap == null ? null : (new TexturesSerializer()).fromJSON(json.roughnessMap, undefined, server);
	    obj.shadowSide = json.shadowSide;
	    obj.side = json.side;
	    obj.skinning = json.skinning;
	    obj.transparent = json.transparent;
	    obj.type = json.type;
	    obj.userData = json.userData;
	    obj.uuid = json.uuid;
	    obj.vertexColors = json.vertexColors;
	    obj.visible = json.visible;
	    obj.wireframe = json.wireframe;
	    obj.wireframeLinecap = json.wireframeLinecap;
	    obj.wireframeLinejoin = json.wireframeLinejoin;
	    obj.wireframeLinewidth = json.wireframeLinewidth;

	    return obj;
	};

	/**
	 * LineBasicMaterialSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function LineBasicMaterialSerializer() {
	    BaseSerializer.call(this);
	}

	LineBasicMaterialSerializer.prototype = Object.create(BaseSerializer.prototype);
	LineBasicMaterialSerializer.prototype.constructor = LineBasicMaterialSerializer;

	LineBasicMaterialSerializer.prototype.toJSON = function (obj) {
	    return MaterialSerializer.prototype.toJSON.call(this, obj);
	};

	LineBasicMaterialSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.LineBasicMaterial() : parent;

	    MaterialSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	/**
	 * LineDashedMaterialSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function LineDashedMaterialSerializer() {
	    BaseSerializer.call(this);
	}

	LineDashedMaterialSerializer.prototype = Object.create(BaseSerializer.prototype);
	LineDashedMaterialSerializer.prototype.constructor = LineDashedMaterialSerializer;

	LineDashedMaterialSerializer.prototype.toJSON = function (obj) {
	    return MaterialSerializer.prototype.toJSON.call(this, obj);
	};

	LineDashedMaterialSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.LineDashedMaterial() : parent;

	    MaterialSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	/**
	 * MeshBasicMaterialSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function MeshBasicMaterialSerializer() {
	    BaseSerializer.call(this);
	}

	MeshBasicMaterialSerializer.prototype = Object.create(BaseSerializer.prototype);
	MeshBasicMaterialSerializer.prototype.constructor = MeshBasicMaterialSerializer;

	MeshBasicMaterialSerializer.prototype.toJSON = function (obj) {
	    return MaterialSerializer.prototype.toJSON.call(this, obj);
	};

	MeshBasicMaterialSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.MeshBasicMaterial() : parent;

	    MaterialSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	/**
	 * MeshDepthMaterialSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function MeshDepthMaterialSerializer() {
	    BaseSerializer.call(this);
	}

	MeshDepthMaterialSerializer.prototype = Object.create(BaseSerializer.prototype);
	MeshDepthMaterialSerializer.prototype.constructor = MeshDepthMaterialSerializer;

	MeshDepthMaterialSerializer.prototype.toJSON = function (obj) {
	    return MaterialSerializer.prototype.toJSON.call(this, obj);
	};

	MeshDepthMaterialSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.MeshDepthMaterial() : parent;

	    MaterialSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	/**
	 * MeshDistanceMaterialSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function MeshDistanceMaterialSerializer() {
	    BaseSerializer.call(this);
	}

	MeshDistanceMaterialSerializer.prototype = Object.create(BaseSerializer.prototype);
	MeshDistanceMaterialSerializer.prototype.constructor = MeshDistanceMaterialSerializer;

	MeshDistanceMaterialSerializer.prototype.toJSON = function (obj) {
	    return MaterialSerializer.prototype.toJSON.call(this, obj);
	};

	MeshDistanceMaterialSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.MeshDistanceMaterial() : parent;

	    MaterialSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	/**
	 * MeshFaceMaterialSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function MeshFaceMaterialSerializer() {
	    BaseSerializer.call(this);
	}

	MeshFaceMaterialSerializer.prototype = Object.create(BaseSerializer.prototype);
	MeshFaceMaterialSerializer.prototype.constructor = MeshFaceMaterialSerializer;

	MeshFaceMaterialSerializer.prototype.toJSON = function (obj) {
	    return MaterialSerializer.prototype.toJSON.call(this, obj);
	};

	MeshFaceMaterialSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.MeshFaceMaterial() : parent;

	    MaterialSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	/**
	 * MeshLambertMaterialSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function MeshLambertMaterialSerializer() {
	    BaseSerializer.call(this);
	}

	MeshLambertMaterialSerializer.prototype = Object.create(BaseSerializer.prototype);
	MeshLambertMaterialSerializer.prototype.constructor = MeshLambertMaterialSerializer;

	MeshLambertMaterialSerializer.prototype.toJSON = function (obj) {
	    return MaterialSerializer.prototype.toJSON.call(this, obj);
	};

	MeshLambertMaterialSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.MeshLambertMaterial() : parent;

	    MaterialSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	/**
	 * MeshNormalMaterialSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function MeshNormalMaterialSerializer() {
	    BaseSerializer.call(this);
	}

	MeshNormalMaterialSerializer.prototype = Object.create(BaseSerializer.prototype);
	MeshNormalMaterialSerializer.prototype.constructor = MeshNormalMaterialSerializer;

	MeshNormalMaterialSerializer.prototype.toJSON = function (obj) {
	    return MaterialSerializer.prototype.toJSON.call(this, obj);
	};

	MeshNormalMaterialSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.MeshNormalMaterial() : parent;

	    MaterialSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	/**
	 * MeshPhongMaterialSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function MeshPhongMaterialSerializer() {
	    BaseSerializer.call(this);
	}

	MeshPhongMaterialSerializer.prototype = Object.create(BaseSerializer.prototype);
	MeshPhongMaterialSerializer.prototype.constructor = MeshPhongMaterialSerializer;

	MeshPhongMaterialSerializer.prototype.toJSON = function (obj) {
	    return MaterialSerializer.prototype.toJSON.call(this, obj);
	};

	MeshPhongMaterialSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.MeshPhongMaterial() : parent;

	    MaterialSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	/**
	 * MeshPhysicalMaterialSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function MeshPhysicalMaterialSerializer() {
	    BaseSerializer.call(this);
	}

	MeshPhysicalMaterialSerializer.prototype = Object.create(BaseSerializer.prototype);
	MeshPhysicalMaterialSerializer.prototype.constructor = MeshPhysicalMaterialSerializer;

	MeshPhysicalMaterialSerializer.prototype.toJSON = function (obj) {
	    return MaterialSerializer.prototype.toJSON.call(this, obj);
	};

	MeshPhysicalMaterialSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.MeshPhysicalMaterial() : parent;

	    MaterialSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	/**
	 * MeshStandardMaterialSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function MeshStandardMaterialSerializer() {
	    BaseSerializer.call(this);
	}

	MeshStandardMaterialSerializer.prototype = Object.create(BaseSerializer.prototype);
	MeshStandardMaterialSerializer.prototype.constructor = MeshStandardMaterialSerializer;

	MeshStandardMaterialSerializer.prototype.toJSON = function (obj) {
	    return MaterialSerializer.prototype.toJSON.call(this, obj);
	};

	MeshStandardMaterialSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.MeshStandardMaterial() : parent;

	    MaterialSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	/**
	 * MeshToonMaterialSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function MeshToonMaterialSerializer() {
	    BaseSerializer.call(this);
	}

	MeshToonMaterialSerializer.prototype = Object.create(BaseSerializer.prototype);
	MeshToonMaterialSerializer.prototype.constructor = MeshToonMaterialSerializer;

	MeshToonMaterialSerializer.prototype.toJSON = function (obj) {
	    return MaterialSerializer.prototype.toJSON.call(this, obj);
	};

	MeshToonMaterialSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.MeshToonMaterial() : parent;

	    MaterialSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	/**
	 * MultiMaterialSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function MultiMaterialSerializer() {
	    BaseSerializer.call(this);
	}

	MultiMaterialSerializer.prototype = Object.create(BaseSerializer.prototype);
	MultiMaterialSerializer.prototype.constructor = MultiMaterialSerializer;

	MultiMaterialSerializer.prototype.toJSON = function (obj) {
	    return MaterialSerializer.prototype.toJSON.call(this, obj);
	};

	MultiMaterialSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.MultiMaterial() : parent;

	    MaterialSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	/**
	 * ParticleBasicMaterialSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function ParticleBasicMaterialSerializer() {
	    BaseSerializer.call(this);
	}

	ParticleBasicMaterialSerializer.prototype = Object.create(BaseSerializer.prototype);
	ParticleBasicMaterialSerializer.prototype.constructor = ParticleBasicMaterialSerializer;

	ParticleBasicMaterialSerializer.prototype.toJSON = function (obj) {
	    return MaterialSerializer.prototype.toJSON.call(this, obj);
	};

	ParticleBasicMaterialSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.ParticleBasicMaterial() : parent;

	    MaterialSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	/**
	 * ParticleSystemMaterialSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function ParticleSystemMaterialSerializer() {
	    BaseSerializer.call(this);
	}

	ParticleSystemMaterialSerializer.prototype = Object.create(BaseSerializer.prototype);
	ParticleSystemMaterialSerializer.prototype.constructor = ParticleSystemMaterialSerializer;

	ParticleSystemMaterialSerializer.prototype.toJSON = function (obj) {
	    return MaterialSerializer.prototype.toJSON.call(this, obj);
	};

	ParticleSystemMaterialSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.ParticleSystemMaterial() : parent;

	    MaterialSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	/**
	 * PointCloudMaterialSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function PointCloudMaterialSerializer() {
	    BaseSerializer.call(this);
	}

	PointCloudMaterialSerializer.prototype = Object.create(BaseSerializer.prototype);
	PointCloudMaterialSerializer.prototype.constructor = PointCloudMaterialSerializer;

	PointCloudMaterialSerializer.prototype.toJSON = function (obj) {
	    return MaterialSerializer.prototype.toJSON.call(this, obj);
	};

	PointCloudMaterialSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.PointCloudMaterial() : parent;

	    MaterialSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	/**
	 * PointsMaterialSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function PointsMaterialSerializer() {
	    BaseSerializer.call(this);
	}

	PointsMaterialSerializer.prototype = Object.create(BaseSerializer.prototype);
	PointsMaterialSerializer.prototype.constructor = PointsMaterialSerializer;

	PointsMaterialSerializer.prototype.toJSON = function (obj) {
	    return MaterialSerializer.prototype.toJSON.call(this, obj);
	};

	PointsMaterialSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.PointsMaterial() : parent;

	    MaterialSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	/**
	 * RawShaderMaterialSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function RawShaderMaterialSerializer() {
	    BaseSerializer.call(this);
	}

	RawShaderMaterialSerializer.prototype = Object.create(BaseSerializer.prototype);
	RawShaderMaterialSerializer.prototype.constructor = RawShaderMaterialSerializer;

	RawShaderMaterialSerializer.prototype.toJSON = function (obj) {
	    var json = MaterialSerializer.prototype.toJSON.call(this, obj);

	    json.defines = obj.defines;

	    json.uniforms = {};

	    for (var i in obj.uniforms) {
	        var uniform = obj.uniforms[i];
	        if (uniform.value instanceof THREE.Color) {
	            json.uniforms[i] = {
	                type: 'color',
	                value: uniform.value
	            };
	        } else {
	            json.uniforms[i] = {
	                value: uniform.value
	            };
	        }
	    }

	    json.vertexShader = obj.vertexShader;
	    json.fragmentShader = obj.fragmentShader;

	    return json;
	};

	RawShaderMaterialSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.RawShaderMaterial() : parent;

	    MaterialSerializer.prototype.fromJSON.call(this, json, obj, server);

	    obj.defines = json.defines;

	    obj.uniforms = {};

	    for (var i in json.uniforms) {
	        var uniform = json.uniforms[i];
	        if (uniform.type === 'color') {
	            obj.uniforms[i] = {
	                value: new THREE.Color(uniform.value)
	            };
	        } else {
	            obj.uniforms[i] = {
	                value: uniform.value
	            };
	        }
	    }

	    obj.vertexShader = json.vertexShader;
	    obj.fragmentShader = json.fragmentShader;

	    return obj;
	};

	/**
	 * ShaderMaterialSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function ShaderMaterialSerializer() {
	    BaseSerializer.call(this);
	}

	ShaderMaterialSerializer.prototype = Object.create(BaseSerializer.prototype);
	ShaderMaterialSerializer.prototype.constructor = ShaderMaterialSerializer;

	ShaderMaterialSerializer.prototype.toJSON = function (obj) {
	    var json = MaterialSerializer.prototype.toJSON.call(this, obj);

	    json.defines = obj.defines;

	    json.uniforms = {};

	    for (var i in obj.uniforms) {
	        var uniform = obj.uniforms[i];
	        if (uniform.value instanceof THREE.Color) {
	            json.uniforms[i] = {
	                type: 'color',
	                value: uniform.value
	            };
	        } else {
	            json.uniforms[i] = {
	                value: uniform.value
	            };
	        }
	    }

	    json.vertexShader = obj.vertexShader;
	    json.fragmentShader = obj.fragmentShader;

	    return json;
	};

	ShaderMaterialSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.ShaderMaterial() : parent;

	    MaterialSerializer.prototype.fromJSON.call(this, json, obj, server);

	    obj.defines = json.defines;

	    obj.uniforms = {};

	    for (var i in json.uniforms) {
	        var uniform = json.uniforms[i];
	        if (uniform.type === 'color') {
	            obj.uniforms[i] = {
	                value: new THREE.Color(uniform.value)
	            };
	        } else {
	            obj.uniforms[i] = {
	                value: uniform.value
	            };
	        }
	    }

	    obj.vertexShader = json.vertexShader;
	    obj.fragmentShader = json.fragmentShader;

	    return obj;
	};

	/**
	 * ShadowMaterialSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function ShadowMaterialSerializer() {
	    BaseSerializer.call(this);
	}

	ShadowMaterialSerializer.prototype = Object.create(BaseSerializer.prototype);
	ShadowMaterialSerializer.prototype.constructor = ShadowMaterialSerializer;

	ShadowMaterialSerializer.prototype.toJSON = function (obj) {
	    return MaterialSerializer.prototype.toJSON.call(this, obj);
	};

	ShadowMaterialSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.ShadowMaterial() : parent;

	    MaterialSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	/**
	 * SpriteCanvasMaterialSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function SpriteCanvasMaterialSerializer() {
	    BaseSerializer.call(this);
	}

	SpriteCanvasMaterialSerializer.prototype = Object.create(BaseSerializer.prototype);
	SpriteCanvasMaterialSerializer.prototype.constructor = SpriteCanvasMaterialSerializer;

	SpriteCanvasMaterialSerializer.prototype.toJSON = function (obj) {
	    return MaterialSerializer.prototype.toJSON.call(this, obj);
	};

	SpriteCanvasMaterialSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.SpriteCanvasMaterial() : parent;

	    MaterialSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	/**
	 * SpriteMaterialSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function SpriteMaterialSerializer() {
	    BaseSerializer.call(this);
	}

	SpriteMaterialSerializer.prototype = Object.create(BaseSerializer.prototype);
	SpriteMaterialSerializer.prototype.constructor = SpriteMaterialSerializer;

	SpriteMaterialSerializer.prototype.toJSON = function (obj) {
	    var json = MaterialSerializer.prototype.toJSON.call(this, obj);
	    json.isSpriteMaterial = true;
	    return json;
	};

	SpriteMaterialSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.SpriteMaterial() : parent;

	    MaterialSerializer.prototype.fromJSON.call(this, json, obj, server);

	    return obj;
	};

	var Serializers$1 = {
	    'LineBasicMaterial': LineBasicMaterialSerializer,
	    'LineDashedMaterial': LineDashedMaterialSerializer,
	    'MeshBasicMaterial': MeshBasicMaterialSerializer,
	    'MeshDepthMaterial': MeshDepthMaterialSerializer,
	    'MeshDistanceMaterial': MeshDistanceMaterialSerializer,
	    'MeshFaceMaterial': MeshFaceMaterialSerializer,
	    'MeshLambertMaterial': MeshLambertMaterialSerializer,
	    'MeshNormalMaterial': MeshNormalMaterialSerializer,
	    'MeshPhongMaterial': MeshPhongMaterialSerializer,
	    'MeshPhysicalMaterial': MeshPhysicalMaterialSerializer,
	    'MeshStandardMaterial': MeshStandardMaterialSerializer,
	    'MeshToonMaterial': MeshToonMaterialSerializer,
	    'MultiMaterial': MultiMaterialSerializer,
	    'ParticleBasicMaterial': ParticleBasicMaterialSerializer,
	    'ParticleSystemMaterial': ParticleSystemMaterialSerializer,
	    'PointCloudMaterial': PointCloudMaterialSerializer,
	    'PointsMaterial': PointsMaterialSerializer,
	    'RawShaderMaterial': RawShaderMaterialSerializer,
	    'ShaderMaterial': ShaderMaterialSerializer,
	    'ShadowMaterial': ShadowMaterialSerializer,
	    'SpriteCanvasMaterial': SpriteCanvasMaterialSerializer,
	    'SpriteMaterial': SpriteMaterialSerializer
	};

	/**
	 * MaterialsSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function MaterialsSerializer() {
	    BaseSerializer.call(this);
	}

	MaterialsSerializer.prototype = Object.create(BaseSerializer.prototype);
	MaterialsSerializer.prototype.constructor = MaterialsSerializer;

	MaterialsSerializer.prototype.toJSON = function (obj) {
	    var serializer = Serializers$1[obj.type];

	    if (serializer === undefined) {
	        console.warn(`MaterialsSerializer: No serializer with ${obj.type}.`);
	        return null;
	    }

	    return (new serializer()).toJSON(obj);
	};

	MaterialsSerializer.prototype.fromJSON = function (json, parent, server) {
	    var generator = json.metadata.generator;

	    var serializer = Serializers$1[generator.replace('Serializer', '')];

	    if (serializer === undefined) {
	        console.warn(`MaterialsSerializer: No deserializer with ${generator}.`);
	        return null;
	    }

	    return (new serializer()).fromJSON(json, parent, server);
	};

	/**
	 * SceneSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function SceneSerializer() {
	    BaseSerializer.call(this);
	}

	SceneSerializer.prototype = Object.create(BaseSerializer.prototype);
	SceneSerializer.prototype.constructor = SceneSerializer;

	SceneSerializer.prototype.toJSON = function (obj) {
	    var json = Object3DSerializer.prototype.toJSON.call(this, obj);

	    if (obj.background instanceof THREE.Texture) { // 天空盒和背景图片
	        json.background = new TexturesSerializer().toJSON(obj.background);
	    } else { // 纯色
	        json.background = obj.background;
	    }

	    json.fog = obj.fog;
	    json.overrideMaterial = obj.overrideMaterial == null ? null : (new MaterialsSerializer()).toJSON(obj.overrideMaterial);

	    return json;
	};

	SceneSerializer.prototype.fromJSON = function (json, parent, server) {
	    var obj = parent === undefined ? new THREE.Scene() : parent;

	    Object3DSerializer.prototype.fromJSON(json, obj);

	    if (json.background && json.background.metadata &&
	        (json.background.metadata.generator === 'CubeTextureSerializer' ||
	            json.background.metadata.generator === 'TextureSerializer')
	    ) { // 天空盒和背景图片
	        obj.background = new TexturesSerializer().fromJSON(json.background, undefined, server);
	    } else if (json.background) { // 纯色
	        obj.background = new THREE.Color(json.background);
	    }

	    if (json.fog && (json.fog.type === 'Fog' || json.fog instanceof THREE.Fog)) {
	        obj.fog = new THREE.Fog(json.fog.color, json.fog.near, json.fog.far);
	    } else if (json.fog && (json.fog.type === 'FogExp2' || json.fog instanceof THREE.FogExp2)) {
	        obj.fog = new THREE.FogExp2(json.fog.color, json.fog.density);
	    } else if (json.fog) {
	        console.warn(`SceneSerializer: unknown fog type ${json.fog.type}.`);
	    }

	    obj.overrideMaterial = json.overrideMaterial == null ? null : (new MaterialsSerializer()).fromJSON(json.overrideMaterial, undefined, server);

	    return obj;
	};

	/**
	 * BufferGeometrySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function BufferGeometrySerializer() {
	    BaseSerializer.call(this);
	}

	BufferGeometrySerializer.prototype = Object.create(BaseSerializer.prototype);
	BufferGeometrySerializer.prototype.constructor = BufferGeometrySerializer;

	BufferGeometrySerializer.prototype.toJSON = function (obj) {
	    var json = BaseSerializer.prototype.toJSON.call(this, obj);

	    // json.attributes太大，不要保存在Mongo
	    // json.attributes = obj.attributes;
	    json.boundingBox = obj.boundingBox;
	    json.boundingSphere = obj.boundingSphere;
	    json.drawRange = obj.drawRange;
	    json.groups = obj.groups;
	    // json.index = obj.index;
	    json.morphAttributes = obj.morphAttributes;
	    json.name = obj.name;
	    json.parameters = obj.parameters;
	    json.type = obj.type;
	    json.userData = obj.userData;
	    json.uuid = obj.uuid;

	    return json;
	};

	BufferGeometrySerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.BufferGeometry() : parent;

	    BaseSerializer.prototype.fromJSON.call(this, json, obj);

	    // obj.attributes = json.attributes;
	    // if (json.boundingBox) {
	    //     obj.boundingBox = new THREE.Box3(
	    //         new THREE.Vector3().copy(json.boundingBox.min),
	    //         new THREE.Vector3().copy(json.boundingBox.max),
	    //     );
	    // }

	    // if (json.boundingSphere) {
	    //     obj.boundingSphere = new THREE.Sphere(
	    //         new THREE.Vector3().copy(json.boundingSphere.center),
	    //         json.boundingSphere.radius
	    //     );
	    // }

	    // if (json.drawRange) {
	    //     obj.drawRange.start = json.drawRange.start;
	    //     obj.drawRange.count = json.drawRange.count === null ? Infinity : json.drawRange.count;
	    // }

	    obj.groups = json.groups;
	    // obj.index = json.index;
	    obj.morphAttributes = json.morphAttributes;
	    obj.name = json.name;
	    obj.parameters = json.parameters;
	    obj.type = json.type;
	    obj.userData = json.userData;
	    obj.uuid = json.uuid;

	    return obj;
	};

	/**
	 * BoxBufferGeometrySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function BoxBufferGeometrySerializer() {
	    BaseSerializer.call(this);
	}

	BoxBufferGeometrySerializer.prototype = Object.create(BaseSerializer.prototype);
	BoxBufferGeometrySerializer.prototype.constructor = BoxBufferGeometrySerializer;

	BoxBufferGeometrySerializer.prototype.toJSON = function (obj) {
	    return BufferGeometrySerializer.prototype.toJSON.call(this, obj);
	};

	BoxBufferGeometrySerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.BoxBufferGeometry(
	        json.parameters.width,
	        json.parameters.height,
	        json.parameters.depth,
	        json.parameters.widthSegments,
	        json.parameters.heightSegments,
	        json.parameters.depthSegments
	    ) : parent;

	    BufferGeometrySerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * CircleBufferGeometrySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function CircleBufferGeometrySerializer() {
	    BaseSerializer.call(this);
	}

	CircleBufferGeometrySerializer.prototype = Object.create(BaseSerializer.prototype);
	CircleBufferGeometrySerializer.prototype.constructor = CircleBufferGeometrySerializer;

	CircleBufferGeometrySerializer.prototype.toJSON = function (obj) {
	    return BufferGeometrySerializer.prototype.toJSON.call(this, obj);
	};

	CircleBufferGeometrySerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.CircleBufferGeometry(
	        json.parameters.radius,
	        json.parameters.segments,
	        json.parameters.thetaStart,
	        json.parameters.thetaLength
	    ) : parent;

	    BufferGeometrySerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * ConeBufferGeometrySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function ConeBufferGeometrySerializer() {
	    BaseSerializer.call(this);
	}

	ConeBufferGeometrySerializer.prototype = Object.create(BaseSerializer.prototype);
	ConeBufferGeometrySerializer.prototype.constructor = ConeBufferGeometrySerializer;

	ConeBufferGeometrySerializer.prototype.toJSON = function (obj) {
	    return BufferGeometrySerializer.prototype.toJSON.call(this, obj);
	};

	ConeBufferGeometrySerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.ConeBufferGeometry(
	        json.parameters.radius,
	        json.parameters.height,
	        json.parameters.radialSegments,
	        json.parameters.heightSegments,
	        json.parameters.openEnded,
	        json.parameters.thetaStart,
	        json.parameters.thetaLength
	    ) : parent;

	    BufferGeometrySerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * CylinderBufferGeometrySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function CylinderBufferGeometrySerializer() {
	    BaseSerializer.call(this);
	}

	CylinderBufferGeometrySerializer.prototype = Object.create(BaseSerializer.prototype);
	CylinderBufferGeometrySerializer.prototype.constructor = CylinderBufferGeometrySerializer;

	CylinderBufferGeometrySerializer.prototype.toJSON = function (obj) {
	    return BufferGeometrySerializer.prototype.toJSON.call(this, obj);
	};

	CylinderBufferGeometrySerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.CylinderBufferGeometry(
	        json.parameters.radiusTop,
	        json.parameters.radiusBottom,
	        json.parameters.height,
	        json.parameters.radialSegments,
	        json.parameters.heightSegments,
	        json.parameters.openEnded,
	        json.parameters.thetaStart,
	        json.parameters.thetaLength
	    ) : parent;

	    BufferGeometrySerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * DodecahedronBufferGeometrySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function DodecahedronBufferGeometrySerializer() {
	    BaseSerializer.call(this);
	}

	DodecahedronBufferGeometrySerializer.prototype = Object.create(BaseSerializer.prototype);
	DodecahedronBufferGeometrySerializer.prototype.constructor = DodecahedronBufferGeometrySerializer;

	DodecahedronBufferGeometrySerializer.prototype.toJSON = function (obj) {
	    return BufferGeometrySerializer.prototype.toJSON.call(this, obj);
	};

	DodecahedronBufferGeometrySerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.DodecahedronBufferGeometry(
	        json.parameters.radius,
	        json.parameters.detail
	    ) : parent;

	    BufferGeometrySerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * ExtrudeBufferGeometrySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function ExtrudeBufferGeometrySerializer() {
	    BaseSerializer.call(this);
	}

	ExtrudeBufferGeometrySerializer.prototype = Object.create(BaseSerializer.prototype);
	ExtrudeBufferGeometrySerializer.prototype.constructor = ExtrudeBufferGeometrySerializer;

	ExtrudeBufferGeometrySerializer.prototype.toJSON = function (obj) {
	    return BufferGeometrySerializer.prototype.toJSON.call(this, obj);
	};

	ExtrudeBufferGeometrySerializer.prototype.fromJSON = function (json, parent) {
	    // TODO

	    var obj = parent === undefined ? new THREE.ExtrudeBufferGeometry(
	        json.parameters.shapes,
	        json.parameters.options
	    ) : parent;

	    BufferGeometrySerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * IcosahedronBufferGeometrySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function IcosahedronBufferGeometrySerializer() {
	    BaseSerializer.call(this);
	}

	IcosahedronBufferGeometrySerializer.prototype = Object.create(BaseSerializer.prototype);
	IcosahedronBufferGeometrySerializer.prototype.constructor = IcosahedronBufferGeometrySerializer;

	IcosahedronBufferGeometrySerializer.prototype.toJSON = function (obj) {
	    return BufferGeometrySerializer.prototype.toJSON.call(this, obj);
	};

	IcosahedronBufferGeometrySerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.IcosahedronBufferGeometry(
	        json.parameters.radius,
	        json.parameters.detail
	    ) : parent;

	    BufferGeometrySerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * InstancedBufferGeometrySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function InstancedBufferGeometrySerializer() {
	    BaseSerializer.call(this);
	}

	InstancedBufferGeometrySerializer.prototype = Object.create(BaseSerializer.prototype);
	InstancedBufferGeometrySerializer.prototype.constructor = InstancedBufferGeometrySerializer;

	InstancedBufferGeometrySerializer.prototype.toJSON = function (obj) {
	    return BufferGeometrySerializer.prototype.toJSON.call(this, obj);
	};

	InstancedBufferGeometrySerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.InstancedBufferGeometry() : parent;

	    // TODO: 

	    BufferGeometrySerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * LatheBufferGeometrySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function LatheBufferGeometrySerializer() {
	    BaseSerializer.call(this);
	}

	LatheBufferGeometrySerializer.prototype = Object.create(BaseSerializer.prototype);
	LatheBufferGeometrySerializer.prototype.constructor = LatheBufferGeometrySerializer;

	LatheBufferGeometrySerializer.prototype.toJSON = function (obj) {
	    return BufferGeometrySerializer.prototype.toJSON.call(this, obj);
	};

	LatheBufferGeometrySerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.LatheBufferGeometry(
	        json.parameters.points,
	        json.parameters.segments,
	        json.parameters.phiStart,
	        json.parameters.phiLength
	    ) : parent;

	    BufferGeometrySerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * OctahedronBufferGeometrySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function OctahedronBufferGeometrySerializer() {
	    BaseSerializer.call(this);
	}

	OctahedronBufferGeometrySerializer.prototype = Object.create(BaseSerializer.prototype);
	OctahedronBufferGeometrySerializer.prototype.constructor = OctahedronBufferGeometrySerializer;

	OctahedronBufferGeometrySerializer.prototype.toJSON = function (obj) {
	    return BufferGeometrySerializer.prototype.toJSON.call(this, obj);
	};

	OctahedronBufferGeometrySerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.OctahedronBufferGeometry(
	        json.parameters.radius,
	        json.parameters.detail
	    ) : parent;

	    BufferGeometrySerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * ParametricBufferGeometrySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function ParametricBufferGeometrySerializer() {
	    BaseSerializer.call(this);
	}

	ParametricBufferGeometrySerializer.prototype = Object.create(BaseSerializer.prototype);
	ParametricBufferGeometrySerializer.prototype.constructor = ParametricBufferGeometrySerializer;

	ParametricBufferGeometrySerializer.prototype.toJSON = function (obj) {
	    return BufferGeometrySerializer.prototype.toJSON.call(this, obj);
	};

	ParametricBufferGeometrySerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.ParametricBufferGeometry(
	        json.parameters.func,
	        json.parameters.slices,
	        json.parameters.stacks
	    ) : parent;

	    BufferGeometrySerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * PlaneBufferGeometrySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function PlaneBufferGeometrySerializer() {
	    BaseSerializer.call(this);
	}

	PlaneBufferGeometrySerializer.prototype = Object.create(BaseSerializer.prototype);
	PlaneBufferGeometrySerializer.prototype.constructor = PlaneBufferGeometrySerializer;

	PlaneBufferGeometrySerializer.prototype.toJSON = function (obj) {
	    return BufferGeometrySerializer.prototype.toJSON.call(this, obj);
	};

	PlaneBufferGeometrySerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.PlaneBufferGeometry(
	        json.parameters.width,
	        json.parameters.height,
	        json.parameters.widthSegments,
	        json.parameters.heightSegments
	    ) : parent;

	    BufferGeometrySerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * PolyhedronBufferGeometrySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function PolyhedronBufferGeometrySerializer() {
	    BaseSerializer.call(this);
	}

	PolyhedronBufferGeometrySerializer.prototype = Object.create(BaseSerializer.prototype);
	PolyhedronBufferGeometrySerializer.prototype.constructor = PolyhedronBufferGeometrySerializer;

	PolyhedronBufferGeometrySerializer.prototype.toJSON = function (obj) {
	    return BufferGeometrySerializer.prototype.toJSON.call(this, obj);
	};

	PolyhedronBufferGeometrySerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.PolyhedronBufferGeometry(
	        json.parameters.vertices,
	        json.parameters.indices,
	        json.parameters.radius,
	        json.parameters.detail
	    ) : parent;

	    BufferGeometrySerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * RingBufferGeometrySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function RingBufferGeometrySerializer() {
	    BaseSerializer.call(this);
	}

	RingBufferGeometrySerializer.prototype = Object.create(BaseSerializer.prototype);
	RingBufferGeometrySerializer.prototype.constructor = RingBufferGeometrySerializer;

	RingBufferGeometrySerializer.prototype.toJSON = function (obj) {
	    return BufferGeometrySerializer.prototype.toJSON.call(this, obj);
	};

	RingBufferGeometrySerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.RingBufferGeometry(
	        json.parameters.innerRadius,
	        json.parameters.outerRadius,
	        json.parameters.thetaSegments,
	        json.parameters.phiSegments,
	        json.parameters.thetaStart,
	        json.parameters.thetaLength
	    ) : parent;

	    BufferGeometrySerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * ShapeBufferGeometrySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function ShapeBufferGeometrySerializer() {
	    BaseSerializer.call(this);
	}

	ShapeBufferGeometrySerializer.prototype = Object.create(BaseSerializer.prototype);
	ShapeBufferGeometrySerializer.prototype.constructor = ShapeBufferGeometrySerializer;

	ShapeBufferGeometrySerializer.prototype.toJSON = function (obj) {
	    return BufferGeometrySerializer.prototype.toJSON.call(this, obj);
	};

	ShapeBufferGeometrySerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.ShapeBufferGeometry(
	        json.parameters.shapes,
	        json.parameters.curveSegments
	    ) : parent;

	    BufferGeometrySerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * SphereBufferGeometrySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function SphereBufferGeometrySerializer() {
	    BaseSerializer.call(this);
	}

	SphereBufferGeometrySerializer.prototype = Object.create(BaseSerializer.prototype);
	SphereBufferGeometrySerializer.prototype.constructor = SphereBufferGeometrySerializer;

	SphereBufferGeometrySerializer.prototype.toJSON = function (obj) {
	    return BufferGeometrySerializer.prototype.toJSON.call(this, obj);
	};

	SphereBufferGeometrySerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.SphereBufferGeometry(
	        json.parameters.radius,
	        json.parameters.widthSegments,
	        json.parameters.heightSegments,
	        json.parameters.phiStart,
	        json.parameters.phiLength,
	        json.parameters.thetaStart,
	        json.parameters.thetaLength
	    ) : parent;

	    BufferGeometrySerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * TeapotBufferGeometrySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function TeapotBufferGeometrySerializer() {
	    BaseSerializer.call(this);
	}

	TeapotBufferGeometrySerializer.prototype = Object.create(BaseSerializer.prototype);
	TeapotBufferGeometrySerializer.prototype.constructor = TeapotBufferGeometrySerializer;

	TeapotBufferGeometrySerializer.prototype.toJSON = function (obj) {
	    return BufferGeometrySerializer.prototype.toJSON.call(this, obj);
	};

	TeapotBufferGeometrySerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.TeapotBufferGeometry(
	        json.parameters.size,
	        json.parameters.segments,
	        json.parameters.bottom,
	        json.parameters.lid,
	        json.parameters.body,
	        json.parameters.fitLid,
	        json.parameters.blinn
	    ) : parent;

	    BufferGeometrySerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * TetrahedronBufferGeometrySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function TetrahedronBufferGeometrySerializer() {
	    BaseSerializer.call(this);
	}

	TetrahedronBufferGeometrySerializer.prototype = Object.create(BaseSerializer.prototype);
	TetrahedronBufferGeometrySerializer.prototype.constructor = TetrahedronBufferGeometrySerializer;

	TetrahedronBufferGeometrySerializer.prototype.toJSON = function (obj) {
	    return BufferGeometrySerializer.prototype.toJSON.call(this, obj);
	};

	TetrahedronBufferGeometrySerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.TetrahedronBufferGeometry(
	        json.parameters.radius,
	        json.parameters.detail
	    ) : parent;

	    BufferGeometrySerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * TextBufferGeometrySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function TextBufferGeometrySerializer() {
	    BaseSerializer.call(this);
	}

	TextBufferGeometrySerializer.prototype = Object.create(BaseSerializer.prototype);
	TextBufferGeometrySerializer.prototype.constructor = TextBufferGeometrySerializer;

	TextBufferGeometrySerializer.prototype.toJSON = function (obj) {
	    return BufferGeometrySerializer.prototype.toJSON.call(this, obj);
	};

	TextBufferGeometrySerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.TextBufferGeometry(
	        json.parameters.text,
	        json.parameters.parameters
	    ) : parent;

	    BufferGeometrySerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * TorusBufferGeometrySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function TorusBufferGeometrySerializer() {
	    BaseSerializer.call(this);
	}

	TorusBufferGeometrySerializer.prototype = Object.create(BaseSerializer.prototype);
	TorusBufferGeometrySerializer.prototype.constructor = TorusBufferGeometrySerializer;

	TorusBufferGeometrySerializer.prototype.toJSON = function (obj) {
	    return BufferGeometrySerializer.prototype.toJSON.call(this, obj);
	};

	TorusBufferGeometrySerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.TorusBufferGeometry(
	        json.parameters.radius,
	        json.parameters.tube,
	        json.parameters.radialSegments,
	        json.parameters.tubularSegments,
	        json.parameters.arc
	    ) : parent;

	    BufferGeometrySerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * TorusKnotBufferGeometrySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function TorusKnotBufferGeometrySerializer() {
	    BaseSerializer.call(this);
	}

	TorusKnotBufferGeometrySerializer.prototype = Object.create(BaseSerializer.prototype);
	TorusKnotBufferGeometrySerializer.prototype.constructor = TorusKnotBufferGeometrySerializer;

	TorusKnotBufferGeometrySerializer.prototype.toJSON = function (obj) {
	    return BufferGeometrySerializer.prototype.toJSON.call(this, obj);
	};

	TorusKnotBufferGeometrySerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.TorusKnotBufferGeometry(
	        json.parameters.radius,
	        json.parameters.tube,
	        json.parameters.tubularSegments,
	        json.parameters.radialSegments,
	        json.parameters.p,
	        json.parameters.q
	    ) : parent;

	    BufferGeometrySerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * TubeBufferGeometrySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function TubeBufferGeometrySerializer() {
	    BaseSerializer.call(this);
	}

	TubeBufferGeometrySerializer.prototype = Object.create(BaseSerializer.prototype);
	TubeBufferGeometrySerializer.prototype.constructor = TubeBufferGeometrySerializer;

	TubeBufferGeometrySerializer.prototype.toJSON = function (obj) {
	    return BufferGeometrySerializer.prototype.toJSON.call(this, obj);
	};

	TubeBufferGeometrySerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.TubeBufferGeometry(
	        json.parameters.path,
	        json.parameters.tubularSegments,
	        json.parameters.radius,
	        json.parameters.radialSegments,
	        json.parameters.closed
	    ) : parent;

	    BufferGeometrySerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	var Serializers$2 = {
	    'BoxBufferGeometry': BoxBufferGeometrySerializer,
	    'CircleBufferGeometry': CircleBufferGeometrySerializer,
	    'ConeBufferGeometry': ConeBufferGeometrySerializer,
	    'CylinderBufferGeometry': CylinderBufferGeometrySerializer,
	    'DodecahedronBufferGeometry': DodecahedronBufferGeometrySerializer,
	    'ExtrudeBufferGeometry': ExtrudeBufferGeometrySerializer,
	    'IcosahedronBufferGeometry': IcosahedronBufferGeometrySerializer,
	    'InstancedBufferGeometry': InstancedBufferGeometrySerializer,
	    'LatheBufferGeometry': LatheBufferGeometrySerializer,
	    'OctahedronBufferGeometry': OctahedronBufferGeometrySerializer,
	    'ParametricBufferGeometry': ParametricBufferGeometrySerializer,
	    'PlaneBufferGeometry': PlaneBufferGeometrySerializer,
	    'PolyhedronBufferGeometry': PolyhedronBufferGeometrySerializer,
	    'RingBufferGeometry': RingBufferGeometrySerializer,
	    'ShapeBufferGeometry': ShapeBufferGeometrySerializer,
	    'SphereBufferGeometry': SphereBufferGeometrySerializer,
	    'TeapotBufferGeometry': TeapotBufferGeometrySerializer,
	    'TetrahedronBufferGeometry': TetrahedronBufferGeometrySerializer,
	    'TextBufferGeometry': TextBufferGeometrySerializer,
	    'TorusBufferGeometry': TorusBufferGeometrySerializer,
	    'TorusKnotBufferGeometry': TorusKnotBufferGeometrySerializer,
	    'TubeBufferGeometry': TubeBufferGeometrySerializer
	};

	/**
	 * GeometriesSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function GeometriesSerializer() {
	    BaseSerializer.call(this);
	}

	GeometriesSerializer.prototype = Object.create(BaseSerializer.prototype);
	GeometriesSerializer.prototype.constructor = GeometriesSerializer;

	GeometriesSerializer.prototype.toJSON = function (obj) {
	    var serializer = Serializers$2[obj.type];

	    if (serializer === undefined) {
	        console.warn(`GeometriesSerializer: No serializer with ${obj.type}.`);
	        return null;
	    }

	    return (new serializer()).toJSON(obj);
	};

	GeometriesSerializer.prototype.fromJSON = function (json, parent) {
	    var generator = json.metadata.generator;

	    var serializer = Serializers$2[generator.replace('Serializer', '')];

	    if (serializer === undefined) {
	        console.warn(`GeometriesSerializer: No deserializer with ${generator}.`);
	        return null;
	    }

	    return (new serializer()).fromJSON(json, parent);
	};

	/**
	 * MeshSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function MeshSerializer() {
	    BaseSerializer.call(this);
	}

	MeshSerializer.prototype = Object.create(BaseSerializer.prototype);
	MeshSerializer.prototype.constructor = MeshSerializer;

	MeshSerializer.prototype.toJSON = function (obj) {
	    var json = Object3DSerializer.prototype.toJSON.call(this, obj);

	    json.drawMode = obj.drawMode;
	    json.geometry = (new GeometriesSerializer()).toJSON(obj.geometry);
	    json.material = (new MaterialsSerializer()).toJSON(obj.material);

	    return json;
	};

	MeshSerializer.prototype.fromJSON = function (json, parent, server) {
	    // 子类创建模型
	    if (parent !== undefined) {
	        var obj = parent;
	        Object3DSerializer.prototype.fromJSON.call(this, json, obj);
	        return obj;
	    }

	    // 其他模型
	    if (json.geometry == null) {
	        console.warn(`MeshSerializer: ${json.name} json.geometry未定义。`);
	        return null;
	    }
	    if (json.material == null) {
	        console.warn(`MeshSerializer: ${json.name} json.material未定义。`);
	        return null;
	    }

	    var geometry = (new GeometriesSerializer()).fromJSON(json.geometry);
	    var material = (new MaterialsSerializer()).fromJSON(json.material, undefined, server);

	    var obj = new THREE.Mesh(geometry, material);

	    Object3DSerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * GroupSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function GroupSerializer() {
	    BaseSerializer.call(this);
	}

	GroupSerializer.prototype = Object.create(BaseSerializer.prototype);
	GroupSerializer.prototype.constructor = GroupSerializer;

	GroupSerializer.prototype.toJSON = function (obj) {
	    return Object3DSerializer.prototype.toJSON.call(this, obj);
	};

	GroupSerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.Group() : parent;

	    Object3DSerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * BoneSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function BoneSerializer() {
	    BaseSerializer.call(this);
	}

	BoneSerializer.prototype = Object.create(BaseSerializer.prototype);
	BoneSerializer.prototype.constructor = BoneSerializer;

	BoneSerializer.prototype.toJSON = function (obj) {
	    var json = Object3DSerializer.prototype.toJSON.call(this, obj);

	    return json;
	};

	BoneSerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.Bone() : parent;

	    Object3DSerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * SpriteSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function SpriteSerializer() {
	    BaseSerializer.call(this);
	}

	SpriteSerializer.prototype = Object.create(BaseSerializer.prototype);
	SpriteSerializer.prototype.constructor = SpriteSerializer;

	SpriteSerializer.prototype.toJSON = function (obj) {
	    var json = Object3DSerializer.prototype.toJSON.call(this, obj);

	    json.center = obj.center;
	    json.material = (new MaterialsSerializer()).toJSON(obj.material);
	    json.z = obj.z;
	    json.isSprite = obj.isSprite;

	    return json;
	};

	SpriteSerializer.prototype.fromJSON = function (json, parent, server) {
	    var material;

	    if (parent === undefined) {
	        if (json.material == null) {
	            console.warn(`SpriteSerializer: ${json.name} json.material is not defined.`);
	            return null;
	        }
	        material = (new MaterialsSerializer()).fromJSON(json.material, undefined, server);
	    }

	    var obj = parent === undefined ? new THREE.Sprite(material) : parent;

	    Object3DSerializer.prototype.fromJSON.call(this, json, obj);

	    obj.center.copy(json.center);
	    obj.z = json.z;

	    return obj;
	};

	const PackageList = [{
	    name: 'NRRDLoader',
	    assets: [
	        'assets/js/Volume.js',
	        'assets/js/VolumeSlice.js',
	        'assets/js/loaders/NRRDLoader.js'
	    ]
	}, {
	    name: '3MFLoader',
	    assets: [
	        'assets/js/loaders/3MFLoader.js'
	    ]
	}, {
	    name: 'AMFLoader',
	    assets: [
	        'assets/js/loaders/AMFLoader.js'
	    ]
	}, {
	    name: 'AssimpLoader',
	    assets: [
	        'assets/js/loaders/AssimpLoader.js'
	    ]
	}, {
	    name: 'AWDLoader',
	    assets: [
	        'assets/js/loaders/AWDLoader.js'
	    ]
	}, {
	    name: 'BabylonLoader',
	    assets: [
	        'assets/js/loaders/BabylonLoader.js'
	    ]
	}, {
	    name: 'BinaryLoader',
	    assets: [
	        'assets/js/loaders/BinaryLoader.js'
	    ]
	}, {
	    name: 'BVHLoader',
	    assets: [
	        'assets/js/loaders/BVHLoader.js'
	    ]
	}, {
	    name: 'ColladaLoader',
	    assets: [
	        'assets/js/loaders/ColladaLoader.js'
	    ]
	}, {
	    name: 'FBXLoader',
	    assets: [
	        'assets/js/curves/NURBSCurve.js',
	        'assets/js/curves/NURBSUtils.js',
	        'assets/js/loaders/FBXLoader.js'
	    ]
	}, {
	    name: 'GCodeLoader',
	    assets: [
	        'assets/js/loaders/GCodeLoader.js'
	    ]
	}, {
	    name: 'DRACOLoader',
	    assets: [
	        'assets/js/loaders/DRACOLoader.js'
	    ]
	}, {
	    name: 'GLTFLoader',
	    assets: [
	        'assets/js/loaders/GLTFLoader.js'
	    ]
	}, {
	    name: 'LegacyJSONLoader',
	    assets: [
	        'assets/js/loaders/deprecated/LegacyJSONLoader.js'
	    ]
	}, {
	    name: 'KMZLoader',
	    assets: [
	        'assets/js/loaders/KMZLoader.js'
	    ]
	}, {
	    name: 'MD2Loader',
	    assets: [
	        'assets/js/loaders/MD2Loader.js',
	        'assets/js/MD2Character.js'
	    ]
	}, {
	    name: 'OBJLoader',
	    assets: [
	        'assets/js/loaders/OBJLoader.js'
	    ]
	}, {
	    name: 'PCDLoader',
	    assets: [
	        'assets/js/loaders/PCDLoader.js'
	    ]
	}, {
	    name: 'PDBLoader',
	    assets: [
	        'assets/js/loaders/PDBLoader.js'
	    ]
	}, {
	    name: 'PLYLoader',
	    assets: [
	        'assets/js/loaders/PLYLoader.js'
	    ]
	}, {
	    name: 'PRWMLoader',
	    assets: [
	        'assets/js/loaders/PRWMLoader.js'
	    ]
	}, {
	    name: 'STLLoader',
	    assets: [
	        'assets/js/loaders/STLLoader.js'
	    ]
	}, {
	    name: 'TDSLoader',
	    assets: [
	        'assets/js/loaders/TDSLoader.js'
	    ]
	}, {
	    name: 'VRMLoader',
	    assets: [
	        'assets/js/loaders/VRMLoader.js'
	    ]
	}, {
	    name: 'VRMLLoader',
	    assets: [
	        'assets/js/loaders/VRMLLoader.js'
	    ]
	}, {
	    name: 'VTKLoader',
	    assets: [
	        'assets/js/loaders/VTKLoader.js'
	    ]
	}, {
	    name: 'CTMLoader',
	    assets: [
	        'assets/js/ctm.js',
	        'assets/js/loaders/ctm/CTMLoader.js'
	    ]
	}, {
	    name: 'XLoader',
	    assets: [
	        'assets/js/loaders/XLoader.js'
	    ]
	}, {
	    name: 'SEA3D',
	    assets: [
	        'assets/js/loaders/sea3d/SEA3D.js',
	        'assets/js/loaders/sea3d/SEA3DLZMA.js',
	        'assets/js/loaders/sea3d/SEA3DLoader.js',
	        'assets/js/libs/draco/draco_decoder.js',
	        'assets/js/loaders/sea3d/SEA3DDraco.js'
	    ]
	}, {
	    name: 'lzma',
	    assets: [
	        'assets/js/lzma.js'
	    ]
	}, {
	    name: 'codemirror',
	    assets: [
	        'assets/css/codemirror.css',
	        'assets/css/theme/monokai.css',
	        'assets/js/codemirror.js',
	        'assets/js/mode/javascript.js',
	        'assets/js/mode/glsl.js'
	    ]
	}, {
	    name: 'codemirror-addon',
	    assets: [
	        'assets/css/addon/dialog.css',
	        'assets/css/addon/show-hint.css',
	        'assets/css/addon/tern.css',
	        'assets/js/addon/dialog.js',
	        'assets/js/addon/show-hint.js'
	    ]
	}, {
	    name: 'esprima',
	    assets: [
	        'assets/js/esprima.js'
	    ]
	}, {
	    name: 'jsonlint',
	    assets: [
	        'assets/js/jsonlint.js'
	    ]
	}, {
	    name: 'glslprep',
	    assets: [
	        'assets/js/glslprep.min.js'
	    ]
	}, {
	    name: 'acorn',
	    assets: [
	        'assets/js/acorn/acorn.js',
	        'assets/js/acorn/acorn_loose.js',
	        'assets/js/acorn/walk.js'
	    ]
	}, {
	    name: 'ternjs',
	    assets: [
	        'assets/js/addon/tern.js',
	        'assets/js/ternjs/polyfill.js',
	        'assets/js/ternjs/signal.js',
	        'assets/js/ternjs/tern.js',
	        'assets/js/ternjs/def.js',
	        'assets/js/ternjs/comment.js',
	        'assets/js/ternjs/infer.js',
	        'assets/js/ternjs/doc_comment.js',
	        'assets/js/tern-threejs/threejs.js'
	    ]
	}, {
	    name: 'line',
	    assets: [
	        'assets/js/lines/LineSegmentsGeometry.js',
	        'assets/js/lines/LineGeometry.js',
	        'assets/js/lines/WireframeGeometry2.js',
	        'assets/js/lines/LineMaterial.js',
	        'assets/js/lines/LineSegments2.js',
	        'assets/js/lines/Line2.js',
	        'assets/js/lines/Wireframe.js'
	    ]
	}, {
	    name: 'GLTFExporter',
	    assets: [
	        'assets/js/exporters/GLTFExporter.js'
	    ]
	}, {
	    name: 'OBJExporter',
	    assets: [
	        'assets/js/exporters/OBJExporter.js'
	    ]
	}, {
	    name: 'PLYExporter',
	    assets: [
	        'assets/js/exporters/PLYExporter.js'
	    ]
	}, {
	    name: 'STLBinaryExporter',
	    assets: [
	        'assets/js/exporters/STLBinaryExporter.js'
	    ]
	}, {
	    name: 'STLExporter',
	    assets: [
	        'assets/js/exporters/STLExporter.js'
	    ]
	}, {
	    name: 'MMD',
	    assets: [
	        'assets/js/libs/mmdparser.min.js',
	        'assets/js/loaders/MMDLoader.js',
	        'assets/js/animation/CCDIKSolver.js',
	        'assets/js/animation/MMDPhysics.js',
	        'assets/js/animation/MMDAnimationHelper.js'
	    ]
	}, {
	    name: 'gl-matrix',
	    assets: [
	        'assets/js/libs/gl-matrix.js'
	    ]
	}, {
	    name: 'pako',
	    assets: [
	        'assets/js/libs/pako.js'
	    ]
	}, {
	    name: 'NormalMapShader',
	    assets: [
	        'assets/js/shaders/NormalMapShader.js'
	    ]
	}, {
	    name: 'FXAAShader',
	    assets: [
	        'assets/js/shaders/FXAAShader.js'
	    ]
	}, {
	    name: 'DotScreenShader',
	    assets: [
	        'assets/js/shaders/DotScreenShader.js'
	    ]
	}, {
	    name: 'RGBShiftShader',
	    assets: [
	        'assets/js/shaders/RGBShiftShader.js'
	    ]
	}, {
	    name: 'AfterimageShader',
	    assets: [
	        'assets/js/shaders/AfterimageShader.js'
	    ]
	}, {
	    name: 'BokehShader',
	    assets: [
	        'assets/js/shaders/BokehShader.js'
	    ]
	}, {
	    name: 'DigitalGlitch',
	    assets: [
	        'assets/js/shaders/DigitalGlitch.js'
	    ]
	}, {
	    name: 'HalftoneShader',
	    assets: [
	        'assets/js/shaders/HalftoneShader.js'
	    ]
	}, {
	    name: 'DepthLimitedBlurShader',
	    assets: [
	        'assets/js/shaders/DepthLimitedBlurShader.js'
	    ]
	}, {
	    name: 'UnpackDepthRGBAShader',
	    assets: [
	        'assets/js/shaders/UnpackDepthRGBAShader.js'
	    ]
	}, {
	    name: 'PixelShader',
	    assets: [
	        'assets/js/shaders/PixelShader.js'
	    ]
	}, {
	    name: 'SAOShader',
	    assets: [
	        'assets/js/shaders/SAOShader.js'
	    ]
	}, {
	    name: 'SMAAShader',
	    assets: [
	        'assets/js/shaders/SMAAShader.js'
	    ]
	}, {
	    name: 'SSAOShader',
	    assets: [
	        'assets/js/shaders/SSAOShader.js'
	    ]
	}, {
	    name: 'MaskPass',
	    assets: [
	        'assets/js/postprocessing/MaskPass.js'
	    ]
	}, {
	    name: 'AfterimagePass',
	    assets: [
	        'assets/js/postprocessing/AfterimagePass.js'
	    ]
	}, {
	    name: 'BokehPass',
	    assets: [
	        'assets/js/postprocessing/BokehPass.js'
	    ]
	}, {
	    name: 'GlitchPass',
	    assets: [
	        'assets/js/postprocessing/GlitchPass.js'
	    ]
	}, {
	    name: 'HalftonePass',
	    assets: [
	        'assets/js/postprocessing/HalftonePass.js'
	    ]
	}, {
	    name: 'SSAARenderPass',
	    assets: [
	        'assets/js/postprocessing/SSAARenderPass.js'
	    ]
	}, {
	    name: 'SAOPass',
	    assets: [
	        'assets/js/postprocessing/SAOPass.js'
	    ]
	}, {
	    name: 'SMAAPass',
	    assets: [
	        'assets/js/postprocessing/SMAAPass.js'
	    ]
	}, {
	    name: 'SSAOPass',
	    assets: [
	        'assets/js/postprocessing/SSAOPass.js'
	    ]
	}, {
	    name: 'TAARenderPass',
	    assets: [
	        'assets/js/postprocessing/TAARenderPass.js'
	    ]
	}, {
	    name: 'CopyShader',
	    assets: [
	        'assets/js/shaders/CopyShader.js'
	    ]
	}, {
	    name: 'EffectComposer',
	    assets: [
	        'assets/js/postprocessing/EffectComposer.js'
	    ]
	}, {
	    name: 'RenderPass',
	    assets: [
	        'assets/js/postprocessing/RenderPass.js'
	    ]
	}, {
	    name: 'ShaderPass',
	    assets: [
	        'assets/js/postprocessing/ShaderPass.js'
	    ]
	}, {
	    name: 'OutlinePass',
	    assets: [
	        'assets/js/postprocessing/OutlinePass.js'
	    ]
	}, {
	    name: 'SAOPass',
	    assets: [
	        'assets/js/postprocessing/SAOPass.js'
	    ]
	}, {
	    name: 'SSAOPass',
	    assets: [
	        'assets/js/postprocessing/SSAOPass.js'
	    ]
	}, {
	    name: 'FirstPersonControls',
	    assets: [
	        'assets/js/controls/FirstPersonControls.js'
	    ]
	}, {
	    name: 'FlyControls',
	    assets: [
	        'assets/js/controls/FlyControls.js'
	    ]
	}, {
	    name: 'EditorControls',
	    assets: [
	        'assets/js/controls/EditorControls.js'
	    ]
	}, {
	    name: 'OrbitControls',
	    assets: [
	        'assets/js/controls/OrbitControls.js'
	    ]
	}, {
	    name: 'PointerLockControls',
	    assets: [
	        'assets/js/controls/PointerLockControls.js'
	    ]
	}, {
	    name: 'TrackballControls',
	    assets: [
	        'assets/js/controls/TrackballControls.js'
	    ]
	}, {
	    name: 'TransformControls',
	    assets: [
	        'assets/js/controls/TransformControls.js'
	    ]
	}, {
	    name: 'SPE',
	    assets: [
	        'assets/js/SPE.js'
	    ]
	}, {
	    name: 'VolumetricFire',
	    assets: [
	        'assets/js/VolumetricFire.js'
	    ]
	}];

	/**
	 * CSS下载器
	 * @author tengge / https://github.com/tengge1
	 */
	function CssLoader() {

	}
	CssLoader.prototype.load = function (url) {
	    var head = document.getElementsByTagName('head')[0];
	    var link = document.createElement('link');
	    link.type = 'text/css';
	    link.rel = 'stylesheet';
	    link.href = url;
	    head.appendChild(link);

	    return new Promise(resolve => {
	        link.onload = event => {
	            link.onload = link.onerror = null;
	            resolve(link);
	        };
	        link.onerror = event => {
	            link.onload = link.onerror = null;
	            console.warn(`CssLoader: ${url} loaded failed.`);
	            resolve(null);
	        };
	    });
	};

	/**
	 * JS下载器
	 * @author tengge / https://github.com/tengge1
	 */
	function JsLoader() {
	    this.assets = [];
	}
	JsLoader.prototype.load = function (url) {
	    var data = {
	        url,
	        script: null
	    };
	    this.assets.push(data);
	    return new Promise(resolve => {
	        fetch(url).then(response => {
	            if (response.ok) {
	                response.text().then(text => {
	                    data.script = text;
	                    resolve(data);
	                });
	            } else {
	                console.warn(`JsLoader: ${url} loaded failed.`);
	                resolve(null);
	            }
	        }).catch(() => {
	            console.warn(`JsLoader: ${url} loaded failed.`);
	            resolve(null);
	        });
	    });
	};

	JsLoader.prototype.eval = function () {
	    var eval2 = eval;

	    var script = '';

	    this.assets.forEach(n => {
	        if (n.script) {
	            script += n.script + '\n';
	        }
	    });

	    if (script) {
	        eval2.call(window, script);
	    }
	};

	const loaded = new Map();

	/**
	 * 包管理器
	 * @author tengge / https://github.com/tengge1
	 */
	function PackageManager() {

	}
	/**
	 * 加载包
	 * @param {*} names 包名或包名列表
	 */
	PackageManager.prototype.require = function (names) {
	    names = Array.isArray(names) ? names : [names];

	    var promises = [];

	    names.forEach(n => {
	        if (loaded.has(n) && loaded.get(n).loading === true) {
	            promises.push(loaded.get(n).promise);
	        } else if (!loaded.has(n)) {
	            var promise = Promise.all(promises).then(() => {
	                var packages = PackageList.filter(m => m.name === n);
	                if (packages.length === 0) {
	                    console.warn(`PackageManager: ${n} does not exist.`);
	                    return;
	                } else if (packages.length > 1) {
	                    console.warn(`PackageManager: Package name ${n} duplicated.`);
	                }

	                var assets = [];

	                packages.forEach(m => {
	                    assets.push.apply(assets, m.assets);
	                });

	                return this._load(assets).then(() => {
	                    loaded.set(n, {
	                        loading: false,
	                        loaded: true,
	                        promise: null,
	                    });
	                    return new Promise(resolve => {
	                        resolve();
	                    });
	                });
	            });
	            loaded.set(n, {
	                loading: true,
	                loaded: false,
	                promise: promise,
	            });
	            promises.push(promise);
	        }
	    });

	    return Promise.all(promises);
	};

	PackageManager.prototype._load = function (assets = []) {
	    var cssLoader = new CssLoader();
	    var jsLoader = new JsLoader();

	    var promises = assets.map(n => {
	        if (n.toLowerCase().endsWith('.css')) {
	            return cssLoader.load(n);
	        } else if (n.toLowerCase().endsWith('.js')) {
	            return jsLoader.load(n);
	        } else {
	            console.warn(`PackageManager: unknown assets ${n}.`);
	            return new Promise(resolve => {
	                resolve();
	            });
	        }
	    });

	    return Promise.all(promises).then(() => {
	        jsLoader.eval();
	        return new Promise(resolve => {
	            resolve();
	        });
	    });
	};

	var ID$2 = -1;

	/**
	 * BaseLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function BaseLoader() {
	    this.id = `BaseLoader${ID$2--}`;

	    this.packageManager = new PackageManager();
	    this.require = this.packageManager.require.bind(this.packageManager);
	}

	BaseLoader.prototype.load = function (url, options) {
	    return new Promise(resolve => {
	        resolve(null);
	    });
	};

	/**
	 * AMFLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function AMFLoader() {
	    BaseLoader.call(this);
	}

	AMFLoader.prototype = Object.create(BaseLoader.prototype);
	AMFLoader.prototype.constructor = AMFLoader;

	AMFLoader.prototype.load = function (url) {
	    return new Promise(resolve => {
	        this.require('AMFLoader').then(() => {
	            var loader = new THREE.AMFLoader();
	            loader.load(url, group => {
	                resolve(group);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	/**
	 * AWDLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function AWDLoader() {
	    BaseLoader.call(this);
	}

	AWDLoader.prototype = Object.create(BaseLoader.prototype);
	AWDLoader.prototype.constructor = AWDLoader;

	AWDLoader.prototype.load = function (url) {
	    return new Promise(resolve => {
	        this.require('AWDLoader').then(() => {
	            var loader = new THREE.AWDLoader();

	            loader.load(url, obj3d => {
	                resolve(obj3d);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	/**
	 * BabylonLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function BabylonLoader() {
	    BaseLoader.call(this);
	}

	BabylonLoader.prototype = Object.create(BaseLoader.prototype);
	BabylonLoader.prototype.constructor = BabylonLoader;

	BabylonLoader.prototype.load = function (url) {
	    return new Promise(resolve => {
	        this.require('BabylonLoader').then(() => {
	            var loader = new THREE.BabylonLoader();

	            loader.load(url, scene => {
	                var obj3d = new THREE.Object3D();
	                obj3d.children = scene.children;
	                resolve(obj3d);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	/**
	 * BinaryLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function BinaryLoader() {
	    BaseLoader.call(this);
	}

	BinaryLoader.prototype = Object.create(BaseLoader.prototype);
	BinaryLoader.prototype.constructor = BinaryLoader;

	BinaryLoader.prototype.load = function (url) {
	    return new Promise(resolve => {
	        this.require('BinaryLoader').then(() => {
	            var loader = new THREE.BinaryLoader();

	            loader.load(url, (geometry, materials) => {
	                var mesh = new THREE.Mesh(geometry, materials);
	                resolve(mesh);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	/**
	 * ColladaLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function ColladaLoader() {
	    BaseLoader.call(this);
	}

	ColladaLoader.prototype = Object.create(BaseLoader.prototype);
	ColladaLoader.prototype.constructor = ColladaLoader;

	ColladaLoader.prototype.load = function (url, options) {
	    return new Promise(resolve => {
	        this.require('ColladaLoader').then(() => {
	            var loader = new THREE.ColladaLoader();

	            loader.load(url, collada => {
	                var dae = collada.scene;

	                dae.traverse(child => {
	                    if (child instanceof THREE.Mesh) {
	                        child.material.flatShading = true;
	                    }
	                    if (child.isSkinnedMesh) {
	                        child.frustumCulled = false;
	                    }
	                });

	                if (isNaN(dae.scale.x) || isNaN(dae.scale.y) || isNaN(dae.scale.z)) {
	                    dae.scale.x = dae.scale.y = dae.scale.z = 10.0;
	                    dae.updateMatrix();
	                }

	                Object.assign(dae.userData, {
	                    obj: collada,
	                    root: dae
	                });

	                if (collada.animations && collada.animations.length > 0) {
	                    Object.assign(dae.userData, {
	                        animNames: collada.animations.map(n => n.name),
	                        scripts: [{
	                            id: null,
	                            name: `${options.Name}${L_ANIMATION}`,
	                            type: 'javascript',
	                            source: this.createScripts(options.Name),
	                            uuid: THREE.Math.generateUUID()
	                        }]
	                    });
	                }

	                resolve(dae);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	ColladaLoader.prototype.createScripts = function (name) {
	    return `var mesh = this.getObjectByName('${name}');\n\n` +
	        `var obj = mesh.userData.obj;\n\n` +
	        `var root = mesh.userData.root;\n\n` +
	        `var mixer = new THREE.AnimationMixer(root);\n\n` +
	        `mixer.clipAction(obj.animations[0]).play();\n\n` +
	        `function update(clock, deltaTime) { \n    mixer.update(deltaTime); \n}`;
	};

	/**
	 * CTMLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function CTMLoader() {
	    BaseLoader.call(this);
	}

	CTMLoader.prototype = Object.create(BaseLoader.prototype);
	CTMLoader.prototype.constructor = CTMLoader;

	CTMLoader.prototype.load = function (url) {
	    return new Promise(resolve => {
	        this.require([
	            'lzma',
	            'CTMLoader'
	        ]).then(() => {
	            var loader = new THREE.CTMLoader();

	            loader.load(url, geometry => {
	                var material = new THREE.MeshStandardMaterial();
	                var mesh = new THREE.Mesh(geometry, material);
	                resolve(mesh);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	/**
	 * FBXLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function FBXLoader() {
	    BaseLoader.call(this);
	}

	FBXLoader.prototype = Object.create(BaseLoader.prototype);
	FBXLoader.prototype.constructor = FBXLoader;

	FBXLoader.prototype.load = function (url, options) {
	    return new Promise(resolve => {
	        this.require('FBXLoader').then(() => {
	            var loader = new THREE.FBXLoader();

	            loader.load(url, obj3d => {
	                Object.assign(obj3d.userData, {
	                    obj: obj3d,
	                    root: obj3d,
	                });

	                if (obj3d.animations && obj3d.animations.length > 0) {
	                    Object.assign(obj3d.userData, {
	                        animNames: obj3d.animations.map(n => n.name),
	                        scripts: [{
	                            id: null,
	                            name: `${options.Name}${L_ANIMATION}`,
	                            type: 'javascript',
	                            source: this.createScripts(options.Name),
	                            uuid: THREE.Math.generateUUID()
	                        }]
	                    });
	                }

	                resolve(obj3d);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	FBXLoader.prototype.createScripts = function (name) {
	    return `var mesh = this.getObjectByName('${name}');\n\n` +
	        `var obj = mesh.userData.obj;\n\n` +
	        `var root = mesh.userData.root;\n\n` +
	        `var mixer = new THREE.AnimationMixer(root);\n\n` +
	        `mixer.clipAction(obj.animations[0]).play();\n\n` +
	        `function update(clock, deltaTime) { \n    mixer.update(deltaTime); \n}`;
	};

	/**
	 * GLTFLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function GLTFLoader() {
	    BaseLoader.call(this);
	}

	GLTFLoader.prototype = Object.create(BaseLoader.prototype);
	GLTFLoader.prototype.constructor = GLTFLoader;

	GLTFLoader.prototype.load = function (url, options) {
	    return new Promise(resolve => {
	        this.require([
	            'DRACOLoader',
	            'GLTFLoader'
	        ]).then(() => {
	            var loader = new THREE.GLTFLoader();

	            THREE.DRACOLoader.setDecoderPath('assets/js/libs/draco/gltf/');
	            loader.setDRACOLoader(new THREE.DRACOLoader());

	            loader.load(url, result => {
	                var obj3d = result.scene;

	                Object.assign(obj3d.userData, {
	                    obj: result,
	                    root: result.scene,
	                });

	                if (result.animations && result.animations.length > 0) {
	                    Object.assign(obj3d.userData, {
	                        animNames: result.animations.map(n => n.name),
	                        scripts: [{
	                            id: null,
	                            name: `${options.Name}${L_ANIMATION}`,
	                            type: 'javascript',
	                            source: this.createScripts(options.Name),
	                            uuid: THREE.Math.generateUUID()
	                        }]
	                    });
	                }
	                resolve(obj3d);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	GLTFLoader.prototype.createScripts = function (name) {
	    return `var mesh = this.getObjectByName('${name}');\n\n` +
	        `var obj = mesh.userData.obj;\n\n` +
	        `var root = mesh.userData.root;\n\n` +
	        `var mixer = new THREE.AnimationMixer(root);\n\n` +
	        `mixer.clipAction(obj.animations[0]).play();\n\n` +
	        `function update(clock, deltaTime) { \n    mixer.update(deltaTime); \n}`;
	};

	/**
	 * KMZLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function KMZLoader() {
	    BaseLoader.call(this);
	}

	KMZLoader.prototype = Object.create(BaseLoader.prototype);
	KMZLoader.prototype.constructor = KMZLoader;

	KMZLoader.prototype.load = function (url) {
	    return new Promise(resolve => {
	        this.require([
	            'ColladaLoader',
	            'KMZLoader'
	        ]).then(() => {
	            var loader = new THREE.KMZLoader();

	            loader.load(url, collada => {
	                var obj3d = collada.scene;
	                resolve(obj3d);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	/**
	 * MD2Loader
	 * @author tengge / https://github.com/tengge1
	 */
	function MD2Loader() {
	    BaseLoader.call(this);
	}

	MD2Loader.prototype = Object.create(BaseLoader.prototype);
	MD2Loader.prototype.constructor = MD2Loader;

	MD2Loader.prototype.load = function (url) {
	    return new Promise(resolve => {
	        this.require('MD2Loader').then(() => {
	            var loader = new THREE.MD2Loader();

	            loader.load(url, geometry => {
	                var material = new THREE.MeshStandardMaterial({
	                    morphTargets: true,
	                    morphNormals: true
	                });

	                var mesh = new THREE.Mesh(geometry, material);
	                mesh.mixer = new THREE.AnimationMixer(mesh);

	                resolve(mesh);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	/**
	 * ObjectLoader（json文件加载器）
	 * @author tengge / https://github.com/tengge1
	 */
	function ObjectLoader() {
	    BaseLoader.call(this);
	}

	ObjectLoader.prototype = Object.create(BaseLoader.prototype);
	ObjectLoader.prototype.constructor = ObjectLoader;

	ObjectLoader.prototype.load = function (url, options) {
	    return new Promise(resolve => {
	        this.require([
	            'LegacyJSONLoader'
	        ]).then(() => {
	            var loader = new THREE.ObjectLoader();

	            loader.load(url, obj => {
	                if (obj instanceof THREE.Scene && obj.children.length > 0 && obj.children[0] instanceof THREE.SkinnedMesh) {
	                    resolve(this.loadSkinnedMesh(obj, options));
	                } else {
	                    resolve(obj);
	                }
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	ObjectLoader.prototype.loadSkinnedMesh = function (scene, options) {
	    var mesh = null;

	    scene.traverse(child => {
	        if (child instanceof THREE.SkinnedMesh) {
	            mesh = child;
	        }
	    });

	    var animations = mesh.geometry.animations;

	    if (options.Name && animations && animations.length > 0) {

	        var names = animations.map(n => n.name);

	        var source1 = `var mesh = this.getObjectByName('${options.Name}');\nvar mixer = new THREE.AnimationMixer(mesh);\n\n`;

	        var source2 = ``;

	        names.forEach(n => {
	            source2 += `var ${n}Animation = mixer.clipAction('${n}');\n`;
	        });

	        var source3 = `\n${names[0]}Animation.play();\n\n`;

	        var source4 = `function update(clock, deltaTime) { \n    mixer.update(deltaTime); \n}`;

	        var source = source1 + source2 + source3 + source4;

	        mesh.userData.scripts = [{
	            id: null,
	            name: `${options.Name}${L_ANIMATION}`,
	            type: 'javascript',
	            source: source,
	            uuid: THREE.Math.generateUUID()
	        }];
	    }

	    return mesh;
	};

	/**
	 * OBJLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function OBJLoader() {
	    BaseLoader.call(this);
	}

	OBJLoader.prototype = Object.create(BaseLoader.prototype);
	OBJLoader.prototype.constructor = OBJLoader;

	OBJLoader.prototype.load = function (url) {
	    return new Promise(resolve => {
	        this.require('OBJLoader').then(() => {
	            var loader = new THREE.OBJLoader();

	            loader.load(url, obj => {
	                resolve(obj);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	/**
	 * PLYLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function PLYLoader() {
	    BaseLoader.call(this);
	}

	PLYLoader.prototype = Object.create(BaseLoader.prototype);
	PLYLoader.prototype.constructor = PLYLoader;

	PLYLoader.prototype.load = function (url) {
	    return new Promise(resolve => {
	        this.require('PLYLoader').then(() => {
	            var loader = new THREE.PLYLoader();

	            loader.load(url, geometry => {
	                var material = new THREE.MeshStandardMaterial();
	                var mesh = new THREE.Mesh(geometry, material);
	                resolve(mesh);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	/**
	 * STLLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function STLLoader() {
	    BaseLoader.call(this);
	}

	STLLoader.prototype = Object.create(BaseLoader.prototype);
	STLLoader.prototype.constructor = STLLoader;

	STLLoader.prototype.load = function (url) {
	    return new Promise(resolve => {
	        this.require('STLLoader').then(() => {
	            var loader = new THREE.STLLoader();

	            loader.load(url, geometry => {
	                var material = new THREE.MeshStandardMaterial();
	                var mesh = new THREE.Mesh(geometry, material);
	                resolve(mesh);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	/**
	 * VTKLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function VTKLoader() {
	    BaseLoader.call(this);
	}

	VTKLoader.prototype = Object.create(BaseLoader.prototype);
	VTKLoader.prototype.constructor = VTKLoader;

	VTKLoader.prototype.load = function (url) {
	    return new Promise(resolve => {
	        this.require('VTKLoader').then(() => {
	            var loader = new THREE.VTKLoader();

	            loader.load(url, geometry => {
	                var material = new THREE.MeshStandardMaterial();
	                var mesh = new THREE.Mesh(geometry, material);
	                resolve(mesh);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	/**
	 * @author lolking / http://www.lolking.net/models
	 * @author tengge / https://github.com/tengge1
	 */
	function DataView2(buffer) {
	    this.buffer = new DataView(buffer);
	    this.position = 0;
	}
	DataView2.prototype.getBool = function () {
	    var v = this.buffer.getUint8(this.position) != 0;
	    this.position += 1;
	    return v
	};

	DataView2.prototype.getUint8 = function () {
	    var v = this.buffer.getUint8(this.position);
	    this.position += 1;
	    return v
	};

	DataView2.prototype.getInt8 = function () {
	    var v = this.buffer.getInt8(this.position);
	    this.position += 1;
	    return v
	};

	DataView2.prototype.getUint16 = function () {
	    var v = this.buffer.getUint16(this.position, true);
	    this.position += 2;
	    return v
	};

	DataView2.prototype.getInt16 = function () {
	    var v = this.buffer.getInt16(this.position, true);
	    this.position += 2;
	    return v
	};

	DataView2.prototype.getUint32 = function () {
	    var v = this.buffer.getUint32(this.position, true);
	    this.position += 4;
	    return v
	};

	DataView2.prototype.getInt32 = function () {
	    var v = this.buffer.getInt32(this.position, true);
	    this.position += 4;
	    return v
	};

	DataView2.prototype.getFloat = function () {
	    var v = this.buffer.getFloat32(this.position, true);
	    this.position += 4;
	    return v
	};

	DataView2.prototype.getString = function (len) {
	    if (len === undefined) len = this.getUint16();
	    var str = "";
	    for (var i = 0; i < len; ++i) {
	        str += String.fromCharCode(this.getUint8());
	    }
	    return str
	};

	DataView2.prototype.setBool = function (v) {
	    this.buffer.setUint8(this.position, v ? 1 : 0);
	    this.position += 1;
	};

	DataView2.prototype.setUint8 = function (v) {
	    this.buffer.setUint8(this.position, v);
	    this.position += 1;
	};

	DataView2.prototype.setInt8 = function (v) {
	    this.buffer.setInt8(this.position, v);
	    this.position += 1;
	};

	DataView2.prototype.setUint16 = function (v) {
	    this.buffer.setUint16(this.position, v, true);
	    this.position += 2;
	};

	DataView2.prototype.setInt16 = function (v) {
	    this.buffer.setInt16(this.position, v, true);
	    this.position += 2;
	};

	DataView2.prototype.setUint32 = function (v) {
	    this.buffer.setUint32(this.position, v, true);
	    this.position += 4;
	};

	DataView2.prototype.setInt32 = function (v) {
	    this.buffer.setInt32(this.position, v, true);
	    this.position += 4;
	};

	DataView2.prototype.setFloat = function (v) {
	    this.buffer.setFloat32(this.position, v, true);
	    this.position += 4;
	};

	/**
	 * @author lolking / http://www.lolking.net/models
	 * @author tengge / https://github.com/tengge1
	 */
	function Vertex(r) {
	    var self = this,
	        i;
	    self.position = [r.getFloat(), r.getFloat(), r.getFloat()];
	    self.normal = [r.getFloat(), r.getFloat(), r.getFloat(), 0];
	    self.u = r.getFloat();
	    self.v = r.getFloat();
	    self.bones = new Array(4);
	    for (i = 0; i < 4; ++i) {
	        self.bones[i] = r.getUint8();
	    }
	    self.weights = new Array(4);
	    for (i = 0; i < 4; ++i) {
	        self.weights[i] = r.getFloat();
	    }
	}

	/**
	 * @author lolking / http://www.lolking.net/models
	 * @author tengge / https://github.com/tengge1
	 */
	function Texture$1(model, url) {
	    var self = this;
	    self.model = model;
	    self.url = url;
	    self.texture = null;
	    self.load();
	}
	Texture$1.prototype.load = function () {
	    var self = this;

	    self.texture = new THREE.TextureLoader().load(self.url, function (texture) {
	        self.onLoad.call(self, texture);
	    });
	};

	Texture$1.prototype.onLoad = function (texture) {
	    var self = this;
	    texture.flipY = false;
	    self.model.material.map = texture;
	    self.model.material.needsUpdate = true;

	    self.model.dispatch.call('loadTexture');
	};

	/**
	 * @author lolking / http://www.lolking.net/models
	 * @author tengge / https://github.com/tengge1
	 */
	function Bone(model, index, r) {
	    var self = this,
	        i;
	    self.model = model;
	    self.index = index;
	    self.name = r.getString().toLowerCase();
	    self.parent = r.getInt32();
	    self.scale = r.getFloat();
	    self.origMatrix = mat4.create();
	    for (i = 0; i < 16; ++i) self.origMatrix[i] = r.getFloat();
	    self.baseMatrix = mat4.clone(self.origMatrix);
	    mat4.transpose(self.baseMatrix, self.baseMatrix);
	    mat4.invert(self.baseMatrix, self.baseMatrix);
	    mat4.transpose(self.origMatrix, self.origMatrix);
	    self.incrMatrix = mat4.create();
	    if (model.version >= 2) {
	        for (i = 0; i < 16; ++i) self.incrMatrix[i] = r.getFloat();
	        mat4.transpose(self.incrMatrix, self.incrMatrix);
	    } else {
	        mat4.identity(self.incrMatrix);
	    }
	}

	/**
	 * @author lolking / http://www.lolking.net/models
	 * @author tengge / https://github.com/tengge1
	 */
	var HiddenBones = {
	    12: {
	        9: {
	            recall: {},
	            all: {
	                recall_chair: true
	            }
	        },
	        10: {
	            recall: {
	                cowbell: true,
	                stick: true
	            },
	            dancein: {
	                cata_root: true,
	                catb_root: true,
	                catc_root: true,
	                cork: true,
	                bowl: true,
	                bowl_milk: true,
	                milk_root: true,
	                bottle: true
	            },
	            danceloop: {
	                cata_root: true,
	                catb_root: true,
	                catc_root: true,
	                cork: true,
	                bowl: true,
	                bowl_milk: true,
	                milk_root: true,
	                bottle: true
	            },
	            all: {}
	        },
	        11: {
	            recall: {
	                cowbell: true,
	                stick: true
	            },
	            dancein: {
	                cata_root: true,
	                catb_root: true,
	                catc_root: true,
	                cork: true,
	                bowl: true,
	                bowl_milk: true,
	                milk_root: true,
	                bottle: true
	            },
	            danceloop: {
	                cata_root: true,
	                catb_root: true,
	                catc_root: true,
	                cork: true,
	                bowl: true,
	                bowl_milk: true,
	                milk_root: true,
	                bottle: true
	            },
	            all: {}
	        },
	        12: {
	            recall: {
	                cowbell: true,
	                stick: true
	            },
	            dancein: {
	                cata_root: true,
	                catb_root: true,
	                catc_root: true,
	                cork: true,
	                bowl: true,
	                bowl_milk: true,
	                milk_root: true,
	                bottle: true
	            },
	            danceloop: {
	                cata_root: true,
	                catb_root: true,
	                catc_root: true,
	                cork: true,
	                bowl: true,
	                bowl_milk: true,
	                milk_root: true,
	                bottle: true
	            },
	            all: {}
	        },
	        13: {
	            recall: {
	                cowbell: true,
	                stick: true
	            },
	            dancein: {
	                cata_root: true,
	                catb_root: true,
	                catc_root: true,
	                cork: true,
	                bowl: true,
	                bowl_milk: true,
	                milk_root: true,
	                bottle: true
	            },
	            danceloop: {
	                cata_root: true,
	                catb_root: true,
	                catc_root: true,
	                cork: true,
	                bowl: true,
	                bowl_milk: true,
	                milk_root: true,
	                bottle: true
	            },
	            all: {}
	        },
	        14: {
	            recall: {
	                cowbell: true,
	                stick: true
	            },
	            dancein: {
	                cata_root: true,
	                catb_root: true,
	                catc_root: true,
	                cork: true,
	                bowl: true,
	                bowl_milk: true,
	                milk_root: true,
	                bottle: true
	            },
	            danceloop: {
	                cata_root: true,
	                catb_root: true,
	                catc_root: true,
	                cork: true,
	                bowl: true,
	                bowl_milk: true,
	                milk_root: true,
	                bottle: true
	            },
	            all: {}
	        },
	        15: {
	            recall: {
	                cowbell: true,
	                stick: true
	            },
	            dancein: {
	                cata_root: true,
	                catb_root: true,
	                catc_root: true,
	                cork: true,
	                bowl: true,
	                bowl_milk: true,
	                milk_root: true,
	                bottle: true
	            },
	            danceloop: {
	                cata_root: true,
	                catb_root: true,
	                catc_root: true,
	                cork: true,
	                bowl: true,
	                bowl_milk: true,
	                milk_root: true,
	                bottle: true
	            },
	            all: {}
	        },
	        16: {
	            recall: {
	                cowbell: true,
	                stick: true
	            },
	            dancein: {
	                cata_root: true,
	                catb_root: true,
	                catc_root: true,
	                cork: true,
	                bowl: true,
	                bowl_milk: true,
	                milk_root: true,
	                bottle: true
	            },
	            danceloop: {
	                cata_root: true,
	                catb_root: true,
	                catc_root: true,
	                cork: true,
	                bowl: true,
	                bowl_milk: true,
	                milk_root: true,
	                bottle: true
	            },
	            all: {}
	        },
	        17: {
	            recall: {
	                cowbell: true,
	                stick: true
	            },
	            dancein: {
	                cata_root: true,
	                catb_root: true,
	                catc_root: true,
	                cork: true,
	                bowl: true,
	                bowl_milk: true,
	                milk_root: true,
	                bottle: true
	            },
	            danceloop: {
	                cata_root: true,
	                catb_root: true,
	                catc_root: true,
	                cork: true,
	                bowl: true,
	                bowl_milk: true,
	                milk_root: true,
	                bottle: true
	            },
	            all: {}
	        },
	        18: {
	            recall: {
	                cowbell: true,
	                stick: true
	            },
	            dancein: {
	                cata_root: true,
	                catb_root: true,
	                catc_root: true,
	                cork: true,
	                bowl: true,
	                bowl_milk: true,
	                milk_root: true,
	                bottle: true
	            },
	            danceloop: {
	                cata_root: true,
	                catb_root: true,
	                catc_root: true,
	                cork: true,
	                bowl: true,
	                bowl_milk: true,
	                milk_root: true,
	                bottle: true
	            },
	            all: {}
	        }
	    },
	    21: {
	        9: {
	            all: {
	                orange: true
	            },
	            recall: {
	                l_weapon: true,
	                r_weapon: true
	            }
	        },
	        10: {
	            recall: {},
	            all: {
	                tv_joint: true,
	                tv_rabit_ears_joints: true
	            }
	        },
	        11: {
	            recall: {},
	            all: {
	                tv_joint: true,
	                tv_rabit_ears_joints: true
	            }
	        },
	        12: {
	            recall: {},
	            all: {
	                tv_joint: true,
	                tv_rabit_ears_joints: true
	            }
	        },
	        13: {
	            recall: {},
	            all: {
	                tv_joint: true,
	                tv_rabit_ears_joints: true
	            }
	        },
	        14: {
	            recall: {},
	            all: {
	                tv_joint: true,
	                tv_rabit_ears_joints: true
	            }
	        }
	    },
	    22: {
	        8: {
	            all: {
	                c_drone_base: true
	            },
	            joke: {},
	            dance: {}
	        }
	    },
	    36: {
	        9: {
	            all: {
	                recall_chair: true
	            },
	            recall: {}
	        }
	    },
	    41: {
	        0: {
	            all: {
	                orange1: true,
	                orange2: true,
	                orange3: true
	            },
	            joke: {}
	        },
	        1: {
	            all: {
	                orange1: true,
	                orange2: true,
	                orange3: true
	            },
	            joke: {}
	        },
	        2: {
	            all: {
	                orange1: true,
	                orange2: true,
	                orange3: true
	            },
	            joke: {}
	        },
	        3: {
	            all: {
	                orange1: true,
	                orange2: true,
	                orange3: true
	            },
	            joke: {}
	        },
	        4: {
	            all: {
	                orange1: true,
	                orange2: true,
	                orange3: true
	            },
	            joke: {}
	        },
	        5: {
	            all: {
	                orange1: true,
	                orange2: true,
	                orange3: true
	            },
	            joke: {}
	        },
	        6: {
	            all: {
	                orange1: true,
	                orange2: true,
	                orange3: true
	            },
	            joke: {}
	        },
	        7: {
	            all: {
	                orange1: true,
	                orange2: true,
	                orange3: true
	            },
	            joke: {}
	        }
	    },
	    44: {
	        4: {
	            all: {
	                jacket: true
	            },
	            dance: {
	                jacket: true,
	                weapon: true
	            },
	            recall: {
	                weapon: true
	            }
	        }
	    },
	    55: {
	        7: {
	            recall: {},
	            all: {
	                xmas_pole_skin07: true
	            }
	        }
	    },
	    61: {
	        7: {
	            recall: {},
	            all: {
	                planet1: true,
	                planet2: true,
	                planet3: true,
	                planet4: true,
	                planet5: true,
	                planet6: true
	            }
	        }
	    },
	    69: {
	        4: {
	            all: {
	                l_fan: true,
	                r_fan: true
	            },
	            recall: {}
	        }
	    },
	    80: {
	        8: {
	            all: {
	                oven: true
	            },
	            recall: {}
	        }
	    },
	    83: {
	        0: {
	            all: {},
	            idle2: {
	                weapon: true
	            }
	        },
	        1: {
	            all: {},
	            idle2: {
	                weapon: true
	            }
	        },
	        2: {
	            all: {},
	            idle2: {
	                weapon: true
	            }
	        }
	    },
	    103: {
	        7: {
	            recall: {},
	            all: {
	                arcade: true
	            }
	        }
	    },
	    114: {
	        5: {
	            all: {
	                weapon_krab: true,
	                root_krab: true
	            },
	            recall: {}
	        }
	    },
	    115: {
	        4: {
	            all: {
	                sled: true
	            },
	            satcheljump: {
	                bomb: true,
	                bomb_b: true
	            }
	        }
	    },
	    119: {
	        4: {
	            all: {
	                chair_root: true,
	                sun_reflector_root: true
	            },
	            recall: {}
	        }
	    },
	    136: {
	        0: {
	            all: {
	                shades_sunglass: true
	            },
	            joke: {}
	        },
	        1: {
	            all: {
	                shades_sunglass: true
	            },
	            joke: {}
	        }
	    },
	    143: {
	        4: {
	            attack1: {
	                r_wing: true,
	                l_wing: true
	            },
	            attack2: {
	                r_wing: true,
	                l_wing: true
	            },
	            dance: {
	                r_wing: true,
	                l_wing: true
	            },
	            idle1: {
	                r_wing: true,
	                l_wing: true
	            },
	            idle3: {
	                r_wing: true,
	                l_wing: true
	            },
	            idle4: {
	                r_wing: true,
	                l_wing: true
	            },
	            laugh: {
	                r_wing: true,
	                l_wing: true
	            },
	            run: {
	                r_wing: true,
	                l_wing: true
	            },
	            spell2: {
	                r_wing: true,
	                l_wing: true
	            },
	            all: {}
	        }
	    },
	    157: {
	        4: {
	            all: {
	                flute: true
	            },
	            dance: {}
	        },
	        5: {
	            all: {
	                flute: true
	            },
	            dance: {}
	        },
	        6: {
	            all: {
	                flute: true
	            },
	            dance: {}
	        },
	        7: {
	            all: {
	                flute: true
	            },
	            dance: {}
	        },
	        8: {
	            all: {
	                flute: true
	            },
	            dance: {}
	        }
	    },
	    201: {
	        3: {
	            all: {
	                poro: true
	            }
	        }
	    },
	    222: {
	        4: {
	            all: {
	                rocket_launcher: true
	            },
	            r_attack1: {},
	            r_attack2: {},
	            r_idle1: {},
	            r_idle_in: {},
	            r_run: {},
	            r_run_fast: {},
	            r_run_haste: {},
	            r_spell2: {},
	            r_spell3: {},
	            r_spell3_run: {},
	            r_spell4: {},
	            respawn_trans_rlauncher: {},
	            rlauncher_spell3: {},
	            spell1a: {}
	        }
	    },
	    238: {
	        10: {
	            all: {
	                chair_skin10: true,
	                step1_skin10: true,
	                step2_skin10: true
	            },
	            recall: {}
	        }
	    },
	    245: {
	        0: {
	            deathrespawn: {},
	            all: {
	                book_pen: true
	            }
	        },
	        1: {
	            deathrespawn: {},
	            all: {
	                book_pen: true
	            }
	        },
	        2: {
	            deathrespawn: {},
	            all: {
	                book_pen: true
	            }
	        },
	        3: {
	            deathrespawn: {},
	            all: {
	                book_pen: true
	            }
	        },
	        4: {
	            deathrespawn: {},
	            all: {
	                book_pen: true
	            }
	        },
	        5: {
	            deathrespawn: {},
	            all: {
	                book_pen: true
	            }
	        },
	        6: {
	            deathrespawn: {},
	            all: {
	                book_pen: true
	            }
	        },
	        7: {
	            deathrespawn: {},
	            all: {
	                book_pen: true
	            }
	        },
	        8: {
	            deathrespawn: {},
	            all: {
	                book_pen: true
	            }
	        },
	        9: {
	            deathrespawn: {},
	            all: {
	                book_pen: true
	            }
	        },
	        10: {
	            deathrespawn: {},
	            all: {
	                book_pen: true
	            }
	        }
	    },
	    254: {
	        0: {
	            all: {
	                teacup: true
	            },
	            taunt2: {}
	        },
	        1: {
	            all: {
	                teacup: true
	            },
	            taunt2: {}
	        },
	        3: {
	            all: {
	                teacup: true
	            },
	            taunt2: {}
	        },
	        4: {
	            all: {
	                teacup: true
	            },
	            taunt2: {}
	        }
	    },
	    412: {
	        1: {
	            all: {
	                coin1: true,
	                coin2: true,
	                coin3: true,
	                coin4: true,
	                coin5: true,
	                coin6: true,
	                coin7: true,
	                treasure_chest: true,
	                treasure_chest_cover: true,
	                tire: true
	            },
	            recall: {
	                tire: true
	            },
	            undersea_recall_loop: {
	                tire: true
	            },
	            undersea_recall_loop2: {
	                coin1: true,
	                coin2: true,
	                coin3: true,
	                coin4: true,
	                coin5: true,
	                coin6: true,
	                coin7: true,
	                treasure_chest: true,
	                treasure_chest_cover: true
	            },
	            undersea_recall_windup: {
	                tire: true
	            },
	            undersea_recall_windup2: {
	                coin1: true,
	                coin2: true,
	                coin3: true,
	                coin4: true,
	                coin5: true,
	                coin6: true,
	                coin7: true,
	                treasure_chest: true,
	                treasure_chest_cover: true
	            }
	        },
	        5: {
	            all: {
	                mini_root: true
	            },
	            joke: {}
	        }
	    },
	    420: {
	        0: {
	            all: {
	                c_tentacle1: true
	            }
	        },
	        1: {
	            all: {
	                c_tentacle1: true
	            }
	        }
	    },
	    429: {
	        3: {
	            death: {
	                altar_spear: true,
	                buffbone_cstm_back_spear1: true,
	                buffbone_cstm_back_spear2: true,
	                buffbone_cstm_back_spear3: true
	            }
	        }
	    },
	    432: {
	        0: {
	            all: {
	                follower_root: true
	            },
	            dance: {}
	        },
	        2: {
	            all: {
	                follower_root: true
	            },
	            dance: {}
	        },
	        3: {
	            all: {
	                follower_root: true
	            },
	            dance: {}
	        },
	        4: {
	            all: {
	                follower_root: true
	            },
	            dance: {}
	        }
	    },
	    gnarbig: {
	        0: {
	            all: {
	                rock: true
	            },
	            spell1: {},
	            laugh: {}
	        },
	        1: {
	            all: {
	                rock: true
	            },
	            spell1: {},
	            laugh: {}
	        },
	        2: {
	            all: {
	                rock: true,
	                cane_bot: true,
	                cane_top: true
	            },
	            spell1: {
	                cane_bot: true,
	                cane_top: true
	            },
	            laugh: {
	                cane_bot: true,
	                cane_top: true
	            },
	            recall: {
	                rock: true
	            }
	        },
	        3: {
	            all: {
	                rock: true
	            },
	            spell1: {},
	            laugh: {}
	        },
	        4: {
	            all: {
	                rock: true
	            },
	            spell1: {},
	            laugh: {}
	        },
	        5: {
	            all: {
	                rock: true
	            },
	            spell1: {},
	            laugh: {}
	        },
	        6: {
	            all: {
	                rock: true
	            },
	            spell1: {},
	            laugh: {}
	        },
	        7: {
	            all: {
	                rock: true
	            },
	            spell1: {},
	            laugh: {}
	        },
	        8: {
	            all: {
	                rock: true
	            },
	            spell1: {},
	            laugh: {}
	        },
	        9: {
	            all: {
	                rock: true
	            },
	            spell1: {},
	            laugh: {}
	        },
	        10: {
	            all: {
	                rock: true
	            },
	            spell1: {},
	            laugh: {}
	        },
	        11: {
	            all: {
	                rock: true
	            },
	            spell1: {},
	            laugh: {}
	        },
	        12: {
	            all: {
	                rock: true
	            },
	            spell1: {},
	            laugh: {}
	        }
	    }
	};

	/**
	 * @author lolking / http://www.lolking.net/models
	 * @author tengge / https://github.com/tengge1
	 */
	function AnimationBone(model, anim, r, version) {
	    var self = this;
	    self.model = model;
	    self.anim = anim;
	    var numFrames = r.getUint32();
	    self.bone = r.getString().toLowerCase();
	    self.flags = r.getUint32();
	    self.frames = new Array(numFrames);
	    var scale = [1, 1, 1];
	    for (var i = 0; i < numFrames; ++i) {
	        var pos = [r.getFloat(), r.getFloat(), r.getFloat()];
	        var rot = [r.getFloat(), r.getFloat(), r.getFloat(), r.getFloat()];
	        if (version >= 3) scale = [r.getFloat(), r.getFloat(), r.getFloat()];
	        self.frames[i] = {
	            pos: pos,
	            rot: rot,
	            scale: scale
	        };
	    }
	    self.matrix = mat4.create();
	    self.tmpMat = mat4.create();
	    self.tmpMat2 = mat4.create();
	    self.tmpPos = vec3.create();
	    self.tmpRot = quat.create();
	    self.tmpScale = vec3.create();
	}
	AnimationBone.prototype.update = function (boneId, frame, r) {
	    var self = this;
	    self.index = boneId;
	    var parent = self.model.bones[boneId].parent;
	    var f0 = frame % self.frames.length,
	        f1 = (frame + 1) % self.frames.length;
	    vec3.lerp(self.tmpPos, self.frames[f0].pos, self.frames[f1].pos, r);
	    vec3.lerp(self.tmpScale, self.frames[f0].scale, self.frames[f1].scale, r);
	    quat.slerp(self.tmpRot, self.frames[f0].rot, self.frames[f1].rot, r);
	    self.translation(self.tmpMat2, self.tmpPos);
	    self.rotationQuat(self.tmpMat, self.tmpRot);
	    self.mulSlimDX(self.matrix, self.tmpMat, self.tmpMat2);
	    if (parent != -1) {
	        self.mulSlimDX(self.matrix, self.matrix, self.model.transforms[parent]);
	    }
	    mat4.copy(self.model.transforms[boneId], self.matrix);
	};

	AnimationBone.prototype.translation = function (out, vec) {
	    mat4.identity(out);
	    out[12] = vec[0];
	    out[13] = vec[1];
	    out[14] = vec[2];
	    return out
	};

	AnimationBone.prototype.rotationQuat = function (out, q) {
	    mat4.identity(out);
	    var xx = q[0] * q[0],
	        yy = q[1] * q[1],
	        zz = q[2] * q[2],
	        xy = q[0] * q[1],
	        zw = q[2] * q[3],
	        zx = q[2] * q[0],
	        yw = q[1] * q[3],
	        yz = q[1] * q[2],
	        xw = q[0] * q[3];
	    out[0] = 1 - 2 * (yy + zz);
	    out[1] = 2 * (xy + zw);
	    out[2] = 2 * (zx - yw);
	    out[4] = 2 * (xy - zw);
	    out[5] = 1 - 2 * (zz + xx);
	    out[6] = 2 * (yz + xw);
	    out[8] = 2 * (zx + yw);
	    out[9] = 2 * (yz - xw);
	    out[10] = 1 - 2 * (yy + xx);
	    return out
	};

	AnimationBone.prototype.mulSlimDX = function (out, l, r) {
	    var left = {
	        M11: l[0],
	        M12: l[1],
	        M13: l[2],
	        M14: l[3],
	        M21: l[4],
	        M22: l[5],
	        M23: l[6],
	        M24: l[7],
	        M31: l[8],
	        M32: l[9],
	        M33: l[10],
	        M34: l[11],
	        M41: l[12],
	        M42: l[13],
	        M43: l[14],
	        M44: l[15]
	    };
	    var right = {
	        M11: r[0],
	        M12: r[1],
	        M13: r[2],
	        M14: r[3],
	        M21: r[4],
	        M22: r[5],
	        M23: r[6],
	        M24: r[7],
	        M31: r[8],
	        M32: r[9],
	        M33: r[10],
	        M34: r[11],
	        M41: r[12],
	        M42: r[13],
	        M43: r[14],
	        M44: r[15]
	    };
	    out[0] = left.M11 * right.M11 + left.M12 * right.M21 + left.M13 * right.M31 + left.M14 * right.M41;
	    out[1] = left.M11 * right.M12 + left.M12 * right.M22 + left.M13 * right.M32 + left.M14 * right.M42;
	    out[2] = left.M11 * right.M13 + left.M12 * right.M23 + left.M13 * right.M33 + left.M14 * right.M43;
	    out[3] = left.M11 * right.M14 + left.M12 * right.M24 + left.M13 * right.M34 + left.M14 * right.M44;
	    out[4] = left.M21 * right.M11 + left.M22 * right.M21 + left.M23 * right.M31 + left.M24 * right.M41;
	    out[5] = left.M21 * right.M12 + left.M22 * right.M22 + left.M23 * right.M32 + left.M24 * right.M42;
	    out[6] = left.M21 * right.M13 + left.M22 * right.M23 + left.M23 * right.M33 + left.M24 * right.M43;
	    out[7] = left.M21 * right.M14 + left.M22 * right.M24 + left.M23 * right.M34 + left.M24 * right.M44;
	    out[8] = left.M31 * right.M11 + left.M32 * right.M21 + left.M33 * right.M31 + left.M34 * right.M41;
	    out[9] = left.M31 * right.M12 + left.M32 * right.M22 + left.M33 * right.M32 + left.M34 * right.M42;
	    out[10] = left.M31 * right.M13 + left.M32 * right.M23 + left.M33 * right.M33 + left.M34 * right.M43;
	    out[11] = left.M31 * right.M14 + left.M32 * right.M24 + left.M33 * right.M34 + left.M34 * right.M44;
	    out[12] = left.M41 * right.M11 + left.M42 * right.M21 + left.M43 * right.M31 + left.M44 * right.M41;
	    out[13] = left.M41 * right.M12 + left.M42 * right.M22 + left.M43 * right.M32 + left.M44 * right.M42;
	    out[14] = left.M41 * right.M13 + left.M42 * right.M23 + left.M43 * right.M33 + left.M44 * right.M43;
	    out[15] = left.M41 * right.M14 + left.M42 * right.M24 + left.M43 * right.M34 + left.M44 * right.M44;
	    return out
	};

	/**
	 * @author lolking / http://www.lolking.net/models
	 * @author tengge / https://github.com/tengge1
	 */
	function Animation(model, r, version) {
	    var self = this,
	        i;
	    self.model = model;
	    self.meshOverride = {};
	    self.name = r.getString().toLowerCase();
	    self.fps = r.getInt32();
	    var numBones = r.getUint32();
	    self.bones = new Array(numBones);
	    self.lookup = {};
	    for (i = 0; i < numBones; ++i) {
	        self.bones[i] = new AnimationBone(model, self, r, version);
	        self.lookup[self.bones[i].bone] = i;
	    }
	    if (numBones == 0 || self.fps <= 1) {
	        self.duration = 1e3;
	    } else {
	        self.duration = Math.floor(1e3 * (self.bones[0].frames.length / self.fps));
	    }
	}

	/**
	 * @author lolking / http://www.lolking.net/models
	 * @author tengge / https://github.com/tengge1
	 */
	var BaseAnimations = {
	    19: {
	        0: {
	            all: "idle"
	        }
	    },
	    32: {
	        4: {
	            all: "idle1_bow",
	            idle1_bow: "idle1"
	        }
	    },
	    55: {
	        7: {
	            idle1_candycane_below: "idle1"
	        }
	    }
	};

	/**
	 * @author lolking / http://www.lolking.net/models
	 * @author tengge / https://github.com/tengge1
	 */
	function Model(options) {
	    var self = this;
	    self.champion = options.champion || "1";
	    self.skin = options.skin || 0;
	    self.meshUrl = options.meshUrl;
	    self.animUrl = options.animUrl;
	    self.textureUrl = options.textureUrl;

	    self.loaded = false;
	    self.animsLoaded = false;

	    self.meshes = null;
	    self.vertices = null;
	    self.indices = null;
	    self.transforms = null;
	    self.bones = null;
	    self.boneLookup = {};
	    self.animIndex = -1;
	    self.animName = null;
	    self.baseAnim = null;
	    self.newAnimation = false;
	    self.animTime = 0;
	    self.tmpMat = mat4.create();
	    self.tmpVec = vec4.create();
	    self.ANIMATED = true;

	    self.dispatch = d3.dispatch('load', 'loadMesh', 'loadTexture', 'loadAnim');

	    self.hiddenBones = null;
	    var hiddenBones = HiddenBones;
	    if (hiddenBones[self.champion] !== undefined) {
	        if (hiddenBones[self.champion][self.skin] !== undefined) {
	            self.hiddenBones = hiddenBones[self.champion][self.skin];
	        }
	    }

	    self.ambientColor = [.35, .35, .35, 1];
	    self.primaryColor = [1, 1, 1, 1];
	    self.secondaryColor = [.35, .35, .35, 1];
	    self.lightDir1 = vec3.create();
	    self.lightDir2 = vec3.create();
	    self.lightDir3 = vec3.create();
	    vec3.normalize(self.lightDir1, [5, 5, -5]);
	    vec3.normalize(self.lightDir2, [5, 5, 5]);
	    vec3.normalize(self.lightDir3, [-5, -5, -5]);

	    self.texture = null;
	    self.geometry = new THREE.BufferGeometry();
	    self.material = new THREE.MeshPhongMaterial();

	    var promise1 = new Promise(resolve => {
	        self.dispatch.on('loadMesh.Model', () => {
	            resolve();
	        });
	    });
	    var promise2 = new Promise(resolve => {
	        self.dispatch.on('loadTexture.Model', () => {
	            resolve();
	        });
	    });
	    var promise3 = new Promise(resolve => {
	        self.dispatch.on('loadAnim.Model', () => {
	            resolve();
	        });
	    });
	    Promise.all([promise1, promise2, promise3]).then(() => {
	        self.dispatch.call('load');
	    });
	}
	Model.prototype.getAnimations = function () {
	    if (!this.animations) {
	        return null;
	    }
	    var names = [];
	    this.animations.forEach(function (n) {
	        names.push(n.name);
	    });
	    return names;
	};

	Model.prototype.getAnimation = function (name) {
	    var self = this,
	        i, animIndex = -1;
	    if (!self.animations) {
	        return animIndex
	    }    name = name.toLowerCase();
	    if (name == "idle" || name == "attack") {
	        var anims = [],
	            re = new RegExp(name + "[0-9]*");
	        for (i = 0; i < self.animations.length; ++i) {
	            if (self.animations[i].name.search(re) == 0) anims.push(i);
	        }
	        if (anims.length > 0) {
	            animIndex = anims[0];
	        }
	    } else {
	        for (i = 0; i < self.animations.length; ++i) {
	            if (self.animations[i].name == name) {
	                animIndex = i;
	                break
	            }
	        }
	    }
	    return animIndex
	};

	Model.prototype.setAnimation = function (name) {
	    var self = this;
	    self.animName = name;
	    self.newAnimation = true;
	};

	Model.prototype.update = function (time) {
	    var self = this,
	        i, j;

	    if (self.animTime == 0) {
	        self.animTime = time;
	    }

	    if (!self.loaded || !self.vertices || !self.animations || self.animations.length == 0) {
	        return;
	    }

	    self.animIndex = self.getAnimation(self.animName);
	    if (self.animIndex == -1) {
	        self.animIndex = 0;
	        self.animName = "idle";
	    }
	    var baseAnims = BaseAnimations;
	    if (baseAnims[self.champion] !== undefined) {
	        if (baseAnims[self.champion][self.skin] !== undefined) {
	            var baseAnim = baseAnims[self.champion][self.skin],
	                baseIndex = -1;

	            if (baseAnim[self.animations[self.animIndex].name]) {
	                baseIndex = self.getAnimation(baseAnim[self.animations[self.animIndex].name]);
	            } else if (baseAnim["all"]) {
	                baseIndex = self.getAnimation(baseAnim["all"]);
	            }

	            if (baseIndex > -1) {
	                self.baseAnim = self.animations[baseIndex];
	            } else {
	                self.baseAnim = null;
	            }
	        }
	    }

	    var deltaTime = time - self.animTime;
	    var anim = self.animations[self.animIndex];

	    if (deltaTime >= anim.duration) {
	        self.animTime = time;
	        deltaTime = 0;
	    }

	    if (self.ANIMATED) {
	        var timePerFrame = 1e3 / anim.fps;
	        var frame = Math.floor(deltaTime / timePerFrame);
	        var r = deltaTime % timePerFrame / timePerFrame;
	        var hiddenBones = {};
	        if (self.hiddenBones) {
	            if (self.hiddenBones[anim.name]) {
	                hiddenBones = self.hiddenBones[anim.name];
	            } else if (self.hiddenBones["all"]) {
	                hiddenBones = self.hiddenBones["all"];
	            }
	        }
	        var b;
	        if (self.version >= 1) {
	            for (i = 0; i < self.bones.length; ++i) {
	                b = self.bones[i];
	                if (hiddenBones[b.name]) {
	                    mat4.identity(self.tmpMat);
	                    mat4.scale(self.tmpMat, self.tmpMat, vec3.set(self.tmpVec, 0, 0, 0));
	                    mat4.copy(self.transforms[i], self.tmpMat);
	                } else if (anim.lookup[b.name] !== undefined) {
	                    anim.bones[anim.lookup[b.name]].update(i, frame, r);
	                } else if (self.baseAnim && self.baseAnim.lookup[b.name] !== undefined) {
	                    self.baseAnim.bones[self.baseAnim.lookup[b.name]].update(i, frame, r);
	                } else {
	                    if (b.parent != -1) {
	                        AnimationBone.prototype.mulSlimDX(self.transforms[i], b.incrMatrix, self.transforms[b.parent]);
	                    } else {
	                        mat4.copy(self.transforms[i], b.incrMatrix);
	                    }
	                }
	            }
	        } else {
	            for (i = 0; i < anim.bones.length; ++i) {
	                b = anim.bones[i];
	                if (self.boneLookup[b.bone] !== undefined) {
	                    b.update(self.boneLookup[b.bone], frame, r);
	                } else {
	                    var parentBone = anim.bones[i - 1];
	                    if (!parentBone) continue;
	                    if (parentBone.index + 1 < self.transforms.length) {
	                        mat4.copy(self.transforms[parentBone.index + 1], self.transforms[parentBone.index]);
	                    }
	                    b.index = parentBone.index + 1;
	                }
	            }
	        }
	        var numBones = Math.min(self.transforms.length, self.bones.length);
	        for (i = 0; i < numBones; ++i) {
	            AnimationBone.prototype.mulSlimDX(self.transforms[i], self.bones[i].baseMatrix, self.transforms[i]);
	        }
	        mat4.identity(self.tmpMat);
	        var numVerts = self.vertices.length,
	            vec = self.tmpVec,
	            position = self.geometry.attributes.position.array,
	            normal = self.geometry.attributes.normal.array,
	            v, w, m, idx;
	        for (i = 0; i < numVerts; ++i) {
	            v = self.vertices[i];
	            idx = i * 3;
	            position[idx] = position[idx + 1] = position[idx + 2] = 0;
	            normal[idx] = normal[idx + 1] = normal[idx + 2] = 0;
	            for (j = 0; j < 4; ++j) {
	                if (v.weights[j] > 0) {
	                    w = v.weights[j];
	                    m = anim.fps == 1 ? self.tmpMat : self.transforms[v.bones[j]];
	                    vec3.transformMat4(vec, v.position, m);
	                    position[idx] += vec[0] * w;
	                    position[idx + 1] += vec[1] * w;
	                    position[idx + 2] += vec[2] * w;
	                    vec4.transformMat4(vec, v.normal, m);
	                    normal[idx] += vec[0] * w;
	                    normal[idx + 1] += vec[1] * w;
	                    normal[idx + 2] += vec[2] * w;
	                }
	            }
	        }
	        self.geometry.attributes.position.needsUpdate = true;
	        self.geometry.attributes.normal.needsUpdate = true;
	    }
	    if (self.newAnimation) {
	        self.newAnimation = false;
	    }
	};

	Model.prototype.load = function () {
	    var self = this;
	    var loader = new THREE.FileLoader();
	    loader.setResponseType('arraybuffer');
	    loader.load(self.meshUrl, function (buffer) {
	        self.loadMesh(buffer);
	    });
	};

	Model.prototype.loadMesh = function (buffer) {
	    if (!buffer) {
	        console.error("Bad buffer for DataView");
	        return
	    }
	    var self = this,
	        r = new DataView2(buffer),
	        i,
	        v,
	        idx;
	    try {
	        var magic = r.getUint32();
	        if (magic != 604210091) {
	            console.log("Bad magic value");
	            return
	        }
	    } catch (err) {
	        alert("Model currently isn't loading! We're sorry and hope to have this fixed soon.");
	        console.log(err);
	        return
	    }
	    self.version = r.getUint32();
	    var animFile = r.getString();
	    var textureFile = r.getString();
	    if (animFile && animFile.length > 0) {
	        var loader = new THREE.FileLoader();
	        loader.setResponseType('arraybuffer');
	        loader.load(self.animUrl, function (buffer) {
	            self.loadAnim(buffer);
	            self.dispatch.call('loadAnim');
	        });
	    }
	    if (textureFile && textureFile.length > 0) {
	        self.texture = new Texture$1(self, self.textureUrl);
	    }
	    var numMeshes = r.getUint32();
	    if (numMeshes > 0) {
	        self.meshes = new Array(numMeshes);
	        for (i = 0; i < numMeshes; ++i) {
	            var name = r.getString().toLowerCase();
	            var vStart = r.getUint32();
	            var vCount = r.getUint32();
	            var iStart = r.getUint32();
	            var iCount = r.getUint32();
	            self.meshes[i] = {
	                name: name,
	                vStart: vStart,
	                vCount: vCount,
	                iStart: iStart,
	                iCount: iCount
	            };
	        }
	    }
	    var numVerts = r.getUint32();
	    if (numVerts > 0) {
	        self.vertices = new Array(numVerts);
	        self.vbData = new Float32Array(numVerts * 8);
	        var position = [];
	        var normal = [];
	        var uv = [];
	        for (i = 0; i < numVerts; ++i) {
	            idx = i * 8;
	            self.vertices[i] = v = new Vertex(r);
	            self.vbData[idx] = v.position[0];
	            self.vbData[idx + 1] = v.position[1];
	            self.vbData[idx + 2] = v.position[2];
	            self.vbData[idx + 3] = v.normal[0];
	            self.vbData[idx + 4] = v.normal[1];
	            self.vbData[idx + 5] = v.normal[2];
	            self.vbData[idx + 6] = v.u;
	            self.vbData[idx + 7] = v.v;

	            position.push(v.position[0], v.position[1], v.position[2]);
	            normal.push(v.normal[0], v.normal[1], v.normal[2]);
	            uv.push(v.u, v.v);
	        }
	        self.geometry.addAttribute('position',
	            new THREE.BufferAttribute(new Float32Array(position), 3));
	        self.geometry.addAttribute('normal',
	            new THREE.BufferAttribute(new Float32Array(normal), 3));
	        self.geometry.addAttribute('uv',
	            new THREE.BufferAttribute(new Float32Array(uv), 2));
	    }
	    var numIndices = r.getUint32();
	    if (numIndices > 0) {
	        self.indices = new Array(numIndices);
	        for (i = 0; i < numIndices; ++i) {
	            self.indices[i] = r.getUint16();
	        }
	        self.geometry.setIndex(new THREE.BufferAttribute(new Uint16Array(self.indices), 1));
	    }
	    var numBones = r.getUint32();
	    if (numBones > 0) {
	        self.transforms = new Array(numBones);
	        self.bones = new Array(numBones);
	        for (i = 0; i < numBones; ++i) {
	            self.bones[i] = new Bone(self, i, r);
	            if (self.boneLookup[self.bones[i].name] !== undefined) {
	                self.bones[i].name = self.bones[i].name + "2";
	            }
	            self.boneLookup[self.bones[i].name] = i;
	            self.transforms[i] = new mat4.create;
	        }
	    }
	    self.loaded = true;
	    self.dispatch.call('loadMesh');
	};

	Model.prototype.loadAnim = function (buffer) {
	    if (!buffer) {
	        console.error("Bad buffer for DataView");
	        return
	    }
	    var self = this,
	        r = new DataView2(buffer),
	        i;
	    var magic = r.getUint32();
	    if (magic != 604210092) {
	        console.log("Bad magic value");
	        return
	    }
	    var version = r.getUint32();
	    if (version >= 2) {
	        var compressedData = new Uint8Array(buffer, r.position);
	        var data = null;
	        try {
	            data = pako.inflate(compressedData);
	        } catch (err) {
	            console.log("Decompression error: " + err);
	            return
	        }
	        r = new DataView2(data.buffer);
	    }
	    var numAnims = r.getUint32();
	    if (numAnims > 0) {
	        self.animations = new Array(numAnims);
	        for (i = 0; i < numAnims; ++i) {
	            self.animations[i] = new Animation(self, r, version);
	        }
	    }
	    self.animsLoaded = true;
	};

	Model.prototype.on = function (eventName, callback) {
	    this.dispatch.on(eventName, callback);
	};

	/**
	 * LOLLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function LOLLoader() {
	    BaseLoader.call(this);
	}

	LOLLoader.prototype = Object.create(BaseLoader.prototype);
	LOLLoader.prototype.constructor = LOLLoader;

	LOLLoader.prototype.load = function (url, options) {
	    if (!Array.isArray(url) || url.length < 3) {
	        console.warn(`LOLLoader: url must be an array, and contains .lmesh,.lanim and .png three urls.`);
	        return new Promise(resolve => {
	            resolve(null);
	        });
	    }

	    var lmesh = url.filter(n => n.endsWith('.lmesh'))[0];
	    var lanim = url.filter(n => n.endsWith('.lanim'))[0];
	    var png = url.filter(n => n.endsWith('.png'))[0];

	    if (lmesh === undefined) {
	        console.warn(`LOLLoader: url doesn't contain .lmesh url.`);
	        return new Promise(resolve => {
	            resolve(null);
	        });
	    }

	    if (lanim === undefined) {
	        console.warn(`LOLLoader: url doesn't contain .lanim url.`);
	        return new Promise(resolve => {
	            resolve(null);
	        });
	    }

	    if (png === undefined) {
	        console.warn(`LOLLoader: url doesn't contain .png url.`);
	        return new Promise(resolve => {
	            resolve(null);
	        });
	    }

	    var fileName = lmesh.split('/')[lmesh.split('/').length - 1];
	    var fileNameNoExt = fileName.split('.')[0];
	    var champion = fileNameNoExt.split('_')[0];
	    var skin = fileNameNoExt.split('_')[1];

	    return new Promise(resolve => {
	        this.require(['gl-matrix', 'pako']).then(() => {
	            var model = new Model({
	                champion: champion,
	                skin: parseInt(skin),
	                meshUrl: lmesh,
	                animUrl: lanim,
	                textureUrl: png
	            });
	            model.load();
	            model.on('load.LOLLoader', () => {
	                var geometry = model.geometry;
	                var material = model.material;

	                var mesh = new THREE.Mesh(geometry, material);
	                mesh.name = options.Name;

	                mesh.userData.type = 'lol';
	                mesh.userData.model = model;
	                mesh.userData.scripts = [{
	                    id: null,
	                    name: `${options.Name}${L_ANIMATION}`,
	                    type: 'javascript',
	                    source: this.createScripts(options.Name, model),
	                    uuid: THREE.Math.generateUUID()
	                }];

	                resolve(mesh);
	            });
	        });
	    });
	};

	LOLLoader.prototype.createScripts = function (name, model) {
	    var animations = model.getAnimations();

	    return `var mesh = this.getObjectByName('${name}');\n` +
	        `var model = mesh.userData.model;\n\n` +
	        `// animNames: ${animations.join(',')}\n` +
	        `model.setAnimation('${animations[0]}');\n\n` +
	        `function update(clock, deltaTime) { \n    model.update(clock.getElapsedTime() * 1000); \n}`;
	};

	/**
	 * MMDLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function MMDLoader() {
	    BaseLoader.call(this);
	}

	MMDLoader.prototype = Object.create(BaseLoader.prototype);
	MMDLoader.prototype.constructor = MMDLoader;

	MMDLoader.prototype.load = function (url, options, environment) {
	    return new Promise(resolve => {
	        this.require('MMD').then(() => {
	            var loader = new THREE.MMDLoader();

	            var promise1 = options.Animation && options.Animation.Url ?
	                this.loadWithAnimation(url, options, environment, loader) :
	                this.loadModel(url, options, environment, loader);
	            var promise2 = this.loadCameraAnimation(url, options, environment, loader);
	            var promise3 = this.loadAudio(url, options, environment, loader);

	            Promise.all([promise1, promise2, promise3]).then(obj => {
	                var mesh = obj[0].mesh;
	                var animation = obj[0].animation;
	                var cameraAnimation = obj[1];
	                var audio = obj[2];

	                Object.assign(mesh.userData, {
	                    obj: {
	                        animation: animation,
	                        cameraAnimation: cameraAnimation,
	                        audio: audio
	                    }
	                });

	                resolve(mesh);
	            });
	        });
	    });
	};

	MMDLoader.prototype.loadModel = function (url, options, environment, loader) {
	    return new Promise(resolve => {
	        loader.load(url, mesh => {
	            resolve({
	                mesh: mesh,
	                animation: null
	            });
	        }, undefined, () => {
	            // 某个图片下载失败会导致返回null
	            // resolve(null);
	        });
	    });
	};

	MMDLoader.prototype.loadWithAnimation = function (url, options, environment, loader) {
	    if (!options.Animation || !options.Animation.Url) {
	        return new Promise(resolve => {
	            resolve(null);
	        });
	    }

	    return new Promise(resolve => {
	        loader.loadWithAnimation(url, [environment.server + options.Animation.Url], mmd => {
	            resolve(mmd);
	        }, undefined, () => {
	            resolve(null);
	        });
	    });
	};

	MMDLoader.prototype.loadCameraAnimation = function (url, options, environment, loader) {
	    if (!options.CameraAnimation || !options.CameraAnimation.Url) {
	        return new Promise(resolve => {
	            resolve(null);
	        });
	    }

	    return new Promise(resolve => {
	        loader.loadAnimation([environment.server + options.CameraAnimation.Url], environment.camera, vmd => {
	            resolve(vmd);
	        }, undefined, () => {
	            resolve(null);
	        });
	    });
	};

	MMDLoader.prototype.loadAudio = function (url, options, environment, loader) {
	    if (!options.Audio || !options.Audio.Url) {
	        return new Promise(resolve => {
	            resolve(null);
	        });
	    }

	    return new Promise(resolve => {
	        var loader = new THREE.AudioLoader();
	        loader.load(environment.server + options.Audio.Url, buffer => {
	            var audio = new THREE.Audio(environment.audioListener).setBuffer(buffer);
	            Object.assign(audio.userData, options.Audio);
	            resolve(audio);
	        });
	    });
	};

	/**
	 * JsonLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function JsonLoader() {
	    BaseLoader.call(this);
	}

	JsonLoader.prototype = Object.create(BaseLoader.prototype);
	JsonLoader.prototype.constructor = JsonLoader;

	JsonLoader.prototype.load = function (url, options) {
	    return new Promise(resolve => {
	        this.require([
	            'LegacyJSONLoader'
	        ]).then(() => {
	            var loader = new THREE.LegacyJSONLoader();

	            loader.load(url, (geometry, materials) => {
	                for (var i = 0; i < materials.length; i++) {
	                    var m = materials[i];
	                    m.skinning = true;
	                    m.morphTargets = true;
	                }

	                var mesh = new THREE.SkinnedMesh(geometry, materials);

	                // TODO: 最新版three.js不再支持了
	                if (!mesh.skeleton) {
	                    mesh.skeleton = {
	                        update: function () {

	                        }
	                    };
	                }

	                Object.assign(mesh.userData, {
	                    obj: [geometry, materials],
	                    root: mesh,
	                    scripts: [{
	                        id: null,
	                        name: `${options.Name}${L_ANIMATION}`,
	                        type: 'javascript',
	                        source: this.createScripts(options.Name),
	                        uuid: THREE.Math.generateUUID()
	                    }]
	                });

	                resolve(mesh);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	JsonLoader.prototype.createScripts = function (name) {
	    return `var mesh = this.getObjectByName('${name}');\n` +
	        `var mixer = new THREE.AnimationMixer(mesh)\n` +
	        `mixer.clipAction(mesh.geometry.animations[0]).play();\n\n` +
	        `function update(clock, deltaTime) { \n    mixer.update(deltaTime); \n}`;
	};

	/**
	 * 3DSLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function _3DSLoader() {
	    BaseLoader.call(this);
	}

	_3DSLoader.prototype = Object.create(BaseLoader.prototype);
	_3DSLoader.prototype.constructor = _3DSLoader;

	_3DSLoader.prototype.load = function (url) {
	    return new Promise(resolve => {
	        this.require('TDSLoader').then(() => {
	            var loader = new THREE.TDSLoader();
	            loader.load(url, group => {
	                resolve(group);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	/**
	 * 3MFLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function _3MFLoader() {
	    BaseLoader.call(this);
	}

	_3MFLoader.prototype = Object.create(BaseLoader.prototype);
	_3MFLoader.prototype.constructor = _3MFLoader;

	_3MFLoader.prototype.load = function (url) {
	    return new Promise(resolve => {
	        this.require('3MFLoader').then(() => {
	            var loader = new THREE.ThreeMFLoader();
	            loader.load(url, object => {
	                resolve(object);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	/**
	 * AssimpLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function AssimpLoader() {
	    BaseLoader.call(this);
	}

	AssimpLoader.prototype = Object.create(BaseLoader.prototype);
	AssimpLoader.prototype.constructor = AssimpLoader;

	AssimpLoader.prototype.load = function (url, options) {
	    return new Promise(resolve => {
	        this.require('AssimpLoader').then(() => {
	            var loader = new THREE.AssimpLoader();
	            loader.load(url, result => {
	                var obj = result.object;

	                Object.assign(obj.userData, {
	                    obj: result,
	                    root: obj
	                });

	                if (result.animation) {
	                    Object.assign(obj.userData, {
	                        animNames: 'Animation1',
	                        scripts: [{
	                            id: null,
	                            name: `${options.Name}${L_ANIMATION}`,
	                            type: 'javascript',
	                            source: this.createScripts(options.Name),
	                            uuid: THREE.Math.generateUUID()
	                        }]
	                    });
	                }

	                resolve(obj);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	AssimpLoader.prototype.createScripts = function (name) {
	    return `var mesh = this.getObjectByName('${name}');\n\n` +
	        `var animation = mesh.userData.obj.animation;\n\n` +
	        `function update(clock, deltaTime) { \n  if(animation) {\n     animation.setTime( performance.now() / 1000 ); \n    } \n}`;
	};

	/**
	 * BVHLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function BVHLoader() {
	    BaseLoader.call(this);
	}

	BVHLoader.prototype = Object.create(BaseLoader.prototype);
	BVHLoader.prototype.constructor = BVHLoader;

	BVHLoader.prototype.load = function (url, options) {
	    return new Promise(resolve => {
	        this.require('BVHLoader').then(() => {
	            var loader = new THREE.BVHLoader();
	            loader.load(url, result => {
	                var skeletonHelper = new THREE.SkeletonHelper(result.skeleton.bones[0]);
	                skeletonHelper.skeleton = result.skeleton; // allow animation mixer to bind to SkeletonHelper directly

	                var boneContainer = new THREE.Group();
	                boneContainer.add(result.skeleton.bones[0]);

	                var obj3d = new THREE.Object3D();
	                obj3d.add(skeletonHelper);
	                obj3d.add(boneContainer);

	                Object.assign(obj3d.userData, {
	                    obj: result,
	                    root: skeletonHelper
	                });

	                Object.assign(obj3d.userData, {
	                    animNames: 'Animation1',
	                    scripts: [{
	                        id: null,
	                        name: `${options.Name}${L_ANIMATION}`,
	                        type: 'javascript',
	                        source: this.createScripts(options.Name),
	                        uuid: THREE.Math.generateUUID()
	                    }]
	                });

	                resolve(obj3d);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	BVHLoader.prototype.createScripts = function (name) {
	    return `var mesh = this.getObjectByName('${name}');\n\n` +
	        `var mixer = new THREE.AnimationMixer(mesh.userData.root);\n\n` +
	        `mixer.clipAction(mesh.userData.obj.clip).setEffectiveWeight(1.0).play();` +
	        `function update(clock, deltaTime) { \n     mixer.update(deltaTime); \n}`;
	};

	/**
	 * DRACOLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function DRACOLoader() {
	    BaseLoader.call(this);
	}

	DRACOLoader.prototype = Object.create(BaseLoader.prototype);
	DRACOLoader.prototype.constructor = DRACOLoader;

	DRACOLoader.prototype.load = function (url) {
	    return new Promise(resolve => {
	        this.require('DRACOLoader').then(() => {
	            THREE.DRACOLoader.setDecoderPath('assets/js/libs/draco/');
	            THREE.DRACOLoader.setDecoderConfig({ type: 'js' });

	            var loader = new THREE.DRACOLoader();

	            loader.load(url, geometry => {
	                geometry.computeVertexNormals();

	                var material = new THREE.MeshStandardMaterial();
	                var mesh = new THREE.Mesh(geometry, material);

	                // Release decoder resources.
	                THREE.DRACOLoader.releaseDecoderModule();

	                resolve(mesh);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	/**
	 * GCodeLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function GCodeLoader() {
	    BaseLoader.call(this);
	}

	GCodeLoader.prototype = Object.create(BaseLoader.prototype);
	GCodeLoader.prototype.constructor = GCodeLoader;

	GCodeLoader.prototype.load = function (url, options) {
	    return new Promise(resolve => {
	        this.require('GCodeLoader').then(() => {
	            var loader = new THREE.GCodeLoader();

	            loader.load(url, obj3d => {
	                resolve(obj3d);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	/**
	 * NRRDLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function NRRDLoader() {
	    BaseLoader.call(this);
	}

	NRRDLoader.prototype = Object.create(BaseLoader.prototype);
	NRRDLoader.prototype.constructor = NRRDLoader;

	NRRDLoader.prototype.load = function (url, options) {
	    return new Promise(resolve => {
	        this.require('NRRDLoader').then(() => {
	            var loader = new THREE.NRRDLoader();
	            loader.load(url, result => {
	                var loader = new THREE.NRRDLoader();
	                loader.load(url, volume => {
	                    var obj = new THREE.Object3D();

	                    // x plane
	                    var sliceX = volume.extractSlice('x', Math.floor(volume.RASDimensions[0] / 2));
	                    obj.add(sliceX.mesh);

	                    //y plane
	                    var sliceY = volume.extractSlice('y', Math.floor(volume.RASDimensions[1] / 2));
	                    obj.add(sliceY.mesh);

	                    //z plane
	                    var sliceZ = volume.extractSlice('z', Math.floor(volume.RASDimensions[2] / 4));
	                    obj.add(sliceZ.mesh);

	                    resolve(obj);
	                });
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	/**
	 * PCDLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function PCDLoader() {
	    BaseLoader.call(this);
	}

	PCDLoader.prototype = Object.create(BaseLoader.prototype);
	PCDLoader.prototype.constructor = PCDLoader;

	PCDLoader.prototype.load = function (url, options) {
	    return new Promise(resolve => {
	        this.require('PCDLoader').then(() => {
	            var loader = new THREE.PCDLoader();
	            loader.load(url, mesh => {
	                resolve(mesh);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	/**
	 * PDBLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function PDBLoader() {
	    BaseLoader.call(this);
	}

	PDBLoader.prototype = Object.create(BaseLoader.prototype);
	PDBLoader.prototype.constructor = PDBLoader;

	PDBLoader.prototype.load = function (url, options) {
	    return new Promise(resolve => {
	        this.require('PDBLoader').then(() => {
	            var loader = new THREE.PDBLoader();

	            var offset = new THREE.Vector3();

	            loader.load(url, pdb => {
	                var geometryAtoms = pdb.geometryAtoms;
	                var geometryBonds = pdb.geometryBonds;
	                var json = pdb.json;

	                var root = new THREE.Group();

	                var boxGeometry = new THREE.BoxBufferGeometry(1, 1, 1);
	                var sphereGeometry = new THREE.IcosahedronBufferGeometry(1, 2);

	                geometryAtoms.computeBoundingBox();
	                geometryAtoms.boundingBox.getCenter(offset).negate();

	                geometryAtoms.translate(offset.x, offset.y, offset.z);
	                geometryBonds.translate(offset.x, offset.y, offset.z);

	                var positions = geometryAtoms.getAttribute('position');
	                var colors = geometryAtoms.getAttribute('color');

	                var position = new THREE.Vector3();
	                var color = new THREE.Color();

	                for (var i = 0; i < positions.count; i++) {
	                    position.x = positions.getX(i);
	                    position.y = positions.getY(i);
	                    position.z = positions.getZ(i);

	                    color.r = colors.getX(i);
	                    color.g = colors.getY(i);
	                    color.b = colors.getZ(i);

	                    var material = new THREE.MeshPhongMaterial({ color: color });

	                    var object = new THREE.Mesh(sphereGeometry, material);
	                    object.position.copy(position);
	                    object.position.multiplyScalar(75);
	                    object.scale.multiplyScalar(25);
	                    root.add(object);
	                }

	                positions = geometryBonds.getAttribute('position');

	                var start = new THREE.Vector3();
	                var end = new THREE.Vector3();

	                for (var i = 0; i < positions.count; i += 2) {

	                    start.x = positions.getX(i);
	                    start.y = positions.getY(i);
	                    start.z = positions.getZ(i);

	                    end.x = positions.getX(i + 1);
	                    end.y = positions.getY(i + 1);
	                    end.z = positions.getZ(i + 1);

	                    start.multiplyScalar(75);
	                    end.multiplyScalar(75);

	                    var object = new THREE.Mesh(boxGeometry, new THREE.MeshPhongMaterial(0xffffff));
	                    object.position.copy(start);
	                    object.position.lerp(end, 0.5);
	                    object.scale.set(5, 5, start.distanceTo(end));
	                    object.lookAt(end);
	                    root.add(object);
	                }

	                resolve(root);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	/**
	 * PRWMLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function PRWMLoader() {
	    BaseLoader.call(this);
	}

	PRWMLoader.prototype = Object.create(BaseLoader.prototype);
	PRWMLoader.prototype.constructor = PRWMLoader;

	PRWMLoader.prototype.load = function (url) {
	    return new Promise(resolve => {
	        this.require('PRWMLoader').then(() => {
	            var loader = new THREE.PRWMLoader();

	            loader.load(url, geometry => {
	                var material = new THREE.MeshPhongMaterial();
	                var mesh = new THREE.Mesh(geometry, material);
	                resolve(mesh);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	/**
	 * SEA3DLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function SEA3DLoader() {
	    BaseLoader.call(this);
	}

	SEA3DLoader.prototype = Object.create(BaseLoader.prototype);
	SEA3DLoader.prototype.constructor = SEA3DLoader;

	SEA3DLoader.prototype.load = function (url, options) {
	    var obj = new THREE.Object3D();

	    return new Promise(resolve => {
	        this.require('SEA3D').then(() => {
	            var loader = new THREE.SEA3D({
	                autoPlay: true, // Auto play animations
	                container: obj, // Container to add models
	                progressive: true // Progressive download
	            });

	            loader.onComplete = function () {
	                resolve(obj);
	            };

	            loader.load(url);

	            Object.assign(obj.userData, {
	                animNames: ['Animation1'],
	                scripts: [{
	                    id: null,
	                    name: `${options.Name}${L_ANIMATION}`,
	                    type: 'javascript',
	                    source: this.createScripts(options.Name),
	                    uuid: THREE.Math.generateUUID()
	                }]
	            });
	        });
	    });
	};

	SEA3DLoader.prototype.createScripts = function (name) {
	    return `function update(clock, deltaTime) { \n    THREE.SEA3D.AnimationHandler.update(deltaTime); \n}`;
	};

	/**
	 * VRMLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function VRMLoader() {
	    BaseLoader.call(this);
	}

	VRMLoader.prototype = Object.create(BaseLoader.prototype);
	VRMLoader.prototype.constructor = VRMLoader;

	VRMLoader.prototype.load = function (url, options) {
	    return new Promise(resolve => {
	        this.require([
	            'GLTFLoader',
	            'VRMLoader'
	        ]).then(() => {
	            var loader = new THREE.VRMLoader();
	            loader.load(url, vrm => {
	                // VRMLoader doesn't support VRM Unlit extension yet so
	                // converting all materials to MeshBasicMaterial here as workaround so far.
	                vrm.scene.traverse(function (object) {
	                    if (object.material) {
	                        if (Array.isArray(object.material)) {
	                            for (var i = 0, il = object.material.length; i < il; i++) {
	                                var material = new THREE.MeshBasicMaterial();
	                                THREE.Material.prototype.copy.call(material, object.material[i]);
	                                material.color.copy(object.material[i].color);
	                                material.map = object.material[i].map;
	                                material.lights = false;
	                                material.skinning = object.material[i].skinning;
	                                material.morphTargets = object.material[i].morphTargets;
	                                material.morphNormals = object.material[i].morphNormals;
	                                object.material[i] = material;
	                            }
	                        } else {
	                            var material = new THREE.MeshBasicMaterial();
	                            THREE.Material.prototype.copy.call(material, object.material);
	                            material.color.copy(object.material.color);
	                            material.map = object.material.map;
	                            material.lights = false;
	                            material.skinning = object.material.skinning;
	                            material.morphTargets = object.material.morphTargets;
	                            material.morphNormals = object.material.morphNormals;
	                            object.material = material;
	                        }
	                    }
	                });

	                resolve(vrm.scene);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	/**
	 * VRMLLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function VRMLLoader() {
	    BaseLoader.call(this);
	}

	VRMLLoader.prototype = Object.create(BaseLoader.prototype);
	VRMLLoader.prototype.constructor = VRMLLoader;

	VRMLLoader.prototype.load = function (url, options) {
	    return new Promise(resolve => {
	        this.require('VRMLLoader').then(() => {
	            var loader = new THREE.VRMLLoader();
	            loader.load(url, obj => {
	                resolve(obj);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	/**
	 * XLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function XLoader() {
	    BaseLoader.call(this);
	}

	XLoader.prototype = Object.create(BaseLoader.prototype);
	XLoader.prototype.constructor = XLoader;

	XLoader.prototype.load = function (url, options) {
	    return new Promise(resolve => {
	        this.require('XLoader').then(() => {
	            var loader = new THREE.XLoader();
	            loader.load([url], object => {
	                var obj = new THREE.Object3D();

	                for (var i = 0; i < object.models.length; i++) {
	                    var model = object.models[i];
	                    obj.add(model);
	                }

	                resolve(obj);
	            }, undefined, () => {
	                resolve(null);
	            });
	        });
	    });
	};

	const Loaders = {
	    '_3ds': _3DSLoader,
	    '_3mf': _3MFLoader,
	    'amf': AMFLoader,
	    'assimp': AssimpLoader,
	    'awd': AWDLoader,
	    'babylon': BabylonLoader,
	    'binary': BinaryLoader,
	    'bvh': BVHLoader,
	    'ctm': CTMLoader,
	    'dae': ColladaLoader,
	    'fbx': FBXLoader,
	    'glb': GLTFLoader,
	    'gltf': GLTFLoader,
	    'kmz': KMZLoader,
	    'md2': MD2Loader,
	    'json': ObjectLoader,
	    'obj': OBJLoader,
	    'ply': PLYLoader,
	    'stl': STLLoader,
	    'vtk': VTKLoader,
	    'lol': LOLLoader,
	    'pmd': MMDLoader,
	    'pmx': MMDLoader,
	    'js': JsonLoader,
	    'drc': DRACOLoader,
	    'gcode': GCodeLoader,
	    'nrrd': NRRDLoader,
	    'pcd': PCDLoader,
	    'pdb': PDBLoader,
	    'prwm': PRWMLoader,
	    'sea3d': SEA3DLoader,
	    'vrm': VRMLoader,
	    'vrml': VRMLLoader,
	    'x': XLoader,
	};

	/**
	 * ModelLoader
	 * @author tengge / https://github.com/tengge1
	 */
	function ModelLoader() {
	    BaseLoader.call(this);
	}

	ModelLoader.prototype = Object.create(BaseLoader.prototype);
	ModelLoader.prototype.constructor = ModelLoader;

	ModelLoader.prototype.load = function (url, options, environment) {
	    options = options || {};
	    var type = options.Type;

	    if (type === undefined) {
	        console.warn(`ModelLoader: no type parameters, and cannot load.`);
	        return new Promise(resolve => {
	            resolve(null);
	        });
	    }

	    return new Promise(resolve => {
	        var loader = Loaders[type];
	        if (loader === undefined) {
	            console.warn(`ModelLoader: no ${type} loader.`);
	            resolve(null);
	            return;
	        }
	        (new loader(this.app)).load(url, options, environment).then(obj => {
	            obj.userData.physics = obj.userData.physics || {
	                enabled: false,
	                type: 'rigidBody',
	                shape: 'btBoxShape',
	                mass: 1,
	                inertia: {
	                    x: 0,
	                    y: 0,
	                    z: 0,
	                }
	            };
	            resolve(obj);
	        });
	    });
	};

	/**
	 * ServerObject
	 * @author tengge / https://github.com/tengge1
	 */
	function ServerObject() {
	    BaseSerializer.call(this);
	}

	ServerObject.prototype = Object.create(BaseSerializer.prototype);
	ServerObject.prototype.constructor = ServerObject;

	ServerObject.prototype.toJSON = function (obj) {
	    var json = Object3DSerializer.prototype.toJSON.call(this, obj);
	    json.userData = Object.assign({}, obj.userData);
	    delete json.userData.model;
	    delete json.userData.obj; // 以后下载对象缓存统一改为obj
	    delete json.userData.root; // 模型根节点
	    delete json.userData.helper;

	    // 记录材质
	    json.userData.materials = [];
	    this.serializeMaterials(obj, '', json.userData.materials);
	    return json;
	};

	/**
	 * 记录服务端模型所有材质
	 * @param {*} obj 
	 * @param {*} path 
	 * @param {*} materials 
	 */
	ServerObject.prototype.serializeMaterials = function (obj, path, materials) {
	    if (obj.material && Array.isArray(obj.material)) { // 多材质
	        obj.material.forEach((n, i) => {
	            if (!n.userData.changed) { // 只有修改过的材质才需要保存
	                return;
	            }
	            var json = (new MaterialsSerializer()).toJSON(n);
	            json._path = `${path}${i}`;
	            materials.push(json);
	        });
	    } else if (obj.material && obj.material.userData.changed) { // 单材质
	        var json = (new MaterialsSerializer()).toJSON(obj.material);
	        json._path = `${path}$`;
	        materials.push(json);
	    }

	    if (obj.children) {
	        obj.children.forEach((n, i) => {
	            this.serializeMaterials(n, `${path}${i}`, materials);
	        });
	    }
	};

	ServerObject.prototype.fromJSON = function (json, options, environment) {
	    var url = json.userData.Url;

	    if (url.indexOf(';') > -1) { // 包含多个入口文件
	        url = url.split(';').map(n => options.server + n);
	    } else {
	        url = options.server + url;
	    }

	    // 将server传递给MMDLoader，以便下载资源
	    environment.server = options.server;

	    return new Promise(resolve => {
	        var loader = new ModelLoader();
	        loader.load(url, json.userData, environment).then(obj => {
	            if (obj) {
	                Object3DSerializer.prototype.fromJSON.call(this, json, obj);
	                if (json.userData.materials) {
	                    this.parseMaterials(obj, '', json.userData.materials);
	                }
	                resolve(obj);
	            } else {
	                resolve(null);
	            }
	        });
	    });
	};

	/**
	 * 还原服务端模型所有材质
	 * @param {*} obj 
	 * @param {*} path 
	 * @param {*} materials 
	 */
	ServerObject.prototype.parseMaterials = function (obj, path, materials) {
	    if (obj.material && Array.isArray(obj.material)) { // 多材质
	        obj.material.forEach((n, i) => {
	            var json = materials.filter(n => n._path === `${path}${i}`)[0];
	            if (json) {
	                var material = obj.material[i];
	                obj.material[i] = (new MaterialsSerializer()).fromJSON(json);
	                obj.material[i].needsUpdate = true;
	                material.dispose();
	            }
	        });
	    } else if (obj.material) { // 单材质
	        var json = materials.filter(n => n._path === `${path}$`)[0];
	        if (json) {
	            var material = obj.material;
	            obj.material = (new MaterialsSerializer()).fromJSON(json);
	            obj.material.needsUpdate = true;
	            material.dispose();
	        }
	    }

	    if (obj.children) {
	        obj.children.forEach((n, i) => {
	            this.parseMaterials(n, `${path}${i}`, materials);
	        });
	    }
	};

	/**
	 * WebGLShadowMapSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function WebGLShadowMapSerializer() {
	    BaseSerializer.call(this);
	}

	WebGLShadowMapSerializer.prototype = Object.create(BaseSerializer.prototype);
	WebGLShadowMapSerializer.prototype.constructor = WebGLShadowMapSerializer;

	WebGLShadowMapSerializer.prototype.toJSON = function (obj) {
	    var json = BaseSerializer.prototype.toJSON.call(this, obj);

	    json.autoUpdate = obj.autoUpdate;
	    json.enabled = obj.enabled;
	    json.needsUpdate = obj.needsUpdate;
	    json.type = obj.type;

	    return json;
	};

	WebGLShadowMapSerializer.prototype.fromJSON = function (json, parent) {
	    if (parent === undefined) {
	        console.warn(`WebGLShadowMapSerializer: parent is empty.`);
	        return null;
	    }

	    var obj = parent;

	    obj.autoUpdate = json.autoUpdate;
	    obj.enabled = json.enabled;
	    obj.needsUpdate = true;
	    obj.type = json.type;

	    return obj;
	};

	/**
	 * WebGLRendererSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function WebGLRendererSerializer() {
	    BaseSerializer.call(this);
	}

	WebGLRendererSerializer.prototype = Object.create(BaseSerializer.prototype);
	WebGLRendererSerializer.prototype.constructor = WebGLRendererSerializer;

	WebGLRendererSerializer.prototype.toJSON = function (obj) {
	    var json = BaseSerializer.prototype.toJSON.call(this, obj);

	    json.antialias = true;
	    json.autoClear = obj.autoClear;
	    json.autoClearColor = obj.autoClearColor;
	    json.autoClearDepth = obj.autoClearDepth;
	    json.autoClearStencil = obj.autoClearStencil;
	    json.autoUpdateScene = obj.autoUpdateScene;
	    json.clippingPlanes = obj.clippingPlanes;
	    json.gammaFactor = obj.gammaFactor;
	    json.gammaInput = obj.gammaInput;
	    json.gammaOutput = obj.gammaOutput;
	    json.localClippingEnabled = obj.localClippingEnabled;
	    json.physicallyCorrectLights = obj.physicallyCorrectLights;
	    json.shadowMap = (new WebGLShadowMapSerializer()).toJSON(obj.shadowMap);
	    json.sortObjects = obj.sortObjects;
	    json.toneMapping = obj.toneMapping;
	    json.toneMappingExposure = obj.toneMappingExposure;
	    json.toneMappingWhitePoint = obj.toneMappingWhitePoint;

	    return json;
	};

	WebGLRendererSerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.WebGLRenderer({ antialias: json.antialias }) : parent;

	    obj.autoClear = json.autoClear;
	    obj.autoClearColor = json.autoClearColor;
	    obj.autoClearDepth = json.autoClearDepth;
	    obj.autoClearStencil = json.autoClearStencil;
	    obj.autoUpdateScene = json.autoUpdateScene;
	    obj.clippingPlanes = json.clippingPlanes;
	    obj.gammaFactor = json.gammaFactor;
	    obj.gammaInput = json.gammaInput;
	    obj.gammaOutput = json.gammaOutput;
	    obj.localClippingEnabled = json.localClippingEnabled;
	    obj.physicallyCorrectLights = json.physicallyCorrectLights;
	    (new WebGLShadowMapSerializer()).fromJSON(json.shadowMap, obj.shadowMap);
	    obj.sortObjects = json.sortObjects;
	    obj.toneMapping = json.toneMapping;
	    obj.toneMappingExposure = json.toneMappingExposure;
	    obj.toneMappingWhitePoint = json.toneMappingWhitePoint;

	    return obj;
	};

	/**
	 * OptionsSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function OptionsSerializer() {
	    BaseSerializer.call(this);
	}

	OptionsSerializer.prototype = Object.create(BaseSerializer.prototype);
	OptionsSerializer.prototype.constructor = OptionsSerializer;

	OptionsSerializer.prototype.toJSON = function (obj) {
	    var json = BaseSerializer.prototype.toJSON.call(this, obj);
	    Object.assign(json, obj);
	    return json;
	};

	OptionsSerializer.prototype.fromJSON = function (json) {
	    var obj = {};

	    Object.keys(json).forEach(n => {
	        if (n === '_id' || n === 'metadata' || n === 'server') { // 由于不同服务器的服务端不一样，所以不能反序列化server配置
	            return;
	        }
	        obj[n] = json[n];
	    });

	    return obj;
	};

	/**
	 * ScriptSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function ScriptSerializer() {
	    BaseSerializer.call(this);
	}

	ScriptSerializer.prototype = Object.create(BaseSerializer.prototype);
	ScriptSerializer.prototype.constructor = ScriptSerializer;

	ScriptSerializer.prototype.toJSON = function (scripts) {
	    var list = [];

	    Object.keys(scripts).forEach(uuid => {
	        var json = BaseSerializer.prototype.toJSON.call(this);

	        var script = scripts[uuid];

	        Object.assign(json, {
	            id: script.id,
	            name: script.name,
	            type: script.type,
	            source: script.source,
	            uuid: script.uuid
	        });

	        list.push(json);
	    });

	    return list;
	};

	ScriptSerializer.prototype.fromJSON = function (jsons, parent) {
	    parent = parent || {};

	    jsons.forEach(json => {
	        parent[json.uuid] = {
	            id: json.id,
	            name: json.name,
	            type: json.type,
	            source: json.source,
	            uuid: json.uuid
	        };
	    });

	    return parent;
	};

	/**
	 * AnimationSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function AnimationSerializer() {
	    BaseSerializer.call(this);
	}

	AnimationSerializer.prototype = Object.create(BaseSerializer.prototype);
	AnimationSerializer.prototype.constructor = AnimationSerializer;

	AnimationSerializer.prototype.toJSON = function (list) {
	    var jsons = [];

	    list.forEach(n => {
	        var json = BaseSerializer.prototype.toJSON.call(this, n);
	        Object.assign(json, n);
	        jsons.push(json);
	    });

	    return jsons;
	};

	AnimationSerializer.prototype.fromJSON = function (jsons) {
	    var list = [];

	    jsons.forEach(n => {
	        var obj = Object.assign({}, n);
	        delete obj.metadata;
	        list.push(obj);
	    });

	    return list;
	};

	/**
	 * CameraSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function CameraSerializer() {
	    BaseSerializer.call(this);
	}

	CameraSerializer.prototype = Object.create(BaseSerializer.prototype);
	CameraSerializer.prototype.constructor = CameraSerializer;

	CameraSerializer.prototype.filter = function (obj) {
	    if (obj instanceof THREE.Camera) {
	        return true;
	    } else if (obj.metadata && obj.metadata.generator === this.constructor.name) {
	        return true;
	    } else {
	        return false;
	    }
	};

	CameraSerializer.prototype.toJSON = function (obj) {
	    var json = Object3DSerializer.prototype.toJSON.call(this, obj);

	    json.matrixWorldInverse = obj.matrixWorldInverse;
	    json.projectionMatrix = obj.projectionMatrix;

	    return json;
	};

	CameraSerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.Camera() : parent;

	    Object3DSerializer.prototype.fromJSON.call(this, json, obj);

	    obj.matrixWorldInverse.copy(json.matrixWorldInverse);
	    obj.projectionMatrix.copy(json.projectionMatrix);

	    return obj;
	};

	/**
	 * OrthographicCameraSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function OrthographicCameraSerializer() {
	    BaseSerializer.call(this);
	}

	OrthographicCameraSerializer.prototype = Object.create(BaseSerializer.prototype);
	OrthographicCameraSerializer.prototype.constructor = OrthographicCameraSerializer;

	OrthographicCameraSerializer.prototype.toJSON = function (obj) {
	    var json = CameraSerializer.prototype.toJSON.call(this, obj);

	    json.bottom = obj.bottom;
	    json.far = obj.far;
	    json.left = obj.left;
	    json.near = obj.near;
	    json.right = obj.right;
	    json.top = obj.top;
	    json.view = obj.view;
	    json.zoom = obj.zoom;

	    return json;
	};

	OrthographicCameraSerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.OrthographicCamera() : parent;

	    CameraSerializer.prototype.fromJSON.call(this, json, obj);

	    obj.bottom = json.bottom;
	    obj.far = json.far;
	    obj.left = json.left;
	    obj.near = json.near;
	    obj.right = json.right;
	    obj.top = json.top;
	    obj.view = json.view;
	    obj.zoom = json.zoom;

	    return obj;
	};

	/**
	 * PerspectiveCameraSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function PerspectiveCameraSerializer() {
	    BaseSerializer.call(this);
	}

	PerspectiveCameraSerializer.prototype = Object.create(BaseSerializer.prototype);
	PerspectiveCameraSerializer.prototype.constructor = PerspectiveCameraSerializer;

	PerspectiveCameraSerializer.prototype.toJSON = function (obj) {
	    var json = CameraSerializer.prototype.toJSON.call(this, obj);

	    json.aspect = obj.aspect;
	    json.far = obj.far;
	    json.filmGauge = obj.filmGauge;
	    json.filmOffset = obj.filmOffset;
	    json.focus = obj.focus;
	    json.fov = obj.fov;
	    json.near = obj.near;
	    json.view = obj.view;
	    json.zoom = obj.zoom;

	    return json;
	};

	PerspectiveCameraSerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.PerspectiveCamera() : parent;

	    CameraSerializer.prototype.fromJSON.call(this, json, obj);

	    obj.aspect = json.aspect;
	    obj.far = json.far;
	    obj.filmGauge = json.filmGauge;
	    obj.filmOffset = json.filmOffset;
	    obj.focus = json.focus;
	    obj.fov = json.fov;
	    obj.near = json.near;
	    obj.view = json.view;
	    obj.zoom = json.zoom;

	    return obj;
	};

	var Serializers$3 = {
	    'OrthographicCamera': OrthographicCameraSerializer,
	    'PerspectiveCamera': PerspectiveCameraSerializer,
	    'Camera': CameraSerializer
	};

	/**
	 * CamerasSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function CamerasSerializer() {
	    BaseSerializer.call(this);
	}

	CamerasSerializer.prototype = Object.create(BaseSerializer.prototype);
	CamerasSerializer.prototype.constructor = CamerasSerializer;

	CamerasSerializer.prototype.toJSON = function (obj) {
	    var serializer = Serializers$3[obj.constructor.name];

	    if (serializer === undefined) {
	        console.warn(`CamerasSerializer: No serializer with ${obj.constructor.name}.`);
	        return null;
	    }

	    return (new serializer()).toJSON(obj);
	};

	CamerasSerializer.prototype.fromJSON = function (json, parent) {
	    var generator = json.metadata.generator;

	    var serializer = Serializers$3[generator.replace('Serializer', '')];

	    if (serializer === undefined) {
	        console.warn(`CamerasSerializer: No deserializer with ${generator}.`);
	        return null;
	    }

	    return (new serializer()).fromJSON(json, parent);
	};

	/**
	 * WebGLRenderTargetSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function WebGLRenderTargetSerializer() {
	    BaseSerializer.call(this);
	}

	WebGLRenderTargetSerializer.prototype = Object.create(BaseSerializer.prototype);
	WebGLRenderTargetSerializer.prototype.constructor = WebGLRenderTargetSerializer;

	WebGLRenderTargetSerializer.prototype.toJSON = function (obj) {
	    var json = BaseSerializer.prototype.toJSON.call(this, obj);

	    json.depthBuffer = obj.depthBuffer;
	    json.depthTexture = obj.depthTexture == null ? null : (new TexturesSerializer()).toJSON(obj.depthTexture);
	    json.height = obj.height;
	    json.scissor = obj.scissor;
	    json.scissorTest = obj.scissorTest;
	    json.stencilBuffer = obj.stencilBuffer;
	    json.texture = obj.texture == null ? null : (new TexturesSerializer()).toJSON(obj.texture);
	    json.viewport = obj.viewport;
	    json.width = obj.width;
	    json.isWebGLRenderTarget = obj.isWebGLRenderTarget;

	    return json;
	};

	WebGLRenderTargetSerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.WebGLRenderTarget(json.width, json.height) : parent;

	    obj.depthBuffer = json.depthBuffer;
	    obj.depthTexture = json.depthTexture == null ? null : (new TexturesSerializer()).fromJSON(json.depthTexture);
	    obj.height = json.height;
	    obj.scissor.copy(json.scissor);
	    obj.scissorTest = json.scissorTest;
	    obj.stencilBuffer = json.stencilBuffer;
	    obj.texture = json.texture == null ? null : (new TexturesSerializer()).fromJSON(json.texture);
	    obj.viewport.copy(json.viewport);
	    obj.width = json.width;
	    obj.isWebGLRenderTarget = json.isWebGLRenderTarget;

	    return obj;
	};

	/**
	 * LightShadowSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function LightShadowSerializer() {
	    BaseSerializer.call(this);
	}

	LightShadowSerializer.prototype = Object.create(BaseSerializer.prototype);
	LightShadowSerializer.prototype.constructor = LightShadowSerializer;

	LightShadowSerializer.prototype.toJSON = function (obj) {
	    var json = BaseSerializer.prototype.toJSON.call(this, obj);

	    json.bias = obj.bias;
	    json.camera = (new CamerasSerializer()).toJSON(obj.camera);
	    json.map = obj.map == null ? null : (new WebGLRenderTargetSerializer()).toJSON(obj.map);
	    json.mapSize = obj.mapSize;
	    json.matrix = obj.matrix;
	    json.radius = obj.radius;

	    return json;
	};

	LightShadowSerializer.prototype.fromJSON = function (json, parent) {
	    var camera = (new CamerasSerializer()).fromJSON(json.camera);

	    var obj = parent === undefined ? new THREE.LightShadow(camera) : parent;

	    obj.bias = json.bias;
	    obj.camera.copy(camera);
	    // 纹理时自动生成的，不要反序列化
	    // obj.map = json.map == null ? null : (new WebGLRenderTargetSerializer()).fromJSON(json.map);
	    obj.mapSize.copy(json.mapSize);
	    obj.matrix.copy(json.matrix);
	    obj.radius = json.radius;

	    return obj;
	};

	/**
	 * DirectionalLightShadowSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function DirectionalLightShadowSerializer() {
	    BaseSerializer.call(this);
	}

	DirectionalLightShadowSerializer.prototype = Object.create(BaseSerializer.prototype);
	DirectionalLightShadowSerializer.prototype.constructor = DirectionalLightShadowSerializer;

	DirectionalLightShadowSerializer.prototype.toJSON = function (obj) {
	    var json = LightShadowSerializer.prototype.toJSON.call(this, obj);

	    json.isDirectionalLightShadow = obj.isDirectionalLightShadow;

	    return json;
	};

	DirectionalLightShadowSerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.DirectionalLightShadow() : parent;

	    LightShadowSerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * SpotLightShadowSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function SpotLightShadowSerializer() {
	    BaseSerializer.call(this);
	}

	SpotLightShadowSerializer.prototype = Object.create(BaseSerializer.prototype);
	SpotLightShadowSerializer.prototype.constructor = SpotLightShadowSerializer;

	SpotLightShadowSerializer.prototype.toJSON = function (obj) {
	    var json = LightShadowSerializer.prototype.toJSON.call(this, obj);

	    json.isSpotLightShadow = obj.isSpotLightShadow;

	    return json;
	};

	SpotLightShadowSerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.SpotLightShadow() : parent;

	    LightShadowSerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	var Serializers$4 = {
	    'LightShadow': LightShadowSerializer,
	    'DirectionalLightShadow': DirectionalLightShadowSerializer,
	    'SpotLightShadow': SpotLightShadowSerializer
	};

	/**
	 * LightShadowsSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function LightShadowsSerializer() {
	    BaseSerializer.call(this);
	}

	LightShadowsSerializer.prototype = Object.create(BaseSerializer.prototype);
	LightShadowsSerializer.prototype.constructor = LightShadowsSerializer;

	LightShadowsSerializer.prototype.toJSON = function (obj) {
	    var serializer = Serializers$4[obj.constructor.name];

	    if (serializer === undefined) {
	        console.warn(`LightShadowsSerializer: No serializer with  ${obj.constructor.name}.`);
	        return null;
	    }

	    return (new serializer()).toJSON(obj);
	};

	LightShadowsSerializer.prototype.fromJSON = function (json) {
	    var generator = json.metadata.generator;

	    var serializer = Serializers$4[generator.replace('Serializer', '')];

	    if (serializer === undefined) {
	        console.warn(`LightShadowsSerializer: No deserializer with ${generator}.`);
	        return null;
	    }

	    return (new serializer()).fromJSON(json);
	};

	/**
	 * LightSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function LightSerializer() {
	    BaseSerializer.call(this);
	}

	LightSerializer.prototype = Object.create(BaseSerializer.prototype);
	LightSerializer.prototype.constructor = LightSerializer;

	LightSerializer.prototype.toJSON = function (obj) {
	    var json = Object3DSerializer.prototype.toJSON.call(this, obj);

	    json.color = obj.color;
	    json.intensity = obj.intensity;
	    json.isLight = obj.isLight;
	    json.shadow = obj.shadow == null ? null : (new LightShadowsSerializer()).toJSON(obj.shadow);

	    return json;
	};

	LightSerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.Light() : parent;

	    Object3DSerializer.prototype.fromJSON.call(this, json, obj);

	    obj.color = new THREE.Color(json.color);
	    obj.intensity = json.intensity;
	    obj.isLight = json.isLight;

	    if (json.shadow) {
	        obj.shadow = (new LightShadowsSerializer()).fromJSON(json.shadow);
	    }

	    return obj;
	};

	/**
	 * AmbientLightSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function AmbientLightSerializer() {
	    BaseSerializer.call(this);
	}

	AmbientLightSerializer.prototype = Object.create(BaseSerializer.prototype);
	AmbientLightSerializer.prototype.constructor = AmbientLightSerializer;

	AmbientLightSerializer.prototype.toJSON = function (obj) {
	    var json = LightSerializer.prototype.toJSON.call(this, obj);

	    json.isAmbientLight = obj.isAmbientLight;

	    return json;
	};

	AmbientLightSerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.AmbientLight(json.color, json.intensity) : parent;

	    LightSerializer.prototype.fromJSON.call(this, json, obj);

	    obj.isAmbientLight = json.isAmbientLight;

	    return obj;
	};

	/**
	 * DirectionalLightSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function DirectionalLightSerializer() {
	    BaseSerializer.call(this);
	}

	DirectionalLightSerializer.prototype = Object.create(BaseSerializer.prototype);
	DirectionalLightSerializer.prototype.constructor = DirectionalLightSerializer;

	DirectionalLightSerializer.prototype.toJSON = function (obj) {
	    var json = LightSerializer.prototype.toJSON.call(this, obj);

	    json.isDirectionalLight = obj.isDirectionalLight;

	    return json;
	};

	DirectionalLightSerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.DirectionalLight(json.color, json.intensity) : parent;

	    LightSerializer.prototype.fromJSON.call(this, json, obj);

	    obj.isDirectionalLight = json.isDirectionalLight;

	    return obj;
	};

	/**
	 * HemisphereLightSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function HemisphereLightSerializer() {
	    BaseSerializer.call(this);
	}

	HemisphereLightSerializer.prototype = Object.create(BaseSerializer.prototype);
	HemisphereLightSerializer.prototype.constructor = HemisphereLightSerializer;

	HemisphereLightSerializer.prototype.toJSON = function (obj) {
	    var json = LightSerializer.prototype.toJSON.call(this, obj);

	    json.isHemisphereLight = obj.isHemisphereLight;
	    json.skyColor = obj.skyColor;
	    json.groundColor = obj.groundColor;

	    return json;
	};

	HemisphereLightSerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.HemisphereLight(json.skyColor, json.groundColor, json.intensity) : parent;

	    LightSerializer.prototype.fromJSON.call(this, json, obj);

	    obj.isHemisphereLight = json.isHemisphereLight;

	    return obj;
	};

	/**
	 * PointLightSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function PointLightSerializer() {
	    BaseSerializer.call(this);
	}

	PointLightSerializer.prototype = Object.create(BaseSerializer.prototype);
	PointLightSerializer.prototype.constructor = PointLightSerializer;

	PointLightSerializer.prototype.toJSON = function (obj) {
	    var json = LightSerializer.prototype.toJSON.call(this, obj);

	    json.isPointLight = obj.isPointLight;
	    json.distance = obj.distance;
	    json.decay = obj.decay;

	    return json;
	};

	PointLightSerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.PointLight(json.color, json.intensity, json.distance, json.decay) : parent;

	    LightSerializer.prototype.fromJSON.call(this, json, obj);

	    obj.isPointLight = json.isPointLight;

	    return obj;
	};

	/**
	 * SpotLightSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function SpotLightSerializer() {
	    BaseSerializer.call(this);
	}

	SpotLightSerializer.prototype = Object.create(BaseSerializer.prototype);
	SpotLightSerializer.prototype.constructor = SpotLightSerializer;

	SpotLightSerializer.prototype.toJSON = function (obj) {
	    var json = LightSerializer.prototype.toJSON.call(this, obj);

	    json.isSpotLight = obj.isSpotLight;
	    json.distance = obj.distance;
	    json.angle = obj.angle;
	    json.penumbra = obj.penumbra;
	    json.decay = obj.decay;

	    return json;
	};

	SpotLightSerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.SpotLight(
	        json.color,
	        json.intensity,
	        json.distance,
	        json.angle,
	        json.penumbra,
	        json.decay) : parent;

	    LightSerializer.prototype.fromJSON.call(this, json, obj);

	    obj.isSpotLight = json.isSpotLight;
	    obj.distance = json.distance;
	    obj.angle = json.angle;
	    obj.penumbra = json.penumbra;
	    obj.decay = json.decay;

	    return obj;
	};

	/**
	 * RectAreaLightSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function RectAreaLightSerializer() {
	    BaseSerializer.call(this);
	}

	RectAreaLightSerializer.prototype = Object.create(BaseSerializer.prototype);
	RectAreaLightSerializer.prototype.constructor = RectAreaLightSerializer;

	RectAreaLightSerializer.prototype.toJSON = function (obj) {
	    var json = LightSerializer.prototype.toJSON.call(this, obj);

	    json.width = obj.width;
	    json.height = obj.height;

	    return json;
	};

	RectAreaLightSerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.RectAreaLight(json.color, json.intensity, json.width, json.height) : parent;

	    LightSerializer.prototype.fromJSON.call(this, json, obj);

	    obj.isRectAreaLight = true;

	    return obj;
	};

	/**
	 * AudioSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function AudioSerializer() {
	    BaseSerializer.call(this);
	}

	AudioSerializer.prototype = Object.create(BaseSerializer.prototype);
	AudioSerializer.prototype.constructor = AudioSerializer;

	AudioSerializer.prototype.toJSON = function (obj) {
	    var json = Object3DSerializer.prototype.toJSON.call(this, obj);

	    json.autoplay = obj.autoplay;
	    json.loop = obj.getLoop();
	    json.volume = obj.getVolume();

	    return json;
	};

	AudioSerializer.prototype.fromJSON = function (json, parent, audioListener) {
	    if (audioListener === undefined) {
	        audioListener = new THREE.AudioListener();
	    }
	    var obj = parent === undefined ? new THREE.Audio(audioListener) : parent;

	    Object3DSerializer.prototype.fromJSON.call(this, json, obj);

	    obj.autoplay = json.autoplay;
	    obj.setLoop(json.loop);
	    obj.setVolume(json.volume);

	    return obj;
	};

	/**
	 * AudioListenerSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function AudioListenerSerializer() {
	    BaseSerializer.call(this);
	}

	AudioListenerSerializer.prototype = Object.create(BaseSerializer.prototype);
	AudioListenerSerializer.prototype.constructor = AudioListenerSerializer;

	AudioListenerSerializer.prototype.toJSON = function (obj) {
	    var json = Object3DSerializer.prototype.toJSON.call(this, obj);

	    json.masterVolume = obj.getMasterVolume();

	    return json;
	};

	AudioListenerSerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.AudioListener() : parent;

	    Object3DSerializer.prototype.fromJSON.call(this, json, obj);

	    obj.setMasterVolume(json.masterVolume);

	    return obj;
	};

	/**
	 * ReflectorSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function ReflectorSerializer() {
	    BaseSerializer.call(this);
	}

	ReflectorSerializer.prototype = Object.create(BaseSerializer.prototype);
	ReflectorSerializer.prototype.constructor = ReflectorSerializer;

	ReflectorSerializer.prototype.toJSON = function (obj) {
	    var json = MeshSerializer.prototype.toJSON.call(this, obj);

	    if (json.userData.mesh) {
	        json.userData.mesh = (new MeshSerializer()).toJSON(json.userData.mesh);
	    }

	    return json;
	};

	ReflectorSerializer.prototype.fromJSON = function (json) {
	    var geometry = (new GeometriesSerializer()).fromJSON(json.geometry);
	    var obj = new THREE.Reflector(geometry, {
	        color: json.userData.color,
	        textureWidth: parseInt(json.userData.size),
	        textureHeight: parseInt(json.userData.size),
	        clipBias: json.userData.clipBias,
	        recursion: json.userData.recursion ? 1 : 0
	    });

	    MeshSerializer.prototype.fromJSON.call(this, json, obj);

	    if (obj.userData.mesh) {
	        obj.userData.mesh = (new MeshSerializer()).fromJSON(obj.userData.mesh);
	    }

	    return obj;
	};

	/**
	 * 火焰
	 */
	function Fire(camera, options = {}) {
	    THREE.Object3D.call(this);

	    VolumetricFire.texturePath = 'assets/textures/VolumetricFire/';

	    var width = options.width || 2;
	    var height = options.height || 4;
	    var depth = options.depth || 2;
	    var sliceSpacing = options.sliceSpacing || 0.5;

	    var fire = new VolumetricFire(
	        width,
	        height,
	        depth,
	        sliceSpacing,
	        camera
	    );

	    this.add(fire.mesh);

	    fire.mesh.name = L_FIRE;

	    this.name = L_FIRE;
	    this.position.y = 2;

	    Object.assign(this.userData, {
	        type: 'Fire',
	        fire: fire,
	        width: width,
	        height: height,
	        depth: depth,
	        sliceSpacing: sliceSpacing
	    });
	}

	Fire.prototype = Object.create(THREE.Object3D.prototype);
	Fire.prototype.constructor = Fire;

	/**
	 * FireSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function FireSerializer() {
	    BaseSerializer.call(this);
	}

	FireSerializer.prototype = Object.create(BaseSerializer.prototype);
	FireSerializer.prototype.constructor = FireSerializer;

	FireSerializer.prototype.toJSON = function (obj) {
	    var json = Object3DSerializer.prototype.toJSON.call(this, obj);

	    delete json.userData.fire;

	    return json;
	};

	FireSerializer.prototype.fromJSON = function (json, parent, camera) {
	    var fire = new Fire(camera, {
	        width: json.userData.width,
	        height: json.userData.height,
	        depth: json.userData.depth,
	        sliceSpacing: json.userData.sliceSpacing
	    });

	    Object3DSerializer.prototype.fromJSON.call(this, json, fire);

	    fire.userData.fire.update(0);

	    return fire;
	};

	var vertexShader = "attribute float shift;\r\nuniform float time;\r\nuniform float size;\r\nuniform float lifetime;\r\nuniform float projection;\r\nvarying float progress;\r\n\r\nfloat cubicOut( float t ) {\r\n\r\n  float f = t - 1.0;\r\n  return f * f * f + 1.0;\r\n\r\n}\r\n\r\nvoid main () {\r\n\r\n  progress = fract( time * 2. / lifetime + shift );\r\n  float eased = cubicOut( progress );\r\n  vec3 pos = vec3( position.x * eased, position.y * eased, position.z );\r\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( pos, 1. );\r\n  gl_PointSize = ( projection * size ) / gl_Position.w;\r\n\r\n}";

	var fragmentShader = "uniform sampler2D texture;\r\nvarying float progress;\r\n\r\nvoid main() {\r\n\r\n  vec3 color = vec3( 1. );\r\n  gl_FragColor = texture2D( texture, gl_PointCoord ) * vec4( color, .3 * ( 1. - progress ) );\r\n\r\n}";

	/**
	 * 烟
	 * @author yomotsu / http://yomotsu.net
	 * ported from http://webgl-fire.appspot.com/html/fire.html
	 *
	 * https://www.youtube.com/watch?v=jKRHmQmduDI
	 * https://graphics.ethz.ch/teaching/former/imagesynthesis_06/miniprojects/p3/
	 * https://www.iusb.edu/math-compsci/_prior-thesis/YVanzine_thesis.pdf
	 * @param {*} camera 相机
	 * @param {*} renderer 渲染器
	 * @param {*} options 选项
	 */
	function Smoke(camera, renderer, options = {}) {
	    var particleCount = options.particleCount || 32;
	    var size = options.size || 3;
	    var lifetime = options.lifetime || 10;

	    // 几何体
	    var geometry = new THREE.BufferGeometry();

	    var position = new Float32Array(particleCount * 3);
	    var shift = new Float32Array(particleCount);

	    for (var i = 0; i < particleCount; i++) {
	        position[i * 3 + 0] = THREE.Math.randFloat(-0.5, 0.5);
	        position[i * 3 + 1] = 2.4;
	        position[i * 3 + 3] = THREE.Math.randFloat(-0.5, 0.5);
	        shift[i] = Math.random() * 1;
	    }

	    geometry.addAttribute('position', new THREE.BufferAttribute(position, 3));
	    geometry.addAttribute('shift', new THREE.BufferAttribute(shift, 1));

	    // 材质
	    var texture = (new THREE.TextureLoader()).load('assets/textures/VolumetricFire/smoke.png');

	    var uniforms = {
	        time: { type: 'f', value: 0 },
	        size: { type: 'f', value: size },
	        texture: { type: 't', value: texture },
	        lifetime: { type: 'f', value: lifetime },
	        projection: { type: 'f', value: Math.abs(renderer.domElement.height / (2 * Math.tan(THREE.Math.degToRad(camera.fov)))) }
	    };

	    var material = new THREE.ShaderMaterial({
	        vertexShader: vertexShader,
	        fragmentShader: fragmentShader,
	        uniforms: uniforms,
	        blending: THREE.AdditiveBlending,
	        transparent: true,
	        depthWrite: false
	    });

	    THREE.Points.call(this, geometry, material);

	    this.sortParticles = true;

	    this.name = L_SMOKE;

	    Object.assign(this.userData, {
	        type: 'Smoke',
	        particleCount: particleCount,
	        size: size,
	        lifetime: lifetime
	    });
	}

	Smoke.prototype = Object.create(THREE.Points.prototype);
	Smoke.prototype.constructor = Smoke;

	Smoke.prototype.update = function (elapsed) {
	    this.material.uniforms.time.value = elapsed;
	};

	/**
	 * SmokeSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function SmokeSerializer() {
	    BaseSerializer.call(this);
	}

	SmokeSerializer.prototype = Object.create(BaseSerializer.prototype);
	SmokeSerializer.prototype.constructor = SmokeSerializer;

	SmokeSerializer.prototype.toJSON = function (obj) {
	    var json = MeshSerializer.prototype.toJSON.call(this, obj);

	    return json;
	};

	SmokeSerializer.prototype.fromJSON = function (json, parent, camera, renderer) {
	    var obj = parent || new Smoke(camera, renderer, json.userData);

	    MeshSerializer.prototype.fromJSON.call(this, json, obj);

	    obj.update(0);

	    return obj;
	};

	/**
	 * 天空
	 * @param {*} options 选项
	 */
	function Sky(options) {
	    THREE.Object3D.call(this);

	    options = options || {};

	    var turbidity = options.turbidity || 10; // 浑浊度
	    var rayleigh = options.rayleigh || 2; // 瑞利
	    var luminance = options.luminance || 1; // 亮度
	    var mieCoefficient = options.mieCoefficient || 0.005;
	    var mieDirectionalG = options.mieDirectionalG || 0.8;

	    var distance = 400000;

	    var sky = new THREE.Sky();
	    sky.scale.setScalar(450000);

	    this.add(sky);

	    var sunSphere = new THREE.Mesh(
	        new THREE.SphereBufferGeometry(20000, 16, 8),
	        new THREE.MeshBasicMaterial({ color: 0xffffff })
	    );

	    sunSphere.position.y = -700000;
	    sunSphere.visible = false;

	    this.add(sunSphere);

	    var uniforms = sky.material.uniforms;
	    uniforms.turbidity.value = turbidity;
	    uniforms.rayleigh.value = rayleigh;
	    uniforms.luminance.value = luminance;
	    uniforms.mieCoefficient.value = mieCoefficient;
	    uniforms.mieDirectionalG.value = mieDirectionalG;
	    var theta = Math.PI * (0.49 - 0.5);
	    var phi = 2 * Math.PI * (0.25 - 0.5);
	    sunSphere.position.x = distance * Math.cos(phi);
	    sunSphere.position.y = distance * Math.sin(phi) * Math.sin(theta);
	    sunSphere.position.z = distance * Math.sin(phi) * Math.cos(theta);
	    sunSphere.visible = true;
	    uniforms.sunPosition.value.copy(sunSphere.position);

	    this.userData = {
	        type: 'Sky',
	        turbidity: turbidity,
	        rayleigh: rayleigh,
	        luminance: luminance,
	        mieCoefficient: mieCoefficient,
	        mieDirectionalG: mieDirectionalG
	    };
	}

	Sky.prototype = Object.create(THREE.Object3D.prototype);
	Sky.prototype.constructor = Sky;

	/**
	 * SkySerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function SkySerializer() {
	    BaseSerializer.call(this);
	}

	SkySerializer.prototype = Object.create(BaseSerializer.prototype);
	SkySerializer.prototype.constructor = SkySerializer;

	SkySerializer.prototype.toJSON = function (obj) {
	    return Object3DSerializer.prototype.toJSON.call(this, obj);
	};

	SkySerializer.prototype.fromJSON = function (json, parent, camera) {
	    var obj = new Sky(json);

	    Object3DSerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * 粒子发射器
	 */
	function ParticleEmitter(group, emitter) {
	    THREE.Object3D.call(this);

	    group = group || new SPE.Group({
	        texture: {
	            value: new THREE.TextureLoader().load('assets/textures/SPE/smokeparticle.png')
	        },
	        maxParticleCount: 2000
	    });

	    emitter = emitter || new SPE.Emitter({
	        maxAge: {
	            value: 2
	        },
	        position: {
	            value: new THREE.Vector3(0, 0, 0),
	            spread: new THREE.Vector3(0, 0, 0)
	        },

	        acceleration: {
	            value: new THREE.Vector3(0, -10, 0),
	            spread: new THREE.Vector3(10, 0, 10)
	        },

	        velocity: {
	            value: new THREE.Vector3(0, 25, 0),
	            spread: new THREE.Vector3(10, 7.5, 10)
	        },

	        color: {
	            value: [new THREE.Color('white'), new THREE.Color('red')]
	        },

	        size: {
	            value: 1
	        },

	        particleCount: 2000
	    });

	    group.addEmitter(emitter);

	    group.mesh.name = L_PARTICLE;

	    this.add(group.mesh);

	    this.name = L_PARTICLE_EMITTER;

	    Object.assign(this.userData, {
	        type: 'ParticleEmitter',
	        group: group,
	        emitter: emitter
	    });
	}

	ParticleEmitter.prototype = Object.create(THREE.Object3D.prototype);
	ParticleEmitter.prototype.constructor = ParticleEmitter;

	/**
	 * ParticleEmitterSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function ParticleEmitterSerializer() {
	    BaseSerializer.call(this);
	}

	ParticleEmitterSerializer.prototype = Object.create(BaseSerializer.prototype);
	ParticleEmitterSerializer.prototype.constructor = ParticleEmitterSerializer;

	ParticleEmitterSerializer.prototype.toJSON = function (obj) {
	    var json = Object3DSerializer.prototype.toJSON.call(this, obj);

	    json.children.length = 0;

	    var group = json.userData.group;
	    var emitter = json.userData.emitter;

	    json.userData.group = {
	        texture: (new TexturesSerializer()).toJSON(group.texture),
	        maxParticleCount: group.maxParticleCount
	    };

	    json.userData.emitter = {
	        position: {
	            value: {
	                x: emitter.position.value.x,
	                y: emitter.position.value.y,
	                z: emitter.position.value.z
	            },
	            spread: {
	                x: emitter.position.spread.x,
	                y: emitter.position.spread.y,
	                z: emitter.position.spread.z
	            }
	        },
	        velocity: {
	            value: {
	                x: emitter.velocity.value.x,
	                y: emitter.velocity.value.y,
	                z: emitter.velocity.value.z
	            },
	            spread: {
	                x: emitter.velocity.spread.x,
	                y: emitter.velocity.spread.y,
	                z: emitter.velocity.spread.z
	            }
	        },
	        acceleration: {
	            value: {
	                x: emitter.acceleration.value.x,
	                y: emitter.acceleration.value.y,
	                z: emitter.acceleration.value.z
	            },
	            spread: {
	                x: emitter.acceleration.spread.x,
	                y: emitter.acceleration.spread.y,
	                z: emitter.acceleration.spread.z
	            }
	        },
	        color: {
	            value: [
	                emitter.color.value[0].getHex(),
	                emitter.color.value[1].getHex(),
	                emitter.color.value[2].getHex(),
	                emitter.color.value[3].getHex()
	            ]
	        },
	        size: {
	            value: emitter.size.value,
	            spread: emitter.size.spread
	        },
	        particleCount: emitter.particleCount,
	        maxAge: {
	            value: emitter.maxAge.value,
	            spread: emitter.maxAge.spread
	        }
	    };

	    return json;
	};

	ParticleEmitterSerializer.prototype.fromJSON = function (json, parent, server) {
	    var groupJson = json.userData.group;
	    var emitterJson = json.userData.emitter;

	    var group = new SPE.Group({
	        texture: {
	            value: (new TexturesSerializer()).fromJSON(groupJson.texture, undefined, server)
	        },
	        maxParticleCount: groupJson.maxParticleCount
	    });

	    var emitter = new SPE.Emitter({
	        maxAge: {
	            value: emitterJson.maxAge.value
	        },
	        position: {
	            value: new THREE.Vector3().copy(emitterJson.position.value),
	            spread: new THREE.Vector3().copy(emitterJson.position.spread)
	        },

	        acceleration: {
	            value: new THREE.Vector3().copy(emitterJson.acceleration.value),
	            spread: new THREE.Vector3().copy(emitterJson.acceleration.spread)
	        },

	        velocity: {
	            value: new THREE.Vector3().copy(emitterJson.velocity.value),
	            spread: new THREE.Vector3().copy(emitterJson.velocity.spread)
	        },

	        color: {
	            value: [
	                new THREE.Color(emitterJson.color.value[0]),
	                new THREE.Color(emitterJson.color.value[1]),
	                new THREE.Color(emitterJson.color.value[2]),
	                new THREE.Color(emitterJson.color.value[3])
	            ]
	        },

	        size: {
	            value: emitterJson.size.value.slice(),
	            spread: emitterJson.size.spread.slice()
	        },

	        particleCount: emitterJson.particleCount
	    });

	    var obj = new ParticleEmitter(group, emitter);

	    delete json.userData.group;
	    delete json.userData.emitter;

	    Object3DSerializer.prototype.fromJSON.call(this, json, obj);

	    obj.userData.group.tick(0);

	    return obj;
	};

	/**
	 * 柏林地形
	 * @param {*} width 地形宽度
	 * @param {*} depth 地形深度
	 * @param {*} widthSegments 宽度分段
	 * @param {*} depthSegments 深度分段
	 * @param {*} quality 地形质量
	 */
	function PerlinTerrain(width = 1000, depth = 1000, widthSegments = 256, depthSegments = 256, quality = 80) {
	    // 创建地形几何体
	    var geometry = new THREE.PlaneBufferGeometry(width, depth, widthSegments - 1, depthSegments - 1);
	    geometry.rotateX(-Math.PI / 2);

	    var vertices = geometry.attributes.position.array;

	    var data = this.generateHeight(widthSegments, depthSegments, quality);

	    for (var i = 0, l = vertices.length; i < l; i++) {
	        vertices[i * 3 + 1] = data[i]; // 给顶点数组y分量赋值（地面高度）
	    }

	    geometry.computeFaceNormals();

	    // 创建光照贴图
	    var texture = new THREE.CanvasTexture(this.generateTexture(data, widthSegments, depthSegments));
	    texture.wrapS = THREE.ClampToEdgeWrapping;
	    texture.wrapT = THREE.ClampToEdgeWrapping;

	    // 创建网格
	    THREE.Mesh.call(this, geometry, new THREE.MeshLambertMaterial({ map: texture }));

	    this.name = L_TERRAIN;

	    this.position.y = -50;

	    Object.assign(this.userData, {
	        type: 'PerlinTerrain',
	        width: width,
	        depth: depth,
	        widthSegments: widthSegments,
	        depthSegments: depthSegments,
	        quality: quality,
	    });
	}

	PerlinTerrain.prototype = Object.create(THREE.Mesh.prototype);
	PerlinTerrain.prototype.constructor = PerlinTerrain;

	/**
	 * 生成高程数据
	 * @param {*} width 宽度
	 * @param {*} height 高度
	 * @param {*} quality 质量
	 */
	PerlinTerrain.prototype.generateHeight = function (width, height, quality) {
	    var data = new Uint8Array(width * height);
	    var perlin = new ImprovedNoise();

	    for (var i = 0; i < width; i++) {
	        for (var j = 0; j < height; j++) {
	            data[i * height + j] = Math.abs(perlin.noise(i / quality, j / quality, 0) * quality);
	        }
	    }

	    return data;
	};

	/**
	 * 将光照烘培到贴图上
	 * @param {*} data 高程数据
	 * @param {*} width 宽度
	 * @param {*} height 高度
	 */
	PerlinTerrain.prototype.generateTexture = function (data, width, height) {
	    // 创建ImageData
	    var canvas = document.createElement('canvas');
	    canvas.width = width;
	    canvas.height = height;

	    var context = canvas.getContext('2d');
	    context.fillStyle = '#000';
	    context.fillRect(0, 0, width, height);

	    var image = context.getImageData(0, 0, canvas.width, canvas.height);
	    var imageData = image.data;

	    // 计算光照强度
	    var sun = new THREE.Vector3(1, 1, 1);
	    sun.normalize();

	    var vector3 = new THREE.Vector3(0, 0, 0);
	    var shade;

	    for (var i = 0, j = 0, l = imageData.length; i < l; i += 4, j++) { // i-像素RGBA分量索引，j-高程数据索引
	        vector3.x = data[j - 2] - data[j + 2];
	        vector3.y = 2;
	        vector3.z = data[j - width * 2] - data[j + width * 2];
	        vector3.normalize();
	        shade = vector3.dot(sun);
	        imageData[i] = (96 + shade * 128) * (0.5 + data[j] * 0.007);
	        imageData[i + 1] = (32 + shade * 96) * (0.5 + data[j] * 0.007);
	        imageData[i + 2] = (shade * 96) * (0.5 + data[j] * 0.007);
	    }

	    // 将光照强度写入canvas
	    context.putImageData(image, 0, 0);

	    return canvas;
	};

	/**
	 * PerlinTerrainSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function PerlinTerrainSerializer() {
	    BaseSerializer.call(this);
	}

	PerlinTerrainSerializer.prototype = Object.create(BaseSerializer.prototype);
	PerlinTerrainSerializer.prototype.constructor = PerlinTerrainSerializer;

	PerlinTerrainSerializer.prototype.toJSON = function (obj) {
	    var json = Object3DSerializer.prototype.toJSON.call(this, obj);

	    return json;
	};

	PerlinTerrainSerializer.prototype.fromJSON = function (json, parent) {
	    var terrain = new PerlinTerrain(
	        json.userData.width,
	        json.userData.depth,
	        json.userData.widthSegments,
	        json.userData.depthSegments,
	        json.userData.quality,
	    );

	    Object3DSerializer.prototype.fromJSON.call(this, json, terrain);

	    return terrain;
	};

	var HeightmapFragmentShader = "#include <common>\r\nuniform vec2 mousePos;\r\nuniform float mouseSize;\r\nuniform float viscosityConstant;\r\n#define deltaTime ( 1.0 / 60.0 )\r\n#define GRAVITY_CONSTANT ( resolution.x * deltaTime * 3.0 )\r\nvoid main()\t{\r\n\tvec2 cellSize = 1.0 / resolution.xy;\r\n\tvec2 uv = gl_FragCoord.xy * cellSize;\r\n\t// heightmapValue.x == height\r\n\t// heightmapValue.y == velocity\r\n\t// heightmapValue.z, heightmapValue.w not used\r\n\tvec4 heightmapValue = texture2D( heightmap, uv );\r\n\t// Get neighbours\r\n\tvec4 north = texture2D( heightmap, uv + vec2( 0.0, cellSize.y ) );\r\n\tvec4 south = texture2D( heightmap, uv + vec2( 0.0, - cellSize.y ) );\r\n\tvec4 east = texture2D( heightmap, uv + vec2( cellSize.x, 0.0 ) );\r\n\tvec4 west = texture2D( heightmap, uv + vec2( - cellSize.x, 0.0 ) );\r\n\tfloat sump = north.x + south.x + east.x + west.x - 4.0 * heightmapValue.x;\r\n\tfloat accel = sump * GRAVITY_CONSTANT;\r\n\t// Dynamics\r\n\theightmapValue.y += accel;\r\n\theightmapValue.x += heightmapValue.y * deltaTime;\r\n\t// Viscosity\r\n\theightmapValue.x += sump * viscosityConstant;\r\n\t// Mouse influence\r\n\tfloat mousePhase = clamp( length( ( uv - vec2( 0.5 ) ) * BOUNDS - vec2( mousePos.x, - mousePos.y ) ) * PI / mouseSize, 0.0, PI );\r\n\theightmapValue.x += cos( mousePhase ) + 1.0;\r\n\tgl_FragColor = heightmapValue;\r\n}";

	var SmoothFragmentShader = "uniform sampler2D texture;\r\n\r\nvoid main()\t{\r\n\tvec2 cellSize = 1.0 / resolution.xy;\r\n\tvec2 uv = gl_FragCoord.xy * cellSize;\r\n\t// Computes the mean of texel and 4 neighbours\r\n\tvec4 textureValue = texture2D( texture, uv );\r\n\ttextureValue += texture2D( texture, uv + vec2( 0.0, cellSize.y ) );\r\n\ttextureValue += texture2D( texture, uv + vec2( 0.0, - cellSize.y ) );\r\n\ttextureValue += texture2D( texture, uv + vec2( cellSize.x, 0.0 ) );\r\n\ttextureValue += texture2D( texture, uv + vec2( - cellSize.x, 0.0 ) );\r\n\ttextureValue /= 5.0;\r\n\tgl_FragColor = textureValue;\r\n}";

	var WaterVertexShader = "uniform sampler2D heightmap;\r\n#define PHONG\r\nvarying vec3 vViewPosition;\r\n#ifndef FLAT_SHADED\r\n\tvarying vec3 vNormal;\r\n#endif\r\n#include <common>\r\n#include <uv_pars_vertex>\r\n#include <uv2_pars_vertex>\r\n#include <displacementmap_pars_vertex>\r\n#include <envmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\tvec2 cellSize = vec2( 1.0 / WIDTH, 1.0 / WIDTH );\r\n\t#include <uv_vertex>\r\n\t#include <uv2_vertex>\r\n\t#include <color_vertex>\r\n\t// # include <beginnormal_vertex>\r\n\t// Compute normal from heightmap\r\n\tvec3 objectNormal = vec3(\r\n\t\t( texture2D( heightmap, uv + vec2( - cellSize.x, 0 ) ).x - texture2D( heightmap, uv + vec2( cellSize.x, 0 ) ).x ) * WIDTH / BOUNDS,\r\n\t\t( texture2D( heightmap, uv + vec2( 0, - cellSize.y ) ).x - texture2D( heightmap, uv + vec2( 0, cellSize.y ) ).x ) * WIDTH / BOUNDS,\r\n\t\t1.0 );\r\n\t//<beginnormal_vertex>\r\n\t#include <morphnormal_vertex>\r\n\t#include <skinbase_vertex>\r\n\t#include <skinnormal_vertex>\r\n\t#include <defaultnormal_vertex>\r\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\r\n\tvNormal = normalize( transformedNormal );\r\n#endif\r\n\t//# include <begin_vertex>\r\n\tfloat heightValue = texture2D( heightmap, uv ).x;\r\n\tvec3 transformed = vec3( position.x, position.y, heightValue );\r\n\t//<begin_vertex>\r\n\t#include <morphtarget_vertex>\r\n\t#include <skinning_vertex>\r\n\t#include <displacementmap_vertex>\r\n\t#include <project_vertex>\r\n\t#include <logdepthbuf_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\tvViewPosition = - mvPosition.xyz;\r\n\t#include <worldpos_vertex>\r\n\t#include <envmap_vertex>\r\n\t#include <shadowmap_vertex>\r\n}";

	/**
	 * 水
	 */
	function Water(renderer) {
	    var BOUNDS = 512;
	    var WIDTH = 128;
	    var materialColor = 0x0040C0;

	    // 创建几何体
	    var geometry = new THREE.PlaneBufferGeometry(BOUNDS, BOUNDS, WIDTH - 1, WIDTH - 1);

	    // 创建材质
	    var material = new THREE.ShaderMaterial({
	        uniforms: THREE.UniformsUtils.merge([
	            THREE.ShaderLib['phong'].uniforms, {
	                heightmap: {
	                    value: null
	                }
	            }
	        ]),
	        vertexShader: WaterVertexShader,
	        fragmentShader: THREE.ShaderChunk['meshphong_frag']
	    });
	    material.lights = true;
	    // 来自MeshPhongMaterial的属性
	    material.color = new THREE.Color(materialColor);
	    material.specular = new THREE.Color(0x111111);
	    material.shininess = 50;
	    // 根据材质的值设置uniforms
	    material.uniforms.diffuse.value = material.color;
	    material.uniforms.specular.value = material.specular;
	    material.uniforms.shininess.value = Math.max(material.shininess, 1e-4);
	    material.uniforms.opacity.value = material.opacity;
	    // 设置Defines
	    material.defines.WIDTH = WIDTH.toFixed(1);
	    material.defines.BOUNDS = BOUNDS.toFixed(1);

	    var waterUniforms = material.uniforms;

	    // 创建网格
	    THREE.Mesh.call(this, geometry, material);

	    this.name = L_WATER;

	    this.rotation.x = -Math.PI / 2;

	    this.matrixAutoUpdate = false;
	    this.updateMatrix();

	    var gpuCompute = new GPUComputationRenderer(WIDTH, WIDTH, renderer);

	    var heightmap0 = gpuCompute.createTexture();
	    this.fillTexture(heightmap0, WIDTH);

	    var heightmapVariable = gpuCompute.addVariable('heightmap', HeightmapFragmentShader, heightmap0);
	    gpuCompute.setVariableDependencies(heightmapVariable, [heightmapVariable]);

	    heightmapVariable.material.uniforms.mousePos = {
	        value: new THREE.Vector2(10000, 10000)
	    };
	    heightmapVariable.material.uniforms.mouseSize = {
	        value: 20.0
	    };
	    heightmapVariable.material.uniforms.viscosityConstant = {
	        value: 0
	    };
	    heightmapVariable.material.defines.BOUNDS = BOUNDS.toFixed(1);

	    var error = gpuCompute.init();
	    if (error !== null) {
	        console.error(error);
	    }

	    var smoothShader = gpuCompute.createShaderMaterial(SmoothFragmentShader, {
	        texture: {
	            value: null
	        }
	    });

	    this.heightmapVariable = heightmapVariable;
	    this.gpuCompute = gpuCompute;
	    this.waterUniforms = waterUniforms;

	    Object.assign(this.userData, {
	        type: 'Water'
	    });
	}

	Water.prototype = Object.create(THREE.Mesh.prototype);
	Water.prototype.constructor = Water;

	Water.prototype.fillTexture = function (texture, WIDTH) {
	    var simplex = new SimplexNoise();

	    var waterMaxHeight = 30;

	    function noise(x, y, z) {
	        var multR = waterMaxHeight;
	        var mult = 0.025;
	        var r = 0;
	        for (var i = 0; i < 15; i++) {
	            r += multR * simplex.noise(x * mult, y * mult);
	            multR *= 0.53 + 0.025 * i;
	            mult *= 1.25;
	        }
	        return r;
	    }

	    var pixels = texture.image.data;
	    var p = 0;
	    for (var j = 0; j < WIDTH; j++) {
	        for (var i = 0; i < WIDTH; i++) {
	            var x = i * 128 / WIDTH;
	            var y = j * 128 / WIDTH;
	            pixels[p + 0] = noise(x, y, 123.4);
	            pixels[p + 1] = 0;
	            pixels[p + 2] = 0;
	            pixels[p + 3] = 1;
	            p += 4;
	        }
	    }
	};

	Water.prototype.update = function () {
	    var heightmapVariable = this.heightmapVariable;
	    var gpuCompute = this.gpuCompute;
	    var waterUniforms = this.waterUniforms;

	    var uniforms = heightmapVariable.material.uniforms;
	    uniforms.mousePos.value.set(10000, 10000);

	    gpuCompute.compute();

	    waterUniforms.heightmap.value = gpuCompute.getCurrentRenderTarget(heightmapVariable).texture;
	};

	/**
	 * WaterSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function WaterSerializer() {
	    BaseSerializer.call(this);
	}

	WaterSerializer.prototype = Object.create(BaseSerializer.prototype);
	WaterSerializer.prototype.constructor = WaterSerializer;

	WaterSerializer.prototype.toJSON = function (obj) {
	    var json = Object3DSerializer.prototype.toJSON.call(this, obj);
	    return json;
	};

	WaterSerializer.prototype.fromJSON = function (json, parent, renderer) {
	    var obj = new Water(renderer);

	    Object3DSerializer.prototype.fromJSON.call(this, json, obj);

	    obj.update();

	    return obj;
	};

	/*
	 * Cloth Simulation using a relaxed constraints solver
	 */

	// Suggested Readings

	// Advanced Character Physics by Thomas Jakobsen Character
	// http://freespace.virgin.net/hugo.elias/models/m_cloth.htm
	// http://en.wikipedia.org/wiki/Cloth_modeling
	// http://cg.alexandra.dk/tag/spring-mass-system/
	// Real-time Cloth Animation http://www.darwin3d.com/gamedev/articles/col0599.pdf
	var DAMPING = 0.03;
	var DRAG = 1 - DAMPING;
	var MASS = 0.1;
	var restDistance = 25;

	var xSegs = 10;
	var ySegs = 10;

	function plane(width, height) {
	    return function (u, v, optionalTarget) {
	        var result = optionalTarget || new THREE.Vector3();

	        var x = (u - 0.5) * width;
	        var y = (v + 0.5) * height;
	        var z = 0;

	        return result.set(x, y, z);
	    };
	}

	var clothFunction = plane(restDistance * xSegs, restDistance * ySegs);

	var GRAVITY = 981 * 1.4;
	var gravity = new THREE.Vector3(0, -GRAVITY, 0).multiplyScalar(MASS);

	var TIMESTEP = 18 / 1000;
	var TIMESTEP_SQ = TIMESTEP * TIMESTEP;
	var windForce = new THREE.Vector3(0, 0, 0);

	var tmpForce = new THREE.Vector3();

	var lastTime;

	function Particle(x, y, z, mass) {
	    this.position = clothFunction(x, y); // position
	    this.previous = clothFunction(x, y); // previous
	    this.original = clothFunction(x, y);
	    this.a = new THREE.Vector3(0, 0, 0); // acceleration
	    this.mass = mass;
	    this.invMass = 1 / mass;
	    this.tmp = new THREE.Vector3();
	    this.tmp2 = new THREE.Vector3();
	}

	// Force -> Acceleration
	Particle.prototype.addForce = function (force) {
	    this.a.add(
	        this.tmp2.copy(force).multiplyScalar(this.invMass)
	    );
	};

	// Performs Verlet integration
	Particle.prototype.integrate = function (timesq) {
	    var newPos = this.tmp.subVectors(this.position, this.previous);
	    newPos.multiplyScalar(DRAG).add(this.position);
	    newPos.add(this.a.multiplyScalar(timesq));

	    this.tmp = this.previous;
	    this.previous = this.position;
	    this.position = newPos;

	    this.a.set(0, 0, 0);
	};

	var diff = new THREE.Vector3();

	function satisfyConstraints(p1, p2, distance) {
	    diff.subVectors(p2.position, p1.position);
	    var currentDist = diff.length();
	    if (currentDist === 0) return; // prevents division by 0
	    var correction = diff.multiplyScalar(1 - distance / currentDist);
	    var correctionHalf = correction.multiplyScalar(0.5);
	    p1.position.add(correctionHalf);
	    p2.position.sub(correctionHalf);
	}

	/**
	 * 布料
	 */
	function Cloth() {
	    var pins = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

	    var w = xSegs;
	    var h = ySegs;
	    this.w = w;
	    this.h = h;

	    var particles = [];
	    var constraints = [];

	    var u, v;

	    // Create particles
	    for (v = 0; v <= h; v++) {
	        for (u = 0; u <= w; u++) {
	            particles.push(
	                new Particle(u / w, v / h, 0, MASS)
	            );
	        }
	    }

	    // Structural
	    for (v = 0; v < h; v++) {
	        for (u = 0; u < w; u++) {
	            constraints.push([
	                particles[index(u, v)],
	                particles[index(u, v + 1)],
	                restDistance
	            ]);

	            constraints.push([
	                particles[index(u, v)],
	                particles[index(u + 1, v)],
	                restDistance
	            ]);
	        }
	    }

	    for (u = w, v = 0; v < h; v++) {
	        constraints.push([
	            particles[index(u, v)],
	            particles[index(u, v + 1)],
	            restDistance
	        ]);
	    }

	    for (v = h, u = 0; u < w; u++) {
	        constraints.push([
	            particles[index(u, v)],
	            particles[index(u + 1, v)],
	            restDistance
	        ]);
	    }

	    this.particles = particles;
	    this.constraints = constraints;

	    function index(u, v) {
	        return u + v * (w + 1);
	    }

	    this.index = index;

	    // 材质
	    var loader = new THREE.TextureLoader();

	    var clothTexture = loader.load('assets/textures/patterns/circuit_pattern.png');
	    clothTexture.anisotropy = 16;

	    var clothGeometry = new THREE.ParametricGeometry(clothFunction, w, h);

	    var clothMaterial = new THREE.MeshLambertMaterial({
	        map: clothTexture,
	        side: THREE.DoubleSide,
	        alphaTest: 0.5
	    });

	    THREE.Mesh.call(this, clothGeometry, clothMaterial);

	    this.scale.multiplyScalar(0.02);

	    this.castShadow = true;

	    Object.assign(this.userData, {
	        type: 'Cloth'
	    });

	    this.pins = pins;
	    this.clothGeometry = clothGeometry;
	}

	Cloth.prototype = Object.create(THREE.Mesh.prototype);
	Cloth.prototype.constructor = Cloth;

	Cloth.prototype.update = function (clock, deltaTime) {
	    var time = Date.now();

	    var windStrength = Math.cos(time / 7000) * 20 + 40;

	    windForce.set(Math.sin(time / 2000), Math.cos(time / 3000), Math.sin(time / 1000));
	    windForce.normalize();
	    windForce.multiplyScalar(windStrength);

	    this.simulate(time, this.clothGeometry, this.pins);

	    var p = this.particles;
	    var clothGeometry = this.clothGeometry;

	    for (var i = 0, il = p.length; i < il; i++) {
	        clothGeometry.vertices[i].copy(p[i].position);
	    }

	    clothGeometry.verticesNeedUpdate = true;

	    clothGeometry.computeFaceNormals();
	    clothGeometry.computeVertexNormals();
	};

	Cloth.prototype.simulate = function (time) {
	    if (!lastTime) {
	        lastTime = time;
	        return;
	    }

	    var i, il, particles, particle, constraints, constraint;

	    // Aerodynamics forces
	    {
	        var face, faces = this.clothGeometry.faces,
	            normal;
	        particles = this.particles;

	        for (i = 0, il = faces.length; i < il; i++) {
	            face = faces[i];
	            normal = face.normal;

	            tmpForce.copy(normal).normalize().multiplyScalar(normal.dot(windForce));
	            particles[face.a].addForce(tmpForce);
	            particles[face.b].addForce(tmpForce);
	            particles[face.c].addForce(tmpForce);
	        }
	    }

	    for (particles = this.particles, i = 0, il = particles.length; i < il; i++) {
	        particle = particles[i];
	        particle.addForce(gravity);

	        particle.integrate(TIMESTEP_SQ);
	    }

	    // Start Constraints
	    constraints = this.constraints;
	    il = constraints.length;

	    for (i = 0; i < il; i++) {
	        constraint = constraints[i];
	        satisfyConstraints(constraint[0], constraint[1], constraint[2]);
	    }

	    // Floor Constraints
	    for (particles = this.particles, i = 0, il = particles.length; i < il; i++) {
	        particle = particles[i];
	        var pos = particle.position;
	        if (pos.y < -250) {
	            pos.y = -250;
	        }
	    }

	    // Pin Constraints
	    var pins = this.pins;

	    for (i = 0, il = pins.length; i < il; i++) {
	        var xy = pins[i];
	        var p = particles[xy];
	        p.position.copy(p.original);
	        p.previous.copy(p.original);
	    }
	};

	/**
	 * ClothSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function ClothSerializer() {
	    BaseSerializer.call(this);
	}

	ClothSerializer.prototype = Object.create(BaseSerializer.prototype);
	ClothSerializer.prototype.constructor = ClothSerializer;

	ClothSerializer.prototype.toJSON = function (obj) {
	    var json = Object3DSerializer.prototype.toJSON.call(this, obj);

	    return json;
	};

	ClothSerializer.prototype.fromJSON = function (json, parent, camera) {
	    var cloth = new Cloth();

	    Object3DSerializer.prototype.fromJSON.call(this, json, cloth);

	    return cloth;
	};

	var ARC_SEGMENTS = 200;

	/**
	 * 线段
	 * @param {*} options 
	 */
	function LineCurve(options = {}) {
	    var geometry = new THREE.BufferGeometry();
	    geometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array(ARC_SEGMENTS * 3), 3));

	    var material = new THREE.LineBasicMaterial({
	        color: 0xff0000,
	        opacity: 0.35
	    });

	    THREE.Line.call(this, geometry, material);

	    this.name = L_LINE_CURVE;

	    this.castShadow = true;

	    Object.assign(this.userData, {
	        type: 'LineCurve',
	        points: options.points || [
	            new THREE.Vector3(0, 0, 0),
	            new THREE.Vector3(0, 10, 10)
	        ]
	    });

	    this.update();
	}

	LineCurve.prototype = Object.create(THREE.Line.prototype);
	LineCurve.prototype.constructor = LineCurve;

	LineCurve.prototype.update = function () {
	    var curve = new THREE.LineCurve3(
	        this.userData.points[0],
	        this.userData.points[1],
	    );

	    var position = this.geometry.attributes.position;

	    var point = new THREE.Vector3();

	    for (var i = 0; i < ARC_SEGMENTS; i++) {
	        var t = i / (ARC_SEGMENTS - 1);
	        curve.getPoint(t, point);
	        position.setXYZ(i, point.x, point.y, point.z);
	    }

	    position.needsUpdate = true;
	};

	/**
	 * LineCurveSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function LineCurveSerializer() {
	    BaseSerializer.call(this);
	}

	LineCurveSerializer.prototype = Object.create(BaseSerializer.prototype);
	LineCurveSerializer.prototype.constructor = LineCurveSerializer;

	LineCurveSerializer.prototype.toJSON = function (obj) {
	    var json = MeshSerializer.prototype.toJSON.call(this, obj);

	    return json;
	};

	LineCurveSerializer.prototype.fromJSON = function (json, parent) {
	    json.userData.points = json.userData.points.map(n => {
	        return new THREE.Vector3().copy(n);
	    });

	    var obj = parent || new LineCurve(json.userData);

	    MeshSerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	var ARC_SEGMENTS$1 = 200;

	/**
	 * CatmullRom曲线
	 * @param {*} options 
	 */
	function CatmullRomCurve(options = {}) {
	    var geometry = new THREE.BufferGeometry();
	    geometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array(ARC_SEGMENTS$1 * 3), 3));

	    var material = new THREE.LineBasicMaterial({
	        color: 0xff0000,
	        opacity: 0.35
	    });

	    THREE.Line.call(this, geometry, material);

	    this.name = L_CATMULL_ROM_CURVE;

	    this.castShadow = true;

	    Object.assign(this.userData, {
	        type: 'CatmullRomCurve',
	        points: options.points || [
	            new THREE.Vector3(4, 8, 16),
	            new THREE.Vector3(0, 12, -4),
	            new THREE.Vector3(-16, 4, -8),
	        ],
	        closed: options.closed || false,
	        curveType: options.curveType || 'catmullrom', // centripetal, chordal and catmullrom
	        tension: options.tension || 0.5
	    });

	    this.update();
	}

	CatmullRomCurve.prototype = Object.create(THREE.Line.prototype);
	CatmullRomCurve.prototype.constructor = CatmullRomCurve;

	CatmullRomCurve.prototype.update = function () {
	    var curve = new THREE.CatmullRomCurve3(
	        this.userData.points,
	        this.userData.closed,
	        this.userData.curveType,
	        this.userData.tension
	    );

	    var position = this.geometry.attributes.position;

	    var point = new THREE.Vector3();

	    for (var i = 0; i < ARC_SEGMENTS$1; i++) {
	        var t = i / (ARC_SEGMENTS$1 - 1);
	        curve.getPoint(t, point);
	        position.setXYZ(i, point.x, point.y, point.z);
	    }

	    position.needsUpdate = true;
	};

	/**
	 * CatmullRomCurveSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function CatmullRomCurveSerializer() {
	    BaseSerializer.call(this);
	}

	CatmullRomCurveSerializer.prototype = Object.create(BaseSerializer.prototype);
	CatmullRomCurveSerializer.prototype.constructor = CatmullRomCurveSerializer;

	CatmullRomCurveSerializer.prototype.toJSON = function (obj) {
	    var json = MeshSerializer.prototype.toJSON.call(this, obj);

	    return json;
	};

	CatmullRomCurveSerializer.prototype.fromJSON = function (json, parent) {
	    json.userData.points = json.userData.points.map(n => {
	        return new THREE.Vector3().copy(n);
	    });

	    var obj = parent || new CatmullRomCurve(json.userData);

	    MeshSerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	var ARC_SEGMENTS$2 = 200;

	/**
	 * 二次贝塞尔曲线
	 * @param {*} options 
	 */
	function QuadraticBezierCurve(options = {}) {
	    var geometry = new THREE.BufferGeometry();
	    geometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array(ARC_SEGMENTS$2 * 3), 3));

	    var material = new THREE.LineBasicMaterial({
	        color: 0xff0000,
	        opacity: 0.35
	    });

	    THREE.Line.call(this, geometry, material);

	    this.name = '二次贝塞尔曲线';

	    this.castShadow = true;

	    Object.assign(this.userData, {
	        type: 'QuadraticBezierCurve',
	        points: options.points || [
	            new THREE.Vector3(-10, 0, 0),
	            new THREE.Vector3(20, 15, 0),
	            new THREE.Vector3(10, 0, 0)
	        ]
	    });

	    this.update();
	}

	QuadraticBezierCurve.prototype = Object.create(THREE.Line.prototype);
	QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;

	QuadraticBezierCurve.prototype.update = function () {
	    var curve = new THREE.QuadraticBezierCurve3(
	        this.userData.points[0],
	        this.userData.points[1],
	        this.userData.points[2]
	    );

	    var position = this.geometry.attributes.position;

	    var point = new THREE.Vector3();

	    for (var i = 0; i < ARC_SEGMENTS$2; i++) {
	        var t = i / (ARC_SEGMENTS$2 - 1);
	        curve.getPoint(t, point);
	        position.setXYZ(i, point.x, point.y, point.z);
	    }

	    position.needsUpdate = true;
	};

	/**
	 * QuadraticBezierCurveSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function QuadraticBezierCurveSerializer() {
	    BaseSerializer.call(this);
	}

	QuadraticBezierCurveSerializer.prototype = Object.create(BaseSerializer.prototype);
	QuadraticBezierCurveSerializer.prototype.constructor = QuadraticBezierCurveSerializer;

	QuadraticBezierCurveSerializer.prototype.toJSON = function (obj) {
	    var json = MeshSerializer.prototype.toJSON.call(this, obj);

	    return json;
	};

	QuadraticBezierCurveSerializer.prototype.fromJSON = function (json, parent) {
	    json.userData.points = json.userData.points.map(n => {
	        return new THREE.Vector3().copy(n);
	    });

	    var obj = parent || new QuadraticBezierCurve(json.userData);

	    MeshSerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	var ARC_SEGMENTS$3 = 200;

	/**
	 * 三次贝塞尔曲线
	 * @param {*} options 
	 */
	function CubicBezierCurve(options = {}) {
	    var geometry = new THREE.BufferGeometry();
	    geometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array(ARC_SEGMENTS$3 * 3), 3));

	    var material = new THREE.LineBasicMaterial({
	        color: 0xff0000,
	        opacity: 0.35
	    });

	    THREE.Line.call(this, geometry, material);

	    this.name = L_CUBIC_BEZIER_CURVE;

	    this.castShadow = true;

	    Object.assign(this.userData, {
	        type: 'CubicBezierCurve',
	        points: options.points || [
	            new THREE.Vector3(-10, 0, 0),
	            new THREE.Vector3(-5, 15, 0),
	            new THREE.Vector3(20, 15, 0),
	            new THREE.Vector3(10, 0, 0)
	        ]
	    });

	    this.update();
	}

	CubicBezierCurve.prototype = Object.create(THREE.Line.prototype);
	CubicBezierCurve.prototype.constructor = CubicBezierCurve;

	CubicBezierCurve.prototype.update = function () {
	    var curve = new THREE.CubicBezierCurve3(
	        this.userData.points[0],
	        this.userData.points[1],
	        this.userData.points[2],
	        this.userData.points[3]
	    );

	    var position = this.geometry.attributes.position;

	    var point = new THREE.Vector3();

	    for (var i = 0; i < ARC_SEGMENTS$3; i++) {
	        var t = i / (ARC_SEGMENTS$3 - 1);
	        curve.getPoint(t, point);
	        position.setXYZ(i, point.x, point.y, point.z);
	    }

	    position.needsUpdate = true;
	};

	/**
	 * CubicBezierCurveSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function CubicBezierCurveSerializer() {
	    BaseSerializer.call(this);
	}

	CubicBezierCurveSerializer.prototype = Object.create(BaseSerializer.prototype);
	CubicBezierCurveSerializer.prototype.constructor = CubicBezierCurveSerializer;

	CubicBezierCurveSerializer.prototype.toJSON = function (obj) {
	    var json = MeshSerializer.prototype.toJSON.call(this, obj);

	    return json;
	};

	CubicBezierCurveSerializer.prototype.fromJSON = function (json, parent) {
	    json.userData.points = json.userData.points.map(n => {
	        return new THREE.Vector3().copy(n);
	    });

	    var obj = parent || new CubicBezierCurve(json.userData);

	    MeshSerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	var ARC_SEGMENTS$4 = 200;

	/**
	 * 椭圆曲线
	 * @param {*} options 
	 */
	function EllipseCurve(options = {}) {
	    var geometry = new THREE.BufferGeometry();
	    geometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array(ARC_SEGMENTS$4 * 3), 3));

	    var material = new THREE.LineBasicMaterial({
	        color: 0xff0000,
	        opacity: 0.35
	    });

	    THREE.Line.call(this, geometry, material);

	    this.name = L_ELLIPSE_CURVE;

	    this.castShadow = true;

	    Object.assign(this.userData, {
	        type: 'EllipseCurve',
	        aX: options.aX || 0,
	        aY: options.aY || 0,
	        xRadius: options.xRadius || 10,
	        yRadius: options.yRadius || 5,
	        aStartAngle: options.aStartAngle || 0,
	        aEndAngle: options.aEndAngle || 2 * Math.PI,
	        aClockwise: options.aClockwise || false,
	        aRotation: options.aRotation || 0
	    });

	    this.update();
	}

	EllipseCurve.prototype = Object.create(THREE.Line.prototype);
	EllipseCurve.prototype.constructor = EllipseCurve;

	EllipseCurve.prototype.update = function () {
	    var curve = new THREE.EllipseCurve(
	        this.userData.aX,
	        this.userData.aY,
	        this.userData.xRadius,
	        this.userData.yRadius,
	        this.userData.aStartAngle,
	        this.userData.aEndAngle,
	        this.userData.aClockwise,
	        this.userData.aRotation
	    );

	    var position = this.geometry.attributes.position;

	    var point = new THREE.Vector3();

	    for (var i = 0; i < ARC_SEGMENTS$4; i++) {
	        var t = i / (ARC_SEGMENTS$4 - 1);
	        curve.getPoint(t, point);
	        position.setXYZ(i, point.x, point.y, 0); // 椭圆曲线只能输出二维点
	    }

	    position.needsUpdate = true;
	};

	/**
	 * EllipseCurveSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function EllipseCurveSerializer() {
	    BaseSerializer.call(this);
	}

	EllipseCurveSerializer.prototype = Object.create(BaseSerializer.prototype);
	EllipseCurveSerializer.prototype.constructor = EllipseCurveSerializer;

	EllipseCurveSerializer.prototype.toJSON = function (obj) {
	    var json = MeshSerializer.prototype.toJSON.call(this, obj);

	    return json;
	};

	EllipseCurveSerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent || new EllipseCurve(json.userData);

	    MeshSerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * GlobeSerializer
	 * @author tengge / https://github.com/tengge1
	 */
	function GlobeSerializer() {
	    BaseSerializer.call(this);
	}

	GlobeSerializer.prototype = Object.create(BaseSerializer.prototype);
	GlobeSerializer.prototype.constructor = GlobeSerializer;

	GlobeSerializer.prototype.toJSON = function (obj) {
	    var json = Object3DSerializer.prototype.toJSON.call(this, obj);

	    return json;
	};

	GlobeSerializer.prototype.fromJSON = function (json, parent) {
	    var obj = parent === undefined ? new THREE.Bone() : parent;

	    Object3DSerializer.prototype.fromJSON.call(this, json, obj);

	    return obj;
	};

	/**
	 * 场景序列化/反序列化类
	 * @author tengge / https://github.com/tengge1
	 */
	function Converter() {
	    BaseSerializer.call(this);
	}

	Converter.prototype = Object.create(BaseSerializer.prototype);
	Converter.prototype.constructor = Converter;

	/**
	 * 将应用转为json
	 * @param {*} obj 格式：{ options: options, camera: camera, renderer: renderer, scripts: scripts, scene: scene }
	 * @param {*} obj.server 服务端地址
	 */
	Converter.prototype.toJSON = function (obj) {
	    var options = obj.options;
	    var camera = obj.camera;
	    var renderer = obj.renderer;
	    var scripts = obj.scripts;
	    var animations = obj.animations;
	    var scene = obj.scene;

	    var list = [];

	    // 选项
	    var configJson = (new OptionsSerializer()).toJSON(options);
	    list.push(configJson);

	    // 相机
	    var cameraJson = (new CamerasSerializer()).toJSON(camera);
	    list.push(cameraJson);

	    // 渲染器
	    var rendererJson = (new WebGLRendererSerializer()).toJSON(renderer);
	    list.push(rendererJson);

	    // 脚本
	    var scriptsJson = (new ScriptSerializer()).toJSON(scripts);
	    scriptsJson.forEach(n => {
	        list.push(n);
	    });

	    // 动画
	    var animationsJson = (new AnimationSerializer()).toJSON(animations);
	    animationsJson.forEach(n => {
	        list.push(n);
	    });

	    // 音频监听器
	    var audioListener = camera.children.filter(n => n instanceof THREE.AudioListener)[0];
	    if (audioListener) {
	        var audioListenerJson = (new AudioListenerSerializer()).toJSON(audioListener);
	        list.push(audioListenerJson);
	    }

	    // 场景
	    this.sceneToJson(scene, list);

	    return list;
	};

	/**
	 * 场景转json
	 * @param {*} scene 场景
	 * @param {*} list 用于保存json的空数组
	 */
	Converter.prototype.sceneToJson = function (scene, list) {
	    (function serializer(obj) {
	        var json = null;

	        if (obj.userData.Server === true) { // 服务器对象
	            json = (new ServerObject()).toJSON(obj);
	        } else if (obj.userData.type === 'Sky') {
	            json = (new SkySerializer()).toJSON(obj);
	        } else if (obj.userData.type === 'Fire') { // 火焰
	            json = (new FireSerializer()).toJSON(obj);
	        } else if (obj.userData.type === 'Smoke') { // 烟
	            json = (new SmokeSerializer()).toJSON(obj);
	        } else if (obj.userData.type === 'ParticleEmitter') { // 粒子发射器
	            json = (new ParticleEmitterSerializer()).toJSON(obj);
	        } else if (obj.userData.type === 'PerlinTerrain') { // 柏林地形
	            json = (new PerlinTerrainSerializer()).toJSON(obj);
	        } else if (obj.userData.type === 'Water') {
	            json = (new WaterSerializer()).toJSON(obj);
	        } else if (obj.userData.type === 'Cloth') {
	            json = (new ClothSerializer()).toJSON(obj);
	        } else if (obj.userData.type === 'LineCurve') {
	            json = (new LineCurveSerializer()).toJSON(obj);
	        } else if (obj.userData.type === 'CatmullRomCurve') {
	            json = (new CatmullRomCurveSerializer()).toJSON(obj);
	        } else if (obj.userData.type === 'QuadraticBezierCurve') {
	            json = (new QuadraticBezierCurveSerializer()).toJSON(obj);
	        } else if (obj.userData.type === 'CubicBezierCurve') {
	            json = (new CubicBezierCurveSerializer()).toJSON(obj);
	        } else if (obj.userData.type === 'EllipseCurve') {
	            json = (new EllipseCurveSerializer()).toJSON(obj);
	        } else if (obj.userData.type === 'Globe') {
	            json = (new GlobeSerializer()).toJSON(obj);
	        } else if (obj instanceof THREE.Scene) {
	            json = (new SceneSerializer()).toJSON(obj);
	        } else if (obj instanceof THREE.Group) {
	            json = (new GroupSerializer()).toJSON(obj);
	        } else if (obj instanceof THREE.Reflector) {
	            json = (new ReflectorSerializer()).toJSON(obj);
	        } else if (obj instanceof THREE.Mesh) {
	            json = (new MeshSerializer()).toJSON(obj);
	        } else if (obj instanceof THREE.Sprite) {
	            json = (new SpriteSerializer()).toJSON(obj);
	        } else if (obj instanceof THREE.AmbientLight) {
	            json = (new AmbientLightSerializer()).toJSON(obj);
	        } else if (obj instanceof THREE.DirectionalLight) {
	            json = (new DirectionalLightSerializer()).toJSON(obj);
	        } else if (obj instanceof THREE.HemisphereLight) {
	            json = (new HemisphereLightSerializer()).toJSON(obj);
	        } else if (obj instanceof THREE.PointLight) {
	            json = (new PointLightSerializer()).toJSON(obj);
	        } else if (obj instanceof THREE.RectAreaLight) {
	            json = (new RectAreaLightSerializer()).toJSON(obj);
	        } else if (obj instanceof THREE.SpotLight) {
	            json = (new SpotLightSerializer()).toJSON(obj);
	        } else if (obj instanceof THREE.Audio) {
	            json = (new AudioSerializer()).toJSON(obj);
	        } else if (obj instanceof THREE.Bone) {
	            json = (new BoneSerializer()).toJSON(obj);
	        }

	        if (json) {
	            list.push(json);
	        } else {
	            console.warn(`Converter: No ${obj.constructor.name} Serializer.`);
	        }

	        // 如果obj.userData.type不为空，则为内置类型，其子项不应该序列化
	        if (obj.children && obj.userData.type === undefined && obj.userData.Server !== true) {
	            obj.children.forEach(n => {
	                serializer.call(this, n);
	            });
	        }
	    })(scene);
	};

	/**
	 * 场景反序列化
	 * @param {*} jsons json对象（列表）
	 * @param {*} options 配置选项 格式：{ server: serverUrl } 其中，serverUrl为服务端地址，用于下载模型、纹理等资源
	 * @param {*} options.server 服务端地址
	 */
	Converter.prototype.fromJson = function (jsons, options) {
	    var obj = {
	        options: null,
	        camera: null,
	        renderer: null,
	        scripts: null,
	        animations: [],
	        scene: null
	    };

	    // 选项
	    var optionsJson = jsons.filter(n => n.metadata && n.metadata.generator === 'OptionsSerializer')[0];
	    if (optionsJson) {
	        obj.options = (new OptionsSerializer()).fromJSON(optionsJson);
	    } else {
	        console.warn(`Converter: No config info in the scene.`);
	    }

	    // 相机
	    var cameraJson = jsons.filter(n => n.metadata && n.metadata.generator.indexOf('CameraSerializer') > -1)[0];
	    if (cameraJson) {
	        obj.camera = (new CamerasSerializer()).fromJSON(cameraJson);
	    } else {
	        console.warn(`Converter: No camera info in the scene.`);
	    }

	    if (options.camera === undefined) {
	        options.camera = obj.camera;
	    }

	    // 渲染器
	    var rendererJson = jsons.filter(n => n.metadata && n.metadata.generator.indexOf('WebGLRendererSerializer') > -1)[0];
	    if (rendererJson) {
	        obj.renderer = (new WebGLRendererSerializer()).fromJSON(rendererJson);
	    } else {
	        console.warn(`Converter: No renderer info in the scene.`);
	    }

	    if (options.renderer === undefined) {
	        options.renderer = obj.renderer;
	    }

	    // 脚本
	    var scriptJsons = jsons.filter(n => n.metadata && n.metadata.generator === 'ScriptSerializer');
	    if (scriptJsons) {
	        obj.scripts = (new ScriptSerializer()).fromJSON(scriptJsons);
	    }

	    // 动画
	    var animationJsons = jsons.filter(n => n.metadata && n.metadata.generator === 'AnimationSerializer');
	    if (animationJsons) {
	        obj.animations = (new AnimationSerializer()).fromJSON(animationJsons);
	    }

	    // 音频监听器
	    var audioListenerJson = jsons.filter(n => n.metadata && n.metadata.generator === 'AudioListenerSerializer')[0];
	    var audioListener;
	    if (audioListenerJson) {
	        audioListener = (new AudioListenerSerializer()).fromJSON(audioListenerJson);
	    } else {
	        console.warn(`Converter: No AudioListener in the scene.`);
	        audioListener = new THREE.AudioListener();
	    }
	    obj.audioListener = audioListener;
	    options.audioListener = audioListener;
	    obj.camera.add(audioListener);

	    // 场景
	    return new Promise(resolve => {
	        this.sceneFromJson(jsons, options, audioListener, obj.camera, obj.renderer).then(scene => {
	            obj.scene = scene;
	            resolve(obj);
	        });
	    });
	};

	/**
	 * json转场景
	 * @param {*} jsons 反序列化对象列表
	 * @param {*} options 配置信息
	 */
	Converter.prototype.sceneFromJson = function (jsons, options) {
	    var sceneJson = jsons.filter(n => n.metadata && n.metadata.generator === 'SceneSerializer')[0];
	    if (sceneJson === undefined) {
	        console.warn(`Converter: No scene info in the scene.`);
	        return new Promise(resolve => {
	            resolve(new THREE.Scene());
	        });
	    }

	    var scene = (new SceneSerializer()).fromJSON(sceneJson, undefined, options.server);

	    var serverObjects = [];

	    (function parseJson(json, parent, list) {
	        json.children.forEach(n => {
	            var objJson = list.filter(o => o.uuid === n)[0];
	            if (objJson == null) {
	                console.warn(`Converter: no object that uuid equals to ${n}.`);
	                return;
	            }

	            if (objJson.userData && objJson.userData.Server === true) { // 服务端对象
	                serverObjects.push({
	                    parent: parent,
	                    json: objJson
	                });
	                return;
	            }

	            var obj = null;

	            switch (objJson.metadata.generator) {
	                case 'SceneSerializer':
	                    obj = (new SceneSerializer()).fromJSON(objJson, undefined, options.server);
	                    break;
	                case 'GroupSerializer':
	                    obj = (new GroupSerializer()).fromJSON(objJson);
	                    break;
	                case 'ReflectorSerializer':
	                    obj = (new ReflectorSerializer()).fromJSON(objJson);
	                    break;
	                case 'MeshSerializer':
	                    obj = (new MeshSerializer()).fromJSON(objJson, undefined, options.server);
	                    break;
	                case 'SpriteSerializer':
	                    obj = (new SpriteSerializer()).fromJSON(objJson, undefined, options.server);
	                    break;
	                case 'AmbientLightSerializer':
	                    obj = (new AmbientLightSerializer()).fromJSON(objJson);
	                    break;
	                case 'DirectionalLightSerializer':
	                    obj = (new DirectionalLightSerializer()).fromJSON(objJson);
	                    break;
	                case 'HemisphereLightSerializer':
	                    obj = (new HemisphereLightSerializer()).fromJSON(objJson);
	                    break;
	                case 'PointLightSerializer':
	                    obj = (new PointLightSerializer()).fromJSON(objJson);
	                    break;
	                case 'RectAreaLightSerializer':
	                    obj = (new RectAreaLightSerializer()).fromJSON(objJson);
	                    break;
	                case 'SpotLightSerializer':
	                    obj = (new SpotLightSerializer()).fromJSON(objJson);
	                    break;
	                case 'AudioSerializer':
	                    obj = (new AudioSerializer()).fromJSON(objJson, undefined, options.audioListener);
	                    break;
	                case 'FireSerializer':
	                    obj = (new FireSerializer()).fromJSON(objJson, undefined, options.camera);
	                    break;
	                case 'SmokeSerializer':
	                    obj = (new SmokeSerializer()).fromJSON(objJson, undefined, options.camera, options.renderer);
	                    break;
	                case 'BoneSerializer':
	                    obj = (new BoneSerializer()).fromJSON(objJson);
	                    break;
	                case 'SkySerializer':
	                    obj = (new SkySerializer()).fromJSON(objJson);
	                    break;
	                case 'ParticleEmitterSerializer':
	                    obj = (new ParticleEmitterSerializer()).fromJSON(objJson, undefined, options.server);
	                    break;
	                case 'PerlinTerrainSerializer':
	                    obj = (new PerlinTerrainSerializer()).fromJSON(objJson);
	                    break;
	                case 'WaterSerializer':
	                    obj = (new WaterSerializer()).fromJSON(objJson, undefined, options.renderer);
	                    break;
	                case 'ClothSerializer':
	                    obj = (new ClothSerializer()).fromJSON(objJson);
	                    break;
	                case 'LineCurveSerializer':
	                    obj = (new LineCurveSerializer()).fromJSON(objJson);
	                    break;
	                case 'CatmullRomCurveSerializer':
	                    obj = (new CatmullRomCurveSerializer()).fromJSON(objJson);
	                    break;
	                case 'QuadraticBezierCurveSerializer':
	                    obj = (new QuadraticBezierCurveSerializer()).fromJSON(objJson);
	                    break;
	                case 'CubicBezierCurveSerializer':
	                    obj = (new CubicBezierCurveSerializer()).fromJSON(objJson);
	                    break;
	                case 'EllipseCurveSerializer':
	                    obj = (new EllipseCurveSerializer()).fromJSON(objJson);
	                    break;
	            }

	            if (obj) {
	                parent.add(obj);
	            } else {
	                console.warn(`Converter: No Deserializer with ${objJson.metadata.type}.`);
	            }

	            // objJson.userData.type不为空，说明它是内置类型，其子项不应该被反序列化
	            // objJson.userData.Server为true是模型，子项不应被反序列化
	            if (objJson.userData.type === undefined &&
	                objJson.userData.Server !== true &&
	                objJson.children &&
	                Array.isArray(objJson.children) &&
	                objJson.children.length > 0 &&
	                obj) {
	                parseJson(objJson, obj, list);
	            }
	        });
	    })(sceneJson, scene, jsons);

	    if (serverObjects.length === 0) {
	        return new Promise(resolve => {
	            resolve(scene);
	        });
	    }

	    var promises = serverObjects.map(serverObj => {
	        return new Promise(resolve => {
	            (new ServerObject()).fromJSON(serverObj.json, options, {
	                camera: options.camera,
	                renderer: options.renderer,
	                audioListener: options.audioListener
	            }).then(obj => {
	                if (obj) {
	                    serverObj.parent.add(obj);
	                } else {
	                    console.warn(`Converter: Server assets ${serverObj.json.uuid} loaded failed.`);
	                }
	                resolve();
	            });
	        });
	    });

	    return new Promise(resolve => {
	        Promise.all(promises).then(() => {
	            resolve(scene);
	        });
	    });
	};

	var ID$3 = -1;

	/**
	 * 播放器组件
	 * @param {*} app 播放器
	 */
	function PlayerComponent(app) {
	    this.id = `${this.constructor.name}${ID$3--}`;
	    this.app = app;
	}

	/**
	 * 创建
	 * @param {*} scene 
	 * @param {*} camera 
	 * @param {*} renderer 
	 * @param {*} others 
	 */
	PlayerComponent.prototype.create = function (scene, camera, renderer, others) {
	    return new Promise(resolve => {
	        resolve();
	    });
	};

	/**
	 * 更新
	 * @param {*} clock 
	 * @param {*} deltaTime 
	 */
	PlayerComponent.prototype.update = function (clock, deltaTime) {

	};

	/**
	 * 析构
	 * @param {*} scene 
	 * @param {*} camera 
	 * @param {*} renderer 
	 * @param {*} others 
	 */
	PlayerComponent.prototype.dispose = function (scene, camera, renderer, others) {

	};

	/**
	 * 播放器下载事件
	 * @param {*} app 播放器
	 */
	function PlayerLoader(app) {
	    PlayerComponent.call(this, app);
	}

	PlayerLoader.prototype = Object.create(PlayerComponent.prototype);
	PlayerLoader.prototype.constructor = PlayerLoader;

	PlayerLoader.prototype.create = function (jsons) {
	    return (new Converter()).fromJson(jsons, {
	        server: this.app.options.server
	    }).then(obj => {
	        this.scene = obj.scene;
	        return new Promise(resolve => {
	            resolve(obj);
	        });
	    });
	};

	PlayerLoader.prototype.dispose = function () {
	    // TODO: 彻底清空下载的模型资源

	    this.scene = null;
	};

	/**
	 * 播放器事件
	 * @param {*} app 播放器
	 */
	function PlayerEvent(app) {
	    PlayerComponent.call(this, app);
	}

	PlayerEvent.prototype = Object.create(PlayerComponent.prototype);
	PlayerEvent.prototype.constructor = PlayerEvent;

	PlayerEvent.prototype.create = function (scene, camera, renderer, scripts) {
	    this.scene = scene;
	    this.camera = camera;
	    this.renderer = renderer;
	    this.scripts = scripts;

	    var dom = renderer.domElement;

	    this.events = Object.keys(scripts).map(uuid => {
	        var script = scripts[uuid];
	        return (new Function(
	            'app',
	            'scene',
	            'camera',
	            'renderer',
	            script.source + `
            var init = init || null;
            var start = start || null;
            var update = update || null;
            var stop = stop || null;
            var onClick = onClick || null;
            var onDblClick = onDblClick || null;
            var onKeyDown = onKeyDown || null;
            var onKeyUp = onKeyUp || null;
            var onMouseDown = onMouseDown || null;
            var onMouseMove = onMouseMove || null;
            var onMouseUp = onMouseUp || null;
            var onMouseWheel = onMouseWheel || null;
            var onResize = onResize || null;
            return { init, start, update, stop, onClick, onDblClick, onKeyDown, onKeyUp, onMouseDown, onMouseMove, onMouseUp, onMouseWheel, onResize };
            `
	        )).call(scene, this.app, scene, scene, camera, renderer);
	    });

	    this.events.forEach(n => {
	        if (typeof (n.onClick) === 'function') {
	            dom.addEventListener('click', n.onClick.bind(this.scene));
	        }
	        if (typeof (n.onDblClick) === 'function') {
	            dom.addEventListener('dblclick', n.onDblClick.bind(this.scene));
	        }
	        if (typeof (n.onKeyDown) === 'function') {
	            dom.addEventListener('keydown', n.onKeyDown.bind(this.scene));
	        }
	        if (typeof (n.onKeyUp) === 'function') {
	            dom.addEventListener('keyup', n.onKeyUp.bind(this.scene));
	        }
	        if (typeof (n.onMouseDown) === 'function') {
	            dom.addEventListener('mousedown', n.onMouseDown.bind(this.scene));
	        }
	        if (typeof (n.onMouseMove) === 'function') {
	            dom.addEventListener('mousemove', n.onMouseMove.bind(this.scene));
	        }
	        if (typeof (n.onMouseUp) === 'function') {
	            dom.addEventListener('mouseup', n.onMouseUp.bind(this.scene));
	        }
	        if (typeof (n.onMouseWheel) === 'function') {
	            dom.addEventListener('mousewheel', n.onMouseWheel.bind(this.scene));
	        }
	        if (typeof (n.onResize) === 'function') {
	            window.addEventListener('resize', n.onResize.bind(this.scene));
	        }
	    });

	    return new Promise(resolve => {
	        resolve();
	    });
	};

	/**
	 * 场景载入前执行一次
	 */
	PlayerEvent.prototype.init = function () {
	    this.events.forEach(n => {
	        if (typeof (n.init) === 'function') {
	            n.init();
	        }
	    });
	};

	/**
	 * 场景载入后执行一次
	 */
	PlayerEvent.prototype.start = function () {
	    this.events.forEach(n => {
	        if (typeof (n.start) === 'function') {
	            n.start();
	        }
	    });
	};

	/**
	 * 运行期间每帧都要执行
	 * @param {*} clock 
	 * @param {*} deltaTime 
	 */
	PlayerEvent.prototype.update = function (clock, deltaTime) {
	    this.events.forEach(n => {
	        if (typeof (n.update) === 'function') {
	            n.update(clock, deltaTime);
	        }
	    });
	};

	/**
	 * 程序结束运行后执行一次
	 */
	PlayerEvent.prototype.stop = function () {
	    this.events.forEach(n => {
	        if (typeof (n.stop) === 'function') {
	            n.stop();
	        }
	    });
	};

	/**
	 * 析构PlayerEvent
	 */
	PlayerEvent.prototype.dispose = function () {
	    var dom = this.renderer.domElement;

	    this.events.forEach(n => {
	        if (typeof (n.onClick) === 'function') {
	            dom.removeEventListener('click', n.onClick.bind(this.scene));
	        }
	        if (typeof (n.onDblClick) === 'function') {
	            dom.removeEventListener('dblclick', n.onDblClick.bind(this.scene));
	        }
	        if (typeof (n.onKeyDown) === 'function') {
	            dom.removeEventListener('keydown', n.onKeyDown.bind(this.scene));
	        }
	        if (typeof (n.onKeyUp) === 'function') {
	            dom.removeEventListener('keyup', n.onKeyUp.bind(this.scene));
	        }
	        if (typeof (n.onMouseDown) === 'function') {
	            dom.removeEventListener('mousedown', n.onMouseDown.bind(this.scene));
	        }
	        if (typeof (n.onMouseMove) === 'function') {
	            dom.removeEventListener('mousemove', n.onMouseMove.bind(this.scene));
	        }
	        if (typeof (n.onMouseUp) === 'function') {
	            dom.removeEventListener('mouseup', n.onMouseUp.bind(this.scene));
	        }
	        if (typeof (n.onMouseWheel) === 'function') {
	            dom.removeEventListener('mousewheel', n.onMouseWheel.bind(this.scene));
	        }
	        if (typeof (n.onResize) === 'function') {
	            window.removeEventListener('resize', n.onResize.bind(this.scene));
	        }
	    });

	    this.scene = null;
	    this.camera = null;
	    this.renderer = null;
	    this.scripts = null;
	    this.events.length = 0;
	};

	/**
	 * 播放器场景控制
	 * @param {*} app 播放器
	 */
	function PlayerControl(app) {
	    PlayerComponent.call(this, app);

	    this.packageManager = new PackageManager();
	    this.require = this.packageManager.require.bind(this.packageManager);

	    this.control = null;
	}

	PlayerControl.prototype = Object.create(PlayerComponent.prototype);
	PlayerControl.prototype.constructor = PlayerControl;

	PlayerControl.prototype.create = function (scene, camera, renderer) {
	    var type = camera.userData.control;

	    var promise = new Promise(resolve => {
	        resolve();
	    });

	    if (type === 'FirstPersonControls') { // 第一视角控制器
	        promise = this.require('FirstPersonControls');
	    } else if (type === 'FlyControls') { // 飞行控制器
	        promise = this.require('FlyControls');
	    } else if (type === 'OrbitControls') { // 轨道控制器
	        promise = this.require('OrbitControls');
	    } else if (type === 'PointerLockControls') { // 指针锁定控制器
	        promise = this.require('PointerLockControls');
	    } else if (type === 'TrackballControls') { // 轨迹球控制器
	        promise = this.require('TrackballControls');
	    }

	    return promise.then(() => {
	        this._createControl(scene, camera, renderer);
	        return new Promise(resolve => {
	            resolve();
	        });
	    });
	};

	PlayerControl.prototype._createControl = function (scene, camera, renderer) {
	    var type = camera.userData.control;

	    if (type === 'FirstPersonControls') { // 第一视角控制器
	        this.control = new THREE.FirstPersonControls(camera, renderer.domElement);
	        if (camera.userData.firstPersonOptions) {
	            Object.assign(this.control, camera.userData.firstPersonOptions);
	        }
	    } else if (type === 'FlyControls') { // 飞行控制器
	        this.control = new THREE.FlyControls(camera, renderer.domElement);
	        if (camera.userData.flyOptions) {
	            Object.assign(this.control, camera.userData.flyOptions);
	        }
	    } else if (type === 'OrbitControls') { // 轨道控制器
	        this.control = new THREE.OrbitControls(camera, renderer.domElement);
	        if (camera.userData.orbitOptions) {
	            Object.assign(this.control, camera.userData.orbitOptions);
	        }
	    } else if (type === 'PointerLockControls') { // 指针锁定控制器
	        this.control = new THREE.PointerLockControls(camera, renderer.domElement);
	        if (camera.userData.pointerLockOptions) {
	            Object.assign(this.control, camera.userData.pointerLockOptions);

	            if (this.control.isLocked) {
	                this.control.lock();
	            } else {
	                this.control.unlock();
	            }
	        }
	    } else if (type === 'TrackballControls') { // 轨迹球控制器
	        this.control = new THREE.TrackballControls(camera, renderer.domElement);
	        if (camera.userData.trackballOptions) {
	            Object.assign(this.control, camera.userData.trackballOptions);
	        }
	    }
	};

	PlayerControl.prototype.update = function (clock, deltaTime) {
	    if (this.control && this.control.update) {
	        this.control.update(deltaTime);
	    }
	};

	PlayerControl.prototype.dispose = function () {
	    if (this.control) {
	        this.control.dispose();
	        this.control = null;
	    }
	};

	/**
	 * 播放器音频
	 * @param {*} app 播放器
	 */
	function PlayerAudio(app) {
	    PlayerComponent.call(this, app);

	    this.audios = [];
	}

	PlayerAudio.prototype = Object.create(PlayerComponent.prototype);
	PlayerAudio.prototype.constructor = PlayerAudio;

	PlayerAudio.prototype.create = function (scene, camera, renderer) {
	    this.audios.length = 0;

	    scene.traverse(n => {
	        if (n instanceof THREE.Audio) {
	            this.audios.push(n);
	        }
	    });

	    var loader = new THREE.AudioLoader();

	    var promises = this.audios.map(n => {
	        return new Promise(resolve => {
	            loader.load(this.app.options.server + n.userData.Url, buffer => {
	                n.setBuffer(buffer);

	                if (n.userData.autoplay) {
	                    n.autoplay = n.userData.autoplay;
	                    n.play();
	                }

	                resolve();
	            }, undefined, () => {
	                console.warn(`PlayerLoader: ${n.userData.Url} loaded failed.`);
	                resolve();
	            });
	        });
	    });

	    return Promise.all(promises);
	};

	PlayerAudio.prototype.dispose = function () {
	    this.audios.forEach(n => {
	        if (n.isPlaying) {
	            n.stop();
	        }
	    });

	    this.audios.length = 0;
	};

	var ID$4 = -1;

	/**
	 * 基本渲染器
	 * @author tengge / https://github.com/tengge1
	 */
	function BaseRenderer() {
	    this.id = `${this.constructor.name}${ID$4--}`;
	}

	BaseRenderer.prototype.create = function (scenes, camera, renderer, selected) {
	    return new Promise(resolve => {
	        resolve();
	    });
	};

	BaseRenderer.prototype.render = function () {

	};

	BaseRenderer.prototype.dispose = function () {

	};

	/**
	 * 特效渲染器
	 */
	function EffectRenderer() {
	    BaseRenderer.call(this);

	    this.packageManager = new PackageManager();
	    this.require = this.packageManager.require.bind(this.packageManager);

	    this.ready = false;

	    this.effectNames = ['fxaa', 'smaa', 'ssaa', 'taa', 'sao', 'ssao', 'pixel', 'dotScreen', 'rgbShift', 'afterimage', 'halftone', 'bokeh', 'glitch'];
	}
	EffectRenderer.prototype = Object.create(BaseRenderer.prototype);
	EffectRenderer.prototype.constructor = EffectRenderer;

	/**
	 * 特效渲染器初始化，特效配置修改后需要重新调用该函数
	 * @param {*} scenes 场景数组，使用第一个场景的特效配置
	 * @param {*} camera 相机
	 * @param {*} renderer 渲染器
	 */
	EffectRenderer.prototype.create = async function (scenes, camera, renderer) {
	    if (!Array.isArray(scenes)) {
	        scenes = [scenes];
	    }

	    this.scenes = scenes;
	    this.camera = camera;
	    this.renderer = renderer;

	    var postProcessing = scenes[0].userData.postProcessing || {};
	    this.ready = false;

	    // 快速近似抗锯齿
	    if (postProcessing.fxaa && postProcessing.fxaa.enabled) {
	        await this.require('FXAAShader');
	    }

	    // 多重采样抗锯齿
	    if (postProcessing.smaa && postProcessing.smaa.enabled) {
	        await this.require(['SMAAShader', 'SMAAPass']);
	    }

	    // 全屏抗锯齿
	    if (postProcessing.ssaa && postProcessing.ssaa.enabled) {
	        await this.require('SSAARenderPass');
	    }

	    // 时间抗锯齿
	    if (postProcessing.taa && postProcessing.taa.enabled) {
	        await this.require(['SSAARenderPass', 'TAARenderPass']);
	    }

	    // 可扩展环境光遮挡
	    if (postProcessing.sao && postProcessing.sao.enabled) {
	        await this.require(['SAOShader', 'DepthLimitedBlurShader', 'UnpackDepthRGBAShader', 'SAOPass']);
	    }

	    // 屏幕空间环境光遮蔽
	    if (postProcessing.ssao && postProcessing.ssao.enabled) {
	        await this.require(['SSAOShader', 'SSAOPass']);
	    }

	    // 像素特效
	    if (postProcessing.pixel && postProcessing.pixel.enabled) {
	        await this.require('PixelShader');
	    }

	    // 点阵化
	    if (postProcessing.dotScreen && postProcessing.dotScreen.enabled) {
	        await this.require('DotScreenShader');
	    }

	    // 颜色偏移
	    if (postProcessing.rgbShift && postProcessing.rgbShift.enabled) {
	        await this.require('RGBShiftShader');
	    }

	    // 残影特效
	    if (postProcessing.afterimage && postProcessing.afterimage.enabled) {
	        await this.require(['AfterimageShader', 'AfterimagePass']);
	    }

	    // 半色调特效
	    if (postProcessing.halftone && postProcessing.halftone.enabled) {
	        await this.require(['HalftoneShader', 'HalftonePass']);
	    }

	    // 背景虚化特效
	    if (postProcessing.bokeh && postProcessing.bokeh.enabled) {
	        await this.require(['BokehShader', 'BokehPass']);
	    }

	    // 毛刺特效
	    if (postProcessing.glitch && postProcessing.glitch.enabled) {
	        await this.require(['DigitalGlitch', 'GlitchPass']);
	    }

	    this._createPostProcessing(scenes, camera, renderer);

	    this.ready = true;
	};

	EffectRenderer.prototype._createPostProcessing = function (scenes, camera, renderer) {
	    var postProcessing = scenes[0].userData.postProcessing || {};

	    if (this.composer) {
	        this.dispose();
	    }

	    // 判断是否需要启用特效渲染器
	    var keys = Object.keys(postProcessing);
	    var useEffect = false;

	    for (var i = 0; i < keys.length; i++) {
	        var key = keys[i];

	        if (this.effectNames[key] && this.effectNames[key].enabled) { // 需要特效
	            useEffect = true;
	            break;
	        }
	    }

	    if (!useEffect) {
	        return;
	    }

	    var effects = [],
	        effect;

	    var composer = new THREE.EffectComposer(renderer);

	    scenes.forEach((n, i) => {
	        effect = new THREE.RenderPass(n, camera);
	        effect.clear = i === 0;
	        composer.addPass(effect);
	        effects.push(effect);
	    });

	    // 边框
	    // effect = new THREE.OutlinePass(new THREE.Vector2(renderer.domElement.width, renderer.domElement.height), scene, camera);
	    // effect.edgeStrength = 10;
	    // effect.edgeGlow = 0.4;
	    // effect.edgeThickness = 1.8;
	    // effect.pulsePeriod = 2;
	    // effect.visibleEdgeColor.set('#ffffff');
	    // effect.hiddenEdgeColor.set('#190a05');
	    // composer.addPass(effect);
	    // effects.push(effect);

	    // 快速近似抗锯齿
	    if (postProcessing.fxaa && postProcessing.fxaa.enabled) {
	        effect = new THREE.ShaderPass(THREE.FXAAShader);
	        effect.uniforms['resolution'].value.set(1 / renderer.domElement.width, 1 / renderer.domElement.height);
	        composer.addPass(effect);
	        effects.push(effect);
	    }

	    // 多重采样抗锯齿
	    if (postProcessing.smaa && postProcessing.smaa.enabled) {
	        effect = new THREE.SMAAPass(renderer.domElement.width * renderer.getPixelRatio(), renderer.domElement.height * renderer.getPixelRatio());
	        composer.addPass(effect);
	        effects.push(effect);
	    }

	    // 全屏抗锯齿
	    if (postProcessing.ssaa && postProcessing.ssaa.enabled) {
	        effect = new THREE.SSAARenderPass(scene, camera);
	        effect.unbiased = postProcessing.ssaa.unbiased;
	        effect.sampleLevel = postProcessing.ssaa.sampleLevel;
	        composer.addPass(effect);
	        effects.push(effect);
	    }

	    // 时间抗锯齿
	    if (postProcessing.taa && postProcessing.taa.enabled) {
	        effect = new THREE.TAARenderPass(scene, camera);
	        effect.unbiased = postProcessing.taa.unbiased;
	        effect.sampleLevel = postProcessing.taa.sampleLevel;
	        composer.addPass(effect);
	        effects.push(effect);
	    }

	    // 可扩展环境光遮挡
	    if (postProcessing.sao && postProcessing.sao.enabled) {
	        effect = new THREE.SAOPass(scene, camera, false, true);
	        effect.params.output = postProcessing.sao.output;
	        effect.params.saoBias = postProcessing.sao.saoBias;
	        effect.params.saoIntensity = postProcessing.sao.saoIntensity;
	        effect.params.saoScale = postProcessing.sao.saoScale;
	        effect.params.saoKernelRadius = postProcessing.sao.saoKernelRadius;
	        effect.params.saoMinResolution = postProcessing.sao.saoMinResolution;
	        effect.params.saoBlur = postProcessing.sao.saoBlur;
	        effect.params.saoBlurRadius = postProcessing.sao.saoBlurRadius;
	        effect.params.saoBlurStdDev = postProcessing.sao.saoBlurStdDev;
	        effect.params.saoBlurDepthCutoff = postProcessing.sao.saoBlurDepthCutoff;
	        composer.addPass(effect);
	        effects.push(effect);
	    }

	    // 屏幕空间环境光遮蔽
	    if (postProcessing.ssao && postProcessing.ssao.enabled) {
	        effect = new THREE.SSAOPass(scene, camera, renderer.domElement.width, renderer.domElement.height);
	        effect.output = postProcessing.ssao.output;
	        effect.kernelRadius = postProcessing.ssao.kernelRadius;
	        effect.minDistance = postProcessing.ssao.minDistance;
	        effect.maxDistance = postProcessing.ssao.maxDistance;
	        composer.addPass(effect);
	        effects.push(effect);
	    }

	    // 像素特效
	    if (postProcessing.pixel && postProcessing.pixel.enabled) {
	        effect = new THREE.ShaderPass(THREE.PixelShader);
	        effect.uniforms.resolution.value = new THREE.Vector2(renderer.domElement.width, renderer.domElement.height);
	        effect.uniforms.resolution.value.multiplyScalar(window.devicePixelRatio);
	        effect.uniforms.pixelSize.value = postProcessing.pixel.pixelSize;
	        composer.addPass(effect);
	        effects.push(effect);
	    }

	    // 点阵化
	    if (postProcessing.dotScreen && postProcessing.dotScreen.enabled) {
	        effect = new THREE.ShaderPass(THREE.DotScreenShader);
	        effect.uniforms['scale'].value = postProcessing.dotScreen.scale;
	        composer.addPass(effect);
	        effects.push(effect);
	    }

	    // 颜色偏移
	    if (postProcessing.rgbShift && postProcessing.rgbShift.enabled) {
	        effect = new THREE.ShaderPass(THREE.RGBShiftShader);
	        effect.uniforms['amount'].value = postProcessing.rgbShift.amount;
	        composer.addPass(effect);
	        effects.push(effect);
	    }

	    // 残影特效
	    if (postProcessing.afterimage && postProcessing.afterimage.enabled) {
	        effect = new THREE.AfterimagePass();
	        effect.uniforms['damp'].value = postProcessing.afterimage.damp;
	        composer.addPass(effect);
	        effects.push(effect);
	    }

	    // 半色调特效
	    if (postProcessing.halftone && postProcessing.halftone.enabled) {
	        effect = new THREE.HalftonePass(
	            renderer.domElement.width,
	            renderer.domElement.height, {
	                shape: postProcessing.halftone.shape,
	                radius: postProcessing.halftone.radius,
	                rotateR: postProcessing.halftone.rotateR * (Math.PI / 180),
	                rotateB: postProcessing.halftone.rotateB * (Math.PI / 180),
	                rotateG: postProcessing.halftone.rotateG * (Math.PI / 180),
	                scatter: postProcessing.halftone.scatter,
	                blending: postProcessing.halftone.blending,
	                blendingMode: postProcessing.halftone.blendingMode,
	                greyscale: postProcessing.halftone.greyscale,
	            });
	        composer.addPass(effect);
	        effects.push(effect);
	    }

	    // 背景虚化特效
	    if (postProcessing.bokeh && postProcessing.bokeh.enabled) {
	        effect = new THREE.BokehPass(scene, camera, {
	            focus: postProcessing.bokeh.focus,
	            aperture: postProcessing.bokeh.aperture / 100000,
	            maxblur: postProcessing.bokeh.maxBlur,
	            width: renderer.domElement.width,
	            height: renderer.domElement.height
	        });
	        composer.addPass(effect);
	        effects.push(effect);
	    }

	    // 毛刺特效
	    if (postProcessing.glitch && postProcessing.glitch.enabled) {
	        effect = new THREE.GlitchPass();
	        effect.goWild = postProcessing.glitch.wild;
	        composer.addPass(effect);
	        effects.push(effect);
	    }

	    for (var i = 0; i < effects.length; i++) {
	        if (i === effects.length - 1) {
	            effects[i].renderToScreen = true;
	        } else {
	            effects[i].renderToScreen = false;
	        }
	    }

	    this.composer = composer;
	};

	/**
	 * 渲染特效
	 */
	EffectRenderer.prototype.render = function () {
	    if (this.composer && this.ready) { // 使用特效渲染器
	        this.composer.render();
	    } else { // 未设置特效
	        this.scenes.forEach(n => {
	            this.renderer.render(n, this.camera);
	        });
	    }
	};

	EffectRenderer.prototype.dispose = function () {
	    if (this.composer) {
	        this.composer.reset();
	        this.composer.passes.length = 0;
	        this.composer = null;
	    }
	};

	/**
	 * 播放器渲染器
	 * @param {*} app 播放器
	 */
	function PlayerRenderer(app) {
	    PlayerComponent.call(this, app);
	}

	PlayerRenderer.prototype = Object.create(PlayerComponent.prototype);
	PlayerRenderer.prototype.constructor = PlayerRenderer;

	PlayerRenderer.prototype.create = function (scene, camera, renderer) {
	    this.renderer = new EffectRenderer();
	    return this.renderer.create(scene, camera, renderer);
	};

	PlayerRenderer.prototype.update = function (clock, deltaTime) {
	    this.renderer.render();
	};

	PlayerRenderer.prototype.dispose = function () {
	    this.renderer.dispose();
	    this.renderer = null;
	};

	/*
	* Ease
	* Visit http://createjs.com/ for documentation, updates and examples.
	*
	* Copyright (c) 2010 gskinner.com, inc.
	*
	* Permission is hereby granted, free of charge, to any person
	* obtaining a copy of this software and associated documentation
	* files (the "Software"), to deal in the Software without
	* restriction, including without limitation the rights to use,
	* copy, modify, merge, publish, distribute, sublicense, and/or sell
	* copies of the Software, and to permit persons to whom the
	* Software is furnished to do so, subject to the following
	* conditions:
	*
	* The above copyright notice and this permission notice shall be
	* included in all copies or substantial portions of the Software.
	*
	* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
	* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
	* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
	* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
	* OTHER DEALINGS IN THE SOFTWARE.
	*/

	/**
	 * @module TweenJS
	 * @author tweenjs / https://www.createjs.com/tweenjs
	 * @link https://github.com/CreateJS/TweenJS/blob/master/src/tweenjs/Ease.js
	 */

	/**
	 * The Ease class provides a collection of easing functions for use with TweenJS. It does not use the standard 4 param
	 * easing signature. Instead it uses a single param which indicates the current linear ratio (0 to 1) of the tween.
	 *
	 * Most methods on Ease can be passed directly as easing functions:
	 *
	 *      createjs.Tween.get(target).to({x:100}, 500, createjs.Ease.linear);
	 *
	 * However, methods beginning with "get" will return an easing function based on parameter values:
	 *
	 *      createjs.Tween.get(target).to({y:200}, 500, createjs.Ease.getPowIn(2.2));
	 *
	 * Please see the <a href="http://www.createjs.com/Demos/TweenJS/Tween_SparkTable">spark table demo</a> for an
	 * overview of the different ease types on <a href="http://tweenjs.com">TweenJS.com</a>.
	 *
	 * <em>Equations derived from work by Robert Penner.</em>
	 * @class Ease
	 * @static
	 **/
	function Ease() {
		throw "Ease cannot be instantiated.";
	}


	// static methods and properties
	/**
	 * @method linear
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.linear = function (t) { return t; };

	/**
	 * Identical to linear.
	 * @method none
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.none = Ease.linear;

	/**
	 * Mimics the simple -100 to 100 easing in Adobe Flash/Animate.
	 * @method get
	 * @param {Number} amount A value from -1 (ease in) to 1 (ease out) indicating the strength and direction of the ease.
	 * @static
	 * @return {Function}
	 **/
	Ease.get = function (amount) {
		if (amount < -1) { amount = -1; }
		else if (amount > 1) { amount = 1; }
		return function (t) {
			if (amount == 0) { return t; }
			if (amount < 0) { return t * (t * -amount + 1 + amount); }
			return t * ((2 - t) * amount + (1 - amount));
		};
	};

	/**
	 * Configurable exponential ease.
	 * @method getPowIn
	 * @param {Number} pow The exponent to use (ex. 3 would return a cubic ease).
	 * @static
	 * @return {Function}
	 **/
	Ease.getPowIn = function (pow) {
		return function (t) {
			return Math.pow(t, pow);
		};
	};

	/**
	 * Configurable exponential ease.
	 * @method getPowOut
	 * @param {Number} pow The exponent to use (ex. 3 would return a cubic ease).
	 * @static
	 * @return {Function}
	 **/
	Ease.getPowOut = function (pow) {
		return function (t) {
			return 1 - Math.pow(1 - t, pow);
		};
	};

	/**
	 * Configurable exponential ease.
	 * @method getPowInOut
	 * @param {Number} pow The exponent to use (ex. 3 would return a cubic ease).
	 * @static
	 * @return {Function}
	 **/
	Ease.getPowInOut = function (pow) {
		return function (t) {
			if ((t *= 2) < 1) return 0.5 * Math.pow(t, pow);
			return 1 - 0.5 * Math.abs(Math.pow(2 - t, pow));
		};
	};

	/**
	 * @method quadIn
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.quadIn = Ease.getPowIn(2);
	/**
	 * @method quadOut
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.quadOut = Ease.getPowOut(2);
	/**
	 * @method quadInOut
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.quadInOut = Ease.getPowInOut(2);

	/**
	 * @method cubicIn
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.cubicIn = Ease.getPowIn(3);
	/**
	 * @method cubicOut
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.cubicOut = Ease.getPowOut(3);
	/**
	 * @method cubicInOut
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.cubicInOut = Ease.getPowInOut(3);

	/**
	 * @method quartIn
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.quartIn = Ease.getPowIn(4);
	/**
	 * @method quartOut
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.quartOut = Ease.getPowOut(4);
	/**
	 * @method quartInOut
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.quartInOut = Ease.getPowInOut(4);

	/**
	 * @method quintIn
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.quintIn = Ease.getPowIn(5);
	/**
	 * @method quintOut
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.quintOut = Ease.getPowOut(5);
	/**
	 * @method quintInOut
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.quintInOut = Ease.getPowInOut(5);

	/**
	 * @method sineIn
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.sineIn = function (t) {
		return 1 - Math.cos(t * Math.PI / 2);
	};

	/**
	 * @method sineOut
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.sineOut = function (t) {
		return Math.sin(t * Math.PI / 2);
	};

	/**
	 * @method sineInOut
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.sineInOut = function (t) {
		return -0.5 * (Math.cos(Math.PI * t) - 1);
	};

	/**
	 * Configurable "back in" ease.
	 * @method getBackIn
	 * @param {Number} amount The strength of the ease.
	 * @static
	 * @return {Function}
	 **/
	Ease.getBackIn = function (amount) {
		return function (t) {
			return t * t * ((amount + 1) * t - amount);
		};
	};
	/**
	 * @method backIn
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.backIn = Ease.getBackIn(1.7);

	/**
	 * Configurable "back out" ease.
	 * @method getBackOut
	 * @param {Number} amount The strength of the ease.
	 * @static
	 * @return {Function}
	 **/
	Ease.getBackOut = function (amount) {
		return function (t) {
			return (--t * t * ((amount + 1) * t + amount) + 1);
		};
	};
	/**
	 * @method backOut
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.backOut = Ease.getBackOut(1.7);

	/**
	 * Configurable "back in out" ease.
	 * @method getBackInOut
	 * @param {Number} amount The strength of the ease.
	 * @static
	 * @return {Function}
	 **/
	Ease.getBackInOut = function (amount) {
		amount *= 1.525;
		return function (t) {
			if ((t *= 2) < 1) return 0.5 * (t * t * ((amount + 1) * t - amount));
			return 0.5 * ((t -= 2) * t * ((amount + 1) * t + amount) + 2);
		};
	};
	/**
	 * @method backInOut
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.backInOut = Ease.getBackInOut(1.7);

	/**
	 * @method circIn
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.circIn = function (t) {
		return -(Math.sqrt(1 - t * t) - 1);
	};

	/**
	 * @method circOut
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.circOut = function (t) {
		return Math.sqrt(1 - (--t) * t);
	};

	/**
	 * @method circInOut
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.circInOut = function (t) {
		if ((t *= 2) < 1) return -0.5 * (Math.sqrt(1 - t * t) - 1);
		return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
	};

	/**
	 * @method bounceIn
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.bounceIn = function (t) {
		return 1 - Ease.bounceOut(1 - t);
	};

	/**
	 * @method bounceOut
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.bounceOut = function (t) {
		if (t < 1 / 2.75) {
			return (7.5625 * t * t);
		} else if (t < 2 / 2.75) {
			return (7.5625 * (t -= 1.5 / 2.75) * t + 0.75);
		} else if (t < 2.5 / 2.75) {
			return (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375);
		} else {
			return (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375);
		}
	};

	/**
	 * @method bounceInOut
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.bounceInOut = function (t) {
		if (t < 0.5) return Ease.bounceIn(t * 2) * .5;
		return Ease.bounceOut(t * 2 - 1) * 0.5 + 0.5;
	};

	/**
	 * Configurable elastic ease.
	 * @method getElasticIn
	 * @param {Number} amplitude
	 * @param {Number} period
	 * @static
	 * @return {Function}
	 **/
	Ease.getElasticIn = function (amplitude, period) {
		var pi2 = Math.PI * 2;
		return function (t) {
			if (t == 0 || t == 1) return t;
			var s = period / pi2 * Math.asin(1 / amplitude);
			return -(amplitude * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * pi2 / period));
		};
	};
	/**
	 * @method elasticIn
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.elasticIn = Ease.getElasticIn(1, 0.3);

	/**
	 * Configurable elastic ease.
	 * @method getElasticOut
	 * @param {Number} amplitude
	 * @param {Number} period
	 * @static
	 * @return {Function}
	 **/
	Ease.getElasticOut = function (amplitude, period) {
		var pi2 = Math.PI * 2;
		return function (t) {
			if (t == 0 || t == 1) return t;
			var s = period / pi2 * Math.asin(1 / amplitude);
			return (amplitude * Math.pow(2, -10 * t) * Math.sin((t - s) * pi2 / period) + 1);
		};
	};
	/**
	 * @method elasticOut
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.elasticOut = Ease.getElasticOut(1, 0.3);

	/**
	 * Configurable elastic ease.
	 * @method getElasticInOut
	 * @param {Number} amplitude
	 * @param {Number} period
	 * @static
	 * @return {Function}
	 **/
	Ease.getElasticInOut = function (amplitude, period) {
		var pi2 = Math.PI * 2;
		return function (t) {
			var s = period / pi2 * Math.asin(1 / amplitude);
			if ((t *= 2) < 1) return -0.5 * (amplitude * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * pi2 / period));
			return amplitude * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * pi2 / period) * 0.5 + 1;
		};
	};
	/**
	 * @method elasticInOut
	 * @param {Number} t
	 * @static
	 * @return {Number}
	 **/
	Ease.elasticInOut = Ease.getElasticInOut(1, 0.3 * 1.5);

	/**
	 * 补间动画控制器
	 * @param {*} app 播放器
	 */
	function TweenAnimator(app) {
	    PlayerComponent.call(this, app);
	}

	TweenAnimator.prototype = Object.create(PlayerComponent.prototype);
	TweenAnimator.prototype.constructor = TweenAnimator;

	TweenAnimator.prototype.create = function (scene, camera, renderer, animations) {
	    this.scene = scene;
	    this.animations = animations;

	    return new Promise(resolve => {
	        resolve();
	    });
	};

	TweenAnimator.prototype.update = function (clock, deltaTime, time) {
	    this.animations.forEach(n => {
	        n.animations.forEach(m => {
	            this.tweenObject(m, time);
	        });
	    });
	};

	TweenAnimator.prototype.tweenObject = function (animation, time) {
	    // 条件判断
	    if (animation.type !== 'Tween' || time < animation.beginTime || time > animation.endTime || animation.target == null) {
	        return;
	    }

	    // 获取对象
	    var target = this.scene.getObjectByProperty('uuid', animation.target);
	    if (target == null) {
	        console.warn(`Player: There is no object that uuid equals to ${animation.target}.`);
	        return;
	    }

	    // 获取插值函数
	    var data = animation.data;

	    var ease = Ease[data.ease];
	    if (ease == null) {
	        console.warn(`Player: There is no ease function named ${data.ease}.`);
	        return;
	    }

	    var result = ease((time - animation.beginTime) / (animation.endTime - animation.beginTime));

	    var positionX = data.beginPositionX + (data.endPositionX - data.beginPositionX) * result;
	    var positionY = data.beginPositionY + (data.endPositionY - data.beginPositionY) * result;
	    var positionZ = data.beginPositionZ + (data.endPositionZ - data.beginPositionZ) * result;

	    var rotationX = data.beginRotationX + (data.endRotationX - data.beginRotationX) * result;
	    var rotationY = data.beginRotationY + (data.endRotationY - data.beginRotationY) * result;
	    var rotationZ = data.beginRotationZ + (data.endRotationZ - data.beginRotationZ) * result;

	    var scaleX = data.beginScaleX + (data.endScaleX - data.beginScaleX) * result;
	    var scaleY = data.beginScaleY + (data.endScaleY - data.beginScaleY) * result;
	    var scaleZ = data.beginScaleZ + (data.endScaleZ - data.beginScaleZ) * result;

	    target.position.x = positionX;
	    target.position.y = positionY;
	    target.position.z = positionZ;

	    target.rotation.x = rotationX;
	    target.rotation.y = rotationY;
	    target.rotation.z = rotationZ;

	    target.scale.x = scaleX;
	    target.scale.y = scaleY;
	    target.scale.z = scaleZ;
	};

	TweenAnimator.prototype.dispose = function () {
	    this.scene = null;
	    this.animations = null;
	};

	/**
	 * MMD动画控制器
	 * @param {*} app 播放器
	 */
	function MMDAnimator(app) {
	    PlayerComponent.call(this, app);

	    this.time = 0.0; // 当前动画播放时间
	    this.delayTime = 160 * 1 / 30; // 动画比音频提前执行时间
	}

	MMDAnimator.prototype = Object.create(PlayerComponent.prototype);
	MMDAnimator.prototype.constructor = MMDAnimator;

	MMDAnimator.prototype.create = function (scene, camera, renderer, animations) {
	    var mmds = [];

	    scene.traverse(mesh => {
	        if (mesh.userData.Type === 'pmd' || mesh.userData.Type === 'pmx') {
	            mmds.push(mesh);
	        }
	    });

	    if (mmds.length === 0) {
	        return;
	    }

	    if (this.helper === undefined) {
	        this.helper = new THREE.MMDAnimationHelper();
	    }

	    var helper = this.helper;

	    mmds.forEach(mesh => {
	        let {
	            animation,
	            cameraAnimation,
	            audio
	        } = mesh.userData.obj;

	        if (animation) {
	            helper.add(mesh, {
	                animation: animation,
	                physics: true
	            });
	        } else {
	            helper.add(mesh, {
	                physics: true
	            });
	        }

	        if (cameraAnimation) {
	            helper.add(camera, {
	                animation: cameraAnimation
	            });
	        }

	        if (audio) {
	            var audioParams = {
	                delayTime: this.delayTime
	            };
	            helper.add(audio, audioParams);
	        }
	    });

	    this.time = 0.0;

	    return new Promise(resolve => {
	        resolve();
	    });
	};

	MMDAnimator.prototype.update = function (clock, deltaTime) {
	    if (!this.helper) {
	        return;
	    }

	    if (this.helper.audio) { // 如果有音频，使用音频时间比较准确
	        var currentTime = this.helper.audio.context.currentTime - this.helper.audio.startTime;
	        if (currentTime < this.delayTime) {
	            this.time += deltaTime;
	        } else {
	            var time = this.delayTime + currentTime;
	            deltaTime = time - this.time;
	            this.time = time;
	        }
	    }

	    this.helper.update(deltaTime);
	};

	MMDAnimator.prototype.dispose = function () {
	    if (!this.helper) {
	        return;
	    }

	    var helper = this.helper;

	    helper.meshes.forEach(n => {
	        helper.remove(n);
	    });

	    if (helper.camera) {
	        helper.remove(helper.camera);
	    }

	    if (helper.audio) {
	        if (helper.audio.isPlaying) {
	            helper.audio.stop();
	        }
	        helper.remove(helper.audio);
	    }

	    delete this.helper;
	};

	/**
	 * 粒子动画控制器
	 * @param {*} app 播放器
	 */
	function ParticleAnimator(app) {
	    PlayerComponent.call(this, app);
	}

	ParticleAnimator.prototype = Object.create(PlayerComponent.prototype);
	ParticleAnimator.prototype.constructor = ParticleAnimator;

	ParticleAnimator.prototype.create = function (scene, camera, renderer) {
	    this.scene = scene;

	    return new Promise(resolve => {
	        resolve();
	    });
	};

	ParticleAnimator.prototype.update = function (clock, deltaTime, time) {
	    var elapsed = clock.getElapsedTime();

	    this.scene.children.forEach(n => {
	        if (n.userData.type === 'Fire') {
	            n.userData.fire.update(elapsed);
	        } else if (n.userData.type === 'Smoke') {
	            n.update(elapsed);
	        } else if (n.userData.type === 'Water') {
	            n.update();
	        } else if (n.userData.type === 'ParticleEmitter') {
	            n.userData.group.tick(deltaTime);
	        } else if (n.userData.type === 'Cloth') {
	            n.update();
	        }
	    });
	};

	ParticleAnimator.prototype.dispose = function () {
	    this.scene = null;
	};

	/**
	 * 播放器动画
	 * @param {*} app 播放器
	 */
	function PlayerAnimation(app) {
	    PlayerComponent.call(this, app);

	    this.maxTime = 0; // 最大动画时间（单位：秒）
	    this.currentTime = 0; // 当前动画时间（单位：秒）
	    this.animations = null;

	    this.animators = [
	        new TweenAnimator(this.app),
	        new MMDAnimator(this.app),
	        new ParticleAnimator(this.app)
	    ];
	}

	PlayerAnimation.prototype = Object.create(PlayerComponent.prototype);
	PlayerAnimation.prototype.constructor = PlayerAnimation;

	PlayerAnimation.prototype.create = function (scene, camera, renderer, animations) {
	    this.maxTime = 0;
	    this.currentTime = 0;
	    this.scene = scene;
	    this.camera = camera;
	    this.renderer = renderer;
	    this.animations = animations;

	    this.maxTime = this.calculateMaxTime();

	    var promises = this.animators.map(n => {
	        return n.create(scene, camera, renderer, animations);
	    });

	    return Promise.all(promises);
	};

	PlayerAnimation.prototype.calculateMaxTime = function () {
	    var maxTime = 0;

	    this.animations.forEach(n => {
	        n.animations.forEach(m => {
	            if (m.endTime > maxTime) {
	                maxTime = m.endTime;
	            }
	        });
	    });

	    return maxTime;
	};

	PlayerAnimation.prototype.update = function (clock, deltaTime) {
	    if (this.maxTime > 0) {
	        this.currentTime = clock.getElapsedTime() % this.maxTime;
	    }

	    this.animators.forEach(n => {
	        n.update(clock, deltaTime, this.currentTime);
	    });
	};

	PlayerAnimation.prototype.dispose = function () {
	    this.maxTime = 0;
	    this.currentTime = 0;
	    this.scene = null;
	    this.camera = null;
	    this.renderer = null;
	    this.animations = null;

	    this.animators.forEach(n => {
	        n.dispose();
	    });
	};

	/**
	 * 按z键扔球事件
	 * @param {*} app 播放器
	 * @param {*} world 
	 * @param {*} rigidBodies 
	 */
	function ThrowBallEvent(app, world, rigidBodies) {
	    PlayerComponent.call(this, app);

	    this.world = world;
	    this.rigidBodies = rigidBodies;
	}

	ThrowBallEvent.prototype = Object.create(PlayerComponent.prototype);
	ThrowBallEvent.prototype.constructor = ThrowBallEvent;

	ThrowBallEvent.prototype.create = function (scene, camera, renderer) {
	    this.scene = scene;
	    this.camera = camera;
	    this.renderer = renderer;

	    this.renderer.domElement.addEventListener('click', this.throwBall.bind(this));
	};

	ThrowBallEvent.prototype.dispose = function () {
	    this.renderer.domElement.removeEventListener('click', this.throwBall);

	    this.scene = null;
	    this.camera = null;
	    this.renderer = null;
	};

	ThrowBallEvent.prototype.throwBall = function (event) {
	    if (!this.app.options.enableThrowBall) {
	        return;
	    }

	    var mouse = new THREE.Vector2();
	    var raycaster = new THREE.Raycaster();

	    var camera = this.camera;

	    var width = this.renderer.domElement.width;
	    var height = this.renderer.domElement.height;

	    mouse.set((event.offsetX / width) * 2 - 1, -(event.offsetY / height) * 2 + 1);
	    raycaster.setFromCamera(mouse, camera);

	    // Creates a ball and throws it
	    var ballMass = 3;
	    var ballRadius = 0.4;
	    var ballMaterial = new THREE.MeshPhongMaterial({
	        color: 0x202020
	    });

	    var ball = new THREE.Mesh(new THREE.SphereBufferGeometry(ballRadius, 14, 10), ballMaterial);
	    ball.castShadow = true;
	    ball.receiveShadow = true;
	    this.scene.add(ball);

	    var ballShape = new Ammo.btSphereShape(ballRadius);

	    var pos = new THREE.Vector3();
	    pos.copy(raycaster.ray.direction);
	    pos.add(raycaster.ray.origin);

	    var quat = new THREE.Quaternion();
	    quat.set(0, 0, 0, 1);

	    var body = this.createRigidBody(ball, ballShape, ballMass, pos, quat);

	    pos.copy(raycaster.ray.direction);
	    pos.multiplyScalar(20);

	    body.setLinearVelocity(new Ammo.btVector3(pos.x, pos.y, pos.z));
	    body.setFriction(0.5);

	    ball.userData.physics = {
	        body: body
	    };

	    this.world.addRigidBody(body);
	    this.rigidBodies.push(ball);
	};

	ThrowBallEvent.prototype.createRigidBody = function (threeObject, physicsShape, mass, pos, quat) {
	    threeObject.position.copy(pos);
	    threeObject.quaternion.copy(quat);

	    var transform = new Ammo.btTransform();
	    transform.setIdentity();
	    transform.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));
	    transform.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));
	    var motionState = new Ammo.btDefaultMotionState(transform);

	    var localInertia = new Ammo.btVector3(0, 0, 0);
	    physicsShape.calculateLocalInertia(mass, localInertia);

	    var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, physicsShape, localInertia);
	    var body = new Ammo.btRigidBody(rbInfo);

	    if (mass > 0) {
	        body.setActivationState(4);
	    }

	    return body;
	};

	const shape = {
	    btBoxShape: Ammo.btBoxShape, // 正方体
	    btBvhTriangleMeshShape: Ammo.btBvhTriangleMeshShape, // 三角形
	    btCapsuleShape: Ammo.btCapsuleShape, // 胶囊
	    btCapsuleShapeX: Ammo.btCapsuleShapeX, // x轴胶囊
	    btCapsuleShapeZ: Ammo.btCapsuleShapeZ, // z轴胶囊
	    btCollisionShape: Ammo.btCollisionShape, // 碰撞体
	    btCompoundShape: Ammo.btCompoundShape, // 复合形状
	    btConcaveShape: Ammo.btConcaveShape, // 
	    btConeShape: Ammo.btConeShape, // 圆锥体
	    btConeShapeX: Ammo.btConeShapeX, // x轴圆椎体
	    btConeShapeZ: Ammo.btConeShapeZ, // z轴圆椎体
	    btConvexHullShape: Ammo.btConvexHullShape, // 凸包
	    btConvexShape: Ammo.btConvexShape, // 
	    btConvexTriangleMeshShape: Ammo.btConvexTriangleMeshShape, // 凸三角形
	    btCylinderShape: Ammo.btCylinderShape, // 圆柱体
	    btCylinderShapeX: Ammo.btCylinderShapeX, // x轴圆柱体
	    btCylinderShapeZ: Ammo.btCylinderShapeZ, // z轴圆柱体
	    btHeightfieldTerrainShape: Ammo.btHeightfieldTerrainShape, // 灰阶高程地形
	    btSphereShape: Ammo.btSphereShape, // 球体
	    btStaticPlaneShape: Ammo.btStaticPlaneShape, // 静态平板
	    btTriangleMeshShape: Ammo.btTriangleMeshShape, // 三角网格
	};

	/**
	 * 播放器物理
	 * @param {*} app 播放器
	 */
	function PlayerPhysics(app) {
	    PlayerComponent.call(this, app);

	    // 各种参数
	    var gravityConstant = -9.8; // 重力常数
	    this.margin = 0.05; // 两个物体之间最小间距

	    // 物理环境配置
	    var collisionConfiguration = new Ammo.btSoftBodyRigidBodyCollisionConfiguration(); // 软体刚体碰撞配置
	    var dispatcher = new Ammo.btCollisionDispatcher(collisionConfiguration); // 碰撞调度器
	    var broadphase = new Ammo.btDbvtBroadphase(); // dbvt粗测
	    var solver = new Ammo.btSequentialImpulseConstraintSolver(); // 顺序脉冲约束求解器
	    var softBodySolver = new Ammo.btDefaultSoftBodySolver(); // 默认软体求解器

	    this.world = new Ammo.btSoftRigidDynamicsWorld(
	        dispatcher,
	        broadphase,
	        solver,
	        collisionConfiguration,
	        softBodySolver
	    );

	    var gravity = new Ammo.btVector3(0, gravityConstant, 0);
	    this.world.setGravity(gravity);
	    this.world.getWorldInfo().set_m_gravity(gravity);

	    this.transformAux1 = new Ammo.btTransform();
	    this.rigidBodies = [];
	    this.softBodies = [];

	    this.softBodyHelpers = new Ammo.btSoftBodyHelpers();

	    this.events = [
	        new ThrowBallEvent(this.app, this.world, this.rigidBodies)
	    ];

	    // api函数
	    // TODO: 很难受的实现
	    Object.assign(app, {
	        addPhysicsObject: this.addPhysicsObject.bind(this)
	    });
	}

	PlayerPhysics.prototype = Object.create(PlayerComponent.prototype);
	PlayerPhysics.prototype.constructor = PlayerPhysics;

	PlayerPhysics.prototype.create = function (scene, camera, renderer) {
	    this.scene = scene;

	    this.scene.traverse(n => {
	        if (n.userData &&
	            n.userData.physics &&
	            n.userData.physics.enabled
	        ) {
	            if (n.userData.physics.type === 'rigidBody') {
	                var body = this.createRigidBody(n);
	                if (body) {
	                    n.userData.physics.body = body;
	                    this.world.addRigidBody(body);

	                    if (n.userData.physics.mass > 0) {
	                        this.rigidBodies.push(n);
	                        body.setActivationState(4);
	                    }
	                }
	            } else if (n.userData.physics.type === 'softVolume') {
	                var body = this.createSoftVolume(n);
	                if (body) {
	                    n.userData.physics.body = body;
	                    this.world.addSoftBody(body, 1, -1);

	                    this.softBodies.push(n);

	                    if (n.userData.physics.mass > 0) {
	                        body.setActivationState(4);
	                    }
	                }
	            } else {
	                console.warn(`PlayerPhysics: unknown physics type ${n.userData.physics.type}.`);
	            }
	        }
	    });

	    this.events.forEach(n => {
	        n.create(scene, camera, renderer);
	    });

	    return new Promise(resolve => {
	        resolve();
	    });
	};

	PlayerPhysics.prototype.update = function (clock, deltaTime) {
	    this.world.stepSimulation(deltaTime, 10);

	    // 更新柔软体
	    var softBodies = this.softBodies;

	    for (var i = 0, il = softBodies.length; i < il; i++) {
	        var volume = softBodies[i];

	        var geometry = volume.geometry;
	        var body = volume.userData.physics.body;

	        var volumePositions = geometry.attributes.position.array;
	        var volumeNormals = geometry.attributes.normal.array;
	        var association = geometry.ammoIndexAssociation;

	        var numVerts = association.length;
	        var nodes = body.get_m_nodes();

	        for (var j = 0; j < numVerts; j++) {
	            var node = nodes.at(j);
	            var nodePos = node.get_m_x();
	            var x = nodePos.x();
	            var y = nodePos.y();
	            var z = nodePos.z();
	            var nodeNormal = node.get_m_n();
	            var nx = nodeNormal.x();
	            var ny = nodeNormal.y();
	            var nz = nodeNormal.z();
	            var assocVertex = association[j];

	            for (var k = 0, kl = assocVertex.length; k < kl; k++) {
	                var indexVertex = assocVertex[k];
	                volumePositions[indexVertex] = x;
	                volumeNormals[indexVertex] = nx;
	                indexVertex++;
	                volumePositions[indexVertex] = y;
	                volumeNormals[indexVertex] = ny;
	                indexVertex++;
	                volumePositions[indexVertex] = z;
	                volumeNormals[indexVertex] = nz;
	            }
	        }

	        geometry.attributes.position.needsUpdate = true;
	        geometry.attributes.normal.needsUpdate = true;
	    }
	    // 更新刚体
	    var rigidBodies = this.rigidBodies;

	    for (var i = 0, l = rigidBodies.length; i < l; i++) {
	        var objThree = rigidBodies[i];
	        var objPhys = objThree.userData.physics.body;
	        if (!objPhys) {
	            continue;
	        }
	        var ms = objPhys.getMotionState();
	        if (ms) {
	            ms.getWorldTransform(this.transformAux1);

	            var p = this.transformAux1.getOrigin();
	            var q = this.transformAux1.getRotation();

	            objThree.position.set(p.x(), p.y(), p.z());
	            objThree.quaternion.set(q.x(), q.y(), q.z(), q.w());
	        }
	    }

	    this.events.forEach(n => {
	        n.update(clock, deltaTime);
	    });
	};

	PlayerPhysics.prototype.dispose = function () {
	    this.events.forEach(n => {
	        n.dispose();
	    });

	    this.rigidBodies.forEach(n => {
	        var body = n.userData.physics.body;
	        this.world.removeRigidBody(body);
	    });

	    this.rigidBodies.length = 0;

	    this.softBodies.forEach(n => {
	        var body = n.userData.physics.body;
	        this.world.removeRigidBody(body);
	    });

	    this.softBodies.length = 0;

	    this.scene.traverse(n => {
	        if (n.userData && n.userData.physics) {
	            n.userData.physics.body = null;
	        }
	    });

	    this.scene = null;
	};

	// ------------------------------------ 创建刚体 ------------------------------------

	PlayerPhysics.prototype.createRigidBody = function (obj) {
	    var position = obj.position;
	    var quaternion = obj.quaternion;
	    var scale = obj.scale;

	    var physics = obj.userData.physics;
	    var shape = physics.shape;
	    var mass = physics.mass;
	    var inertia = physics.inertia;

	    // 形状
	    var physicsShape = null;

	    if (shape === 'btBoxShape') {
	        var geometry = obj.geometry;
	        geometry.computeBoundingBox();

	        var box = geometry.boundingBox;

	        var x = box.max.x - box.min.x;
	        var y = box.max.y - box.min.y;
	        var z = box.max.z - box.min.z;

	        var center = new THREE.Vector3();
	        box.getCenter(center);

	        position = position.clone();
	        position.add(center);

	        physicsShape = new Ammo.btBoxShape(new Ammo.btVector3(x * 0.5, y * 0.5, z * 0.5));
	    } else if (shape === 'btSphereShape') {
	        var geometry = obj.geometry;
	        geometry.computeBoundingSphere();

	        var sphere = geometry.boundingSphere;
	        physicsShape = new Ammo.btSphereShape(sphere.radius);
	    } else {
	        console.warn(`PlayerPhysics: cannot create shape ${shape}.`);
	        return null;
	    }

	    physicsShape.setMargin(0.05);

	    // 位移
	    var transform = new Ammo.btTransform();
	    transform.setIdentity();
	    transform.setOrigin(new Ammo.btVector3(position.x, position.y, position.z));
	    transform.setRotation(new Ammo.btQuaternion(quaternion.x, quaternion.y, quaternion.z, quaternion.w));

	    var defaultState = new Ammo.btDefaultMotionState(transform);

	    var localInertia = new Ammo.btVector3(inertia.x, inertia.y, inertia.z);
	    physicsShape.calculateLocalInertia(mass, localInertia);

	    var info = new Ammo.btRigidBodyConstructionInfo(mass, defaultState, physicsShape, localInertia);
	    return new Ammo.btRigidBody(info);
	};

	// --------------------------------- 创建柔软体 ---------------------------------------------

	PlayerPhysics.prototype.createSoftVolume = function (obj) {
	    var geometry = obj.geometry;
	    var mass = obj.userData.physics.mass;
	    var pressure = obj.userData.physics.pressure;

	    this.processGeometry(geometry);
	    var volume = new THREE.Mesh(geometry, new THREE.MeshPhongMaterial({
	        color: 0xFFFFFF
	    }));

	    volume.castShadow = true;
	    volume.receiveShadow = true;
	    volume.frustumCulled = false;

	    // Volume physic object
	    var body = this.softBodyHelpers.CreateFromTriMesh(
	        this.world.getWorldInfo(),
	        geometry.ammoVertices,
	        geometry.ammoIndices,
	        geometry.ammoIndices.length / 3,
	        true);

	    var sbConfig = body.get_m_cfg();
	    sbConfig.set_viterations(40); // 设置迭代次数
	    sbConfig.set_piterations(40);

	    // Soft-soft and soft-rigid碰撞
	    sbConfig.set_collisions(0x11);

	    // 摩擦力(Friction)
	    sbConfig.set_kDF(0.1);

	    // 减震(Damping)
	    sbConfig.set_kDP(0.01);

	    // 压力(Pressure)
	    sbConfig.set_kPR(pressure);

	    // 刚性(Stiffness)
	    body.get_m_materials().at(0).set_m_kLST(0.9);
	    body.get_m_materials().at(0).set_m_kAST(0.9);
	    body.setTotalMass(mass, false);

	    Ammo.castObject(body, Ammo.btCollisionObject).getCollisionShape().setMargin(0.05);

	    return body;
	};

	PlayerPhysics.prototype.processGeometry = function (bufGeometry) {
	    // Obtain a Geometry
	    var geometry = new THREE.Geometry().fromBufferGeometry(bufGeometry);
	    // Merge the vertices so the triangle soup is converted to indexed triangles
	    geometry.mergeVertices();
	    // Convert again to BufferGeometry, indexed
	    var indexedBufferGeom = this.createIndexedBufferGeometryFromGeometry(geometry);
	    // Create index arrays mapping the indexed vertices to bufGeometry vertices
	    this.mapIndices(bufGeometry, indexedBufferGeom);
	};

	PlayerPhysics.prototype.createIndexedBufferGeometryFromGeometry = function (geometry) {
	    var numVertices = geometry.vertices.length;
	    var numFaces = geometry.faces.length;
	    var bufferGeom = new THREE.BufferGeometry();
	    var vertices = new Float32Array(numVertices * 3);
	    var indices = new (numFaces * 3 > 65535 ? Uint32Array : Uint16Array)(numFaces * 3);

	    for (var i = 0; i < numVertices; i++) {
	        var p = geometry.vertices[i];
	        var i3 = i * 3;
	        vertices[i3] = p.x;
	        vertices[i3 + 1] = p.y;
	        vertices[i3 + 2] = p.z;
	    }

	    for (var i = 0; i < numFaces; i++) {
	        var f = geometry.faces[i];
	        var i3 = i * 3;
	        indices[i3] = f.a;
	        indices[i3 + 1] = f.b;
	        indices[i3 + 2] = f.c;
	    }

	    bufferGeom.setIndex(new THREE.BufferAttribute(indices, 1));
	    bufferGeom.addAttribute('position', new THREE.BufferAttribute(vertices, 3));

	    return bufferGeom;
	};

	PlayerPhysics.prototype.mapIndices = function (bufGeometry, indexedBufferGeom) {
	    // Creates ammoVertices, ammoIndices and ammoIndexAssociation in bufGeometry
	    var vertices = bufGeometry.attributes.position.array;
	    var idxVertices = indexedBufferGeom.attributes.position.array;
	    var indices = indexedBufferGeom.index.array;
	    var numIdxVertices = idxVertices.length / 3;
	    var numVertices = vertices.length / 3;

	    bufGeometry.ammoVertices = idxVertices;
	    bufGeometry.ammoIndices = indices;
	    bufGeometry.ammoIndexAssociation = [];

	    for (var i = 0; i < numIdxVertices; i++) {
	        var association = [];
	        bufGeometry.ammoIndexAssociation.push(association);
	        var i3 = i * 3;
	        for (var j = 0; j < numVertices; j++) {
	            var j3 = j * 3;
	            if (this.isEqual(idxVertices[i3], idxVertices[i3 + 1], idxVertices[i3 + 2],
	                vertices[j3], vertices[j3 + 1], vertices[j3 + 2])) {
	                association.push(j3);
	            }
	        }
	    }
	};

	PlayerPhysics.prototype.isEqual = function (x1, y1, z1, x2, y2, z2) {
	    var delta = 0.000001;
	    return Math.abs(x2 - x1) < delta &&
	        Math.abs(y2 - y1) < delta &&
	        Math.abs(z2 - z1) < delta;
	};

	// --------------------------------- API函数 ------------------------------------------------

	/**
	 * 添加一个物理物体
	 * @param {*} obj 
	 */
	PlayerPhysics.prototype.addPhysicsObject = function (obj) {
	    this.scene.add(obj);
	    if (obj.userData && obj.userData.physics && obj.userData.physics.enabled) {
	        if (obj.userData.physics.type === 'rigidBody') {
	            var body = this.createRigidBody(obj);
	            if (body) {
	                obj.userData.physics.body = body;
	                this.world.addRigidBody(body);

	                if (obj.userData.physics.mass > 0) {
	                    this.rigidBodies.push(obj);
	                    body.setActivationState(4);
	                }
	            }
	        } else if (obj.userData.physics.type === 'softVolume') {
	            var body = this.createSoftVolume(obj);
	            if (body) {
	                obj.userData.physics.body = body;
	                this.world.addSoftBody(body);
	                this.softBodies.push(obj);
	            }
	        }
	    }
	};

	/**
	 * CSS工具类
	 */
	var CssUtils = {
	    /**
	     * 序列化滤镜
	     * @param {*} filters 滤镜对象
	     */
	    serializeFilter: function (filters) {
	        var _filters = Object.assign({}, {
	            hueRotate: filters.hueRotate || 0,
	            saturate: filters.saturate === undefined ? 1 : filters.saturate,
	            brightness: filters.brightness === undefined ? 1 : filters.brightness,
	            blur: filters.blur || 0,
	            contrast: filters.contrast === undefined ? 1 : filters.contrast,
	            grayscale: filters.grayscale || 0,
	            invert: filters.invert || 0,
	            sepia: filters.sepia || 0,
	        });

	        return `hue-rotate(${_filters.hueRotate}deg) saturate(${_filters.saturate}) brightness(${_filters.brightness}) ` +
	            `blur(${_filters.blur}px) contrast(${_filters.contrast}) grayscale(${_filters.grayscale}) invert(${_filters.invert}) sepia(${_filters.sepia})`;
	    },

	    /**
	     * 反序列化滤镜
	     * @param {*} str css滤镜字符串
	     */
	    parseFilter: function (str) {
	        var list = str.split(' ');

	        var filters = {
	            hueRotate: 0,
	            saturate: 1,
	            brightness: 1,
	            blur: 0,
	            contrast: 1,
	            grayscale: 0,
	            invert: 0,
	            sepia: 0,
	        };

	        list.forEach(n => {
	            if (n.startsWith('hue-rotate')) { // 色调
	                filters.hueRotate = n.substr(11, n.length - 4);
	            } else if (n.startsWith('saturate')) { // 饱和度
	                filters.saturate = n.substr(9, n.length - 1);
	            } else if (n.startsWith('brightness')) { // 亮度
	                filters.brightness = n.substr(11, n.length - 1);
	            } else if (n.startsWith('blur')) { // 模糊
	                filters.blur = n.substr(5, n.length - 3);
	            } else if (n.startsWith('contrast')) { // 对比度
	                filters.contrast = n.substr(9, n.length - 1);
	            } else if (n.startsWith('grayscale')) {
	                filters.grayscale = n.substr(10, n.length - 1);
	            } else if (n.startsWith('invert')) { // 颜色反转
	                filters.invert = n.substr(7, n.length - 1);
	            } else if (n.startsWith('sepia')) { // 复古
	                filters.sepia = n.substr(6, n.length - 1);
	            }
	        });

	        return filters;
	    }
	};

	var ID$5 = -1;

	/**
	 * 渲染器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} globe 
	 */
	function Renderer(globe) {
	    this.globe = globe;

	    this.id = `${this.constructor.name}${ID$5--}`;

	    this.camera = this.globe.camera;
	    this.renderer = this.globe.renderer;
	    this.gl = this.renderer.context;
	}

	Renderer.prototype.render = function (layer) {

	};

	Renderer.prototype.dispose = function () {
	    delete this.camera;
	    delete this.render;
	    delete this.gl;
	    delete this.globe;
	};

	var BackgroundVertex = "precision highp float;\r\nprecision highp int;\r\n\r\nuniform mat4 modelMatrix;\r\nuniform mat4 modelViewMatrix;\r\nuniform mat4 projectionMatrix;\r\n\r\nattribute vec3 position;\r\n\r\nvarying vec3 vWorldDirection;\r\n\r\nvec3 transformDirection(in vec3 dir, in mat4 matrix) {\r\n    return normalize((matrix * vec4(dir, 0.0)).xyz);\r\n}\r\n\r\nvoid main() {\r\n    vWorldDirection = transformDirection(position, modelMatrix);\r\n    \r\n    vec3 transformed = vec3(position);\r\n    vec4 mvPosition = modelViewMatrix * vec4(transformed, 1.0);\r\n    gl_Position = projectionMatrix * mvPosition;\r\n\tgl_Position.z = gl_Position.w;\r\n}";

	var BackgroundFragment = "precision highp float;\r\nprecision highp int;\r\n\r\nuniform samplerCube tCube;\r\nuniform float tFlip;\r\n\r\nvarying vec3 vWorldDirection;\r\n\r\nvoid main() {\r\n\tgl_FragColor = textureCube(tCube, vec3(tFlip * vWorldDirection.x, vWorldDirection.yz));\r\n}";

	/**
	 * 背景渲染器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} globe 
	 */
	function BackgroundRenderer(globe) {
	    Renderer.call(this, globe);

	    this.program = null;
	    this.attributes = {};
	    this.uniforms = {};
	    this.buffers = {};
	    this.texture = null;

	    this.indexCount = 0;
	    this.modelMatrix = new THREE.Matrix4();

	    this.initProgram();
	    this.initBuffers();
	    this.initTextures();
	}

	BackgroundRenderer.prototype = Object.create(Renderer.prototype);
	BackgroundRenderer.prototype.constructor = BackgroundRenderer;

	BackgroundRenderer.prototype.initProgram = function () {
	    var gl = this.gl;

	    // 顶点着色器
	    var vertexShader = gl.createShader(gl.VERTEX_SHADER);
	    gl.shaderSource(vertexShader, BackgroundVertex);
	    gl.compileShader(vertexShader);

	    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
	        console.warn(gl.getShaderInfoLog(vertexShader));
	        gl.deleteShader(vertexShader);
	        return;
	    }

	    // 片源着色器
	    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
	    gl.shaderSource(fragmentShader, BackgroundFragment);
	    gl.compileShader(fragmentShader);

	    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
	        console.warn(gl.getShaderInfoLog(fragmentShader));
	        gl.deleteShader(fragmentShader);
	        return;
	    }

	    // 着色器程序
	    var program = gl.createProgram();
	    gl.attachShader(program, vertexShader);
	    gl.attachShader(program, fragmentShader);
	    gl.linkProgram(program);

	    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
	        console.warn("Could not initialise shaders");
	        gl.deleteProgram(program);
	        return;
	    }

	    // 使用着色器程序
	    gl.useProgram(program);
	    this.program = program;

	    // 获取attributes和uniform信息
	    Object.assign(this.attributes, {
	        position: gl.getAttribLocation(program, 'position'),
	    });

	    Object.assign(this.uniforms, {
	        modelMatrix: gl.getUniformLocation(program, 'modelMatrix'),
	        modelViewMatrix: gl.getUniformLocation(program, 'modelViewMatrix'),
	        projectionMatrix: gl.getUniformLocation(program, 'projectionMatrix'),

	        tCube: gl.getUniformLocation(program, 'tCube'),
	        tFlip: gl.getUniformLocation(program, 'tFlip'),
	    });
	};

	BackgroundRenderer.prototype.initBuffers = function () {
	    var gl = this.gl;

	    var geometry = new THREE.BoxBufferGeometry(1, 1, 1);
	    var attributes = geometry.attributes;
	    this.indexCount = geometry.index.count;

	    var positionBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
	    gl.bufferData(gl.ARRAY_BUFFER, attributes.position.array, gl.STATIC_DRAW);

	    var indexBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
	    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, geometry.index.array, gl.STATIC_DRAW);

	    Object.assign(this.buffers, {
	        position: positionBuffer,
	        index: indexBuffer,
	    });
	};

	BackgroundRenderer.prototype.initTextures = function () {
	    var gl = this.gl;

	    var urls = [
	        'assets/textures/MilkyWay/dark-s_px.jpg',
	        'assets/textures/MilkyWay/dark-s_nx.jpg',
	        'assets/textures/MilkyWay/dark-s_py.jpg',
	        'assets/textures/MilkyWay/dark-s_ny.jpg',
	        'assets/textures/MilkyWay/dark-s_pz.jpg',
	        'assets/textures/MilkyWay/dark-s_nz.jpg',
	    ];

	    // 创建立方体纹理
	    var texture = gl.createTexture();

	    gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);

	    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
	    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
	    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
	    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

	    gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);

	    var promises = urls.map(n => {
	        return this.createImage(n);
	    });

	    Promise.all(promises).then(imgs => {
	        gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);
	        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, imgs[0]);
	        gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, imgs[1]);
	        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, imgs[2]);
	        gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, imgs[3]);
	        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, imgs[4]);
	        gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, imgs[5]);
	        gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);

	        this.texture = texture;
	    });
	};

	BackgroundRenderer.prototype.createImage = function (url) {
	    var img = document.createElement('img');
	    img.src = url;

	    return new Promise(resolve => {
	        img.onload = () => {
	            img.onload = null;
	            resolve(img);
	        };
	    });
	};

	BackgroundRenderer.prototype.render = function () {
	    var modelViewMatrix = new THREE.Matrix4();

	    return function () {
	        if (!this.texture) {
	            return;
	        }

	        var gl = this.gl;
	        var camera = this.camera;

	        this.modelMatrix.copyPosition(this.camera.matrixWorld);

	        gl.useProgram(this.program);

	        gl.enable(gl.CULL_FACE);
	        gl.cullFace(gl.FRONT);
	        gl.frontFace(gl.CCW);
	        gl.disable(gl.DEPTH_TEST);

	        modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, this.modelMatrix);

	        gl.uniformMatrix4fv(this.uniforms.modelMatrix, false, this.modelMatrix.elements);
	        gl.uniformMatrix4fv(this.uniforms.modelViewMatrix, false, modelViewMatrix.elements);
	        gl.uniformMatrix4fv(this.uniforms.projectionMatrix, false, camera.projectionMatrix.elements);

	        gl.uniform1f(this.uniforms.tFlip, -1);

	        gl.activeTexture(gl.TEXTURE0);
	        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.texture);
	        gl.uniform1i(this.uniforms.tCube, 0);

	        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffers.position);
	        gl.enableVertexAttribArray(this.attributes.position);
	        gl.vertexAttribPointer(this.attributes.position, 3, gl.FLOAT, false, 0, 0);

	        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffers.index);
	        gl.drawElements(gl.TRIANGLES, this.indexCount, gl.UNSIGNED_SHORT, 0);

	        gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
	        gl.bindBuffer(gl.ARRAY_BUFFER, null);
	        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
	    };
	}();

	BackgroundRenderer.prototype.dispose = function () {
	    this.gl.deleteProgram(this.program);

	    this.program = null;
	    this.attributes = {};
	    this.uniforms = {};

	    Object.values(this.buffers).forEach(n => {
	        this.gl.deleteBuffer(n);
	    });

	    this.buffers = {};

	    Renderer.prototype.dispose.call(this);
	};

	var SunVertex = "precision highp float;\r\nprecision highp int;\r\n\r\nuniform mat4 modelViewMatrix;\r\nuniform mat4 projectionMatrix;\r\n\r\nuniform vec3 sunPosition;\r\n\r\nattribute vec3 position;\r\nattribute vec2 uv;\r\n\r\nvarying vec2 vUV;\r\n\r\nvec3 applyMatrix4(vec3 v, mat4 m) {\r\n    float x = v.x;\r\n    float y = v.y;\r\n    float z = v.z;\r\n    \r\n    float w = 1.0 / ( m[0][3] * x + m[1][3] * y + m[2][3] * z + m[3][3] );\r\n\r\n    return vec3(\r\n        (m[0][0] * x + m[1][0] * y + m[2][0] * z + m[3][0]) * w,\r\n        (m[0][1] * x + m[1][1] * y + m[2][1] * z + m[3][1]) * w,\r\n        (m[0][2] * x + m[1][2] * y + m[2][2] * z + m[3][2] ) * w\r\n    );\r\n}\r\n\r\nvoid main() {\r\n    vec3 screenPos = applyMatrix4(applyMatrix4(sunPosition, modelViewMatrix), projectionMatrix);\r\n\r\n    gl_Position = vec4(\r\n        screenPos.x + position.x,\r\n        screenPos.y + position.y,\r\n        screenPos.z + position.z,\r\n        1.0\r\n    );\r\n\r\n    vUV = uv;\r\n}";

	var SunFragment = "precision highp float;\r\nprecision highp int;\r\n\r\nuniform sampler2D map;\r\n\r\nvarying vec2 vUV;\r\n\r\nvoid main() {\r\n    gl_FragColor = texture2D(map, vUV);\r\n}";

	/**
	 * WGS84
	 * @author tengge / https://github.com/tengge1
	 * @see https://zhidao.baidu.com/question/535863620.html
	 */
	var WGS84 = {
	    // 长半轴
	    a: 6378137,

	    // 短半轴
	    b: 6356752.3142,

	    // 扁率
	    alpha: 1 / 298.2572236,

	    // 第一偏心率平方 = (a**2 - b**2) / a**2
	    e2_1: 0.00669437999013,

	    // 第二偏心率平方 = (a**2 - b**2) / b**2
	    e2_2: 0.006739496742227,
	};

	/**
	 * 太阳渲染器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} globe 
	 */
	function SunRenderer(globe) {
	    Renderer.call(this, globe);

	    this.program = null;
	    this.attributes = {};
	    this.uniforms = {};
	    this.buffers = {};
	    this.texture = null;

	    this.indexCount = 0;

	    this.initProgram();
	    this.initBuffers();
	    this.initTextures();
	}

	SunRenderer.prototype = Object.create(Renderer.prototype);
	SunRenderer.prototype.constructor = SunRenderer;

	SunRenderer.prototype.initProgram = function () {
	    var gl = this.gl;

	    // 顶点着色器
	    var vertexShader = gl.createShader(gl.VERTEX_SHADER);
	    gl.shaderSource(vertexShader, SunVertex);
	    gl.compileShader(vertexShader);

	    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
	        console.warn(gl.getShaderInfoLog(vertexShader));
	        gl.deleteShader(vertexShader);
	        return;
	    }

	    // 片源着色器
	    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
	    gl.shaderSource(fragmentShader, SunFragment);
	    gl.compileShader(fragmentShader);

	    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
	        console.warn(gl.getShaderInfoLog(fragmentShader));
	        gl.deleteShader(fragmentShader);
	        return;
	    }

	    // 着色器程序
	    var program = gl.createProgram();
	    gl.attachShader(program, vertexShader);
	    gl.attachShader(program, fragmentShader);
	    gl.linkProgram(program);

	    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
	        console.warn("Could not initialise shaders");
	        gl.deleteProgram(program);
	        return;
	    }

	    // 使用着色器程序
	    gl.useProgram(program);
	    this.program = program;

	    // 获取attributes和uniform信息
	    Object.assign(this.attributes, {
	        position: gl.getAttribLocation(program, 'position'),
	        uv: gl.getAttribLocation(program, 'uv'),
	    });

	    Object.assign(this.uniforms, {
	        modelViewMatrix: gl.getUniformLocation(program, 'modelViewMatrix'),
	        projectionMatrix: gl.getUniformLocation(program, 'projectionMatrix'),
	        sunPosition: gl.getUniformLocation(program, 'sunPosition'),
	        map: gl.getUniformLocation(program, 'map'),
	    });
	};

	SunRenderer.prototype.initBuffers = function () {
	    var gl = this.gl;

	    var geometry = new THREE.PlaneBufferGeometry(0.4, 0.4);
	    var attributes = geometry.attributes;
	    this.indexCount = geometry.index.count;

	    var positionBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
	    gl.bufferData(gl.ARRAY_BUFFER, attributes.position.array, gl.STATIC_DRAW);

	    var uvBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ARRAY_BUFFER, uvBuffer);
	    gl.bufferData(gl.ARRAY_BUFFER, attributes.uv.array, gl.STATIC_DRAW);

	    var indexBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
	    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, geometry.index.array, gl.STATIC_DRAW);

	    Object.assign(this.buffers, {
	        position: positionBuffer,
	        uv: uvBuffer,
	        index: indexBuffer,
	    });
	};

	SunRenderer.prototype.initTextures = function () {
	    var gl = this.gl;

	    var texture = gl.createTexture();
	    gl.bindTexture(gl.TEXTURE_2D, texture);
	    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

	    var img = document.createElement('img');

	    img.onload = () => {
	        img.onload = null;
	        gl.bindTexture(gl.TEXTURE_2D, texture);
	        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);
	        this.texture = texture;
	    };

	    img.src = 'assets/textures/lensflare/lensflare0_alpha.png';
	};

	SunRenderer.prototype.render = function () {
	    if (!this.texture) {
	        return;
	    }

	    var gl = this.gl;
	    var camera = this.camera;

	    gl.useProgram(this.program);

	    gl.disable(gl.CULL_FACE);
	    gl.cullFace(gl.FRONT);
	    gl.frontFace(gl.CCW);

	    gl.enable(gl.DEPTH_TEST);
	    gl.enable(gl.BLEND);
	    gl.blendFunc(gl.SRC_ALPHA, gl.ONE);

	    gl.uniformMatrix4fv(this.uniforms.modelViewMatrix, false, camera.matrixWorldInverse.elements);
	    gl.uniformMatrix4fv(this.uniforms.projectionMatrix, false, camera.projectionMatrix.elements);
	    gl.uniform3f(this.uniforms.sunPosition, this.globe.sunPosition.x, this.globe.sunPosition.y, this.globe.sunPosition.z);

	    gl.activeTexture(gl.TEXTURE0);
	    gl.bindTexture(gl.TEXTURE_2D, this.texture);
	    gl.uniform1i(this.uniforms.map, 0);

	    gl.bindBuffer(gl.ARRAY_BUFFER, this.buffers.position);
	    gl.enableVertexAttribArray(this.attributes.position);
	    gl.vertexAttribPointer(this.attributes.position, 3, gl.FLOAT, false, 0, 0);

	    gl.bindBuffer(gl.ARRAY_BUFFER, this.buffers.uv);
	    gl.enableVertexAttribArray(this.attributes.uv);
	    gl.vertexAttribPointer(this.attributes.uv, 2, gl.FLOAT, false, 0, 0);

	    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffers.index);
	    gl.drawElements(gl.TRIANGLES, this.indexCount, gl.UNSIGNED_SHORT, 0);

	    gl.bindTexture(gl.TEXTURE_2D, null);
	    gl.bindBuffer(gl.ARRAY_BUFFER, null);
	    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
	};

	SunRenderer.prototype.dispose = function () {
	    this.gl.deleteProgram(this.program);

	    this.program = null;
	    this.attributes = {};
	    this.uniforms = {};

	    Object.values(this.buffers).forEach(n => {
	        this.gl.deleteBuffer(n);
	    });

	    this.buffers = {};

	    Renderer.prototype.dispose.call(this);
	};

	/**
	 * 瓦片创建者
	 * @author tengge / https://github.com/tengge1
	 * @param {*} globe 
	 */
	function TileCreator(globe) {
	    this.globe = globe;
	    this.options = this.globe.options;
	    this.camera = this.globe.camera;
	    this.renderer = this.globe.renderer;
	}

	TileCreator.prototype.get = function (lon, lat, alt) {
	    return [];
	};

	TileCreator.prototype.dispose = function () {
	    delete this.globe;
	    delete this.options;
	    delete this.camera;
	    delete this.renderer;
	};

	const RADIAN_PER_DEGREE = Math.PI / 180;
	const DEGREE_PER_RADIAN = 180 / Math.PI;

	/**
	 * 经纬度、海拔转笛卡尔坐标
	 * 坐标系：
	 * 原点：地心
	 * x轴：经度0，纬度0
	 * y轴：指向北极
	 * z轴：西经90，纬度0
	 * @param {THREE.Vector3} lonlat 经纬度（弧度）、海拔
	 * @param {THREE.Vector3} xyz 笛卡尔坐标
	 */
	function _lonlatToXYZ(lonlat, xyz) {
	    var lon = lonlat.x;
	    var lat = lonlat.y;
	    var r = WGS84.a + (lonlat.z || 0);

	    if (xyz === undefined) {
	        xyz = new THREE.Vector3();
	    }

	    return xyz.set(
	        r * Math.cos(lat) * Math.cos(lon),
	        r * Math.sin(lat),
	        -r * Math.cos(lat) * Math.sin(lon),
	    );
	}

	/**
	 * 经纬度、海拔转笛卡尔坐标
	 * @param {THREE.Vector3} lonlat 经纬度（角度）、海拔
	 * @param {THREE.Vector3} xyz 笛卡尔坐标
	 */
	function lonlatToXYZ(lonlat, xyz) {
	    if (xyz === undefined) {
	        xyz = new THREE.Vector3();
	    }

	    xyz.set(
	        lonlat.x * RADIAN_PER_DEGREE,
	        lonlat.y * RADIAN_PER_DEGREE,
	        lonlat.z,
	    );

	    return _lonlatToXYZ(xyz, xyz);
	}

	/**
	 * 笛卡尔坐标转经纬度（弧度）、海拔
	 * @param {THREE.Vector3} xyz 笛卡尔坐标
	 * @param {THREE.Vector3} lonlat 经纬度（弧度）、海拔
	 */
	function _xyzToLonlat(xyz, lonlat) {
	    var lon = -Math.sign(xyz.z) * Math.acos(xyz.x / Math.sqrt(xyz.x ** 2 + xyz.z ** 2));
	    var lat = Math.atan(xyz.y / Math.sqrt(xyz.x ** 2 + xyz.z ** 2));
	    var alt = Math.sqrt(xyz.x ** 2 + xyz.y ** 2 + xyz.z ** 2) - WGS84.a;

	    if (lonlat === undefined) {
	        lonlat = new THREE.Vector3();
	    }

	    return lonlat.set(
	        lon,
	        lat,
	        alt,
	    );
	}

	/**
	 * 笛卡尔坐标转经纬度（角度）、海拔
	 * @param {THREE.Vector3} xyz 笛卡尔坐标
	 * @param {THREE.Vector3} lonlat 经纬度（角度）、海拔
	 */
	function xyzToLonlat(xyz, lonlat) {
	    if (lonlat === undefined) {
	        lonlat = new THREE.Vector3();
	    }

	    _xyzToLonlat(xyz, lonlat);
	    lonlat.x *= DEGREE_PER_RADIAN;
	    lonlat.y *= DEGREE_PER_RADIAN;

	    return lonlat;
	}

	/**
	 * 层级转海拔
	 * @param {Number} zoom 层级
	 */
	function zoomToAlt(zoom) {
	    return 7820683 / 2 ** zoom;
	}

	/**
	 * 海拔转层级
	 * @param {Number} alt 海拔
	 */
	function altToZoom(alt) {
	    return Math.log2(7820683 / alt);
	}

	/**
	 * 墨卡托投影（弧度）
	 * @param {Number} lat 纬度（弧度）
	 * @see https://github.com/d3/d3-geo/blob/master/src/projection/mercator.js
	 */
	function _mercatorLat(lat) {
	    return Math.log(Math.tan((Math.PI / 2 + lat) / 2));
	}

	/**
	 * 墨卡托投影（角度）
	 * @param {Number} lat 纬度（角度）
	 * @see https://github.com/d3/d3-geo/blob/master/src/projection/mercator.js
	 */
	function mercatorLat(lat) {
	    return _mercatorLat(lat * RADIAN_PER_DEGREE) * DEGREE_PER_RADIAN;
	}

	/**
	 * 墨卡托投影反算（弧度）
	 * @param {Number} y 墨卡托投影Y坐标
	 * @see https://github.com/d3/d3-geo/blob/master/src/projection/mercator.js
	 */
	function _mercatorLatInvert(y) {
	    return 2 * Math.atan(Math.exp(y)) - Math.PI / 2;
	}

	/**
	 * 墨卡托投影反算（角度）
	 * @param {Number} y 墨卡托投影Y坐标
	 * @see https://github.com/d3/d3-geo/blob/master/src/projection/mercator.js
	 */
	function mercatorLatInvert(y) {
	    return _mercatorLatInvert(y) * DEGREE_PER_RADIAN;
	}

	/**
	 * 计算两个经纬度之间距离(弧度)
	 * @param {*} lon1 经度1(弧度)
	 * @param {*} lat1 纬度1(弧度)
	 * @param {*} lon2 经度2(弧度)
	 * @param {*} lat2 纬度2(弧度)
	 * @see https://www.xuebuyuan.com/2173606.html
	 */
	function _getDistance(lon1, lat1, lon2, lat2) {
	    return 2 * 6378137 * Math.asin(Math.sqrt(Math.pow(Math.sin((lat1 - lat2) / 2), 2) +
	        Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin((lon1 - lon2) / 2), 2)));
	}

	/**
	 * 计算两个经纬度之间距离(角度)
	 * @param {*} lon1 经度1(角度)
	 * @param {*} lat1 纬度1(角度)
	 * @param {*} lon2 经度2(角度)
	 * @param {*} lat2 纬度2(角度)
	 * @see https://www.xuebuyuan.com/2173606.html
	 */
	function getDistance(lon1, lat1, lon2, lat2) {
	    lon1 *= RADIAN_PER_DEGREE;
	    lat1 *= RADIAN_PER_DEGREE;
	    lon2 *= RADIAN_PER_DEGREE;
	    lat2 *= RADIAN_PER_DEGREE;

	    return _getDistance(lon1, lat1, lon2, lat2);
	}

	/**
	 * 数学工具
	 * @author tengge / https://github.com/tengge1
	 */
	var GeoUtils = {
	    // 经纬度海拔转笛卡尔坐标
	    _lonlatToXYZ,
	    lonlatToXYZ,

	    // 笛卡尔坐标转经纬度海拔
	    _xyzToLonlat,
	    xyzToLonlat,

	    // 层级转海拔
	    zoomToAlt,

	    // 海拔转层级
	    altToZoom,

	    // 墨卡托投影
	    _mercatorLat,
	    mercatorLat,

	    // 墨卡托投影反算
	    _mercatorLatInvert,
	    mercatorLatInvert,

	    // 计算两个经纬度之间距离
	    _getDistance,
	    getDistance,
	};

	/**
	 * 瓦片
	 * @author tengge / https://github.com/tengge1
	 * @param {*} x 
	 * @param {*} y 
	 * @param {*} z 
	 */
	function Tile(x = 0, y = 0, z = 0) {
	    this.x = x;
	    this.y = y;
	    this.z = z;

	    this.images = [];

	    this._aabb = this._getBox(x, y, z);
	    this._center = this._getCenter(this._aabb);
	}

	/**
	 * 获取包围盒
	 * @param {*} x 
	 * @param {*} y 
	 * @param {*} z 
	 */
	Tile.prototype._getBox = function (x, y, z) {
	    var size = Math.PI * 2 / 2 ** z;
	    var minX = -Math.PI + size * x;
	    var maxX = minX + size;
	    var maxY = Math.PI - size * y;
	    var minY = maxY - size;

	    minY = GeoUtils._mercatorLatInvert(minY);
	    maxY = GeoUtils._mercatorLatInvert(maxY);

	    return new THREE.Box2(
	        new THREE.Vector2(minX, minY),
	        new THREE.Vector2(maxX, maxY),
	    );
	};

	/**
	 * 获取中心点
	 * @param {*} aabb 
	 */
	Tile.prototype._getCenter = function (aabb) {
	    var center = new THREE.Vector2();
	    return aabb.getCenter(center);
	};

	/**
	 * 球形瓦片创建者
	 * @author tengge / https://github.com/tengge1
	 * @param {*} globe 
	 */
	function SphereTileCreator(globe) {
	    TileCreator.call(this, globe);

	    this.cache = new Map();

	    this._centerZoom = 0;
	}

	SphereTileCreator.prototype = Object.create(TileCreator.prototype);
	SphereTileCreator.prototype.constructor = SphereTileCreator;

	SphereTileCreator.prototype.get = function (tiles) {
	    tiles.length = 0;

	    this._centerZoom = ~~GeoUtils.altToZoom(this.camera.position.length() - WGS84.a) + 3;

	    this.fork(0, 0, 1, tiles);
	    this.fork(1, 0, 1, tiles);
	    this.fork(0, 1, 1, tiles);
	    this.fork(1, 1, 1, tiles);

	    // 排序
	    tiles = tiles.sort((a, b) => {
	        if (a.z > b.z) {
	            return 1;
	        } else if (a.z < b.z) {
	            return -1;
	        } else {
	            return 0;
	        }
	    });

	    // 获取图层数据
	    tiles.forEach(tile => {
	        tile.images.length = 0;
	        this.globe._layers.forEach(n => {
	            var image = n.get(tile.x, tile.y, tile.z);
	            if (image) {
	                tile.images.push(image);
	            }
	        });
	    });

	    return tiles;
	};

	/**
	 * 从1层级进行四分，返回满足要求的瓦片
	 * @param {*} x 
	 * @param {*} y 
	 * @param {*} z 
	 * @param {*} tiles 
	 */
	SphereTileCreator.prototype.fork = function (x, y, z, tiles) {
	    var tile = this.getTile(x, y, z);

	    if (!this.isVisible(tile)) {
	        return;
	    }

	    tiles.push(tile);

	    if (tile.z > this._centerZoom) {
	        return;
	    }

	    this.fork(x * 2, y * 2, z + 1, tiles);
	    this.fork(x * 2 + 1, y * 2, z + 1, tiles);
	    this.fork(x * 2, y * 2 + 1, z + 1, tiles);
	    this.fork(x * 2 + 1, y * 2 + 1, z + 1, tiles);
	};

	/**
	 * 获取一个瓦片
	 * @param {*} x 
	 * @param {*} y 
	 * @param {*} z 
	 */
	SphereTileCreator.prototype.getTile = function (x, y, z) {
	    var id = `${x}_${y}_${z}`;

	    var tile = this.cache.get(id);

	    if (!tile) {
	        tile = new Tile(x, y, z);
	        this.cache.set(id, tile);
	    }

	    return tile;
	};

	/**
	 * 判断瓦片是否可见：
	 * 1、材质上的底图已经下载完；
	 * 2、当前视锥与该瓦片的包围盒相交。
	 * @param {*} tile 
	 */
	SphereTileCreator.prototype.isVisible = function (tile) {
	    return this.globe.viewer.aabb.intersectsBox(tile._aabb);
	};

	SphereTileCreator.prototype.dispose = function () {
	    this.cache.clear();
	    TileCreator.prototype.dispose.call(this);
	};

	var TiledVertex = "precision highp float;\r\n\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\nattribute vec2 uv;\r\n\r\nuniform mat4 modelMatrix;\r\nuniform mat4 viewMatrix;\r\nuniform mat4 projectionMatrix;\r\n\r\nuniform int x;\r\nuniform int y;\r\nuniform int z;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUV;\r\n\r\n// 必应地图参数，纬度180是85.05112878的墨卡托投影\r\n#define EARTH_RADIUS 6378137.0\r\n#define MIN_LATITUDE -180.0\r\n#define MAX_LATITUDE 180.0\r\n#define MIN_LONGITUDE -180.0\r\n#define MAX_LONGITUDE 180.0\r\n#define PI 3.141592653589793\r\n\r\nvoid main() {\r\n    // 每个瓦片位置\r\n    float size = pow(2.0, float(z));\r\n    float dlon = (MAX_LONGITUDE - MIN_LONGITUDE) / size;\r\n    float dlat = (MAX_LATITUDE - MIN_LATITUDE) / size;\r\n\r\n    float left = MIN_LONGITUDE + dlon * float(x);\r\n    float top = MAX_LATITUDE - dlat * float(y);\r\n    float right = left + dlon;\r\n    float bottom = top - dlat;\r\n\r\n    // 瓦片上每个小格位置\r\n    // +0.5的原因是：position范围是-0.5到0.5\r\n    float lon = left + (right - left) * (0.5 + position.x);\r\n    float lat = top - (top - bottom) * (0.5 + position.y);\r\n\r\n    lon = lon * PI / 180.0;\r\n    lat = lat * PI / 180.0;\r\n\r\n    // 墨卡托投影反算\r\n    lat = 2.0 * atan(exp(lat)) - PI / 2.0;\r\n\r\n    vec3 transformed = vec3(\r\n        EARTH_RADIUS * cos(lat) * cos(lon),\r\n        EARTH_RADIUS * sin(lat),\r\n        -EARTH_RADIUS * cos(lat) * sin(lon)\r\n    );\r\n\r\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(transformed, 1.0);\r\n\r\n    vNormal = normal;\r\n    vUV = uv;\r\n}";

	var TiledFragment = "precision highp float;\r\n\r\nuniform sampler2D map;\r\n\r\nvarying vec2 vUV;\r\n\r\nvoid main() {\r\n    gl_FragColor = texture2D(map, vUV);\r\n}";

	/**
	 * 瓦片图层渲染器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} globe 
	 */
	function TiledLayerRenderer(globe) {
	    Renderer.call(this, globe);

	    this.creator = new SphereTileCreator(this.globe);

	    this.geometry = new THREE.PlaneBufferGeometry(1, 1, 16, 16);
	    this.modelMatrix = new THREE.Matrix4();

	    this.program = null;
	    this.attributes = {};
	    this.uniforms = {};
	    this.buffers = {};

	    this.tiles = [];

	    this.initProgram();
	    this.initBuffers();
	}

	TiledLayerRenderer.prototype = Object.create(Renderer.prototype);
	TiledLayerRenderer.prototype.constructor = TiledLayerRenderer;

	TiledLayerRenderer.prototype.initProgram = function () {
	    var gl = this.gl;

	    // 顶点着色器
	    var vertexShader = gl.createShader(gl.VERTEX_SHADER);
	    gl.shaderSource(vertexShader, TiledVertex);
	    gl.compileShader(vertexShader);

	    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
	        console.warn(gl.getShaderInfoLog(vertexShader));
	        gl.deleteShader(vertexShader);
	        return;
	    }

	    // 片源着色器
	    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
	    gl.shaderSource(fragmentShader, TiledFragment);
	    gl.compileShader(fragmentShader);

	    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
	        console.warn(gl.getShaderInfoLog(fragmentShader));
	        gl.deleteShader(fragmentShader);
	        return;
	    }

	    // 着色器程序
	    var program = gl.createProgram();
	    gl.attachShader(program, vertexShader);
	    gl.attachShader(program, fragmentShader);
	    gl.linkProgram(program);

	    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
	        console.warn("Could not initialise shaders");
	        gl.deleteProgram(program);
	        return;
	    }

	    // 使用着色器程序
	    gl.useProgram(program);
	    this.program = program;

	    // 获取attributes和uniform信息
	    Object.assign(this.attributes, {
	        position: gl.getAttribLocation(program, 'position'),
	        normal: gl.getAttribLocation(program, 'normal'),
	        uv: gl.getAttribLocation(program, 'uv'),
	    });

	    Object.assign(this.uniforms, {
	        modelMatrix: gl.getUniformLocation(program, 'modelMatrix'),
	        viewMatrix: gl.getUniformLocation(program, 'viewMatrix'),
	        projectionMatrix: gl.getUniformLocation(program, 'projectionMatrix'),
	        x: gl.getUniformLocation(program, 'x'),
	        y: gl.getUniformLocation(program, 'y'),
	        z: gl.getUniformLocation(program, 'z'),
	        map: gl.getUniformLocation(program, 'map'),
	    });
	};

	TiledLayerRenderer.prototype.initBuffers = function () {
	    var gl = this.gl;
	    var geometry = this.geometry;
	    var attributes = geometry.attributes;

	    var positionBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
	    gl.bufferData(gl.ARRAY_BUFFER, attributes.position.array, gl.STATIC_DRAW);

	    var normalBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ARRAY_BUFFER, normalBuffer);
	    gl.bufferData(gl.ARRAY_BUFFER, attributes.normal.array, gl.STATIC_DRAW);

	    var uvBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ARRAY_BUFFER, uvBuffer);
	    gl.bufferData(gl.ARRAY_BUFFER, attributes.uv.array, gl.STATIC_DRAW);

	    var indexBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
	    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, geometry.index.array, gl.STATIC_DRAW);

	    Object.assign(this.buffers, {
	        position: positionBuffer,
	        normal: normalBuffer,
	        uv: uvBuffer,
	        index: indexBuffer,
	    });
	};

	TiledLayerRenderer.prototype.render = function () {
	    this.creator.get(this.tiles);
	    this.renderMesh();
	    this.renderer.state.reset();
	};

	TiledLayerRenderer.prototype.renderMesh = function () {
	    var gl = this.gl;
	    var camera = this.camera;

	    gl.useProgram(this.program);

	    gl.enable(gl.CULL_FACE);
	    gl.cullFace(gl.BACK);
	    gl.frontFace(gl.CW);

	    gl.enable(gl.DEPTH_TEST);
	    // gl.depthFunc(gl.LEQUAL);
	    // gl.depthMask(true);
	    gl.disable(gl.BLEND);

	    gl.uniformMatrix4fv(this.uniforms.modelMatrix, false, this.modelMatrix.elements);
	    gl.uniformMatrix4fv(this.uniforms.viewMatrix, false, camera.matrixWorldInverse.elements);
	    gl.uniformMatrix4fv(this.uniforms.projectionMatrix, false, camera.projectionMatrix.elements);

	    gl.bindBuffer(gl.ARRAY_BUFFER, this.buffers.position);
	    gl.enableVertexAttribArray(this.attributes.position);
	    gl.vertexAttribPointer(this.attributes.position, 3, gl.FLOAT, false, 0, 0);

	    gl.bindBuffer(gl.ARRAY_BUFFER, this.buffers.normal);
	    gl.enableVertexAttribArray(this.attributes.normal);
	    gl.vertexAttribPointer(this.attributes.normal, 3, gl.FLOAT, false, 0, 0);

	    gl.bindBuffer(gl.ARRAY_BUFFER, this.buffers.uv);
	    gl.enableVertexAttribArray(this.attributes.uv);
	    gl.vertexAttribPointer(this.attributes.uv, 2, gl.FLOAT, false, 0, 0);

	    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffers.index);

	    // x, y, z
	    this.tiles.forEach(tile => {
	        tile.images.forEach(n => {
	            gl.uniform1i(this.uniforms.x, n._x);
	            gl.uniform1i(this.uniforms.y, n._y);
	            gl.uniform1i(this.uniforms.z, n._z);

	            if (!n.texture) {
	                var texture = gl.createTexture();
	                gl.activeTexture(gl.TEXTURE0);
	                gl.bindTexture(gl.TEXTURE_2D, texture);
	                gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
	                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, n);

	                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
	                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
	                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

	                n.texture = texture;
	            }

	            gl.activeTexture(gl.TEXTURE0);
	            gl.bindTexture(gl.TEXTURE_2D, n.texture);
	            gl.uniform1i(this.uniforms.map, 0);

	            gl.drawElements(gl.TRIANGLES, this.geometry.index.count, gl.UNSIGNED_SHORT, 0);
	        });
	    });

	    gl.bindBuffer(gl.ARRAY_BUFFER, null);
	    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
	    gl.bindTexture(gl.TEXTURE_2D, null);
	};

	TiledLayerRenderer.prototype.dispose = function () {
	    this.gl.deleteProgram(this.program);

	    this.program = null;
	    this.attributes = {};
	    this.uniforms = {};

	    Object.values(this.buffers).forEach(n => {
	        this.gl.deleteBuffer(n);
	    });

	    this.buffers = {};

	    this.creator.dispose();

	    Renderer.prototype.dispose.call(this);
	};

	var AtmosphereVertex = "attribute vec3 position;\r\nattribute vec3 normal;\r\nattribute vec3 uv;\r\n\r\nuniform mat4 modelViewMatrix;\r\nuniform mat4 projectionMatrix;\r\n\r\nvarying vec4 vTransformed;\r\nvarying vec3 vNormal;\r\nvarying vec3 vUV; \r\n\r\nvoid main()\r\n{\r\n    vec4 transformed =  modelViewMatrix * vec4(position, 1.0);\r\n\r\n    gl_Position = projectionMatrix * transformed;\r\n\r\n    vTransformed = transformed;\r\n    vNormal = normal;\r\n    vUV = uv;\r\n}";

	var AtmosphereFragment = "precision highp float;\r\n\r\nvarying vec4 vTransformed;\r\n\r\n// three.js生成的球体半径是0.5，所以要除以2\r\n#define HALF_EARTH_RADIUS 3189068.5\r\n\r\nvoid main() \r\n{\r\n    float r = sqrt(vTransformed.x * vTransformed.x + vTransformed.y * vTransformed.y);\r\n\r\n    if(r < HALF_EARTH_RADIUS) {\r\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\r\n    } else {\r\n        float rate = (r - HALF_EARTH_RADIUS) / (HALF_EARTH_RADIUS * 1.02);\r\n        //float red = smoothstep(0.0, 1.0, rate);\r\n        //float opacity = smoothstep(1.0, 0.0, rate);\r\n        gl_FragColor = vec4(1.0, 1.0, 1.0, 0.4);\r\n    }\r\n}";

	/**
	 * 大气层渲染器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} globe 
	 */
	function AtmosphereRenderer(globe) {
	    Renderer.call(this, globe);

	    this.program = null;
	    this.attributes = {};
	    this.uniforms = {};
	    this.buffers = {};

	    this.indexCount = 0;

	    this.initProgram();
	    this.initBuffers();
	}

	AtmosphereRenderer.prototype = Object.create(Renderer.prototype);
	AtmosphereRenderer.prototype.constructor = AtmosphereRenderer;

	AtmosphereRenderer.prototype.initProgram = function () {
	    var gl = this.gl;

	    // 顶点着色器
	    var vertexShader = gl.createShader(gl.VERTEX_SHADER);
	    gl.shaderSource(vertexShader, AtmosphereVertex);
	    gl.compileShader(vertexShader);

	    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
	        console.warn(gl.getShaderInfoLog(vertexShader));
	        gl.deleteShader(vertexShader);
	        return;
	    }

	    // 片源着色器
	    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
	    gl.shaderSource(fragmentShader, AtmosphereFragment);
	    gl.compileShader(fragmentShader);

	    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
	        console.warn(gl.getShaderInfoLog(fragmentShader));
	        gl.deleteShader(fragmentShader);
	        return;
	    }

	    // 着色器程序
	    var program = gl.createProgram();
	    gl.attachShader(program, vertexShader);
	    gl.attachShader(program, fragmentShader);
	    gl.linkProgram(program);

	    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
	        console.warn("Could not initialise shaders");
	        gl.deleteProgram(program);
	        return;
	    }

	    // 使用着色器程序
	    gl.useProgram(program);
	    this.program = program;

	    // 获取attributes和uniform信息
	    Object.assign(this.attributes, {
	        position: gl.getAttribLocation(program, 'position'),
	        normal: gl.getAttribLocation(program, 'normal'),
	        uv: gl.getAttribLocation(program, 'uv'),
	    });

	    Object.assign(this.uniforms, {
	        modelViewMatrix: gl.getUniformLocation(program, 'modelViewMatrix'),
	        projectionMatrix: gl.getUniformLocation(program, 'projectionMatrix'),
	    });
	};

	AtmosphereRenderer.prototype.initBuffers = function () {
	    var gl = this.gl;

	    var geometry = new THREE.SphereBufferGeometry(WGS84.a * 1.02, 32, 32);
	    var attributes = geometry.attributes;
	    this.indexCount = geometry.index.count;

	    var positionBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
	    gl.bufferData(gl.ARRAY_BUFFER, attributes.position.array, gl.STATIC_DRAW);

	    var normalBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ARRAY_BUFFER, normalBuffer);
	    gl.bufferData(gl.ARRAY_BUFFER, attributes.normal.array, gl.STATIC_DRAW);

	    var uvBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ARRAY_BUFFER, uvBuffer);
	    gl.bufferData(gl.ARRAY_BUFFER, attributes.uv.array, gl.STATIC_DRAW);

	    var indexBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
	    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, geometry.index.array, gl.STATIC_DRAW);

	    Object.assign(this.buffers, {
	        position: positionBuffer,
	        normal: normalBuffer,
	        uv: uvBuffer,
	        index: indexBuffer,
	    });
	};

	AtmosphereRenderer.prototype.render = function () {
	    var gl = this.gl;
	    var camera = this.camera;

	    gl.useProgram(this.program);

	    gl.enable(gl.CULL_FACE);
	    gl.cullFace(gl.BACK);
	    gl.frontFace(gl.CCW);

	    gl.enable(gl.DEPTH_TEST);
	    gl.enable(gl.BLEND);
	    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);

	    gl.uniformMatrix4fv(this.uniforms.modelViewMatrix, false, camera.matrixWorldInverse.elements);
	    gl.uniformMatrix4fv(this.uniforms.projectionMatrix, false, camera.projectionMatrix.elements);

	    gl.bindBuffer(gl.ARRAY_BUFFER, this.buffers.position);
	    gl.enableVertexAttribArray(this.attributes.position);
	    gl.vertexAttribPointer(this.attributes.position, 3, gl.FLOAT, false, 0, 0);

	    gl.bindBuffer(gl.ARRAY_BUFFER, this.buffers.normal);
	    gl.enableVertexAttribArray(this.attributes.normal);
	    gl.vertexAttribPointer(this.attributes.normal, 3, gl.FLOAT, false, 0, 0);

	    gl.bindBuffer(gl.ARRAY_BUFFER, this.buffers.uv);
	    gl.enableVertexAttribArray(this.attributes.uv);
	    gl.vertexAttribPointer(this.attributes.uv, 2, gl.FLOAT, false, 0, 0);

	    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffers.index);
	    gl.drawElements(gl.TRIANGLES, this.indexCount, gl.UNSIGNED_SHORT, 0);

	    gl.bindBuffer(gl.ARRAY_BUFFER, null);
	    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
	};

	AtmosphereRenderer.prototype.dispose = function () {
	    this.gl.deleteProgram(this.program);

	    this.program = null;
	    this.attributes = {};
	    this.uniforms = {};

	    Object.values(this.buffers).forEach(n => {
	        this.gl.deleteBuffer(n);
	    });

	    this.buffers = {};

	    Renderer.prototype.dispose.call(this);
	};

	/**
	 * 所有渲染器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} globe 
	 */
	function Renderers(globe) {
	    Renderer.call(this, globe);

	    this.renderers = [
	        new BackgroundRenderer(this.globe),
	        new SunRenderer(this.globe),
	        new TiledLayerRenderer(this.globe),
	        //new AtmosphereRenderer(this.globe),
	    ];
	}

	Renderers.prototype = Object.create(Renderer.prototype);
	Renderers.prototype.constructor = Renderers;

	Renderers.prototype.render = function () {
	    this.renderers.forEach(n => {
	        n.render();
	    });
	};

	Renderers.prototype.dispose = function () {
	    this.renderers.forEach(n => {
	        n.dispose();
	    });

	    this.renderers.length = 0;

	    Renderer.prototype.dispose.call(this);
	};

	var ID$6 = -1;

	/**
	 * 查看器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} camera 相机
	 * @param {*} domElement 文档
	 */
	function Viewer(camera, domElement) {
	    this.camera = camera;
	    this.domElement = domElement;

	    this.id = `${this.constructor.name}${ID$6--}`;

	    this.oldFar = this.camera.far;
	    this.camera.far = 20576957;
	    this.camera.updateProjectionMatrix();
	}
	Viewer.prototype.update = function () {

	};

	Viewer.prototype.dispose = function () {
	    this.camera.far = this.oldFar;
	    this.camera.updateProjectionMatrix();

	    delete this.oldFar;
	    delete this.camera;
	    delete this.domElement;
	};

	/**
	 * 轨道查看器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} camera 相机
	 * @param {*} domElement 文档
	 */
	function OrbitViewer(camera, domElement) {
	    Viewer.call(this, camera, domElement);

	    this.sphere = new THREE.Sphere(undefined, WGS84.a);
	    this.ray = new THREE.Ray();

	    this.isDown = false;
	    this.isPan = false;

	    this.intersectPoint = new THREE.Vector3();
	    this.aabb = new THREE.Box2(
	        new THREE.Vector2(-Math.PI, -Math.PI / 2),
	        new THREE.Vector2(Math.PI, Math.PI / 2),
	    );

	    this.onMouseDown = this.onMouseDown.bind(this);
	    this.onMouseMove = this.onMouseMove.bind(this);
	    this.onMouseUp = this.onMouseUp.bind(this);
	    this.onMouseWheel = this.onMouseWheel.bind(this);

	    this.domElement.addEventListener('mousedown', this.onMouseDown);
	    this.domElement.addEventListener('mousemove', this.onMouseMove);
	    document.body.addEventListener('mouseup', this.onMouseUp);
	    this.domElement.addEventListener('mousewheel', this.onMouseWheel);
	}
	OrbitViewer.prototype = Object.create(Viewer.prototype);
	OrbitViewer.prototype.constructor = OrbitViewer;

	OrbitViewer.prototype.onMouseDown = function (event) {
	    this.isDown = true;
	    this.isPan = false;
	};

	OrbitViewer.prototype.onMouseMove = function () {
	    var lastIntersectPoint = new THREE.Vector3();

	    var unit1 = new THREE.Vector3();
	    var unit2 = new THREE.Vector3();

	    var yAxis = new THREE.Vector3(0, 1, 0);
	    var minAngle = 45 * Math.PI / 180;
	    var maxAngle = 135 * Math.PI / 180;
	    var axis = new THREE.Vector3();

	    var quat = new THREE.Quaternion();
	    var dir = new THREE.Vector3();

	    return function (event) {
	        if (!this.isDown) {
	            return;
	        }

	        if (!this.isPan) {
	            if (!this.intersectSphere(event.offsetX, event.offsetY, this.intersectPoint)) { // 鼠标在地球外
	                return;
	            }

	            this.isPan = true;
	            lastIntersectPoint.copy(this.intersectPoint);
	            return;
	        }

	        if (!this.intersectSphere(event.offsetX, event.offsetY, this.intersectPoint)) { // 鼠标在地球外
	            return;
	        }

	        unit1.copy(lastIntersectPoint).normalize();
	        unit2.copy(this.intersectPoint).normalize();

	        // unit2与y轴夹角不能太小和太大
	        var angle = unit2.angleTo(yAxis);

	        if (angle && Math.abs(angle) < minAngle) {
	            axis.crossVectors(unit2, yAxis);
	            axis.normalize();
	            unit2.copy(yAxis);
	            unit2.applyAxisAngle(axis, -angle);
	        }

	        if (angle && Math.abs(angle) > maxAngle) {
	            axis.crossVectors(unit2, yAxis);
	            axis.normalize();
	            unit2.copy(yAxis);
	            unit2.applyAxisAngle(axis, -angle);
	        }

	        // 计算相机新位置
	        quat.setFromUnitVectors(unit2, unit1);

	        var distance = this.camera.position.length();
	        dir.copy(this.camera.position).normalize();
	        dir.applyQuaternion(quat).normalize();

	        this.camera.position.set(
	            distance * dir.x,
	            distance * dir.y,
	            distance * dir.z,
	        );

	        this.camera.lookAt(this.sphere.center);

	        lastIntersectPoint.copy(this.intersectPoint);
	    };
	}();

	OrbitViewer.prototype.onMouseUp = function (event) {
	    this.isDown = false;
	    this.isPan = false;
	    this._updateAABB();
	};

	OrbitViewer.prototype.onMouseWheel = function () {
	    var dir = new THREE.Vector3();

	    return function (event) {
	        var delta = -event.wheelDelta;

	        var distance = dir.copy(this.camera.position).length();
	        dir.copy(this.camera.position).normalize();

	        if (distance < WGS84.a) {
	            distance = WGS84.a;
	        }

	        var d = delta * (distance - WGS84.a) / 1000;

	        var d_1 = GeoUtils.zoomToAlt(-1) + WGS84.a;

	        if (distance + d >= d_1) { // 最远0层级距离
	            d = 0;
	        }

	        this.camera.position.set(
	            this.camera.position.x + d * dir.x,
	            this.camera.position.y + d * dir.y,
	            this.camera.position.z + d * dir.z,
	        );

	        this._updateAABB();
	    };
	}();

	/**
	 * 计算屏幕坐标与地球表面交点
	 * @param {float} x 屏幕坐标X
	 * @param {float} y 屏幕坐标Y
	 * @param {THREE.Vector3} intersectPoint 计算出的碰撞点
	 */
	OrbitViewer.prototype.intersectSphere = function () {
	    var projectionMatrixInverse = new THREE.Matrix4();
	    var matrixWorld = new THREE.Matrix4();

	    return function (x, y, intersectPoint) {
	        if (!this.isPan) {
	            projectionMatrixInverse.getInverse(this.camera.projectionMatrix);
	            matrixWorld.copy(this.camera.matrixWorld);
	        }

	        this.ray.origin.set(
	            x / this.domElement.clientWidth * 2 - 1, -y / this.domElement.clientHeight * 2 + 1,
	            0.1,
	        );
	        this.ray.direction.copy(this.ray.origin);
	        this.ray.direction.z = 1;

	        this.ray.origin.applyMatrix4(projectionMatrixInverse).applyMatrix4(matrixWorld);
	        this.ray.direction.applyMatrix4(projectionMatrixInverse).applyMatrix4(matrixWorld).sub(this.ray.origin).normalize();

	        return this.ray.intersectSphere(this.sphere, intersectPoint);
	    };
	}();

	/**
	 * 计算当前视锥内的经纬度范围
	 */
	OrbitViewer.prototype._updateAABB = function () {
	    var min = new THREE.Vector3();
	    var max = new THREE.Vector3();

	    return function () {
	        if (!this.intersectSphere(0, this.domElement.clientHeight, min)) { // 未发生碰撞
	            this.aabb.min.set(-Math.PI, -Math.PI / 2);
	            this.aabb.max.set(Math.PI, Math.PI / 2);
	            return;
	        }

	        this.intersectSphere(this.domElement.clientWidth, 0, max);

	        GeoUtils._xyzToLonlat(min, min);
	        GeoUtils._xyzToLonlat(max, max);

	        this.aabb.min.copy(min);
	        this.aabb.max.copy(max);
	    };
	}();

	OrbitViewer.prototype.setPosition = function (lon, lat, alt) {
	    var xyz = GeoUtils.lonlatToXYZ(new THREE.Vector3(lon, lat, alt));
	    this.camera.position.copy(xyz);
	    this.camera.lookAt(new THREE.Vector3());
	};

	OrbitViewer.prototype.getPosition = function () {

	};

	OrbitViewer.prototype.update = function () {

	};

	OrbitViewer.prototype.dispose = function () {
	    this.domElement.removeEventListener('mousedown', this.onMouseDown);
	    this.domElement.removeEventListener('mousemove', this.onMouseMove);
	    document.body.removeEventListener('mouseup', this.onMouseUp);
	    this.domElement.removeEventListener('mousewheel', this.onMouseWheel);

	    Viewer.prototype.dispose.call(this);
	};

	var ID$7 = -1;

	/**
	 * 图层
	 * @author tengge / https://github.com/tengge1
	 * @param {*} globe 
	 */
	function Layer(globe) {
	    this.globe = globe;

	    this.id = `${this.constructor.name}${ID$7--}`;
	    this.name = this.constructor.name;
	}

	/**
	 * 获取某个经纬度范围内的资源
	 * @param {THREE.Box2} aabb 
	 */
	Layer.prototype.get = function (aabb) {

	};

	/**
	 * 释放该图层所有资源
	 */
	Layer.prototype.dispose = function () {
	    delete this.globe;
	};

	/**
	 * 图片图层
	 * @author tengge / https://github.com/tengge1
	 * @param {*} globe 
	 */
	function ImageLayer(globe) {
	    Layer.call(this, globe);
	}

	ImageLayer.prototype = Object.create(Layer.prototype);
	ImageLayer.prototype.constructor = ImageLayer;

	/**
	 * 瓦片缓存
	 */
	function TileCache() {
	    this.cache = new Map();
	}
	TileCache.prototype.get = function (x, y, z) {
	    var cache = this.cache.get(z);

	    if (!cache) {
	        return cache;
	    }

	    cache = cache.get(y);

	    if (!cache) {
	        return cache;
	    }

	    return cache.get(x);
	};

	TileCache.prototype.set = function (x, y, z, data) {
	    var zcache = this.cache.get(z);

	    if (!zcache) {
	        zcache = new Map();
	        this.cache.set(z, zcache);
	    }

	    var ycache = zcache.get(y);

	    if (!ycache) {
	        ycache = new Map();
	        zcache.set(y, ycache);
	    }

	    ycache.set(x, data);
	};

	TileCache.prototype.clear = function () {
	    this.cache.clear();
	};

	/**
	 * 图片瓦片图层
	 * @author tengge / https://github.com/tengge1
	 * @param {*} globe 
	 */
	function TiledImageLayer(globe) {
	    ImageLayer.call(this, globe);

	    this.cache = new TileCache();
	}

	TiledImageLayer.prototype = Object.create(ImageLayer.prototype);
	TiledImageLayer.prototype.constructor = TiledImageLayer;

	/**
	 * 由子类实现，返回下载图片的url
	 * @param {*} x 
	 * @param {*} y 
	 * @param {*} z 
	 */
	TiledImageLayer.prototype.getUrl = function (x, y, z) {
	    return null;
	};

	/**
	 * 获取图片数据
	 * @param {*} x 
	 * @param {*} y 
	 * @param {*} z 
	 */
	TiledImageLayer.prototype.get = function (x, y, z) {
	    var img = this.cache.get(x, y, z);

	    if (img && img.loaded) {
	        return img;
	    }

	    if (img && (img.loading || img.error)) {
	        return null;
	    }

	    if (this.globe.thread < this.globe.options.maxThread) {
	        this._createImage(x, y, z);
	    }

	    return null;
	};


	TiledImageLayer.prototype._createImage = function (x, y, z) {
	    var url = this.getUrl(x, y, z);

	    if (!url) {
	        console.warn(`TiledImageLayer: url is not defined.`);
	        return null;
	    }

	    var img = document.createElement('img');

	    img._x = x;
	    img._y = y;
	    img._z = z;
	    img.crossOrigin = 'anonymous';
	    img.loading = true;

	    this.cache.set(x, y, z, img);

	    img.onload = () => {
	        img.onload = null;
	        img.onerror = null;

	        img.loaded = true;
	        delete img.loading;

	        // 避免下载过程中，切换地图，导致报错。
	        if (this.globe) {
	            this.globe.thread--;
	        }
	    };

	    img.onerror = () => {
	        img.onload = null;
	        img.onerror = null;

	        img.error = true;
	        delete img.loading;

	        if (this.globe) {
	            this.globe.thread--;
	        }
	    };

	    img.src = url;
	    this.globe.thread++;
	};

	/**
	 * 谷歌瓦片图层
	 * @author tengge / https://github.com/tengge1
	 * @param {*} globe 
	 */
	function GoogleTiledLayer(globe) {
	    TiledImageLayer.call(this, globe);

	    this.name = 'google';
	}

	GoogleTiledLayer.prototype = Object.create(TiledImageLayer.prototype);
	GoogleTiledLayer.prototype.constructor = GoogleTiledLayer;

	GoogleTiledLayer.prototype.getUrl = function (x, y, z) {
	    return `http://www.google.cn/maps/vt?lyrs=s@821&gl=cn&x=${x}&y=${y}&z=${z}`;
	};

	/**
	 * 天地图瓦片图层
	 * @author tengge / https://github.com/tengge1
	 * @param {*} globe 
	 */
	function TiandituTiledLayer(globe) {
	    TiledImageLayer.call(this, globe);

	    this.name = 'tianditu';
	}

	TiandituTiledLayer.prototype = Object.create(TiledImageLayer.prototype);
	TiandituTiledLayer.prototype.constructor = TiandituTiledLayer;

	TiandituTiledLayer.prototype.getUrl = function (x, y, z) {
	    return `http://t6.tianditu.gov.cn/DataServer?T=img_w&x=${x}&y=${y}&l=${z}&tk=85a57b38db5ed01efb7e999f6b097746`;
	};

	/**
	 * 必应瓦片图层
	 * @author tengge / https://github.com/tengge1
	 * @param {*} globe 
	 */
	function BingTiledLayer(globe) {
	    TiledImageLayer.call(this, globe);

	    this.name = 'bing';
	}

	BingTiledLayer.prototype = Object.create(TiledImageLayer.prototype);
	BingTiledLayer.prototype.constructor = BingTiledLayer;

	BingTiledLayer.prototype.getUrl = function (x, y, z) {
	    return `http://t0.ssl.ak.tiles.virtualearth.net/tiles/a${this.tileXYToQuadKey(x, y, z)}.jpeg?g=5793`;
	};

	/**
	 * Converts tile XY coordinates into a QuadKey at a specified level of detail.
	 * @param {*} tileX Tile X coordinate.
	 * @param {*} tileY Tile Y coordinate.
	 * @param {*} levelOfDetail evel of detail, from 1 (lowest detail) to 23 (highest detail).
	 * @see https://docs.microsoft.com/en-us/bingmaps/articles/bing-maps-tile-system
	 */
	BingTiledLayer.prototype.tileXYToQuadKey = function (tileX, tileY, levelOfDetail) {
	    let quadKey = '';
	    let digit;
	    let mask;
	    for (let i = levelOfDetail; i > 0; i--) {
	        digit = '0';
	        mask = 1 << (i - 1);
	        if ((tileX & mask) != 0) {
	            digit++;
	        }
	        if ((tileY & mask) != 0) {
	            digit++;
	            digit++;
	        }
	        quadKey += digit;
	    }
	    return quadKey;
	};

	/**
	 * 地球
	 * @author tengge / https://github.com/tengge1
	 * @param {THREE.PerspectiveCamera} camera 相机
	 * @param {THREE.WebGLRenderer} renderer 渲染器
	 * @param {Object} options 配置
	 * @param {String} options.server 服务端配置
	 * @param {Number} options.maxThread 最大工作线程数，避免任务创建过多，导致地图卡顿
	 */
	function Globe(camera, renderer, options = {}) {
	    THREE.Object3D.call(this);

	    options.server = options.server || location.origin;
	    options.maxThread = options.maxThread || 10;

	    this.name = L_GLOBE;

	    this.userData.type = 'Globe';

	    this.camera = camera;
	    this.renderer = renderer;
	    this.options = options;

	    this.thread = 0; // 当前线程总数
	    this.matrixAutoUpdate = false;

	    this.time = new Date();
	    this.timeZone = this.time.getTimezoneOffset() / 60; // minutes
	    this.sunPosition = new THREE.Vector3();

	    // 不能命名为layers，否则跟three.js的layers冲突
	    this._layers = [
	        new GoogleTiledLayer(this),
	        //new TiandituTiledLayer(this),
	        // new BingTiledLayer(this),
	    ];

	    this.renderers = new Renderers(this);
	    this.viewer = new OrbitViewer(this.camera, this.renderer.domElement);

	    // 默认位置
	    var lon = 0;
	    var lat = 0;
	    var alt = GeoUtils.zoomToAlt(-1);
	    this.viewer.setPosition(lon, lat, alt);
	}

	Globe.prototype = Object.create(THREE.Object3D.prototype);
	Globe.prototype.constructor = Globe;

	/**
	 * 设置背景
	 * @param {*} type 背景类型，支持google、tianditu、bing
	 */
	Globe.prototype.setBackground = function (type) {
	    var newLayerName = 'google';

	    switch (type) {
	        case 'bing':
	            newLayerName = 'bing';
	            break;
	        case 'tianditu':
	            newLayerName = 'tianditu';
	            break;
	        default:
	            newLayerName = 'google';
	            break;
	    }

	    var layer = this._layers[0];

	    if (newLayerName === layer.name) {
	        return;
	    }

	    var newLayer = null;

	    switch (newLayerName) {
	        case 'google':
	            newLayer = new GoogleTiledLayer(this);
	            break;
	        case 'tianditu':
	            newLayer = new TiandituTiledLayer(this);
	            break;
	        case 'bing':
	            newLayer = new BingTiledLayer(this);
	            break;
	    }

	    this._layers[0] = newLayer;
	    layer.dispose();
	};

	Globe.prototype.getBackground = function () {
	    var layer = this._layers[0];
	    return layer.name;
	};

	/**
	 * 需要由应用程序连续调用
	 */
	Globe.prototype.update = function () {
	    this.time = new Date();

	    var hour = this.time.getHours() + this.timeZone;

	    var angle = Math.PI * 2 / 24 * hour;
	    var x = -WGS84.a * 10 * Math.cos(angle);
	    var z = WGS84.a * 10 * Math.sin(angle);

	    this.sunPosition.set(x, 0, z);

	    this.renderers.render();
	    this.viewer.update();
	};

	/**
	 * 光线投射
	 * @param {*} raycaster 
	 * @param {*} intersects 
	 */
	Globe.prototype.raycast = function () {
	    var geometry = new THREE.SphereBufferGeometry(WGS84.a, 32, 32);
	    var material = new THREE.MeshBasicMaterial();
	    var mesh = new THREE.Mesh(geometry, material);

	    return function (raycaster, intersects) {
	        return mesh.raycast(raycaster, intersects);
	    };
	}();

	/**
	 * 释放占用的所有资源
	 */
	Globe.prototype.dispose = function () {
	    this.renderers.dispose();
	    this.viewer.dispose();

	    this._layers.forEach(n => {
	        n.dispose();
	    });

	    delete this._layers;
	    delete this.renderers;
	    delete this.viewer;

	    delete this.camera;
	    delete this.renderer;
	};

	/**
	 * 播放器
	 * @author mrdoob / http://mrdoob.com/
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 配置信息
	 * @param {*} options.server 服务器信息，例如：http://localhost:2000
	 * @param {*} options.enableThrowBall 是否允许扔小球进行物理测试
	 * @param {*} options.showStats 是否显示性能控件
	 */
	function Player(options = {}) {
	    UI$1.Control.call(this, options);

	    options.server = options.server || window.origin;
	    options.enableThrowBall = options.enableThrowBall || false;
	    options.showStats = options.showStats || false;

	    this.options = options;

	    this.dispatch = new d3.dispatch([
	        'init'
	    ]);
	    this.call = this.dispatch.call.bind(this.dispatch);
	    this.on = this.dispatch.on.bind(this.dispatch);

	    this.scene = null;
	    this.camera = null;
	    this.renderer = null;

	    this.gis = null;

	    this.loader = new PlayerLoader(this);
	    this.event = new PlayerEvent(this);
	    this.control = new PlayerControl(this);
	    this.audio = new PlayerAudio(this);
	    this.playerRenderer = new PlayerRenderer(this);
	    this.animation = new PlayerAnimation(this);
	    this.physics = new PlayerPhysics(this);

	    this.isPlaying = false;
	    this.clock = new THREE.Clock(false);
	}
	Player.prototype = Object.create(UI$1.Control.prototype);
	Player.prototype.constructor = Player;

	Player.prototype.render = function () {
	    var control = UI$1.create({
	        xtype: 'div',
	        parent: this.parent,
	        id: 'player',
	        scope: this.id,
	        cls: 'Panel player',
	        style: {
	            display: 'none'
	        }
	    });

	    control.render();

	    // 性能控件
	    if (this.options.showStats) {
	        this.stats = new Stats();
	        this.stats.dom.style.position = 'absolute';
	        this.stats.dom.style.left = '8px';
	        this.stats.dom.style.top = '8px';
	        this.stats.dom.style.zIndex = 'initial';
	        control.dom.appendChild(this.stats.dom);
	    }

	    window.addEventListener('resize', this.onResize.bind(this));

	    var observer = new MutationObserver(this.onResize.bind(this));
	    observer.observe(control.dom, {
	        attributes: true,
	        characterData: false,
	        childList: false,
	    });
	};

	/**
	 * 启动播放器
	 * @param {String} sceneData 场景数据
	 */
	Player.prototype.start = function (sceneData) {
	    if (typeof (sceneData) !== 'string') {
	        UI$1.msg('需要字符串类型的场景数据参数！');
	        return;
	    }

	    var jsons;

	    try {
	        jsons = JSON.parse(sceneData);
	    } catch (e) {
	        UI$1.msg('无法解析json类型的场景数据！');
	        return;
	    }

	    if (this.isPlaying) {
	        return;
	    }
	    this.isPlaying = true;

	    var container = UI$1.get('player', this.id);
	    container.dom.style.display = '';

	    this.loader.create(jsons).then(obj => {
	        this.initPlayer(obj);

	        this.dispatch.call('init', this);

	        var promise1 = this.event.create(this.scene, this.camera, this.renderer, obj.scripts);
	        var promise2 = this.control.create(this.scene, this.camera, this.renderer);
	        var promise3 = this.audio.create(this.scene, this.camera, this.renderer);
	        var promise4 = this.playerRenderer.create(this.scene, this.camera, this.renderer);
	        var promise5 = this.animation.create(this.scene, this.camera, this.renderer, obj.animations);
	        var promise6 = this.physics.create(this.scene, this.camera, this.renderer);

	        Promise.all([promise1, promise2, promise3, promise4, promise5, promise6]).then(() => {
	            this.event.init();
	            this.clock.start();
	            this.event.start();
	        });
	        requestAnimationFrame(this.animate.bind(this));
	    });
	};

	/**
	 * 停止播放器
	 */
	Player.prototype.stop = function () {
	    if (!this.isPlaying) {
	        return;
	    }
	    this.isPlaying = false;

	    this.event.stop();

	    this.loader.dispose();
	    this.event.dispose();
	    this.control.dispose();
	    this.audio.dispose();
	    this.playerRenderer.dispose();
	    this.animation.dispose();
	    this.physics.dispose();

	    var container = UI$1.get('player', this.id);

	    if (this.gis) {
	        this.gis.dispose();
	        this.gis = null;
	    }

	    container.dom.removeChild(this.renderer.domElement);
	    container.dom.style.display = 'none';

	    this.scene.children.length = 0;

	    this.scene = null;
	    this.camera = null;
	    this.renderer = null;

	    this.clock.stop();
	};

	/**
	 * 初始化播放器
	 * @param {*} obj 
	 */
	Player.prototype.initPlayer = function (obj) {
	    var container = UI$1.get('player', this.id);

	    this.camera = obj.camera;

	    if (!this.camera) {
	        console.warn(`Player: 场景中不存在相机信息`);
	        this.camera = new THREE.PerspectiveCamera(
	            50,
	            container.dom.clientWidth / container.dom.clientHeight,
	            0.1,
	            1000
	        );
	    }

	    this.renderer = obj.renderer || new THREE.WebGLRenderer({
	        antialias: true
	    });

	    this.renderer.setSize(container.dom.clientWidth, container.dom.clientHeight);
	    container.dom.appendChild(this.renderer.domElement);

	    this.camera.aspect = this.renderer.domElement.width / this.renderer.domElement.height;
	    this.camera.updateProjectionMatrix();

	    var listener = obj.audioListener || new THREE.AudioListener();
	    this.camera.add(listener);

	    this.renderer.domElement.style.filter = CssUtils.serializeFilter(obj.options);

	    this.scene = obj.scene || new THREE.Scene();

	    if (obj.options.sceneType === 'GIS') {
	        this.gis = new Globe(this.camera, this.renderer, obj.options);
	    }
	};

	Player.prototype.animate = function () {
	    if (!this.isPlaying) {
	        return;
	    }

	    if (this.stats) {
	        this.stats.begin();
	    }

	    var deltaTime = this.clock.getDelta();

	    this.event.update(this.clock, deltaTime);
	    this.control.update(this.clock, deltaTime);
	    this.playerRenderer.update(this.clock, deltaTime);
	    this.animation.update(this.clock, deltaTime);
	    this.physics.update(this.clock, deltaTime);

	    if (this.gis) {
	        this.gis.update();
	    }

	    if (this.stats) {
	        this.stats.end();
	    }

	    requestAnimationFrame(this.animate.bind(this));
	};

	Player.prototype.resize = function () {
	    if (!this.camera || !this.renderer) {
	        return;
	    }

	    var container = UI$1.get('player', this.id);

	    var width = container.dom.clientWidth;
	    var height = container.dom.clientHeight;

	    var camera = this.camera;
	    var renderer = this.renderer;

	    camera.aspect = width / height;
	    camera.updateProjectionMatrix();

	    renderer.domElement;
	    renderer.setSize(width, height);
	};

	Player.prototype.onResize = function (records) {
	    this.resize();
	};

	/**
	 * 存储类
	 */
	function Storage() {

	}

	Storage.prototype.get = function (key) {
	    var configs = this._getConfigs();
	    return configs[key];
	};

	Storage.prototype.set = function (key, value) {
	    var configs = this._getConfigs();
	    configs[key] = value;
	    this._setConfigs(configs);
	};

	Storage.prototype.setConfigs = function (configs) {
	    if (typeof (configs) !== 'object') {
	        console.warn(`Storage: configs should be an object.`);
	        return;
	    }

	    var _configs = this._getConfigs();

	    Object.keys(configs).forEach(n => {
	        _configs[n] = configs[n];
	    });

	    this._setConfigs(_configs);
	};

	Storage.prototype.remove = function (key) {
	    var configs = this._getConfigs();
	    delete configs[key];
	    this._setConfigs(configs);
	};

	Storage.prototype.clear = function () {
	    window.localStorage.removeItem('configs');
	};

	Storage.prototype._getConfigs = function () {
	    var configs = window.localStorage.getItem('configs');

	    if (!configs) {
	        configs = '{}';
	    }

	    return JSON.parse(configs);
	};

	Storage.prototype._setConfigs = function (configs) {
	    window.localStorage.setItem('configs', JSON.stringify(configs));
	};

	/**
	 * 自定义事件列表
	 * @author tengge / https://github.com/tengge1
	 */
	var EventList = [
	    // dom事件
	    'click', // 点击
	    'contextmenu', // 右键
	    'dblclick', // 双击
	    'keydown', // 按下键盘按键
	    'keyup', // 抬起键盘按键
	    'mousedown', // 按下鼠标按键
	    'mousemove', // 鼠标移动
	    'mouseup', // 抬起鼠标按键
	    'mousewheel', // 鼠标滚轮
	    'resize', // 窗口大小改变
	    'dragover', // 拖动到某元素上
	    'drop', // 放置到某元素上

	    // app事件
	    'appStart', // 应用程序开始前调用
	    'appStarted', // 应用程序开始后调用
	    'appStop', // 程序开始结束前调用
	    'appStoped', // 程序结束后调用

	    // 配置
	    'optionsChanged', // 配置改变事件
	    'storageChanged', // 存储改变事件（参数：key, value）

	    // 工具栏事件
	    'changeMode', // 改变模式（select, translate, rotate, scale, delete）

	    // editor事件
	    'sceneSaved', // 场景保存成功
	    'select', // 选中事件
	    'clear', // 清空场景
	    'load', // 加载场景
	    'log', // 日志事件
	    'intersect', // 碰撞事件

	    'editScript', // 编辑脚本事件
	    'editorCleared', // 编辑器已经清空事件

	    'snapChanged', // 对齐单元格事件
	    'spaceChanged', // 空间坐标系改变事件

	    'sceneGraphChanged', // 场景内容改变事件

	    'cameraChanged', // 相机改变事件

	    'geometryChanged', // 几何体改变事件

	    'objectSelected', // 物体选中改变
	    'objectFocused', // 物体交点改变事件

	    'objectAdded', // 添加物体事件
	    'objectChanged', // 物体改变事件
	    'objectRemoved', // 物体移除事件

	    'materialChanged', // 材质改变事件

	    'scriptAdded', // 添加脚本事件
	    'scriptChanged', // 脚本改变事件
	    'scriptRemoved', // 脚本移除事件

	    'historyChanged', // 历史改变事件
	    'refreshScriptEditor', // 刷新脚本编辑器事件

	    'sceneLoaded', // 场景载入
	    'postProcessingChanged', // 后期处理设置改变

	    // 场景编辑区
	    'transformControlsChange', // 变形控件改变
	    'transformControlsMouseDown', // 变形控件按下鼠标键
	    'transformControlsMouseUp', // 变形控件抬起鼠标键

	    'raycast', // 光线投射事件
	    'beforeRender', // 渲染前执行
	    'render', // 渲染一次场景
	    'afterRender', // 渲染后执行
	    'animate', // 进行动画

	    // 侧边栏
	    'tabSelected', // 选项卡选中事件
	    'animationSelected', // 动画选中事件
	    'animationChanged', // 动画发生改变事件
	    'resetAnimation', // 重制动画时间轴
	    'startAnimation', // 开始播放动画
	    'animationTime', // 时间轴发送当前动画时间

	    // 底部面板事件
	    'selectBottomPanel', // 点击选择某个面板
	    'showBottomPanel', // 显示某个底部面板以后
	    'selectModel', // 选择模型
	    'selectMap', // 选择贴图
	    'selectMaterial', // 选择材质
	    'selectAudio', // 选择音频
	    'selectAnimation', // 选择动画
	    'selectParticle', // 选择粒子

	    // 状态栏事件
	    'enableThrowBall', // 是否允许扔小球
	];

	var ID$8 = -1;

	/**
	 * 事件基类
	 * @author tengge / https://github.com/tengge1
	 */
	function BaseEvent(app) {
	    this.app = app;
	    this.id = `${this.constructor.name}${ID$8--}`;
	}

	BaseEvent.prototype.start = function () {

	};

	BaseEvent.prototype.stop = function () {

	};

	/**
	 * 动画事件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} app 
	 */
	function AnimateEvent(app) {
	    BaseEvent.call(this, app);
	    this.running = false;
	    this.clock = new THREE.Clock();
	}

	AnimateEvent.prototype = Object.create(BaseEvent.prototype);
	AnimateEvent.prototype.constructor = AnimateEvent;

	AnimateEvent.prototype.start = function () {
	    this.running = true;
	    requestAnimationFrame(this.onAnimate.bind(this));
	};

	AnimateEvent.prototype.stop = function () {
	    this.running = false;
	};

	AnimateEvent.prototype.onAnimate = function () {
	    var deltaTime = this.clock.getDelta();

	    this.app.call('animate', this, this.clock, deltaTime);
	    this.app.call('render', this);

	    if (this.running) {
	        requestAnimationFrame(this.onAnimate.bind(this));
	    }
	};

	/**
	 * 命令基类
	 * @author dforrer / https://github.com/dforrer
	 * Developed as part of a project at University of Applied Sciences and Arts Northwestern Switzerland (www.fhnw.ch)
	 * @param editorRef pointer to main editor object used to initialize each command object with a reference to the editor
	 * @constructor
	 */
	function Command(editorRef) {
	    this.id = -1;
	    this.inMemory = false;
	    this.updatable = false;
	    this.type = '';
	    this.name = '';

	    if (editorRef !== undefined) {
	        Command.editor = editorRef;
	    }
	    this.editor = Command.editor;
	}
	Command.prototype.toJSON = function () {
	    var output = {};
	    output.type = this.type;
	    output.id = this.id;
	    output.name = this.name;
	    return output;
	};

	Command.prototype.fromJSON = function (json) {
	    this.inMemory = true;
	    this.type = json.type;
	    this.id = json.id;
	    this.name = json.name;
	};

	/**
	 * 移除物体命令
	 * @author dforrer / https://github.com/dforrer
	 * Developed as part of a project at University of Applied Sciences and Arts Northwestern Switzerland (www.fhnw.ch)
	 * @param object THREE.Object3D
	 * @constructor
	 */
	function RemoveObjectCommand(object) {
		Command.call(this);

		this.type = 'RemoveObjectCommand';
		this.name = L_REMOVE_OBJECT;

		this.object = object;

		this.parent = (object !== undefined) ? object.parent : undefined;

		if (this.parent !== undefined) {
			this.index = this.parent.children.indexOf(this.object);
		}
	}
	RemoveObjectCommand.prototype = Object.create(Command.prototype);

	Object.assign(RemoveObjectCommand.prototype, {
		constructor: RemoveObjectCommand,

		execute: function () {
			var scope = this.editor;

			this.parent.remove(this.object);
			this.editor.select(this.parent);

			this.editor.app.call('objectRemoved', this, this.object);
			this.editor.app.call('sceneGraphChanged', this);
		},

		undo: function () {
			var scope = this.editor;

			this.parent.children.splice(this.index, 0, this.object);
			this.object.parent = this.parent;
			this.editor.select(this.object);

			this.editor.app.call('objectAdded', this, this.object);
			this.editor.app.call('sceneGraphChanged', this);
		},

		toJSON: function () {
			var output = Command.prototype.toJSON.call(this);
			output.object = this.object.toJSON();
			output.index = this.index;
			output.parentUuid = this.parent.uuid;

			return output;
		},

		fromJSON: function (json) {
			Command.prototype.fromJSON.call(this, json);

			this.parent = this.editor.objectByUuid(json.parentUuid);
			if (this.parent === undefined) {
				this.parent = this.editor.scene;
			}

			this.index = json.index;

			this.object = this.editor.objectByUuid(json.object.object.uuid);
			if (this.object === undefined) {
				var loader = new THREE.ObjectLoader();
				this.object = loader.parse(json.object);
			}
		}
	});

	/**
	 * 键盘按键事件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} app 
	 */
	function KeyDownEvent(app) {
	    BaseEvent.call(this, app);
	}

	KeyDownEvent.prototype = Object.create(BaseEvent.prototype);
	KeyDownEvent.prototype.constructor = KeyDownEvent;

	KeyDownEvent.prototype.start = function () {
	    this.app.on(`keydown.${this.id}`, this.onKeyDown.bind(this));
	};

	KeyDownEvent.prototype.stop = function () {
	    this.app.on(`keydown.${this.id}`, null);
	};

	KeyDownEvent.prototype.onKeyDown = function (event) {
	    var editor = this.app.editor;

	    switch (event.keyCode) {
	        case 8: // 回退键
	            event.preventDefault(); // 阻止浏览器返回
	            break;

	        case 46: // 删除键
	            var object = editor.selected;
	            if (object == null) {
	                return;
	            }
	            UI$1.confirm(L_CONFIRM, `${L_DELETE} ` + object.name + '?', function (event, btn) {
	                if (btn === 'ok') {
	                    var parent = object.parent;
	                    if (parent !== null) editor.execute(new RemoveObjectCommand(object));
	                }
	            });
	            break;

	        case 90: // 注册Ctrl-Z撤销, Ctrl-Shift-Z重做
	            if (event.ctrlKey && event.shiftKey) {
	                editor.redo();
	            } else if (event.ctrlKey) {
	                editor.undo();
	            }
	            break;

	        // TODO： 和第一人称控制器ASDW冲突
	        // case 87: // 注册 W 移动模式
	        //     this.app.call('changeMode', this, 'translate');
	        //     break;

	        // case 69: // 注册 E 旋转模式
	        //     this.app.call('changeMode', this, 'rotate');
	        //     break;

	        // case 82: // 注册 R 缩放模式
	        //     this.app.call('changeMode', this, 'scale');
	        //     break;
	    }
	};

	/**
	 * 渲染事件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} app 
	 */
	function RenderEvent(app) {
	    BaseEvent.call(this, app);
	}

	RenderEvent.prototype = Object.create(BaseEvent.prototype);
	RenderEvent.prototype.constructor = RenderEvent;

	RenderEvent.prototype.start = function () {
	    this.app.on(`render.${this.id}`, this.onRender.bind(this));
	    this.app.on(`materialChanged.${this.id}`, this.onRender.bind(this));
	    this.app.on(`sceneGraphChanged.${this.id}`, this.onRender.bind(this));
	    this.app.on(`cameraChanged.${this.id}`, this.onRender.bind(this));
	};

	RenderEvent.prototype.stop = function () {
	    this.app.on(`render.${this.id}`, null);
	    this.app.on(`materialChanged.${this.id}`, null);
	    this.app.on(`sceneGraphChanged.${this.id}`, null);
	    this.app.on(`cameraChanged.${this.id}`, null);
	};

	RenderEvent.prototype.onRender = function () {
	    var editor = this.app.editor;
	    var scene = editor.scene;
	    var sceneHelpers = editor.sceneHelpers;
	    var camera = editor.camera;
	    var renderer = editor.renderer;

	    scene.updateMatrixWorld();
	    sceneHelpers.updateMatrixWorld();

	    this.app.editor.renderer.clear();

	    this.app.call('beforeRender', this);

	    if (this.renderer === undefined) {
	        this.createRenderer().then(() => {
	            this.app.call('render');
	        });
	        this.app.on(`sceneLoaded.${this.id}`, this.createRenderer.bind(this));
	        this.app.on(`postProcessingChanged.${this.id}`, this.createRenderer.bind(this));
	    } else {
	        this.renderer.render();
	    }

	    this.app.call('afterRender', this);
	};

	RenderEvent.prototype.createRenderer = function () {
	    var editor = this.app.editor;
	    var scene = editor.scene;
	    var sceneHelpers = editor.sceneHelpers;
	    var camera = editor.camera;
	    var renderer = editor.renderer;

	    this.renderer = new EffectRenderer();

	    return this.renderer.create(
	        [scene, sceneHelpers],
	        camera,
	        renderer
	    );
	};

	/**
	 * 窗口大小改变事件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} app 
	 */
	function ResizeEvent(app) {
	    BaseEvent.call(this, app);
	}

	ResizeEvent.prototype = Object.create(BaseEvent.prototype);
	ResizeEvent.prototype.constructor = ResizeEvent;

	ResizeEvent.prototype.start = function () {
	    this.app.on(`resize.${this.id}`, this.onResize.bind(this));
	};

	ResizeEvent.prototype.stop = function () {
	    this.app.on(`resize.${this.id}`, null);
	};

	ResizeEvent.prototype.onResize = function () {
	    var editor = this.app.editor;
	    var container = this.app.viewport.container;
	    var camera = editor.camera;
	    var renderer = editor.renderer;

	    var width = container.dom.clientWidth;
	    var height = container.dom.clientHeight;

	    editor.DEFAULT_CAMERA.aspect = width / height;
	    editor.DEFAULT_CAMERA.updateProjectionMatrix();

	    camera.aspect = width / height;
	    camera.updateProjectionMatrix();

	    renderer.setSize(width, height);

	    this.app.call('render', this);
	};

	/**
	 * 滤镜事件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} app 
	 */
	function FilterEvent(app) {
	    BaseEvent.call(this, app);
	}

	FilterEvent.prototype = Object.create(BaseEvent.prototype);
	FilterEvent.prototype.constructor = FilterEvent;

	FilterEvent.prototype.start = function () {
	    this.app.on(`editorCleared.${this.id}`, this.onEditorCleared.bind(this));
	    this.app.on(`optionsChanged.${this.id}`, this.onOptionsChanged.bind(this));
	};

	FilterEvent.prototype.stop = function () {
	    this.app.on(`editorCleared.${this.id}`, null);
	    this.app.on(`optionsChanged.${this.id}`, null);
	};

	FilterEvent.prototype.onEditorCleared = function () {
	    this.app.editor.renderer.domElement.style.filter = '';
	};

	FilterEvent.prototype.onOptionsChanged = function (options) {
	    this.app.editor.renderer.domElement.style.filter = CssUtils.serializeFilter(options);
	};

	/**
	 * 设置位置命令
	 * @author dforrer / https://github.com/dforrer
	 * Developed as part of a project at University of Applied Sciences and Arts Northwestern Switzerland (www.fhnw.ch)
	 * @param object THREE.Object3D
	 * @param newPosition THREE.Vector3
	 * @param optionalOldPosition THREE.Vector3
	 * @constructor
	 */
	function SetPositionCommand(object, newPosition, optionalOldPosition) {
		Command.call(this);

		this.type = 'SetPositionCommand';
		this.name = L_SET_POSITION;
		this.updatable = true;

		this.object = object;

		if (object !== undefined && newPosition !== undefined) {
			this.oldPosition = object.position.clone();
			this.newPosition = newPosition.clone();
		}

		if (optionalOldPosition !== undefined) {
			this.oldPosition = optionalOldPosition.clone();
		}
	}
	SetPositionCommand.prototype = Object.create(Command.prototype);

	Object.assign(SetPositionCommand.prototype, {
		constructor: SetPositionCommand,

		execute: function () {
			this.object.position.copy(this.newPosition);
			this.object.updateMatrixWorld(true);
			this.editor.app.call('objectChanged', this, this.object);
		},

		undo: function () {
			this.object.position.copy(this.oldPosition);
			this.object.updateMatrixWorld(true);
			this.editor.app.call('objectChanged', this, this.object);
		},

		update: function (command) {
			this.newPosition.copy(command.newPosition);
		},

		toJSON: function () {
			var output = Command.prototype.toJSON.call(this);

			output.objectUuid = this.object.uuid;
			output.oldPosition = this.oldPosition.toArray();
			output.newPosition = this.newPosition.toArray();

			return output;
		},

		fromJSON: function (json) {
			Command.prototype.fromJSON.call(this, json);

			this.object = this.editor.objectByUuid(json.objectUuid);
			this.oldPosition = new THREE.Vector3().fromArray(json.oldPosition);
			this.newPosition = new THREE.Vector3().fromArray(json.newPosition);
		}
	});

	/**
	 * 设置旋转命令
	 * @author dforrer / https://github.com/dforrer
	 * Developed as part of a project at University of Applied Sciences and Arts Northwestern Switzerland (www.fhnw.ch)
	 * @param object THREE.Object3D
	 * @param newRotation THREE.Euler
	 * @param optionalOldRotation THREE.Euler
	 * @constructor
	 */
	function SetRotationCommand(object, newRotation, optionalOldRotation) {
		Command.call(this);

		this.type = 'SetRotationCommand';
		this.name = L_SET_ROTATION;
		this.updatable = true;

		this.object = object;

		if (object !== undefined && newRotation !== undefined) {
			this.oldRotation = object.rotation.clone();
			this.newRotation = newRotation.clone();
		}

		if (optionalOldRotation !== undefined) {
			this.oldRotation = optionalOldRotation.clone();
		}
	}
	SetRotationCommand.prototype = Object.create(Command.prototype);

	Object.assign(SetRotationCommand.prototype, {
		constructor: SetRotationCommand,

		execute: function () {
			this.object.rotation.copy(this.newRotation);
			this.object.updateMatrixWorld(true);
			this.editor.app.call('objectChanged', this, this.object);
		},

		undo: function () {
			this.object.rotation.copy(this.oldRotation);
			this.object.updateMatrixWorld(true);
			this.editor.app.call('objectChanged', this, this.object);
		},

		update: function (command) {
			this.newRotation.copy(command.newRotation);
		},

		toJSON: function () {
			var output = Command.prototype.toJSON.call(this);

			output.objectUuid = this.object.uuid;
			output.oldRotation = this.oldRotation.toArray();
			output.newRotation = this.newRotation.toArray();

			return output;
		},

		fromJSON: function (json) {
			Command.prototype.fromJSON.call(this, json);

			this.object = this.editor.objectByUuid(json.objectUuid);
			this.oldRotation = new THREE.Euler().fromArray(json.oldRotation);
			this.newRotation = new THREE.Euler().fromArray(json.newRotation);
		}
	});

	/**
	 * 设置缩放命令
	 * @author dforrer / https://github.com/dforrer
	 * Developed as part of a project at University of Applied Sciences and Arts Northwestern Switzerland (www.fhnw.ch)
	 * @param object THREE.Object3D
	 * @param newScale THREE.Vector3
	 * @param optionalOldScale THREE.Vector3
	 * @constructor
	 */
	function SetScaleCommand(object, newScale, optionalOldScale) {
		Command.call(this);

		this.type = 'SetScaleCommand';
		this.name = L_SET_SCALE;
		this.updatable = true;

		this.object = object;

		if (object !== undefined && newScale !== undefined) {
			this.oldScale = object.scale.clone();
			this.newScale = newScale.clone();
		}

		if (optionalOldScale !== undefined) {
			this.oldScale = optionalOldScale.clone();
		}
	}
	SetScaleCommand.prototype = Object.create(Command.prototype);

	Object.assign(SetScaleCommand.prototype, {
		constructor: SetScaleCommand,

		execute: function () {
			this.object.scale.copy(this.newScale);
			this.object.updateMatrixWorld(true);
			this.editor.app.call('objectChanged', this, this.object);
		},

		undo: function () {
			this.object.scale.copy(this.oldScale);
			this.object.updateMatrixWorld(true);
			this.editor.app.call('objectChanged', this, this.object);
		},

		update: function (command) {
			this.newScale.copy(command.newScale);
		},

		toJSON: function () {
			var output = Command.prototype.toJSON.call(this);

			output.objectUuid = this.object.uuid;
			output.oldScale = this.oldScale.toArray();
			output.newScale = this.newScale.toArray();

			return output;
		},

		fromJSON: function (json) {
			Command.prototype.fromJSON.call(this, json);

			this.object = this.editor.objectByUuid(json.objectUuid);
			this.oldScale = new THREE.Vector3().fromArray(json.oldScale);
			this.newScale = new THREE.Vector3().fromArray(json.newScale);
		}
	});

	/**
	 * 平移旋转缩放控件事件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} app 
	 */
	function TransformControlsEvent(app) {
	    BaseEvent.call(this, app);

	    this.mode = 'translate';

	    this.objectPosition = null;
	    this.objectRotation = null;
	    this.objectScale = null;
	}

	TransformControlsEvent.prototype = Object.create(BaseEvent.prototype);
	TransformControlsEvent.prototype.constructor = TransformControlsEvent;

	TransformControlsEvent.prototype.start = function () {
	    var transformControls = this.app.editor.transformControls;

	    transformControls.addEventListener('change', this.onChange.bind(this));
	    transformControls.addEventListener('mouseDown', this.onMouseDown.bind(this));
	    transformControls.addEventListener('mouseUp', this.onMouseUp.bind(this));

	    this.app.on('objectSelected.' + this.id, this.onObjectSelected.bind(this));
	    this.app.on('changeMode.' + this.id, this.onChangeMode.bind(this));
	    this.app.on('snapChanged.' + this.id, this.onSnapChanged.bind(this));
	    this.app.on('spaceChanged.' + this.id, this.onSpaceChanged.bind(this));
	};

	TransformControlsEvent.prototype.stop = function () {
	    var transformControls = this.app.editor.transformControls;

	    transformControls.removeEventListener('change', this.onChange);
	    transformControls.removeEventListener('mouseDown', this.onMouseDown);
	    transformControls.removeEventListener('mouseUp', this.onMouseUp);

	    this.app.on('changeMode.' + this.id, null);
	    this.app.on('snapChanged.' + this.id, null);
	    this.app.on('spaceChanged.' + this.id, null);
	};

	/**
	 * 控件发生改变，需要更新包围盒位置，重绘场景
	 */
	TransformControlsEvent.prototype.onChange = function () {
	    var editor = this.app.editor;
	    var object = editor.transformControls.object;

	    if (object) {
	        this.app.call('objectChanged', this, object);
	    }

	    this.app.call('render');
	};

	/**
	 * 点击鼠标，记录选中物体当前平移、旋转和缩放值
	 */
	TransformControlsEvent.prototype.onMouseDown = function () {
	    if (['translate', 'rotate', 'scale'].indexOf(this.mode) === -1) {
	        return;
	    }

	    var object = this.app.editor.transformControls.object;

	    this.objectPosition = object.position.clone();
	    this.objectRotation = object.rotation.clone();
	    this.objectScale = object.scale.clone();

	    this.app.editor.controls.enabled = false; // EditorControls
	};

	/**
	 * 抬起鼠标，更新选中物体的平移、旋转和缩放值
	 */
	TransformControlsEvent.prototype.onMouseUp = function () {
	    if (['translate', 'rotate', 'scale'].indexOf(this.mode) === -1) {
	        return;
	    }

	    var editor = this.app.editor;
	    var transformControls = editor.transformControls;
	    var object = transformControls.object;

	    if (object == null) {
	        return;
	    }

	    switch (transformControls.getMode()) {
	        case 'translate':
	            if (!this.objectPosition.equals(object.position)) {
	                editor.execute(new SetPositionCommand(object, object.position, this.objectPosition));
	            }
	            break;
	        case 'rotate':
	            if (!this.objectRotation.equals(object.rotation)) {
	                editor.execute(new SetRotationCommand(object, object.rotation, this.objectRotation));
	            }
	            break;
	        case 'scale':
	            if (!this.objectScale.equals(object.scale)) {
	                editor.execute(new SetScaleCommand(object, object.scale, this.objectScale));
	            }
	            break;
	    }

	    this.app.editor.controls.enabled = true; // EditorControls
	};

	/**
	 * 物体已经选中
	 * @param {*} object 选中的物体
	 */
	TransformControlsEvent.prototype.onObjectSelected = function (object) {
	    this.app.editor.transformControls.detach();

	    if (['translate', 'rotate', 'scale'].indexOf(this.mode) === -1) {
	        return;
	    }

	    if (!object || object === this.app.editor.scene || object === this.app.editor.camera) {
	        return;
	    }

	    this.app.editor.transformControls.attach(object);
	};

	/**
	 * 切换平移、旋转、缩放模式
	 * @param {*} mode 模式
	 */
	TransformControlsEvent.prototype.onChangeMode = function (mode) {
	    this.mode = mode;
	    var transformControls = this.app.editor.transformControls;

	    if (mode === 'translate' || mode === 'rotate' || mode === 'scale') { // 设置模式在选中物体上
	        transformControls.setMode(mode);
	        var object = this.app.editor.selected;
	        if (object != null) {
	            transformControls.attach(object);
	        }
	    } else { // 取消对选中物体平移、旋转、缩放
	        transformControls.detach();
	    }
	};

	/**
	 * 设置平移移动的大小
	 * @param {*} dist 
	 */
	TransformControlsEvent.prototype.onSnapChanged = function (dist) {
	    this.app.editor.transformControls.setTranslationSnap(dist);
	};

	/**
	 * 设置世界坐标系还是物体坐标系
	 * @param {*} space 
	 */
	TransformControlsEvent.prototype.onSpaceChanged = function (space) {
	    this.app.editor.transformControls.setSpace(space);
	};

	/**
	 * 物体事件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} app 
	 */
	function ObjectEvent(app) {
	    BaseEvent.call(this, app);
	    this.box = new THREE.Box3();
	}

	ObjectEvent.prototype = Object.create(BaseEvent.prototype);
	ObjectEvent.prototype.constructor = ObjectEvent;

	ObjectEvent.prototype.start = function () {
	    this.app.on('objectAdded.' + this.id, this.onObjectAdded.bind(this));
	    this.app.on('objectChanged.' + this.id, this.onObjectChanged.bind(this));
	    this.app.on('objectRemoved.' + this.id, this.onObjectRemoved.bind(this));
	    this.app.on('objectSelected.' + this.id, this.onObjectSelected.bind(this));
	    this.app.on('objectFocused.' + this.id, this.onObjectFocused.bind(this));
	};

	ObjectEvent.prototype.stop = function () {
	    this.app.on('objectAdded.' + this.id, null);
	    this.app.on('objectChanged.' + this.id, null);
	    this.app.on('objectRemoved.' + this.id, null);
	    this.app.on('objectSelected.' + this.id, null);
	    this.app.on('objectFocused.' + this.id, null);
	};

	ObjectEvent.prototype.onObjectAdded = function (object) {
	    var objects = this.app.editor.objects;

	    object.traverse(function (child) {
	        objects.push(child);
	    });
	};

	ObjectEvent.prototype.onObjectChanged = function (object) {
	    var editor = this.app.editor;

	    if (object instanceof THREE.PerspectiveCamera) {
	        object.updateProjectionMatrix();
	    }

	    this.app.call('render');
	};

	ObjectEvent.prototype.onObjectRemoved = function (object) {
	    var objects = this.app.editor.objects;

	    object.traverse(function (child) {
	        objects.splice(objects.indexOf(child), 1);
	    });
	};

	ObjectEvent.prototype.onObjectSelected = function (object) {
	    var editor = this.app.editor;
	    var scene = editor.scene;
	    var box = this.box;

	    this.app.call('render');
	};

	ObjectEvent.prototype.onObjectFocused = function (object) {
	    var controls = this.app.editor.controls;

	    controls.focus(object);
	};

	/**
	 * 光线投射事件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} app 
	 */
	function RaycastEvent(app) {
	    BaseEvent.call(this, app);

	    this.mouse = new THREE.Vector2();
	    this.raycaster = new THREE.Raycaster();
	}

	RaycastEvent.prototype = Object.create(BaseEvent.prototype);
	RaycastEvent.prototype.constructor = RaycastEvent;

	RaycastEvent.prototype.start = function () {
	    this.app.on(`mousedown.${this.id}`, this.onMouseDown.bind(this));
	    this.app.on(`mouseup.${this.id}`, this.onMouseUp.bind(this));
	};

	RaycastEvent.prototype.stop = function () {
	    this.app.on(`mousedown.${this.id}`, null);
	    this.app.on(`mouseup.${this.id}`, null);
	};

	RaycastEvent.prototype.onMouseDown = function (event) {
	    if (event.target !== this.app.editor.renderer.domElement) {
	        return;
	    }

	    this.isDown = true;
	    this.x = event.offsetX;
	    this.y = event.offsetY;
	};

	RaycastEvent.prototype.onMouseUp = function (event) {
	    if (event.target !== this.app.editor.renderer.domElement) {
	        return;
	    }

	    if (!this.isDown || this.x !== event.offsetX || this.y !== event.offsetY) {
	        return;
	    }

	    var domElement = this.app.editor.renderer.domElement;

	    this.mouse.x = event.offsetX / domElement.clientWidth * 2 - 1;
	    this.mouse.y = -event.offsetY / domElement.clientHeight * 2 + 1;

	    this.raycaster.setFromCamera(this.mouse, this.app.editor.camera);

	    var intersects = this.raycaster.intersectObjects(this.app.editor.scene.children, false);

	    if (intersects.length > 0) {
	        this.app.call('raycast', this, intersects[0], intersects);
	    }
	};

	/**
	 * 选取事件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} app 
	 */
	function PickEvent(app) {
	    BaseEvent.call(this, app);

	    this.raycaster = new THREE.Raycaster();
	    this.mouse = new THREE.Vector2();

	    this.onDownPosition = new THREE.Vector2();
	    this.onUpPosition = new THREE.Vector2();
	    this.onDoubleClickPosition = new THREE.Vector2();
	}

	PickEvent.prototype = Object.create(BaseEvent.prototype);
	PickEvent.prototype.constructor = PickEvent;

	PickEvent.prototype.start = function () {
	    var container = this.app.viewport.container;

	    container.dom.addEventListener('mousedown', this.onMouseDown.bind(this), false);
	    container.dom.addEventListener('dblclick', this.onDoubleClick.bind(this), false);
	};

	PickEvent.prototype.stop = function () {
	    var container = this.app.viewport.container;

	    container.dom.removeEventListener('mousedown', this.onMouseDown, false);
	    container.dom.removeEventListener('dblclick', this.onDoubleClick, false);
	};

	PickEvent.prototype.onMouseDown = function (event) {
	    if (event.button !== 0) { // 只允许左键选中
	        return;
	    }

	    // 这样处理选中的原因是避免把拖动误认为点击

	    var container = this.app.viewport.container;

	    event.preventDefault();

	    var array = this.getMousePosition(container.dom, event.clientX, event.clientY);
	    this.onDownPosition.fromArray(array);

	    document.addEventListener('mouseup', this.onMouseUp.bind(this), false);
	};

	PickEvent.prototype.onMouseUp = function (event) {
	    var container = this.app.viewport.container;

	    var array = this.getMousePosition(container.dom, event.clientX, event.clientY);
	    this.onUpPosition.fromArray(array);

	    this.handleClick();

	    document.removeEventListener('mouseup', this.onMouseUp, false);
	};

	PickEvent.prototype.onDoubleClick = function (event) {
	    var container = this.app.viewport.container;
	    var objects = this.app.editor.objects;

	    var array = this.getMousePosition(container.dom, event.clientX, event.clientY);
	    this.onDoubleClickPosition.fromArray(array);

	    var intersects = this.getIntersects(this.onDoubleClickPosition, objects);

	    if (intersects.length > 0) {
	        var intersect = intersects[0];
	        this.app.call('objectFocused', this, intersect.object);
	    }
	};

	PickEvent.prototype.getIntersects = function (point, objects) {
	    this.mouse.set((point.x * 2) - 1, -(point.y * 2) + 1);
	    this.raycaster.setFromCamera(this.mouse, this.app.editor.camera);
	    return this.raycaster.intersectObjects(objects);
	};

	PickEvent.prototype.getMousePosition = function (dom, x, y) {
	    var rect = dom.getBoundingClientRect();
	    return [(x - rect.left) / rect.width, (y - rect.top) / rect.height];
	};

	PickEvent.prototype.handleClick = function () {
	    var editor = this.app.editor;
	    var objects = editor.objects;

	    if (this.onDownPosition.distanceTo(this.onUpPosition) === 0) {
	        var intersects = this.getIntersects(this.onUpPosition, objects);

	        if (intersects.length > 0) {
	            var object = intersects[0].object;

	            if (object.userData.object !== undefined) {
	                // helper
	                editor.select(object.userData.object);
	            } else {
	                editor.select(this.partToMesh(object));
	            }
	        } else {
	            editor.select(null);
	        }

	        // objects in sceneHelpers
	        var sceneHelpers = this.app.editor.sceneHelpers;

	        var intersects = this.getIntersects(this.onUpPosition, sceneHelpers.children);
	        if (intersects.length > 0) {
	            if (!(intersects[0].object instanceof THREE.GridHelper)) { // 禁止选中网格
	                editor.select(intersects[0].object);
	            }
	        }

	        this.app.call('render');
	    }
	};

	/**
	 * 如果选中的是模型的一部分，改为选择整个模型
	 * @param {*} obj 
	 */
	PickEvent.prototype.partToMesh = function (obj) {
	    var scene = this.app.editor.scene;

	    if (obj === scene || obj.userData && obj.userData.Server === true) { // 场景或服务端模型
	        return obj;
	    }

	    // 判断obj是否是模型的一部分
	    var model = obj;
	    var isPart = false;

	    while (model) {
	        if (model === scene) {
	            break;
	        }
	        if (model.userData && model.userData.Server === true) {
	            isPart = true;
	            break;
	        }

	        model = model.parent;
	    }

	    if (isPart) {
	        return model;
	    }

	    return obj;
	};

	/**
	 * 编辑器控件事件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} app 
	 */
	function EditorControlsEvent(app) {
	    BaseEvent.call(this, app);
	}

	EditorControlsEvent.prototype = Object.create(BaseEvent.prototype);
	EditorControlsEvent.prototype.constructor = EditorControlsEvent;

	EditorControlsEvent.prototype.start = function () {
	    var controls = this.app.editor.controls;

	    controls.addEventListener('change', this.onChange.bind(this));

	    this.app.on('editorCleared.' + this.id, this.onEditorCleared.bind(this));
	};

	EditorControlsEvent.prototype.stop = function () {
	    var controls = this.app.editor.controls;

	    controls.removeEventListener('change', this.onChange);

	    this.app.on('editorCleared.' + this.id, null);
	};

	EditorControlsEvent.prototype.onChange = function () {
	    this.app.call('cameraChanged', this, this.app.editor.camera);
	};

	EditorControlsEvent.prototype.onEditorCleared = function () {
	    var controls = this.app.editor.controls;

	    controls.center.set(0, 0, 0);

	    this.app.call('render');
	};

	/**
	 * 事件执行器
	 * @author tengge / https://github.com/tengge1
	 */
	function EventDispatcher(app) {
	    this.app = app;
	    this.dispatch = d3.dispatch.apply(d3.dispatch, EventList);
	    this.addDomEventListener();

	    this.events = [
	        // 核心事件
	        new AnimateEvent(this.app),
	        new KeyDownEvent(this.app),
	        new RenderEvent(this.app),
	        new ResizeEvent(this.app),
	        new FilterEvent(this.app),

	        // viewport中的事件
	        new TransformControlsEvent(this.app),
	        new ObjectEvent(this.app),
	        new RaycastEvent(this.app),
	        new PickEvent(this.app),
	        new EditorControlsEvent(this.app)
	    ];
	}

	EventDispatcher.prototype = Object.create(BaseEvent.prototype);
	EventDispatcher.prototype.constructor = EventDispatcher;

	/**
	 * 启动
	 */
	EventDispatcher.prototype.start = function () {
	    this.events.forEach(n => {
	        n.start();
	    });
	};

	/**
	 * 停止
	 */
	EventDispatcher.prototype.stop = function () {
	    this.events.forEach(n => {
	        n.stop();
	    });
	};

	/**
	 * 执行事件
	 * @param {*} eventName 
	 * @param {*} _this 
	 * @param {*} others 
	 */
	EventDispatcher.prototype.call = function (eventName, _this, ...others) {
	    this.dispatch.call(eventName, _this, ...others);
	};

	/**
	 * 监听事件
	 * @param {*} eventName 
	 * @param {*} callback 
	 */
	EventDispatcher.prototype.on = function (eventName, callback) {
	    this.dispatch.on(eventName, callback);
	};

	/**
	 * 监听dom事件
	 */
	EventDispatcher.prototype.addDomEventListener = function () {
	    var container = this.app.container;
	    container.addEventListener('click', event => {
	        this.dispatch.call('click', this, event);
	    });
	    container.addEventListener('contextmenu', event => {
	        this.dispatch.call('contextmenu', this, event);
	        event.preventDefault();
	        return false;
	    });
	    container.addEventListener('dblclick', event => {
	        this.dispatch.call('dblclick', this, event);
	    });
	    document.addEventListener('keydown', event => {
	        this.dispatch.call('keydown', this, event);
	    });
	    document.addEventListener('keyup', event => {
	        this.dispatch.call('keyup', this, event);
	    });
	    container.addEventListener('mousedown', event => {
	        this.dispatch.call('mousedown', this, event);
	    });
	    container.addEventListener('mousemove', event => {
	        this.dispatch.call('mousemove', this, event);
	    });
	    container.addEventListener('mouseup', event => {
	        this.dispatch.call('mouseup', this, event);
	    });
	    container.addEventListener('mousewheel', event => {
	        this.dispatch.call('mousewheel', this, event);
	    });
	    window.addEventListener('resize', event => {
	        this.dispatch.call('resize', this, event);
	    }, false);
	    document.addEventListener('dragover', event => {
	        this.dispatch.call('dragover', this, event);
	    }, false);
	    document.addEventListener('drop', event => {
	        this.dispatch.call('drop', this, event);
	    }, false);
	};

	/**
	 * Logo标志
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function Logo(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}

	Logo.prototype = Object.create(UI$1.Control.prototype);
	Logo.prototype.constructor = Logo;

	Logo.prototype.render = function () {

	    var container = UI$1.create({
	        xtype: 'div',
	        parent: this.parent,
	        cls: 'logo',
	        html: '<i class="iconfont icon-shadow"></i>'
	    });

	    container.render();
	};

	/**
	 * 获取MIME-Type后缀名
	 * @param {*} mimeType MIME-Type
	 */
	function getExtension(mimeType) {
	    switch (mimeType) {
	        case 'image/jpeg':
	            return 'jpg';
	        case 'image/png':
	            return 'png';
	        case 'image/gif':
	            return 'gif';
	        case 'image/bmp':
	            return 'bmp';
	        default:
	            console.error(`MIMETypeUtils: unknown MIME-Type: ${mimeType}`);
	            return 'unknown';
	    }
	}

	/**
	 * 获取MIME-Type类型
	 * @param {*} extension 文件名后缀
	 */
	function getMIMEType(extension) {
	    extension = extension.trimLeft('.');
	    switch (extension.toLowerCase()) {
	        case 'jpg':
	        case 'jpeg':
	            return 'image/jpeg';
	        case 'png':
	            return 'image/png';
	        case 'gif':
	            return 'image/gif';
	        case 'bmp':
	            return 'image/bmp';
	        default:
	            console.warn(`MIMETypeUtils: unknown extension ${extension}.`);
	            return 'application/octet-stream';
	    }
	}

	/**
	 * MIME-Type工具类
	 */
	const MIMETypeUtils = {
	    getExtension: getExtension,
	    getMIMEType: getMIMEType,
	};

	/**
	 * ajax
	 * @author tengge / https://github.com/tengge1
	 * @param {*} params 参数
	 */
	function ajax(params) {
	    const url = params.url || '';
	    const method = params.method || 'GET';
	    const data = params.data || null;
	    const callback = params.callback || null;

	    const xhr = new XMLHttpRequest();
	    xhr.open(method, url, true);
	    xhr.onreadystatechange = function () {
	        if (xhr.readyState === 4) {
	            var data = xhr.responseText;
	            typeof (callback) === 'function' && callback(data);
	        }
	    };

	    if (data === null) { // 不需要POST数据
	        xhr.send(null);
	        return;
	    }

	    // 判断是发送表单还是上传文件
	    // 由于API Controller只能序列化Content-Type为`application/x-www-form-urlencoded`的数据，所以发送表单和上传文件只能二选一。
	    // 否则报错："No MediaTypeFormatter is available to read an object of type 'EditTextureModel' from content with media type 'multipart/form-data'.
	    var hasFile = false;

	    for (var name in data) {
	        if (data[name] instanceof Blob) {
	            hasFile = true;
	            break;
	        }
	    }

	    if (hasFile) { // 上传文件
	        var formData = new FormData();

	        for (var name in data) {
	            if (data[name] instanceof Blob) {
	                formData.append(name, data[name], `${data[name].name}.${MIMETypeUtils.getExtension(data[name].type)}`);
	            }
	        }

	        xhr.send(formData);
	    } else { // 发送表单
	        var bodies = [];
	        for (var name in data) {
	            bodies.push(name + '=' + encodeURIComponent(data[name]));
	        }

	        var body = bodies.join('&');
	        if (body.length) {
	            xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
	        }

	        xhr.send(body);
	    }
	}

	/**
	 * get请求
	 * @param {*} url 地址
	 * @param {*} callback 回调函数
	 */
	function get(url, callback) {
	    ajax({
	        url: url,
	        callback: callback
	    });
	}

	/**
	 * get请求并解析json数据
	 * @param {*} url 
	 * @param {*} callback 
	 */
	function getJson(url, callback) {
	    ajax({
	        url: url,
	        callback: function (data) {
	            typeof (callback) === 'function' && callback(JSON.parse(data));
	        }
	    });
	}

	/**
	 * post请求
	 * @param {*} url 地址
	 * @param {*} data 数据
	 * @param {*} callback 回调函数
	 */
	function post(url, data, callback) {
	    const _data = typeof (data) === 'function' ? null : data;
	    const _callback = typeof (data) === 'function' ? data : callback;

	    ajax({
	        url: url,
	        method: 'POST',
	        data: _data,
	        callback: _callback
	    });
	}

	/**
	 * Ajax
	 */
	const Ajax = {
	    ajax: ajax,
	    get: get,
	    getJson: getJson,
	    post: post
	};

	/**
	 * GIS场景
	 * @author tengge / https://github.com/tengge1
	 * @param {*} app 
	 */
	function Scene(app) {
	    this.app = app;
	}

	Scene.prototype.start = function () {
	    var editor = this.app.editor;

	    this.oldBackground = editor.scene.background;
	    editor.scene.background = null;
	    editor.sceneHelpers.visible = false;

	    editor.controls.enabled = false;
	    editor.controls.dispose();
	    editor.transformControls.enabled = false;

	    this.app.editor.showViewHelper = false;

	    this.globe = new Globe(editor.camera, editor.renderer, {
	        server: this.app.options.server,
	    });
	    editor.scene.add(this.globe);
	    this.oldSceneBeforeRender = editor.scene.onBeforeRender;
	    editor.scene.onBeforeRender = this.update.bind(this);
	};

	Scene.prototype.update = function () {
	    this.globe.update();
	};

	Scene.prototype.stop = function () {
	    this.app.on(`afterRender.${this.id}`, null);
	    this.globe.dispose();
	    delete this.globe;

	    var editor = this.app.editor;

	    editor.scene.onBeforeRender = this.oldSceneBeforeRender;
	    delete this.oldSceneBeforeRender;

	    editor.background = this.oldBackground;

	    editor.sceneHelpers.visible = true;

	    editor.controls = new THREE.EditorControls(editor.camera, editor.renderer.domElement);
	    editor.transformControls.enabled = true;

	    this.app.editor.showViewHelper = true;
	};

	/**
	 * 场景菜单
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function SceneMenu(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}

	SceneMenu.prototype = Object.create(UI$1.Control.prototype);
	SceneMenu.prototype.constructor = SceneMenu;

	SceneMenu.prototype.render = function () {
	    var container = UI$1.create({
	        xtype: 'div',
	        parent: this.parent,
	        cls: 'menu',
	        children: [{
	            xtype: 'div',
	            cls: 'title',
	            html: L_SCENE
	        }, {
	            xtype: 'div',
	            cls: 'options',
	            children: [{
	                xtype: 'div',
	                cls: 'option',
	                style: {
	                    cursor: 'default'
	                },
	                children: [{
	                    xtype: 'div',
	                    children: [{
	                        xtype: 'html',
	                        html: L_NEW
	                    }, {
	                        xtype: 'icon',
	                        icon: 'icon-right-triangle',
	                        style: {
	                            float: 'right'
	                        }
	                    }]
	                }, {
	                    xtype: 'div',
	                    cls: 'sub-menu',
	                    children: [{
	                        xtype: 'div',
	                        cls: 'option',
	                        html: L_EMPTY_SCENE,
	                        onClick: this.createEmptyScene.bind(this),
	                    }, {
	                        xtype: 'div',
	                        cls: 'option',
	                        html: L_GIS_SCENE,
	                        onClick: this.createGISScene.bind(this),
	                    }]
	                }],
	            }, {
	                xtype: 'div',
	                html: L_SAVE,
	                cls: 'option',
	                onClick: this.saveScene.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_SAVE_AS,
	                cls: 'option',
	                onClick: this.saveAsScene.bind(this)
	            }, {
	                xtype: 'hr'
	            }, {
	                xtype: 'div',
	                html: L_EXPORT_SCENE,
	                cls: 'option',
	                onClick: this.exportScene.bind(this)
	            }]
	        }]
	    });

	    container.render();
	};

	// ---------------------------- 新建空场景 ---------------------------------

	SceneMenu.prototype.createEmptyScene = function () {
	    var editor = this.app.editor;

	    if (editor.sceneID == null) {
	        editor.clear();
	        editor.sceneID = null;
	        editor.sceneName = null;
	        document.title = L_NO_NAME;
	        UI$1.msg(L_CREATE_EMPTY_SCENE_SUCCESS);
	        return;
	    }

	    UI$1.confirm(L_CONFIRM, L_UNSAVED_WILL_LOSE_CONFIRM, (event, btn) => {
	        if (btn === 'ok') {
	            editor.clear();
	            editor.sceneID = null;
	            editor.sceneName = null;
	            this.app.options.sceneType = 'Empty';
	            document.title = L_NO_NAME;
	            this.app.editor.camera.userData.control = 'OrbitControls';
	        }
	    });
	};

	// --------------------------- 新建GIS场景 -------------------------------------

	SceneMenu.prototype.createGISScene = function () {
	    if (this.app.editor.gis) {
	        this.app.editor.gis.stop();
	    }

	    this.app.editor.gis = new Scene(this.app);
	    this.app.editor.gis.start();

	    this.app.options.sceneType = 'GIS';

	    this.app.editor.camera.userData.control = '';

	    this.app.call(`sceneGraphChanged`, this);
	};

	// --------------------------- 保存场景 ----------------------------------------

	SceneMenu.prototype.saveScene = function () { // 保存场景
	    var editor = this.app.editor;
	    var id = editor.sceneID;
	    var sceneName = editor.sceneName;

	    if (id) { // 编辑场景
	        this.commitSave(id, sceneName);
	    } else { // 新建场景
	        UI$1.prompt(L_SAVE_SCENE, L_NAME, L_NEW_SCENE, (event, name) => {
	            this.commitSave(id, name);
	        });
	    }
	};

	SceneMenu.prototype.commitSave = function (id, sceneName) {
	    var editor = this.app.editor;

	    // 记录选中物体，以便载入时还原场景选中
	    var selected = this.app.editor.selected;
	    if (selected) {
	        this.app.options.selected = selected.uuid;
	    }

	    var obj = (new Converter()).toJSON({
	        options: this.app.options,
	        camera: editor.camera,
	        renderer: editor.renderer,
	        scripts: editor.scripts,
	        animations: editor.animations,
	        scene: editor.scene
	    });

	    var params = {
	        Name: sceneName,
	        Data: JSON.stringify(obj)
	    };

	    if (id) {
	        params.ID = id;
	    }

	    Ajax.post(`${this.app.options.server}/api/Scene/Save`, params, result => {
	        var obj = JSON.parse(result);

	        if (obj.Code === 200) {
	            editor.sceneID = obj.ID;
	            editor.sceneName = sceneName;
	            document.title = sceneName;
	        }

	        this.app.call(`sceneSaved`, this);

	        UI$1.msg(obj.Msg);
	    });
	};

	// --------------------------- 另存为场景 -------------------------------------

	SceneMenu.prototype.saveAsScene = function () {
	    var sceneName = this.app.editor.sceneName;

	    if (sceneName == null) {
	        sceneName = L_NEW_SCENE;
	    }

	    UI$1.prompt(L_SAVE_SCENE, L_NAME, sceneName, (event, name) => {
	        this.app.editor.sceneName = name;
	        document.title = name;
	        this.commitSaveAs(name);
	    });
	};

	SceneMenu.prototype.commitSaveAs = function (sceneName) {
	    var editor = this.app.editor;

	    var obj = (new Converter()).toJSON({
	        options: this.app.options,
	        camera: editor.camera,
	        renderer: editor.renderer,
	        scripts: editor.scripts,
	        animations: editor.animations,
	        scene: editor.scene
	    });

	    Ajax.post(`${this.app.options.server}/api/Scene/Save`, {
	        Name: sceneName,
	        Data: JSON.stringify(obj)
	    }, result => {
	        var obj = JSON.parse(result);

	        if (obj.Code === 200) {
	            editor.sceneID = obj.ID;
	            editor.sceneName = sceneName;
	            document.title = sceneName;
	        }

	        this.app.call(`sceneSaved`, this);

	        UI$1.msg(obj.Msg);
	    });
	};

	// -------------------------- 导出场景 --------------------------------

	SceneMenu.prototype.exportScene = function () {
	    var sceneID = this.app.editor.sceneID;

	    if (!sceneID) {
	        UI$1.msg('请先打开场景！');
	        return;
	    }

	    UI$1.confirm('询问', '是否导出当前场景？', (event, btn) => {
	        if (btn === 'ok') {
	            fetch(`${this.app.options.server}/api/ExportScene/Run?ID=${sceneID}`, {
	                method: 'POST'
	            }).then(response => {
	                if (response.ok) {
	                    response.json().then(json => {
	                        UI$1.msg(json.Msg);
	                        window.open(`${this.app.options.server}${json.Url}`, 'export');
	                    });
	                }
	            });
	        }
	    });
	};

	/**
	 * 添加物体命令
	 * @author dforrer / https://github.com/dforrer
	 * Developed as part of a project at University of Applied Sciences and Arts Northwestern Switzerland (www.fhnw.ch)
	 * @param object THREE.Object3D
	 * @constructor
	 */
	function AddObjectCommand(object) {
		Command.call(this);

		this.type = 'AddObjectCommand';

		this.object = object;

		if (object !== undefined) {
			this.name = L_ADD_OBJECT_COLON + object.name;
		}
	}
	AddObjectCommand.prototype = Object.create(Command.prototype);

	Object.assign(AddObjectCommand.prototype, {
		constructor: AddObjectCommand,

		execute: function () {
			this.editor.addObject(this.object);
			this.editor.select(this.object);
		},

		undo: function () {
			this.editor.removeObject(this.object);
			this.editor.deselect();
		},

		toJSON: function () {
			var output = Command.prototype.toJSON.call(this);
			output.object = this.object.toJSON();

			return output;
		},

		fromJSON: function (json) {
			Command.prototype.fromJSON.call(this, json);

			this.object = this.editor.objectByUuid(json.object.object.uuid);

			if (this.object === undefined) {
				var loader = new THREE.ObjectLoader();
				this.object = loader.parse(json.object);
			}
		}
	});

	/**
	 * 编辑菜单
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function EditMenu(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}

	EditMenu.prototype = Object.create(UI$1.Control.prototype);
	EditMenu.prototype.constructor = EditMenu;

	EditMenu.prototype.render = function () {

	    var container = UI$1.create({
	        xtype: 'div',
	        parent: this.parent,
	        cls: 'menu',
	        children: [{
	            xtype: 'div',
	            cls: 'title',
	            html: L_EDIT
	        }, {
	            xtype: 'div',
	            cls: 'options',
	            children: [{
	                xtype: 'div',
	                id: 'undo',
	                scope: this.id,
	                html: `${L_UNDO}(Ctrl+Z)`,
	                cls: 'option inactive',
	                onClick: this.undo.bind(this)
	            }, {
	                xtype: 'div',
	                id: 'redo',
	                scope: this.id,
	                html: `${L_REDO}(Ctrl+Shift+Z)`,
	                cls: 'option inactive',
	                onClick: this.redo.bind(this)
	            }, {
	                xtype: 'div',
	                id: 'clearHistory',
	                scope: this.id,
	                html: L_CLEAR_HISTORY,
	                cls: 'option inactive',
	                onClick: this.clearHistory.bind(this)
	            }, {
	                xtype: 'hr'
	            }, {
	                xtype: 'div',
	                id: 'clone',
	                scope: this.id,
	                html: L_CLONE,
	                cls: 'option inactive',
	                onClick: this.clone.bind(this)
	            }, {
	                xtype: 'div',
	                id: 'delete',
	                scope: this.id,
	                html: `${L_DELETE}(Del)`,
	                cls: 'option inactive',
	                onClick: this.delete.bind(this)
	            }]
	        }]
	    });

	    container.render();

	    this.app.on(`historyChanged.${this.id}`, this.onHistoryChanged.bind(this));
	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	};

	// --------------------- 撤销 --------------------------

	EditMenu.prototype.undo = function () {
	    var history = this.app.editor.history;
	    if (history.undos.length === 0) {
	        return;
	    }

	    this.app.editor.undo();
	};

	// --------------------- 重做 -----------------------------

	EditMenu.prototype.redo = function () {
	    var history = this.app.editor.history;
	    if (history.redos.length === 0) {
	        return;
	    }

	    this.app.editor.redo();
	};

	// -------------------- 清空历史记录 --------------------------------

	EditMenu.prototype.clearHistory = function () {
	    var editor = this.app.editor;
	    var history = editor.history;

	    if (history.undos.length === 0 && history.redos.length === 0) {
	        return;
	    }

	    UI$1.confirm(L_CONFIRM, L_HISTORY_WILL_CLEAR, function (event, btn) {
	        if (btn === 'ok') {
	            editor.history.clear();
	        }
	    });
	};

	// -------------------------- 复制 -----------------------------------

	EditMenu.prototype.clone = function () {
	    var editor = this.app.editor;
	    var object = editor.selected;

	    if (object == null || object.parent == null) { // 避免复制场景或相机
	        return;
	    }

	    object = object.clone();
	    editor.execute(new AddObjectCommand(object));
	};

	// ----------------------- 删除 -----------------------------------

	EditMenu.prototype.delete = function () {
	    var editor = this.app.editor;
	    var object = editor.selected;

	    if (object == null || object.parent == null) { // 避免删除场景或相机
	        return;
	    }

	    UI$1.confirm(L_CONFIRM, L_DELETE + ' ' + object.name + '?', function (event, btn) {
	        if (btn === 'ok') {
	            editor.execute(new RemoveObjectCommand(object));
	        }
	    });
	};

	// ---------------------- 事件 -----------------------

	EditMenu.prototype.onHistoryChanged = function () {
	    var history = this.app.editor.history;

	    var undo = UI$1.get('undo', this.id);
	    var redo = UI$1.get('redo', this.id);
	    var clearHistory = UI$1.get('clearHistory', this.id);

	    if (history.undos.length === 0) {
	        undo.dom.classList.add('inactive');
	    } else {
	        undo.dom.classList.remove('inactive');
	    }

	    if (history.redos.length === 0) {
	        redo.dom.classList.add('inactive');
	    } else {
	        redo.dom.classList.remove('inactive');
	    }

	    if (history.undos.length === 0 && history.redos.length === 0) {
	        clearHistory.dom.classList.add('inactive');
	    } else {
	        clearHistory.dom.classList.remove('inactive');
	    }
	};

	EditMenu.prototype.onObjectSelected = function () {
	    var editor = this.app.editor;

	    var clone = UI$1.get('clone', this.id);
	    var deleteBtn = UI$1.get('delete', this.id);

	    if (editor.selected && editor.selected.parent != null) {
	        clone.dom.classList.remove('inactive');
	        deleteBtn.dom.classList.remove('inactive');
	    } else {
	        clone.dom.classList.add('inactive');
	        deleteBtn.dom.classList.add('inactive');
	    }
	};

	/**
	 * 组
	 */
	function Group() {
	    THREE.Group.call(this);
	    this.name = L_GROUP;
	}

	Group.prototype = Object.create(THREE.Group.prototype);
	Group.prototype.constructor = Group;

	/**
	 * 平面
	 * @param {*} geometry 几何体
	 * @param {*} material 材质
	 */
	function Plane(geometry = new THREE.PlaneBufferGeometry(50, 50), material = new THREE.MeshStandardMaterial()) {
	    THREE.Mesh.call(this, geometry, material);

	    this.name = L_PLANE;
	    this.rotation.x = -Math.PI / 2;
	    this.castShadow = true;
	    this.receiveShadow = true;

	    this.userData.physics = this.userData.physics || {
	        enabled: false,
	        type: 'rigidBody',
	        shape: 'btBoxShape',
	        mass: 0,
	        inertia: {
	            x: 0,
	            y: 0,
	            z: 0,
	        }
	    };
	}

	Plane.prototype = Object.create(THREE.Mesh.prototype);
	Plane.prototype.constructor = Plane;

	/**
	 * 正方体
	 * @param {*} geometry 几何体
	 * @param {*} material 材质
	 */
	function Box(geometry = new THREE.BoxBufferGeometry(1, 1, 1), material = new THREE.MeshStandardMaterial()) {
	    THREE.Mesh.call(this, geometry, material);

	    this.name = L_BOX;
	    this.castShadow = true;
	    this.receiveShadow = true;

	    this.userData.physics = this.userData.physics || {
	        enabled: false,
	        type: 'rigidBody',
	        shape: 'btBoxShape',
	        mass: 1,
	        inertia: {
	            x: 0,
	            y: 0,
	            z: 0,
	        }
	    };
	}

	Box.prototype = Object.create(THREE.Mesh.prototype);
	Box.prototype.constructor = Box;

	/**
	 * 圆
	 * @param {*} geometry 几何体
	 * @param {*} material 材质
	 */
	function Circle(geometry = new THREE.CircleBufferGeometry(1, 32), material = new THREE.MeshStandardMaterial()) {
	    THREE.Mesh.call(this, geometry, material);

	    this.name = L_CIRCLE;
	    this.castShadow = true;
	    this.receiveShadow = true;

	    this.userData.physics = this.userData.physics || {
	        enabled: false,
	        type: 'rigidBody',
	        shape: 'btBoxShape',
	        mass: 1.0,
	        inertia: {
	            x: 0,
	            y: 0,
	            z: 0,
	        }
	    };
	}

	Circle.prototype = Object.create(THREE.Mesh.prototype);
	Circle.prototype.constructor = Circle;

	/**
	 * 圆柱体
	 * @param {*} geometry 几何体
	 * @param {*} material 材质
	 */
	function Cylinder(geometry = new THREE.CylinderBufferGeometry(1, 1, 2, 32, 1, false), material = new THREE.MeshStandardMaterial()) {
	    THREE.Mesh.call(this, geometry, material);

	    this.name = L_CYLINDER;
	    this.castShadow = true;
	    this.receiveShadow = true;

	    this.userData.physics = this.userData.physics || {
	        enabled: false,
	        type: 'rigidBody',
	        shape: 'btBoxShape',
	        mass: 1,
	        inertia: {
	            x: 0,
	            y: 0,
	            z: 0,
	        }
	    };
	}

	Cylinder.prototype = Object.create(THREE.Mesh.prototype);
	Cylinder.prototype.constructor = Cylinder;

	/**
	 * 球体
	 * @param {*} geometry 几何体
	 * @param {*} material 材质
	 */
	function Sphere(geometry = new THREE.SphereBufferGeometry(1, 32, 16, 0, Math.PI * 2, 0, Math.PI), material = new THREE.MeshStandardMaterial()) {
	    THREE.Mesh.call(this, geometry, material);

	    this.name = L_SPHERE;
	    this.castShadow = true;
	    this.receiveShadow = true;

	    this.userData.physics = this.userData.physics || {
	        enabled: false,
	        type: 'rigidBody',
	        shape: 'btSphereShape',
	        mass: 0,
	        inertia: {
	            x: 0,
	            y: 0,
	            z: 0,
	        }
	    };
	}

	Sphere.prototype = Object.create(THREE.Mesh.prototype);
	Sphere.prototype.constructor = Sphere;

	/**
	 * 二十面体
	 * @param {*} geometry 几何体
	 * @param {*} material 材质
	 */
	function Icosahedron(geometry = new THREE.IcosahedronBufferGeometry(1, 2), material = new THREE.MeshStandardMaterial()) {
	    THREE.Mesh.call(this, geometry, material);

	    this.name = L_ICOSAHEDRON;
	    this.castShadow = true;
	    this.receiveShadow = true;

	    this.userData.physics = this.userData.physics || {
	        enabled: false,
	        type: 'rigidBody',
	        shape: 'btSphereShape',
	        mass: 1,
	        inertia: {
	            x: 0,
	            y: 0,
	            z: 0,
	        }
	    };
	}

	Icosahedron.prototype = Object.create(THREE.Mesh.prototype);
	Icosahedron.prototype.constructor = Icosahedron;

	/**
	 * 轮胎
	 * @param {*} geometry 几何体
	 * @param {*} material 材质
	 */
	function Torus(geometry = new THREE.TorusBufferGeometry(2, 1, 32, 32, Math.PI * 2), material = new THREE.MeshStandardMaterial()) {
	    THREE.Mesh.call(this, geometry, material);

	    this.name = L_TORUS;
	    this.castShadow = true;
	    this.receiveShadow = true;

	    this.userData.physics = this.userData.physics || {
	        enabled: false,
	        type: 'rigidBody',
	        shape: 'btBoxShape',
	        mass: 1,
	        inertia: {
	            x: 0,
	            y: 0,
	            z: 0,
	        }
	    };
	}

	Torus.prototype = Object.create(THREE.Mesh.prototype);
	Torus.prototype.constructor = Torus;

	/**
	 * 纽结
	 * @param {*} geometry 几何体
	 * @param {*} material 材质
	 */
	function TorusKnot(geometry = new THREE.TorusKnotBufferGeometry(2, 0.8, 64, 12, 2, 3), material = new THREE.MeshStandardMaterial()) {
	    THREE.Mesh.call(this, geometry, material);

	    this.name = L_TORUS_KNOT;
	    this.castShadow = true;
	    this.receiveShadow = true;

	    this.userData.physics = this.userData.physics || {
	        enabled: false,
	        type: 'rigidBody',
	        shape: 'btBoxShape',
	        mass: 1,
	        inertia: {
	            x: 0,
	            y: 0,
	            z: 0,
	        }
	    };
	}

	TorusKnot.prototype = Object.create(THREE.Mesh.prototype);
	TorusKnot.prototype.constructor = TorusKnot;

	/**
	 * 茶壶
	 * @param {*} geometry 几何体
	 * @param {*} material 材质
	 */
	function Teapot(geometry = new THREE.TeapotBufferGeometry(3, 10, true, true, true, true, true), material = new THREE.MeshStandardMaterial()) {
	    THREE.Mesh.call(this, geometry, material);

	    // 修改TeapotBufferGeometry类型错误问题，原来是BufferGeometry
	    geometry.type = 'TeapotBufferGeometry';

	    // 修复TeapotBufferGeometry缺少parameters参数问题
	    geometry.parameters = {
	        size: 3,
	        segments: 10,
	        bottom: true,
	        lid: true,
	        body: true,
	        fitLid: true,
	        blinn: true
	    };

	    this.name = L_TEAPOT;
	    this.castShadow = true;
	    this.receiveShadow = true;

	    this.userData.physics = this.userData.physics || {
	        enabled: false,
	        type: 'rigidBody',
	        shape: 'btBoxShape',
	        mass: 1,
	        inertia: {
	            x: 0,
	            y: 0,
	            z: 0,
	        }
	    };
	}

	Teapot.prototype = Object.create(THREE.Mesh.prototype);
	Teapot.prototype.constructor = Teapot;

	var points = [
	    new THREE.Vector2(0, 0),
	    new THREE.Vector2(4, 0),
	    new THREE.Vector2(3.5, 0.5),
	    new THREE.Vector2(1, 0.75),
	    new THREE.Vector2(0.8, 1),
	    new THREE.Vector2(0.8, 4),
	    new THREE.Vector2(1, 4.2),
	    new THREE.Vector2(1.4, 4.8),
	    new THREE.Vector2(2, 5),
	    new THREE.Vector2(2.5, 5.4),
	    new THREE.Vector2(3, 12)
	];

	/**
	 * 酒杯
	 * @param {*} geometry 几何体
	 * @param {*} material 材质
	 */
	function Lathe(geometry = new THREE.LatheBufferGeometry(points, 20, 0, 2 * Math.PI), material = new THREE.MeshStandardMaterial({ side: THREE.DoubleSide })) {
	    THREE.Mesh.call(this, geometry, material);

	    this.name = L_LATHE;
	    this.castShadow = true;
	    this.receiveShadow = true;

	    this.userData.physics = this.userData.physics || {
	        enabled: false,
	        type: 'rigidBody',
	        shape: 'btBoxShape',
	        mass: 1,
	        inertia: {
	            x: 0,
	            y: 0,
	            z: 0,
	        }
	    };
	}

	Lathe.prototype = Object.create(THREE.Mesh.prototype);
	Lathe.prototype.constructor = Lathe;

	/**
	 * 精灵
	 * @param {*} material 材质
	 */
	function Sprite(material = new THREE.SpriteMaterial()) {
	    THREE.Sprite.call(this, material);

	    this.name = L_SPRITE;
	}

	Sprite.prototype = Object.create(THREE.Sprite.prototype);
	Sprite.prototype.constructor = Sprite;

	var link = document.createElement('a');
	link.style.display = 'none';
	document.body.appendChild(link); // Firefox workaround, see #6594

	/**
	 * 将数字凑成2的指数次幂
	 * @author mrdoob / http://mrdoob.com/
	 * @author tengge / https://github.com/tengge1
	 * @param {*} num 数字
	 */
	function makePowOfTwo(num) {
	    var result = 1;
	    while (result < num) {
	        result = result * 2;
	    }
	    return result;
	}

	function save(blob, filename) {
	    link.href = URL.createObjectURL(blob);
	    link.download = filename || 'data.json';
	    link.click();
	    // URL.revokeObjectURL( url ); breaks Firefox...
	}

	/**
	 * 下载字符串文件
	 * @param {*} text 
	 * @param {*} filename 
	 */
	function saveString(text, filename) {
	    save(new Blob([text], { type: 'text/plain' }), filename);
	}

	const StringUtils = {
	    makePowOfTwo: makePowOfTwo,
	    save: save,
	    saveString: saveString
	};

	/**
	 * 文本
	 * @param {*} text 文字
	 */
	function Text$1(text = L_TEXT) {
	    var canvas = document.createElement('canvas');

	    var fontSize = 64;

	    var ctx = canvas.getContext('2d');
	    ctx.font = `${fontSize}px 'Microsoft YaHei'`;

	    var textMetrics = ctx.measureText(text);
	    canvas.width = textMetrics.width;
	    canvas.height = fontSize;
	    ctx.textBaseline = 'hanging';
	    ctx.font = `${fontSize}px 'Microsoft YaHei'`; // 重新设置画布大小，前面设置的ctx属性全部失效

	    ctx.fillStyle = 'rgba(0,0,0,0)';
	    ctx.fillRect(0, 0, canvas.width, canvas.height);
	    ctx.fillStyle = 'rgba(255,255,255,1)';
	    ctx.fillText(text, (canvas.width - textMetrics.width) / 2, 0);

	    var map = new THREE.CanvasTexture(canvas);
	    map.minFilter = THREE.LinearFilter;

	    var geometry = new THREE.PlaneBufferGeometry(canvas.width / 10, canvas.height / 10);
	    var material = new THREE.MeshBasicMaterial({
	        color: 0xffffff,
	        map: map,
	        transparent: true
	    });

	    THREE.Mesh.call(this, geometry, material);

	    this.name = text;
	}

	Text$1.prototype = Object.create(THREE.Mesh.prototype);
	Text$1.prototype.constructor = Text$1;

	Text$1.prototype.updateText = function (text) {
	    this.name = text;

	    var canvas = this.material.map.image;

	    var fontSize = 64;

	    var ctx = canvas.getContext('2d');
	    ctx.font = `${fontSize}px 'Microsoft YaHei'`;

	    var textMetrics = ctx.measureText(text);
	    canvas.width = textMetrics.width;
	    canvas.height = fontSize;
	    ctx.textBaseline = 'hanging';
	    ctx.font = `${fontSize}px 'Microsoft YaHei'`; // 重新设置画布大小，前面设置的ctx属性全部失效

	    ctx.fillStyle = 'rgba(0,0,0,0)';
	    ctx.fillRect(0, 0, canvas.width, canvas.height);
	    ctx.fillStyle = 'rgba(255,255,255,1)';
	    ctx.fillText(text, (canvas.width - textMetrics.width) / 2, 0);

	    this.material.map.needsUpdate = true;
	};

	var ID$9 = -1;

	/**
	 * 帮助器基类
	 * @author tengge / https://github.com/tengge1
	 * @param {*} app 
	 */
	function BaseHelper(app) {
	    this.app = app;
	    this.id = `${this.constructor.name}${ID$9--}`;
	}

	/**
	 * 帮助器开始运行
	 * @description 因为start是在`appStarted`事件中运行的，所以无法监听到`appStart`和`appStarted`事件
	 */
	BaseHelper.prototype.start = function () {

	};

	/**
	 * 帮助器结束运行
	 */
	BaseHelper.prototype.stop = function () {

	};

	/**
	 * 曲线帮助器基类
	 * @author tengge / https://github.com/tengge1
	 * @param {*} app 
	 */
	function SplineHelper(app) {
	    BaseHelper.call(this, app);
	    this.box = [];
	}

	SplineHelper.prototype = Object.create(BaseHelper.prototype);
	SplineHelper.prototype.constructor = SplineHelper;

	SplineHelper.prototype.start = function () {
	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	SplineHelper.prototype.stop = function () {
	    this.app.on(`objectSelected.${this.id}`, null);
	    this.app.on(`objectChanged.${this.id}`, null);
	};

	SplineHelper.prototype.onObjectSelected = function (object) {
	    if (object === null) {
	        this.onCancelSelectLine();
	    } else if (object.userData && (
	        object.userData.type === 'LineCurve' ||
	        object.userData.type === 'CatmullRomCurve' ||
	        object.userData.type === 'QuadraticBezierCurve' ||
	        object.userData.type === 'CubicBezierCurve'
	    )) {
	        this.onSelectLine(object);
	    }
	};

	SplineHelper.prototype.onObjectChanged = function (obj) {
	    if (this.box.length === 0) {
	        return;
	    }

	    var scene = this.app.editor.sceneHelpers;
	    var line = this.box[0].userData.object;

	    if (obj === line) { // 修改了线
	        line.userData.points.forEach((n, i) => {
	            if (this.box[i]) {
	                this.box[i].position.copy(line.position).add(n);
	            } else {
	                var mesh = new THREE.Mesh(this.box[0].geometry, this.box[0].material);

	                mesh.position.copy(line.position).add(n);

	                Object.assign(mesh.userData, {
	                    type: 'helper',
	                    object: line
	                });

	                scene.add(mesh);
	                this.box.push(mesh);
	            }
	        });

	        if (this.box.length > line.userData.points.length) {
	            this.box.splice(
	                line.userData.points.length,
	                this.box.length - line.userData.points.length
	            ).forEach(n => {
	                delete n.object;
	                scene.remove(n);
	            });
	        }
	    } else if (obj.userData && obj.userData.type === 'helper') { // 修改了帮助器
	        var object = obj.userData.object;

	        var index = this.box.indexOf(obj);

	        if (index > -1) {
	            object.userData.points[index].copy(object.position).multiplyScalar(-1).add(obj.position);
	            object.update();
	        }
	    }
	};

	SplineHelper.prototype.onSelectLine = function (object) {
	    var scene = this.app.editor.sceneHelpers;

	    this.onCancelSelectLine();

	    var geometry = new THREE.BoxBufferGeometry(0.4, 0.4, 0.4);
	    var material = new THREE.MeshBasicMaterial({
	        color: 0xff0000
	    });

	    object.userData.points.forEach(n => {
	        var mesh = new THREE.Mesh(geometry, material);

	        mesh.position.copy(object.position).add(n);

	        Object.assign(mesh.userData, {
	            type: 'helper',
	            object: object
	        });

	        scene.add(mesh);
	        this.box.push(mesh);
	    });
	};

	SplineHelper.prototype.onCancelSelectLine = function () {
	    var scene = this.app.editor.sceneHelpers;

	    this.box.forEach(n => {
	        scene.remove(n);
	        delete n.userData.object;
	    });

	    this.box.length = 0;
	};

	/**
	 * 几何体菜单
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function GeometryMenu(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}

	GeometryMenu.prototype = Object.create(UI$1.Control.prototype);
	GeometryMenu.prototype.constructor = GeometryMenu;

	GeometryMenu.prototype.render = function () {
	    var container = UI$1.create({
	        xtype: 'div',
	        parent: this.parent,
	        cls: 'menu',
	        children: [{
	            xtype: 'div',
	            cls: 'title',
	            html: L_GEOMETRY
	        }, {
	            xtype: 'div',
	            cls: 'options',
	            children: [{
	                xtype: 'div',
	                html: L_GROUP,
	                cls: 'option',
	                onClick: this.addGroup.bind(this)
	            }, {
	                xtype: 'hr'
	            }, {
	                xtype: 'div',
	                html: L_PLANE,
	                cls: 'option',
	                onClick: this.addPlane.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_BOX,
	                cls: 'option',
	                onClick: this.addBox.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_CIRCLE,
	                cls: 'option',
	                onClick: this.addCircle.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_CYLINDER,
	                cls: 'option',
	                onClick: this.addCylinder.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_SPHERE,
	                cls: 'option',
	                onClick: this.addSphere.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_ICOSAHEDRON,
	                cls: 'option',
	                onClick: this.addIcosahedron.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_TORUS,
	                cls: 'option',
	                onClick: this.addTorus.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_TORUS_KNOT,
	                cls: 'option',
	                onClick: this.addTorusKnot.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_TEAPOT,
	                cls: 'option',
	                onClick: this.addTeaport.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_LATHE,
	                cls: 'option',
	                onClick: this.addLathe.bind(this)
	            }, {
	                xtype: 'div',
	                id: 'mAddSprite',
	                html: L_SPRITE,
	                cls: 'option',
	                onClick: this.addSprite.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_TEXT,
	                cls: 'option',
	                onClick: this.addText.bind(this)
	            }, {
	                xtype: 'hr'
	            }, {
	                xtype: 'div',
	                html: L_LINE_CURVE,
	                cls: 'option',
	                onClick: this.addLineCurve.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_CATMULL_ROM_CURVE,
	                cls: 'option',
	                onClick: this.addCatmullRomCurve.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_QUADRATIC_BEZIER_CURVE,
	                cls: 'option',
	                onClick: this.addQuadraticBezierCurve.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_CUBIC_BEZIER_CURVE,
	                cls: 'option',
	                onClick: this.addCubicBezierCurve.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_ELLIPSE_CURVE,
	                cls: 'option',
	                onClick: this.addEllipseCurve.bind(this)
	            }]
	        }]
	    });

	    container.render();
	};

	// ------------------------- 组 ---------------------------------

	GeometryMenu.prototype.addGroup = function () {
	    this.app.editor.execute(new AddObjectCommand(new Group()));
	};

	// ------------------------- 平板 -------------------------------

	GeometryMenu.prototype.addPlane = function () {
	    this.app.editor.execute(new AddObjectCommand(new Plane()));
	};

	// ------------------------ 正方体 -----------------------------

	GeometryMenu.prototype.addBox = function () {
	    this.app.editor.execute(new AddObjectCommand(new Box()));
	};

	// ------------------------ 圆 ----------------------------------

	GeometryMenu.prototype.addCircle = function () {
	    this.app.editor.execute(new AddObjectCommand(new Circle()));
	};

	// ------------------------圆柱体 -------------------------------

	GeometryMenu.prototype.addCylinder = function () {
	    this.app.editor.execute(new AddObjectCommand(new Cylinder()));
	};

	// ------------------------ 球体 -------------------------------

	GeometryMenu.prototype.addSphere = function () {
	    this.app.editor.execute(new AddObjectCommand(new Sphere()));
	};

	// ----------------------- 二十面体 -----------------------------

	GeometryMenu.prototype.addIcosahedron = function () {
	    this.app.editor.execute(new AddObjectCommand(new Icosahedron()));
	};

	// ----------------------- 轮胎 ---------------------------------

	GeometryMenu.prototype.addTorus = function () {
	    this.app.editor.execute(new AddObjectCommand(new Torus()));
	};

	// ----------------------- 纽结 ---------------------------------

	GeometryMenu.prototype.addTorusKnot = function () {
	    this.app.editor.execute(new AddObjectCommand(new TorusKnot()));
	};

	// ---------------------- 茶壶 ----------------------------------

	GeometryMenu.prototype.addTeaport = function () {
	    this.app.editor.execute(new AddObjectCommand(new Teapot()));
	};

	// ---------------------- 酒杯 ----------------------------------

	GeometryMenu.prototype.addLathe = function () {
	    this.app.editor.execute(new AddObjectCommand(new Lathe()));
	};

	// ---------------------- 精灵 -----------------------------------

	GeometryMenu.prototype.addSprite = function () {
	    this.app.editor.execute(new AddObjectCommand(new Sprite()));
	};

	// ---------------------- 文本 ----------------------------------

	GeometryMenu.prototype.addText = function () {
	    UI$1.prompt(L_PLEASE_INPUT, null, L_SOME_WORDS, (event, value) => {
	        this.app.editor.execute(new AddObjectCommand(new Text$1(value)));
	    });
	};

	// ---------------------- 线段 ----------------------------------

	GeometryMenu.prototype.addLineCurve = function () {
	    var line = new LineCurve();
	    this.app.editor.execute(new AddObjectCommand(line));
	};

	// ---------------------- CatmullRom曲线 ----------------------------------

	GeometryMenu.prototype.addCatmullRomCurve = function () {
	    var line = new CatmullRomCurve();
	    this.app.editor.execute(new AddObjectCommand(line));
	};

	// ----------------------- 二次贝塞尔曲线 ---------------------------------

	GeometryMenu.prototype.addQuadraticBezierCurve = function () {
	    var line = new QuadraticBezierCurve();
	    this.app.editor.execute(new AddObjectCommand(line));
	};

	// ----------------------- 三次贝塞尔曲线 ---------------------------------

	GeometryMenu.prototype.addCubicBezierCurve = function () {
	    var line = new CubicBezierCurve();
	    this.app.editor.execute(new AddObjectCommand(line));
	};

	// --------------------- 椭圆曲线 ------------------------------------------

	GeometryMenu.prototype.addEllipseCurve = function () {
	    var line = new EllipseCurve();
	    this.app.editor.execute(new AddObjectCommand(line));
	};

	/**
	 * 点光源
	 */
	function PointLight(color, intensity, distance, decay) {
	    THREE.PointLight.call(this, color, intensity, distance, decay);

	    // var geometry = new THREE.SphereBufferGeometry(0.2, 16, 8);
	    // var material = new THREE.MeshBasicMaterial({
	    //     color: color
	    // });
	    // var mesh = new THREE.Mesh(geometry, material);

	    // // 帮助器
	    // mesh.name = L_HELP;
	    // mesh.userData.type = 'helper';

	    // this.add(mesh);

	    // // 光晕
	    // var textureLoader = new THREE.TextureLoader();
	    // var textureFlare0 = textureLoader.load('assets/textures/lensflare/lensflare0.png');
	    // var textureFlare3 = textureLoader.load('assets/textures/lensflare/lensflare3.png');

	    // // 光晕
	    // var lensflare = new THREE.Lensflare();
	    // lensflare.addElement(new THREE.LensflareElement(textureFlare0, 40, 0.01, new THREE.Color(color)));
	    // lensflare.addElement(new THREE.LensflareElement(textureFlare3, 60, 0.2));
	    // lensflare.addElement(new THREE.LensflareElement(textureFlare3, 35, 0.4));
	    // lensflare.addElement(new THREE.LensflareElement(textureFlare3, 60, 0.6));
	    // lensflare.addElement(new THREE.LensflareElement(textureFlare3, 45, 0.8));

	    // lensflare.name = L_HALO;
	    // lensflare.userData.type = 'lensflare';

	    // this.add(lensflare);
	}

	PointLight.prototype = Object.create(THREE.PointLight.prototype);
	PointLight.prototype.constructor = PointLight;

	/**
	 * 半球光
	 * @param {*} skyColor 
	 * @param {*} groundColor 
	 * @param {*} intensity 
	 */
	function HemisphereLight(skyColor, groundColor, intensity) {
	    THREE.HemisphereLight.call(this, skyColor, groundColor, intensity);

	    // var uniforms = {
	    //     topColor: { value: new THREE.Color(skyColor) },
	    //     bottomColor: { value: new THREE.Color(groundColor) },
	    //     offset: { value: 33 },
	    //     exponent: { value: 0.6 }
	    // };

	    // var skyGeo = new THREE.SphereBufferGeometry(4000, 32, 15);
	    // var skyMat = new THREE.ShaderMaterial({
	    //     vertexShader: vertexShader,
	    //     fragmentShader: fragmentShader,
	    //     uniforms: uniforms,
	    //     side: THREE.BackSide
	    // });

	    // var sky = new THREE.Mesh(skyGeo, skyMat);
	    // sky.name = L_SKY;
	    // sky.userData.type = 'sky';

	    // this.add(sky);
	}

	HemisphereLight.prototype = Object.create(THREE.HemisphereLight.prototype);
	HemisphereLight.prototype.constructor = HemisphereLight;

	/**
	 * 点光源
	 */
	function RectAreaLight(color, intensity, width, height) {
	    THREE.RectAreaLight.call(this, color, intensity, width, height);

	    // // 正面
	    // var rectLightMesh = new THREE.Mesh(new THREE.PlaneBufferGeometry(), new THREE.MeshBasicMaterial());
	    // rectLightMesh.scale.x = width;
	    // rectLightMesh.scale.y = height;

	    // rectLightMesh.name = L_FrontSide;
	    // rectLightMesh.userData.type = 'frontSide';

	    // this.add(rectLightMesh);

	    // var rectLightMeshBack = new THREE.Mesh(new THREE.PlaneBufferGeometry(), new THREE.MeshBasicMaterial({ color: 0x080808 }));
	    // rectLightMeshBack.scale.x = width;
	    // rectLightMeshBack.scale.y = height;
	    // rectLightMeshBack.rotation.y = Math.PI;

	    // rectLightMesh.name = L_BackSide;
	    // rectLightMesh.userData.type = 'backSide';

	    // this.add(rectLightMeshBack);
	}

	RectAreaLight.prototype = Object.create(THREE.RectAreaLight.prototype);
	RectAreaLight.prototype.constructor = RectAreaLight;

	/**
	 * 光源菜单
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function LightMenu(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}

	LightMenu.prototype = Object.create(UI$1.Control.prototype);
	LightMenu.prototype.constructor = LightMenu;

	LightMenu.prototype.render = function () {
	    var container = UI$1.create({
	        xtype: 'div',
	        parent: this.parent,
	        cls: 'menu',
	        children: [{
	            xtype: 'div',
	            cls: 'title',
	            html: L_LIGHT
	        }, {
	            xtype: 'div',
	            cls: 'options',
	            children: [{
	                xtype: 'div',
	                html: L_AMBIENT_LIGHT,
	                cls: 'option',
	                onClick: this.addAmbientLight.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_DIRECTIONAL_LIGHT,
	                cls: 'option',
	                onClick: this.addDirectionalLight.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_POINT_LIGHT,
	                cls: 'option',
	                onClick: this.addPointLight.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_SPOT_LIGHT,
	                cls: 'option',
	                onClick: this.addSpotLight.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_HEMISPHERE_LIGHT,
	                cls: 'option',
	                onClick: this.addHemisphereLight.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_RECT_AREA_LIGHT,
	                cls: 'option',
	                onClick: this.addRectAreaLight.bind(this)
	            }]
	        }]
	    });

	    container.render();
	};

	// ------------------------- 环境光 ------------------------------

	LightMenu.prototype.addAmbientLight = function () {
	    var editor = this.app.editor;

	    var color = 0xaaaaaa;

	    var light = new THREE.AmbientLight(color);
	    light.name = L_AMBIENT_LIGHT;

	    editor.execute(new AddObjectCommand(light));
	};

	// ------------------------- 平行光 ------------------------------

	LightMenu.prototype.addDirectionalLight = function () {
	    var editor = this.app.editor;

	    var color = 0xffffff;
	    var intensity = 1;

	    var light = new THREE.DirectionalLight(color, intensity);
	    light.name = L_DIRECTIONAL_LIGHT;
	    light.castShadow = true;
	    light.shadow.mapSize.x = 2048;
	    light.shadow.mapSize.y = 2048;
	    light.shadow.camera.left = -100;
	    light.shadow.camera.right = 100;
	    light.shadow.camera.top = 100;
	    light.shadow.camera.bottom = -100;
	    light.position.set(5, 10, 7.5);

	    editor.execute(new AddObjectCommand(light));
	};

	// ------------------------- 点光源 ------------------------------

	LightMenu.prototype.addPointLight = function () {
	    var editor = this.app.editor;

	    var color = 0xffffff;
	    var intensity = 1;
	    var distance = 0;

	    var light = new PointLight(color, intensity, distance);
	    light.name = L_POINT_LIGHT;
	    light.position.y = 5;
	    light.castShadow = true;

	    editor.execute(new AddObjectCommand(light));
	};

	// ------------------------- 聚光灯 ------------------------------

	LightMenu.prototype.addSpotLight = function () {
	    var editor = this.app.editor;

	    var color = 0xffffff;
	    var intensity = 1;
	    var distance = 0;
	    var angle = Math.PI * 0.1;
	    var penumbra = 0;

	    var light = new THREE.SpotLight(color, intensity, distance, angle, penumbra);

	    light.name = L_SPOT_LIGHT;
	    light.castShadow = true;

	    light.position.set(5, 10, 7.5);

	    editor.execute(new AddObjectCommand(light));
	};

	// ------------------------- 半球光 ------------------------------

	LightMenu.prototype.addHemisphereLight = function () {
	    var editor = this.app.editor;
	    var skyColor = 0x00aaff;
	    var groundColor = 0xffaa00;
	    var intensity = 1;

	    var light = new HemisphereLight(skyColor, groundColor, intensity);
	    light.name = L_HEMISPHERE_LIGHT;

	    light.position.set(0, 10, 0);

	    editor.execute(new AddObjectCommand(light));
	};

	// ------------------------- 矩形光 ------------------------------

	LightMenu.prototype.addRectAreaLight = function () {
	    var editor = this.app.editor;

	    var color = 0xffffff;
	    var intensity = 1;
	    var width = 20;
	    var height = 10;

	    var light = new RectAreaLight(color, intensity, width, height);
	    light.name = L_RECT_AREA_LIGHT;

	    light.position.set(0, 6, 0);

	    editor.execute(new AddObjectCommand(light));
	};

	/**
	 * 资源菜单
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function AssetMenu(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}

	AssetMenu.prototype = Object.create(UI$1.Control.prototype);
	AssetMenu.prototype.constructor = AssetMenu;

	AssetMenu.prototype.render = function () {
	    var container = UI$1.create({
	        xtype: 'div',
	        parent: this.parent,
	        cls: 'menu',
	        children: [{
	            xtype: 'div',
	            cls: 'title',
	            html: L_ASSETS
	        }, {
	            xtype: 'div',
	            cls: 'options',
	            children: [{
	                xtype: 'div',
	                html: L_EXPORT_GEOMETRY,
	                cls: 'option',
	                onClick: this.onExportGeometry.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_EXPORT_OBJECT,
	                cls: 'option',
	                onClick: this.onExportObject.bind(this)
	            }, {
	                xtype: 'hr'
	            }, {
	                xtype: 'div',
	                html: L_EXPORT_GLTF,
	                cls: 'option',
	                onClick: this.onExportGLTF.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_EXPORT_OBJ,
	                cls: 'option',
	                onClick: this.onExportOBJ.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_EXPORT_PLY,
	                cls: 'option',
	                onClick: this.onExportPLY.bind(this)
	            }, {
	                xtype: 'div',
	                id: 'mExportSTLB',
	                html: L_EXPORT_STL_BINARY,
	                cls: 'option',
	                onClick: this.onExportSTLB.bind(this)
	            }, {
	                xtype: 'div',
	                id: 'mExportSTL',
	                html: L_EXPORT_STL,
	                cls: 'option',
	                onClick: this.onExportSTL.bind(this)
	            }]
	        }]
	    });

	    container.render();
	};

	// ------------------------------- 导出几何体 ----------------------------------------

	AssetMenu.prototype.onExportGeometry = function () {
	    var editor = this.app.editor;

	    var object = editor.selected;

	    if (object === null) {
	        UI$1.msg(L_PLEASE_SELECT_OBJECT);
	        return;
	    }

	    var geometry = object.geometry;

	    if (geometry === undefined) {
	        UI$1.msg(L_OBJECT_SELECTED_IS_NOT_GEOMETRY);
	        return;
	    }

	    var output = geometry.toJSON();

	    try {
	        output = JSON.stringify(output, parseNumber, '\t');
	        output = output.replace(/[\n\t]+([\d\.e\-\[\]]+)/g, '$1');
	    } catch (e) {
	        output = JSON.stringify(output);
	    }

	    StringUtils.saveString(output, 'geometry.json');
	};

	// ------------------------------- 导出物体 ------------------------------------------

	AssetMenu.prototype.onExportObject = function () {
	    var editor = this.app.editor;

	    var object = editor.selected;

	    if (object === null) {
	        UI$1.msg(L_PLEASE_SELECT_OBJECT);
	        return;
	    }

	    var output = object.toJSON();

	    try {
	        output = JSON.stringify(output, parseNumber, '\t');
	        output = output.replace(/[\n\t]+([\d\.e\-\[\]]+)/g, '$1');
	    } catch (e) {
	        output = JSON.stringify(output);
	    }

	    StringUtils.saveString(output, 'model.json');
	};

	// ------------------------------ 导出gltf文件 ----------------------------------------

	AssetMenu.prototype.onExportGLTF = function () {
	    this.app.require('GLTFExporter').then(() => {
	        var exporter = new THREE.GLTFExporter();

	        exporter.parse(app.editor.scene, function (result) {
	            StringUtils.saveString(JSON.stringify(result), 'model.gltf');
	        });
	    });
	};

	// ------------------------------ 导出obj文件 -----------------------------------------

	AssetMenu.prototype.onExportOBJ = function () {
	    var editor = this.app.editor;

	    var object = editor.selected;

	    if (object === null) {
	        UI$1.msg(L_PLEASE_SELECT_OBJECT);
	        return;
	    }

	    this.app.require('OBJExporter').then(() => {
	        var exporter = new THREE.OBJExporter();
	        StringUtils.saveString(exporter.parse(object), 'model.obj');
	    });
	};

	// ------------------------------- 导出ply文件 ----------------------------------------

	AssetMenu.prototype.onExportPLY = function () {
	    var editor = this.app.editor;

	    var object = editor.selected;

	    if (object === null) {
	        UI$1.msg(L_PLEASE_SELECT_OBJECT);
	        return;
	    }

	    this.app.require('PLYExporter').then(() => {
	        var exporter = new THREE.PLYExporter();
	        StringUtils.saveString(exporter.parse(object, {
	            excludeAttributes: ['normal', 'uv', 'color', 'index']
	        }), 'model.ply');
	    });
	};

	// ------------------------------- 导出stl二进制文件 -----------------------------------

	AssetMenu.prototype.onExportSTLB = function () {
	    var editor = this.app.editor;

	    this.app.require('STLBinaryExporter').then(() => {
	        var exporter = new THREE.STLBinaryExporter();
	        StringUtils.saveString(exporter.parse(editor.scene), 'model.stl');
	    });
	};

	// ------------------------------- 导出stl文件 -----------------------------------------

	AssetMenu.prototype.onExportSTL = function () {
	    var editor = this.app.editor;

	    this.app.require('STLExporter').then(() => {
	        var exporter = new THREE.STLExporter();
	        StringUtils.saveString(exporter.parse(editor.scene), 'model.stl');
	    });
	};

	var HeightVertexShader = "varying vec2 vUv;\r\nuniform vec2 scale;\r\nuniform vec2 offset;\r\n\r\nvoid main( void ) {\r\n    vUv = uv * scale + offset;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n}";

	var HeightFragmentShader = "//\r\n// Description : Array and textureless GLSL 3D simplex noise function.\r\n//      Author : Ian McEwan, Ashima Arts.\r\n//  Maintainer : ijm\r\n//     Lastmod : 20110409 (stegu)\r\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\r\n//               Distributed under the MIT License. See LICENSE file.\r\n//\r\nuniform float time;\r\nvarying vec2 vUv;\r\n\r\nvec4 permute( vec4 x ) {\r\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\r\n}\r\n\r\nvec4 taylorInvSqrt( vec4 r ) {\r\n\treturn 1.79284291400159 - 0.85373472095314 * r;\r\n}\r\n\r\nfloat snoise( vec3 v ) {\r\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\r\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\r\n\t// First corner\r\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\r\n\tvec3 x0 = v - i + dot( i, C.xxx );\r\n\t// Other corners\r\n\tvec3 g = step( x0.yzx, x0.xyz );\r\n\tvec3 l = 1.0 - g;\r\n\tvec3 i1 = min( g.xyz, l.zxy );\r\n\tvec3 i2 = max( g.xyz, l.zxy );\r\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\r\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\r\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\r\n\t// Permutations\r\n\ti = mod( i, 289.0 );\r\n\tvec4 p = permute( permute( permute(\r\n\t\t\t i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\r\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\r\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\r\n\t// Gradients\r\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\r\n\tfloat n_ = 1.0 / 7.0; // N=7\r\n\tvec3 ns = n_ * D.wyz - D.xzx;\r\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\r\n\tvec4 x_ = floor( j * ns.z );\r\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\r\n\tvec4 x = x_ *ns.x + ns.yyyy;\r\n\tvec4 y = y_ *ns.x + ns.yyyy;\r\n\tvec4 h = 1.0 - abs( x ) - abs( y );\r\n\tvec4 b0 = vec4( x.xy, y.xy );\r\n\tvec4 b1 = vec4( x.zw, y.zw );\r\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\r\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\r\n\tvec4 sh = -step( h, vec4( 0.0 ) );\r\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\r\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\r\n\tvec3 p0 = vec3( a0.xy, h.x );\r\n\tvec3 p1 = vec3( a0.zw, h.y );\r\n\tvec3 p2 = vec3( a1.xy, h.z );\r\n\tvec3 p3 = vec3( a1.zw, h.w );\r\n\t// Normalise gradients\r\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\r\n\tp0 *= norm.x;\r\n\tp1 *= norm.y;\r\n\tp2 *= norm.z;\r\n\tp3 *= norm.w;\r\n\t// Mix final noise value\r\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\r\n\tm = m * m;\r\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\r\n\t\t\t\t\t\t\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\r\n}\r\n\r\nfloat surface3( vec3 coord ) {\r\n\tfloat n = 0.0;\r\n\tn += 1.0 * abs( snoise( coord ) );\r\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\r\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\r\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\r\n\treturn n;\r\n}\r\n\r\nvoid main( void ) {\r\n\tvec3 coord = vec3( vUv, -time );\r\n\tfloat n = surface3( coord );\r\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\r\n}";

	/**
	 * 着色器地形
	 * @param {*} renderer 渲染器
	 * @param {*} options 参数
	 */
	function ShaderTerrain(renderer, options) {
	    var width = options.width || window.innerWidth; // 画布宽度
	    var height = options.height || window.innerHeight; // 画布高度

	    // 地形参数
	    var rx = 256, ry = 256, // 分辨率
	        animDelta = 0, // 动画间隔
	        animDeltaDir = -1, // 动画方向
	        lightDir = 1; // 光源方向

	    // 场景
	    var scene = new THREE.Scene();

	    // 相机
	    var camera = new THREE.OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, -10000, 10000);
	    camera.position.z = 100;
	    scene.add(camera);

	    // 高程贴图
	    var heightMap = new THREE.WebGLRenderTarget(rx, ry, {
	        minFilter: THREE.LinearFilter,
	        magFilter: THREE.LinearFilter,
	        format: THREE.RGBFormat
	    });
	    heightMap.texture.generateMipmaps = false;

	    // 法线贴图
	    var normalMap = new THREE.WebGLRenderTarget(rx, ry, {
	        minFilter: THREE.LinearFilter,
	        magFilter: THREE.LinearFilter,
	        format: THREE.RGBFormat
	    });
	    normalMap.texture.generateMipmaps = false;

	    // 高光贴图
	    var specularMap = new THREE.WebGLRenderTarget(2048, 2048, {
	        minFilter: THREE.LinearFilter,
	        magFilter: THREE.LinearFilter,
	        format: THREE.RGBFormat
	    });
	    specularMap.texture.generateMipmaps = false;

	    // 下载纹理
	    var loadingManager = new THREE.LoadingManager(() => {
	        this.visible = true;
	    });

	    var textureLoader = new THREE.TextureLoader(loadingManager);

	    var diffuseTexture1 = textureLoader.load("assets/textures/terrain/grasslight-big.jpg"); // 漫反射纹理1
	    var diffuseTexture2 = textureLoader.load("assets/textures/terrain/backgrounddetailed6.jpg"); // 漫反射纹理2
	    var detailTexture = textureLoader.load("assets/textures/terrain/grasslight-big-nm.jpg"); // 细节纹理

	    diffuseTexture1.wrapS = diffuseTexture1.wrapT = THREE.RepeatWrapping;
	    diffuseTexture2.wrapS = diffuseTexture2.wrapT = THREE.RepeatWrapping;
	    detailTexture.wrapS = detailTexture.wrapT = THREE.RepeatWrapping;

	    // 创建高程材质
	    var heightUniforms = {
	        time: { value: 1.0 },
	        scale: { value: new THREE.Vector2(1.5, 1.5) },
	        offset: { value: new THREE.Vector2(0, 0) }
	    };

	    var hightMaterial = this.createShaderMaterial(HeightVertexShader, HeightFragmentShader, heightUniforms, false);

	    // 创建法线材质
	    var normalUniforms = THREE.UniformsUtils.clone(THREE.NormalMapShader.uniforms);
	    normalUniforms.height.value = 0.05;
	    normalUniforms.resolution.value.set(rx, ry);
	    normalUniforms.heightMap.value = heightMap.texture;

	    var normalMaterial = this.createShaderMaterial(THREE.NormalMapShader.vertexShader, THREE.NormalMapShader.fragmentShader, normalUniforms, false);

	    // 创建地形材质
	    var terrainShader = THREE.ShaderTerrain["terrain"];

	    var terrainUniforms = THREE.UniformsUtils.clone(terrainShader.uniforms);

	    terrainUniforms['tDisplacement'].value = heightMap.texture; // 位移贴图
	    terrainUniforms['uDisplacementScale'].value = 375; // 位移贴图缩放

	    terrainUniforms['tNormal'].value = normalMap.texture; // 法线贴图
	    terrainUniforms['uNormalScale'].value = 3.5; // 法线贴图缩放

	    terrainUniforms['specular'].value.setHex(0xffffff); // 高光颜色
	    terrainUniforms['diffuse'].value.setHex(0xffffff); // 漫反射颜色
	    terrainUniforms['shininess'].value = 30; // 光泽

	    terrainUniforms['tSpecular'].value = specularMap.texture; // 高光贴图
	    terrainUniforms['enableSpecular'].value = true; // 是否启用高光贴图

	    terrainUniforms['tDiffuse1'].value = diffuseTexture1; // 漫反射纹理1
	    terrainUniforms['enableDiffuse1'].value = true; // 是否启用漫反射纹理1

	    terrainUniforms['tDiffuse2'].value = diffuseTexture2; // 漫反射纹理2
	    terrainUniforms['enableDiffuse2'].value = true; // 是否启用漫反射纹理2

	    terrainUniforms['tDetail'].value = detailTexture; // 细节纹理
	    terrainUniforms['uRepeatOverlay'].value.set(6, 6); // 重复叠加次数

	    var terrainMaterial = this.createShaderMaterial(terrainShader.vertexShader, terrainShader.fragmentShader, terrainUniforms, true);

	    // 贴图生成渲染目标
	    var quadTarget = new THREE.Mesh(new THREE.PlaneBufferGeometry(width, height), new THREE.MeshBasicMaterial({ color: 0x000000 }));
	    quadTarget.position.z = -500;
	    scene.add(quadTarget);

	    // 创建网格
	    var geometry = new THREE.PlaneBufferGeometry(6000, 6000, 256, 256);
	    THREE.BufferGeometryUtils.computeTangents(geometry);

	    THREE.Mesh.call(this, geometry, terrainMaterial);

	    this.name = L_TERRAIN;
	    this.position.set(0, -30, 0);
	    this.rotation.x = -Math.PI / 2;
	    this.scale.set(0.1, 0.1, 0.1);

	    // 动画函数
	    function update(deltaTime) {
	        if (!this.visible) {
	            return;
	        }

	        var fLow = 0.1,
	            fHigh = 0.8;

	        var lightVal = THREE.Math.clamp(lightVal + 0.5 * deltaTime * lightDir, fLow, fHigh);
	        var valNorm = (lightVal - fLow) / (fHigh - fLow);

	        terrainUniforms['uNormalScale'].value = THREE.Math.mapLinear(valNorm, 0, 1, 0.6, 3.5);

	        animDelta = THREE.Math.clamp(animDelta + 0.00075 * animDeltaDir, 0, 0.05);
	        heightUniforms['time'].value += deltaTime * animDelta;
	        heightUniforms['offset'].value.x += deltaTime * 0.05;

	        // 生成高程贴图
	        quadTarget.material = hightMaterial;
	        renderer.render(scene, camera, heightMap, true);

	        // 生成法线贴图
	        quadTarget.material = normalMaterial;
	        renderer.render(scene, camera, normalMap, true);
	    }
	    this.update = update.bind(this);
	}

	ShaderTerrain.prototype = Object.create(THREE.Mesh.prototype);
	ShaderTerrain.prototype.constructor = ShaderTerrain;

	/**
	 * 创建着色器材质
	 * @param {*} vertexShader 顶点着色器
	 * @param {*} fragmentShader 片源着色器
	 * @param {*} uniforms 变量
	 * @param {*} lights 是否使用光源
	 */
	ShaderTerrain.prototype.createShaderMaterial = function (vertexShader, fragmentShader, uniforms, lights) {
	    return new THREE.ShaderMaterial({
	        vertexShader: vertexShader,
	        fragmentShader: fragmentShader,
	        uniforms: uniforms,
	        lights: lights,
	        fog: true
	    });
	};

	/**
	 * 物理地形
	 */
	function PhysicsTerrain() {
	    // 灰阶高度参数
	    var terrainWidthExtents = 100; // 地形宽度范围
	    var terrainDepthExtents = 100; // 地形深度范围
	    var terrainWidth = 128; // 地形宽度
	    var terrainDepth = 128; // 地形深度
	    var terrainMinHeight = -2;
	    var terrainMaxHeight = 8;

	    // 创建几何体
	    var geometry = new THREE.PlaneBufferGeometry(terrainWidthExtents, terrainDepthExtents, terrainWidth - 1, terrainDepth - 1);
	    geometry.rotateX(-Math.PI / 2);

	    var vertices = geometry.attributes.position.array;

	    var heightData = this.generateHeight(terrainWidth, terrainDepth, terrainMinHeight, terrainMaxHeight);

	    for (var i = 0, j = 0, l = vertices.length; i < l; i++ , j += 3) {
	        // j + 1 because it is the y component that we modify
	        vertices[j + 1] = heightData[i];
	    }

	    geometry.computeVertexNormals();

	    // 创建材质
	    var material = new THREE.MeshPhongMaterial({
	        color: 0xC7C7C7
	    });

	    // 创建网格
	    THREE.Mesh.call(this, geometry, material);

	    this.name = L_TERRAIN;
	    this.castShadow = true;
	    this.receiveShadow = true;

	    // 下载贴图
	    var loader = new THREE.TextureLoader();
	    loader.load(`assets/textures/grid.png`, texture => {
	        texture.wrapS = THREE.RepeatWrapping;
	        texture.wrapT = THREE.RepeatWrapping;
	        texture.repeat.set(terrainWidth - 1, terrainDepth - 1);
	        material.map = texture;
	        material.needsUpdate = true;
	    });

	    // 物理
	    var mass = 0;
	    var position = this.position;
	    var quaternion = this.quaternion;

	    var transform = new Ammo.btTransform();
	    transform.setIdentity();
	    transform.setOrigin(new Ammo.btVector3(position.x, position.y, position.z));
	    transform.setRotation(new Ammo.btQuaternion(quaternion.x, quaternion.y, quaternion.z, quaternion.w));
	    var state = new Ammo.btDefaultMotionState(transform);

	    var shape = this.createTerrainShape(terrainWidth, terrainDepth, terrainWidthExtents, terrainDepthExtents, heightData, terrainMinHeight, terrainMaxHeight);

	    var localInertia = new Ammo.btVector3(0, 0, 0);

	    var body = new Ammo.btRigidBody(new Ammo.btRigidBodyConstructionInfo(mass, state, shape, localInertia));

	    this.userData.physicsBody = body;
	}

	PhysicsTerrain.prototype = Object.create(THREE.Mesh.prototype);
	PhysicsTerrain.prototype.constructor = PhysicsTerrain;

	/**
	 * 生成高程数据（正弦曲线）
	 * @param {*} width 
	 * @param {*} depth 
	 * @param {*} minHeight 
	 * @param {*} maxHeight 
	 */
	PhysicsTerrain.prototype.generateHeight = function (width, depth, minHeight, maxHeight) {
	    var size = width * depth;
	    var data = new Float32Array(size);
	    var hRange = maxHeight - minHeight;
	    var w2 = width / 2;
	    var d2 = depth / 2;
	    var phaseMult = 12;
	    var p = 0;
	    for (var j = 0; j < depth; j++) {
	        for (var i = 0; i < width; i++) {
	            var radius = Math.sqrt(Math.pow((i - w2) / w2, 2.0) + Math.pow((j - d2) / d2, 2.0));
	            var height = (Math.sin(radius * phaseMult) + 1) * 0.5 * hRange + minHeight;
	            data[p] = height;
	            p++;
	        }
	    }
	    return data;
	};

	/**
	 * 创建物理地形形状
	 * @param {*} terrainWidth 
	 * @param {*} terrainDepth 
	 * @param {*} terrainWidthExtents 
	 * @param {*} terrainDepthExtents 
	 * @param {*} heightData 
	 * @param {*} terrainMinHeight 
	 * @param {*} terrainMaxHeight 
	 */
	PhysicsTerrain.prototype.createTerrainShape = function (terrainWidth, terrainDepth, terrainWidthExtents, terrainDepthExtents, heightData, terrainMinHeight, terrainMaxHeight) {
	    // 此参数并未真正使用，因为我们使用的是PHY_FLOAT高度数据类型，因此会被忽略。
	    var heightScale = 1;
	    // 向上轴 0表示X，1表示Y，2表示Z。通常使用1=Y。
	    var upAxis = 1;
	    // hdt，高度数据类型。 使用“PHY_FLOAT”。 可能的值为“PHY_FLOAT”，“PHY_UCHAR”，“PHY_SHORT”。
	    var hdt = "PHY_FLOAT";
	    // 根据您的需要设置（反转三角形）。
	    var flipQuadEdges = false;
	    // 在Ammo堆中创建高度数据缓冲区。
	    var ammoHeightData = Ammo._malloc(4 * terrainWidth * terrainDepth);
	    // 将javascript高度数据数组复制到Ammo。
	    var p = 0;
	    var p2 = 0;
	    var dh = (terrainMinHeight + terrainMaxHeight) / 2;
	    for (var j = 0; j < terrainDepth; j++) {
	        for (var i = 0; i < terrainWidth; i++) {
	            // 将32位浮点数写入内存。
	            Ammo.HEAPF32[ammoHeightData + p2 >> 2] = heightData[p] + dh;
	            p++;
	            // 4个字节/浮点数
	            p2 += 4;
	        }
	    }
	    // 创建高度场物理形状
	    var heightFieldShape = new Ammo.btHeightfieldTerrainShape(
	        terrainWidth,
	        terrainDepth,
	        ammoHeightData,
	        heightScale,
	        terrainMinHeight,
	        terrainMaxHeight,
	        upAxis,
	        hdt,
	        flipQuadEdges
	    );
	    // 设置水平缩放
	    var scaleX = terrainWidthExtents / (terrainWidth - 1);
	    var scaleZ = terrainDepthExtents / (terrainDepth - 1);
	    heightFieldShape.setLocalScaling(new Ammo.btVector3(scaleX, 1, scaleZ));
	    heightFieldShape.setMargin(0.05);
	    return heightFieldShape;
	};

	PhysicsTerrain.prototype.update = function (deltaTime, physicsWorld) {
	    physicsWorld.stepSimulation(deltaTime, 10);

	    var body = this.userData.physics.body;
	    var state = body.getMotionState();

	    if (state) {
	        var transformAux1 = new Ammo.btTransform();

	        state.getWorldTransform(transformAux1);
	        var p = transformAux1.getOrigin();
	        var q = transformAux1.getRotation();
	        this.position.set(p.x(), p.y(), p.z());
	        this.quaternion.set(q.x(), q.y(), q.z(), q.w());
	    }
	};

	/**
	 * 地形菜单
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function TerrainMenu(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}

	TerrainMenu.prototype = Object.create(UI$1.Control.prototype);
	TerrainMenu.prototype.constructor = TerrainMenu;

	TerrainMenu.prototype.render = function () {
	    var container = UI$1.create({
	        xtype: 'div',
	        parent: this.parent,
	        cls: 'menu',
	        children: [{
	            xtype: 'div',
	            cls: 'title',
	            html: L_TERRAIN
	        }, {
	            xtype: 'div',
	            cls: 'options',
	            children: [{
	                xtype: 'div',
	                cls: 'option',
	                html: L_PERLIN_TERRAIN,
	                onClick: this.createPerlinTerrain.bind(this)
	            }, {
	                xtype: 'div',
	                cls: 'option inactive',
	                html: L_SHADER_TERRAIN,
	                onClick: this.createShaderTerrain.bind(this)
	            }, {
	                xtype: 'div',
	                cls: 'option inactive',
	                html: L_RAISE_TERRAIN,
	                onClick: this.raiseTerrain.bind(this)
	            }, {
	                xtype: 'div',
	                cls: 'option inactive',
	                html: L_REDUCE_TERRAIN,
	                onClick: this.reduceTerrain.bind(this)
	            }, {
	                xtype: 'div',
	                cls: 'option inactive',
	                html: L_PLANT_TREES,
	                onClick: this.plantTrees.bind(this)
	            }]
	        }]
	    });

	    container.render();
	};

	// ---------------------------- 创建地形 -----------------------------------

	TerrainMenu.prototype.createPerlinTerrain = function () {
	    this.app.editor.execute(new AddObjectCommand(new PerlinTerrain()));
	};

	// ---------------------------- 创建着色器地形 ----------------------------------------

	TerrainMenu.prototype.createShaderTerrain = function () {
	    var dom = this.app.viewport.container.dom;

	    var terrain = new ShaderTerrain(this.app.editor.renderer, dom.clientWidth, dom.clientHeight);

	    this.app.editor.execute(new AddObjectCommand(terrain));

	    terrain.update(0);

	    // this.app.on(`animate.Terrain2`, (clock, deltaTime) => {
	    //     terrain.update(deltaTime);
	    // });
	};

	// ---------------------------- 升高地形 -----------------------------------

	TerrainMenu.prototype.raiseTerrain = function () {

	};

	// ---------------------------- 降低地形 ------------------------------------

	TerrainMenu.prototype.reduceTerrain = function () {

	};

	// ----------------------------- 批量种树 --------------------------------------

	TerrainMenu.prototype.plantTrees = function () {

	};

	/**
	 * 组件菜单
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function ComponentMenu(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}

	ComponentMenu.prototype = Object.create(UI$1.Control.prototype);
	ComponentMenu.prototype.constructor = ComponentMenu;

	ComponentMenu.prototype.render = function () {
	    var container = UI$1.create({
	        xtype: 'div',
	        parent: this.parent,
	        cls: 'menu',
	        children: [{
	            xtype: 'div',
	            cls: 'title',
	            html: L_COMPONENT
	        }, {
	            xtype: 'div',
	            cls: 'options',
	            children: [{
	                xtype: 'div',
	                html: L_BACKGROUND_MUSIC,
	                cls: 'option',
	                onClick: this.onAddBackgroundMusic.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_PARTICLE_EMITTER,
	                cls: 'option',
	                onClick: this.ParticleEmitter.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_SKY,
	                cls: 'option',
	                onClick: this.onAddSky.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_FIRE,
	                cls: 'option',
	                onClick: this.onAddFire.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_WATER,
	                cls: 'option',
	                onClick: this.onAddWater.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_SMOKE,
	                cls: 'option',
	                onClick: this.onAddSmoke.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_CLOTH,
	                cls: 'option',
	                onClick: this.onAddCloth.bind(this)
	            }]
	        }]
	    });

	    container.render();
	};

	// ---------------------------- 添加背景音乐 ----------------------------------

	ComponentMenu.prototype.onAddBackgroundMusic = function () {
	    var editor = this.app.editor;
	    var listener = editor.audioListener;

	    var audio = new THREE.Audio(listener);
	    audio.name = L_BACKGROUND_MUSIC;
	    audio.autoplay = false;
	    audio.setLoop(true);
	    audio.setVolume(1.0);

	    audio.userData.autoplay = true;

	    this.app.editor.execute(new AddObjectCommand(audio));
	};

	// ---------------------------- 添加粒子发射器 --------------------------------------------

	ComponentMenu.prototype.ParticleEmitter = function () {
	    var emitter = new ParticleEmitter();
	    this.app.editor.execute(new AddObjectCommand(emitter));
	    emitter.userData.group.tick(0);
	};

	// ---------------------------- 天空 ----------------------------------------

	ComponentMenu.prototype.onAddSky = function () {
	    var obj = new Sky();
	    obj.name = L_SKY;
	    obj.userData.type = 'Sky';
	    this.app.editor.execute(new AddObjectCommand(obj));
	};

	// ---------------------------- 添加火焰 -------------------------------------

	ComponentMenu.prototype.onAddFire = function () {
	    var editor = this.app.editor;

	    var fire = new Fire(editor.camera);

	    editor.execute(new AddObjectCommand(fire));

	    fire.userData.fire.update(0);
	};

	// -------------------------- 添加水 ---------------------------------------

	ComponentMenu.prototype.onAddWater = function () {
	    var editor = this.app.editor;

	    var water = new Water(editor.renderer);

	    editor.execute(new AddObjectCommand(water));

	    water.update();
	};

	// ------------------------------ 添加烟 ------------------------------------

	ComponentMenu.prototype.onAddSmoke = function () {
	    var editor = this.app.editor;
	    var camera = editor.camera;
	    var renderer = editor.renderer;

	    var smoke = new Smoke(camera, renderer);

	    smoke.position.y = 3;

	    editor.execute(new AddObjectCommand(smoke));

	    smoke.update(0);
	};

	// ----------------------------- 添加布 ------------------------------------

	ComponentMenu.prototype.onAddCloth = function () {
	    var editor = this.app.editor;

	    var cloth = new Cloth();

	    cloth.name = L_CLOTH;

	    editor.execute(new AddObjectCommand(cloth));
	};

	/**
	 * 启动菜单
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function PlayMenu(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	    this.isPlaying = false;
	}

	PlayMenu.prototype = Object.create(UI$1.Control.prototype);
	PlayMenu.prototype.constructor = PlayMenu;

	PlayMenu.prototype.render = function () {
	    var container = UI$1.create({
	        xtype: 'div',
	        parent: this.parent,
	        cls: 'menu',
	        children: [{
	            xtype: 'div',
	            cls: 'title',
	            html: L_PLAY
	        }, {
	            xtype: 'div',
	            cls: 'options',
	            children: [{
	                xtype: 'div',
	                id: 'mPlay',
	                scope: this.id,
	                cls: 'option',
	                html: L_PLAY,
	                onClick: this.onTogglePlay.bind(this),
	            }, {
	                xtype: 'div',
	                cls: 'option',
	                html: L_PLAY_FULLSCREEN,
	                onClick: this.playFullscreen.bind(this),
	            }, {
	                xtype: 'div',
	                cls: 'option',
	                html: L_PLAY_NEW_WINDOW,
	                onClick: this.playNewWindow.bind(this),
	            }]
	        }]
	    });

	    container.render();
	};

	PlayMenu.prototype.onTogglePlay = function () {
	    if (this.isPlaying) {
	        this.stopPlay();
	    } else {
	        this.startPlay();
	    }
	};

	PlayMenu.prototype.startPlay = function () { // 启动播放
	    if (this.isPlaying) {
	        return;
	    }

	    this.isPlaying = true;

	    var play = UI$1.get('mPlay', this.id);
	    play.dom.innerHTML = L_STOP;

	    // 将场景数据转换为字符串
	    var jsons = (new Converter()).toJSON({
	        options: this.app.options,
	        scene: this.app.editor.scene,
	        camera: this.app.editor.camera,
	        renderer: this.app.editor.renderer,
	        scripts: this.app.editor.scripts,
	        animations: this.app.editor.animations,
	    });

	    this.app.player.start(JSON.stringify(jsons));
	};

	PlayMenu.prototype.stopPlay = function () { // 停止播放
	    if (!this.isPlaying) {
	        return;
	    }

	    this.isPlaying = false;

	    var play = UI$1.get('mPlay', this.id);
	    play.dom.innerHTML = L_PLAY;

	    this.app.player.stop();
	};

	PlayMenu.prototype.playFullscreen = function () { // 全屏播放
	    if (!this.isPlaying) {
	        this.startPlay();
	    }

	    UI$1.get('player', this.app.player.id).dom.requestFullscreen();
	};

	PlayMenu.prototype.playNewWindow = function () { // 新窗口播放
	    var sceneID = this.app.editor.sceneID;

	    if (!sceneID) {
	        UI$1.msg('请先保存场景！');
	        return;
	    }

	    window.open(`view.html?sceneID=${sceneID}`, 'ShadowPlayer');
	};

	/**
	 * 工具菜单
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function ToolMenu(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}

	ToolMenu.prototype = Object.create(UI$1.Control.prototype);
	ToolMenu.prototype.constructor = ToolMenu;

	ToolMenu.prototype.render = function () {
	    var container = UI$1.create({
	        xtype: 'div',
	        parent: this.parent,
	        cls: 'menu',
	        children: [{
	            xtype: 'div',
	            cls: 'title',
	            html: L_TOOL
	        }, {
	            xtype: 'div',
	            cls: 'options',
	            children: [{
	                xtype: 'div',
	                html: L_ARRANGE_MAP,
	                cls: 'option',
	                onClick: this.onArrangeMap.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_ARRANGE_MESH,
	                cls: 'option',
	                onClick: this.onArrangeMesh.bind(this)
	            }, {
	                xtype: 'div',
	                html: L_ARRANGE_THUMBNAIL,
	                cls: 'option',
	                onClick: this.onArrangeThumbnail.bind(this)
	            }, {
	                xtype: 'hr'
	            }, {
	                xtype: 'div',
	                html: L_EXPORT_EDITOR,
	                cls: 'option',
	                onClick: this.onExportEditor.bind(this)
	            }]
	        }]
	    });

	    container.render();
	};

	ToolMenu.prototype.onArrangeMap = function () {
	    UI$1.confirm('询问', '整理贴图会去除名称后的数字和下划线，重新生成数据表和贴图目录，移除空文件夹和未引用贴图文件，系统会自动备份数据表和贴图目录，是否整理？', (event, btn) => {
	        if (btn === 'ok') {
	            fetch(`${this.app.options.server}/api/ArrangeMap/Run`, {
	                method: 'POST'
	            }).then(response => {
	                if (response.ok) {
	                    response.json().then(json => {
	                        UI$1.msg(json.Msg);
	                    });
	                }
	            });
	        }
	    });
	};

	ToolMenu.prototype.onArrangeMesh = function () {
	    UI$1.confirm('询问', '整理模型会去除名称后的数字和下划线，重新生成数据表、模型目录，移除空文件夹和未引用模型文件，系统会自动备份数据表、模型目录，是否整理？', (event, btn) => {
	        if (btn === 'ok') {
	            fetch(`${this.app.options.server}/api/ArrangeMesh/Run`, {
	                method: 'POST'
	            }).then(response => {
	                if (response.ok) {
	                    response.json().then(json => {
	                        UI$1.msg(json.Msg);
	                    });
	                }
	            });
	        }
	    });
	};

	ToolMenu.prototype.onArrangeThumbnail = function () {
	    UI$1.confirm('询问', '整理缩略图会重新生成缩略图目录，修改场景、模型、贴图、材质、音频、动画、粒子、预设体、人物的缩略图路径，请先手动备份数据库，是否整理？', (event, btn) => {
	        if (btn === 'ok') {
	            fetch(`${this.app.options.server}/api/ArrangeThumbnail/Run`, {
	                method: 'POST'
	            }).then(response => {
	                if (response.ok) {
	                    response.json().then(json => {
	                        UI$1.msg(json.Msg);
	                    });
	                }
	            });
	        }
	    });
	};

	ToolMenu.prototype.onExportEditor = function () {
	    UI$1.confirm('询问', '是否导出编辑器？', (event, btn) => {
	        if (btn === 'ok') {
	            fetch(`${this.app.options.server}/api/ExportEditor/Run`, {
	                method: 'POST'
	            }).then(response => {
	                if (response.ok) {
	                    response.json().then(json => {
	                        UI$1.msg(json.Msg);
	                        window.open(`${this.app.options.server}${json.Url}`, 'export');
	                    });
	                }
	            });
	        }
	    });
	};

	/**
	 * 外观选项窗口
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function SurfacePanel(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}

	SurfacePanel.prototype = Object.create(UI$1.Control.prototype);
	SurfacePanel.prototype.constructor = SurfacePanel;

	SurfacePanel.prototype.render = function () {
	    UI$1.create({
	        xtype: 'div',
	        id: 'panel',
	        scope: this.id,
	        parent: this.parent,
	        style: this.style,
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_THEME
	            }, {
	                xtype: 'select',
	                id: 'theme',
	                scope: this.id,
	                options: {
	                    'assets/css/light.css': L_LIGHT_COLOR,
	                    'assets/css/dark.css': L_DARK_COLOR
	                },
	                style: {
	                    width: '150px'
	                },
	                onChange: this.save.bind(this)
	            }]
	        }]
	    }).render();

	    this.dom = UI$1.get('panel', this.id).dom;
	};

	SurfacePanel.prototype.update = function () {
	    var theme = UI$1.get('theme', this.id);

	    if (!this.app.storage.get('theme')) {
	        this.app.storage.set('theme', 'assets/css/light.css');
	    }

	    theme.setValue(this.app.storage.get('theme'));
	};

	SurfacePanel.prototype.save = function () {
	    var theme = UI$1.get('theme', this.id).getValue();
	    this.app.storage.set('theme', theme);
	    document.getElementById('theme').href = theme;
	};

	/**
	 * 渲染器选项窗口
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function RendererPanel(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}

	RendererPanel.prototype = Object.create(UI$1.Control.prototype);
	RendererPanel.prototype.constructor = RendererPanel;

	RendererPanel.prototype.render = function () {
	    UI$1.create({
	        xtype: 'div',
	        id: 'panel',
	        scope: this.id,
	        parent: this.parent,
	        style: this.style,
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_SHADOW
	            }, {
	                xtype: 'select',
	                id: 'shadowMapType',
	                scope: this.id,
	                options: {
	                    [-1]: L_DISABLED,
	                    [THREE.BasicShadowMap]: L_BASIC_SHADOW, // 0
	                    [THREE.PCFShadowMap]: L_PCF_SHADOW, // 1
	                    [THREE.PCFSoftShadowMap]: L_PCF_SOFT_SHADOW // 2
	                },
	                onChange: this.save.bind(this),
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_GAMMA_INPUT
	            }, {
	                xtype: 'boolean',
	                id: 'gammaInput',
	                scope: this.id,
	                onChange: this.save.bind(this),
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_GAMMA_OUTPUT
	            }, {
	                xtype: 'boolean',
	                id: 'gammaOutput',
	                scope: this.id,
	                onChange: this.save.bind(this),
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_GAMMA_FACTOR
	            }, {
	                xtype: 'number',
	                id: 'gammaFactor',
	                scope: this.id,
	                onChange: this.save.bind(this),
	            }]
	        }]
	    }).render();

	    this.dom = UI$1.get('panel', this.id).dom;
	};

	RendererPanel.prototype.update = function () {
	    var shadowMapType = UI$1.get('shadowMapType', this.id);
	    var gammaInput = UI$1.get('gammaInput', this.id);
	    var gammaOutput = UI$1.get('gammaOutput', this.id);
	    var gammaFactor = UI$1.get('gammaFactor', this.id);

	    var renderer = this.app.editor.renderer;

	    if (renderer.shadowMap.enabled) {
	        shadowMapType.setValue(renderer.shadowMap.type);
	    } else {
	        shadowMapType.setValue(-1);
	    }

	    gammaInput.setValue(renderer.gammaInput);
	    gammaOutput.setValue(renderer.gammaOutput);
	    gammaFactor.setValue(renderer.gammaFactor);
	};

	RendererPanel.prototype.save = function () {
	    var shadowMapType = parseInt(UI$1.get('shadowMapType', this.id).getValue());
	    var gammaInput = UI$1.get('gammaInput', this.id).getValue();
	    var gammaOutput = UI$1.get('gammaOutput', this.id).getValue();
	    var gammaFactor = UI$1.get('gammaFactor', this.id).getValue();

	    var renderer = this.app.editor.renderer;

	    if (shadowMapType === -1) {
	        renderer.shadowMap.enabled = false;
	    } else {
	        renderer.shadowMap.enabled = true;
	        renderer.shadowMap.type = shadowMapType;
	    }
	    renderer.gammaInput = gammaInput;
	    renderer.gammaOutput = gammaOutput;
	    renderer.gammaFactor = gammaFactor;

	    renderer.dispose();

	    Object.assign(this.app.options, {
	        shadowMapType,
	        gammaInput,
	        gammaOutput,
	        gammaFactor
	    });
	};

	/**
	 * 帮助选项窗口
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function HelperPanel(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}

	HelperPanel.prototype = Object.create(UI$1.Control.prototype);
	HelperPanel.prototype.constructor = HelperPanel;

	HelperPanel.prototype.render = function () {
	    UI$1.create({
	        xtype: 'div',
	        id: 'panel',
	        scope: this.id,
	        parent: this.parent,
	        style: this.style,
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_GRID
	            }, {
	                xtype: 'boolean',
	                id: 'showGrid',
	                scope: this.id,
	                onChange: this.save.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_CAMERA
	            }, {
	                xtype: 'boolean',
	                id: 'showCamera',
	                scope: this.id,
	                onChange: this.save.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_POINT_LIGHT
	            }, {
	                xtype: 'boolean',
	                id: 'showPointLight',
	                scope: this.id,
	                onChange: this.save.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_DIRECTIONAL_LIGHT
	            }, {
	                xtype: 'boolean',
	                id: 'showDirectionalLight',
	                scope: this.id,
	                onChange: this.save.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_SPOT_LIGHT
	            }, {
	                xtype: 'boolean',
	                id: 'showSpotLight',
	                scope: this.id,
	                onChange: this.save.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_HEMISPHERE_LIGHT
	            }, {
	                xtype: 'boolean',
	                id: 'showHemisphereLight',
	                scope: this.id,
	                onChange: this.save.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_RECT_AREA_LIGHT
	            }, {
	                xtype: 'boolean',
	                id: 'showRectAreaLight',
	                scope: this.id,
	                onChange: this.save.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_SKELETON
	            }, {
	                xtype: 'boolean',
	                id: 'showSkeleton',
	                scope: this.id,
	                onChange: this.save.bind(this)
	            }]
	        }]
	    }).render();

	    this.dom = UI$1.get('panel', this.id).dom;
	};

	HelperPanel.prototype.update = function () {
	    var showGrid = UI$1.get('showGrid', this.id);
	    showGrid.setValue(this.app.storage.get('showGrid') === true);

	    var showCamera = UI$1.get('showCamera', this.id);
	    showCamera.setValue(this.app.storage.get('showCamera') === true);

	    var showPointLight = UI$1.get('showPointLight', this.id);
	    showPointLight.setValue(this.app.storage.get('showPointLight') === true);

	    var showDirectionalLight = UI$1.get('showDirectionalLight', this.id);
	    showDirectionalLight.setValue(this.app.storage.get('showDirectionalLight') === true);

	    var showSpotLight = UI$1.get('showSpotLight', this.id);
	    showSpotLight.setValue(this.app.storage.get('showSpotLight') === true);

	    var showHemisphereLight = UI$1.get('showHemisphereLight', this.id);
	    showHemisphereLight.setValue(this.app.storage.get('showHemisphereLight') === true);

	    var showRectAreaLight = UI$1.get('showRectAreaLight', this.id);
	    showRectAreaLight.setValue(this.app.storage.get('showRectAreaLight') === true);

	    var showSkeleton = UI$1.get('showSkeleton', this.id);
	    showSkeleton.setValue(this.app.storage.get('showSkeleton') === true);
	};

	HelperPanel.prototype.save = function () {
	    var showGrid = UI$1.get('showGrid', this.id).getValue();
	    if (showGrid !== this.app.storage.get('showGrid')) {
	        this.app.storage.set('showGrid', showGrid);
	        this.app.call(`storageChanged`, this, 'showGrid', showGrid);
	    }

	    var showCamera = UI$1.get('showCamera', this.id).getValue();
	    if (showCamera !== this.app.storage.get('showCamera')) {
	        this.app.storage.set('showCamera', showCamera);
	        this.app.call(`storageChanged`, this, 'showCamera', showCamera);
	    }

	    var showPointLight = UI$1.get('showPointLight', this.id).getValue();
	    if (showPointLight !== this.app.storage.get('showPointLight')) {
	        this.app.storage.set('showPointLight', showPointLight);
	        this.app.call(`storageChanged`, this, 'showPointLight', showPointLight);
	    }

	    var showDirectionalLight = UI$1.get('showDirectionalLight', this.id).getValue();
	    if (showDirectionalLight !== this.app.storage.get('showDirectionalLight')) {
	        this.app.storage.set('showDirectionalLight', showDirectionalLight);
	        this.app.call(`storageChanged`, this, 'showDirectionalLight', showDirectionalLight);
	    }

	    var showSpotLight = UI$1.get('showSpotLight', this.id).getValue();
	    if (showSpotLight !== this.app.storage.get('showSpotLight')) {
	        this.app.storage.set('showSpotLight', showSpotLight);
	        this.app.call(`storageChanged`, this, 'showSpotLight', showSpotLight);
	    }

	    var showHemisphereLight = UI$1.get('showHemisphereLight', this.id).getValue();
	    if (showHemisphereLight !== this.app.storage.get('showHemisphereLight')) {
	        this.app.storage.set('showHemisphereLight', showHemisphereLight);
	        this.app.call(`storageChanged`, this, 'showHemisphereLight', showHemisphereLight);
	    }

	    var showRectAreaLight = UI$1.get('showRectAreaLight', this.id).getValue();
	    if (showRectAreaLight !== this.app.storage.get('showRectAreaLight')) {
	        this.app.storage.set('showRectAreaLight', showRectAreaLight);
	        this.app.call(`storageChanged`, this, 'showRectAreaLight', showRectAreaLight);
	    }

	    var showSkeleton = UI$1.get('showSkeleton', this.id).getValue();
	    if (showSkeleton !== this.app.storage.get('showSkeleton')) {
	        this.app.storage.set('showSkeleton', showSkeleton);
	        this.app.call(`storageChanged`, this, 'showSkeleton', showSkeleton);
	    }
	};

	/**
	 * 滤镜选项窗口
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function FilterPanel(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}

	FilterPanel.prototype = Object.create(UI$1.Control.prototype);
	FilterPanel.prototype.constructor = FilterPanel;

	FilterPanel.prototype.render = function () {
	    UI$1.create({
	        xtype: 'div',
	        id: 'panel',
	        scope: this.id,
	        parent: this.parent,
	        style: this.style,
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_HUE
	            }, {
	                xtype: 'int',
	                id: 'hue',
	                scope: this.id,
	                range: [0, 360],
	                step: 10,
	                onChange: this.save.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_SATURATE
	            }, {
	                xtype: 'number',
	                id: 'saturate',
	                scope: this.id,
	                range: [0, 4],
	                onChange: this.save.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_BRIGHTNESS
	            }, {
	                xtype: 'number',
	                id: 'brightness',
	                scope: this.id,
	                range: [0, 4],
	                onChange: this.save.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_BLUR
	            }, {
	                xtype: 'number',
	                id: 'blur',
	                scope: this.id,
	                range: [0, 20],
	                step: 1,
	                onChange: this.save.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_CONTRAST
	            }, {
	                xtype: 'number',
	                id: 'contrast',
	                scope: this.id,
	                range: [0, 4],
	                onChange: this.save.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_GRAYSCALE
	            }, {
	                xtype: 'number',
	                id: 'grayscale',
	                scope: this.id,
	                range: [0, 1],
	                onChange: this.save.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_INVERT
	            }, {
	                xtype: 'number',
	                id: 'invert',
	                scope: this.id,
	                range: [0, 1],
	                onChange: this.save.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_SEPIA
	            }, {
	                xtype: 'number',
	                id: 'sepia',
	                scope: this.id,
	                range: [0, 1],
	                onChange: this.save.bind(this)
	            }]
	        }]
	    }).render();

	    this.dom = UI$1.get('panel', this.id).dom;
	};

	FilterPanel.prototype.update = function () {
	    var hue = UI$1.get('hue', this.id);
	    var saturate = UI$1.get('saturate', this.id);
	    var brightness = UI$1.get('brightness', this.id);
	    var blur = UI$1.get('blur', this.id);
	    var contrast = UI$1.get('contrast', this.id);
	    var grayscale = UI$1.get('grayscale', this.id);
	    var invert = UI$1.get('invert', this.id);
	    var sepia = UI$1.get('sepia', this.id);

	    var renderer = this.app.editor.renderer;
	    var filters = CssUtils.parseFilter(renderer.domElement.style.filter);
	    hue.setValue(filters.hueRotate);
	    saturate.setValue(filters.saturate);
	    brightness.setValue(filters.brightness);
	    blur.setValue(filters.blur);
	    contrast.setValue(filters.contrast);
	    grayscale.setValue(filters.grayscale);
	    invert.setValue(filters.invert);
	    sepia.setValue(filters.sepia);
	};

	FilterPanel.prototype.save = function () {
	    var hue = UI$1.get('hue', this.id);
	    var saturate = UI$1.get('saturate', this.id);
	    var brightness = UI$1.get('brightness', this.id);
	    var blur = UI$1.get('blur', this.id);
	    var contrast = UI$1.get('contrast', this.id);
	    var grayscale = UI$1.get('grayscale', this.id);
	    var invert = UI$1.get('invert', this.id);
	    var sepia = UI$1.get('sepia', this.id);

	    var filters = {
	        hueRotate: hue.getValue(),
	        saturate: saturate.getValue(),
	        brightness: brightness.getValue(),
	        blur: blur.getValue(),
	        contrast: contrast.getValue(),
	        grayscale: grayscale.getValue(),
	        invert: invert.getValue(),
	        sepia: sepia.getValue(),
	    };

	    Object.assign(this.app.options, {
	        hueRotate: filters.hueRotate,
	        saturate: filters.saturate,
	        brightness: filters.brightness,
	        blur: filters.blur,
	        contrast: filters.contrast,
	        grayscale: filters.grayscale,
	        invert: filters.invert,
	        sepia: filters.sepia,
	    });

	    var renderer = this.app.editor.renderer;

	    renderer.domElement.style.filter = CssUtils.serializeFilter(filters);
	};

	/**
	 * 选项窗口
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function OptionsWindow(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	    this.tab = L_SURFACE;
	}

	OptionsWindow.prototype = Object.create(UI$1.Control.prototype);
	OptionsWindow.prototype.constructor = OptionsWindow;

	OptionsWindow.prototype.render = function () {
	    this.surfacePanel = new SurfacePanel({
	        app: this.app
	    });
	    this.rendererPanel = new RendererPanel({
	        app: this.app
	    });
	    this.helperPanel = new HelperPanel({
	        app: this.app
	    });
	    this.filterPanel = new FilterPanel({
	        app: this.app
	    });

	    this.window = UI$1.create({
	        xtype: 'window',
	        parent: this.app.container,
	        title: L_OPTIONS_WINDOW,
	        width: '800px',
	        height: '450px',
	        bodyStyle: {
	            padding: 0
	        },
	        shade: false,
	        children: [{
	            xtype: 'div',
	            cls: 'tabs',
	            children: [{
	                xtype: 'text',
	                id: 'surfaceTab',
	                scope: this.id,
	                text: L_SURFACE,
	                cls: 'selected',
	                onClick: () => {
	                    this.changeTab(L_SURFACE);
	                }
	            }, {
	                xtype: 'text',
	                id: 'helperTab',
	                scope: this.id,
	                text: L_HELPERS,
	                onClick: () => {
	                    this.changeTab(L_HELPERS);
	                }
	            }, {
	                xtype: 'text',
	                id: 'rendererTab',
	                scope: this.id,
	                text: L_RENDERER,
	                onClick: () => {
	                    this.changeTab(L_RENDERER);
	                }
	            }, {
	                xtype: 'text',
	                id: 'filterTab',
	                scope: this.id,
	                text: L_FILTER,
	                onClick: () => {
	                    this.changeTab(L_FILTER);
	                }
	            }]
	        },
	        this.surfacePanel,
	        this.helperPanel,
	        this.rendererPanel,
	        this.filterPanel,
	        ]
	    });
	    this.window.render();
	};

	OptionsWindow.prototype.show = function () {
	    this.window.show();
	    this.update();
	};

	OptionsWindow.prototype.hide = function () {
	    this.window.hide();
	};

	OptionsWindow.prototype.changeTab = function (name) {
	    this.tab = name;

	    var surfaceTab = UI$1.get('surfaceTab', this.id);
	    var helperTab = UI$1.get('helperTab', this.id);
	    var rendererTab = UI$1.get('rendererTab', this.id);
	    var filterTab = UI$1.get('filterTab', this.id);

	    surfaceTab.dom.classList.remove('selected');
	    helperTab.dom.classList.remove('selected');
	    rendererTab.dom.classList.remove('selected');
	    filterTab.dom.classList.remove('selected');

	    this.surfacePanel.dom.style.display = 'none';
	    this.helperPanel.dom.style.display = 'none';
	    this.rendererPanel.dom.style.display = 'none';
	    this.filterPanel.dom.style.display = 'none';

	    switch (this.tab) {
	        case L_SURFACE:
	            surfaceTab.dom.classList.add('selected');
	            this.surfacePanel.dom.style.display = '';
	            break;
	        case L_HELPERS:
	            helperTab.dom.classList.add('selected');
	            this.helperPanel.dom.style.display = '';
	            break;
	        case L_RENDERER:
	            rendererTab.dom.classList.add('selected');
	            this.rendererPanel.dom.style.display = '';
	            break;
	        case L_FILTER:
	            filterTab.dom.classList.add('selected');
	            this.filterPanel.dom.style.display = '';
	            break;
	    }

	    this.update();
	};

	OptionsWindow.prototype.update = function () {
	    switch (this.tab) {
	        case L_SURFACE:
	            this.surfacePanel.update();
	            break;
	        case L_HELPERS:
	            this.helperPanel.update();
	            break;
	        case L_RENDERER:
	            this.rendererPanel.update();
	            break;
	        case L_FILTER:
	            this.filterPanel.update();
	            break;
	    }
	};

	/**
	 * 选项菜单
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function OptionsMenu(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}

	OptionsMenu.prototype = Object.create(UI$1.Control.prototype);
	OptionsMenu.prototype.constructor = OptionsMenu;

	OptionsMenu.prototype.render = function () {
	    var container = UI$1.create({
	        xtype: 'div',
	        parent: this.parent,
	        cls: 'menu',
	        children: [{
	            xtype: 'div',
	            cls: 'title',
	            html: L_OPTIONS
	        }, {
	            xtype: 'div',
	            cls: 'options',
	            children: [{
	                xtype: 'div',
	                cls: 'option',
	                html: L_SURFACE,
	                onClick: this.onSurfaceOptions.bind(this)
	            }, {
	                xtype: 'div',
	                cls: 'option',
	                html: L_HELPERS,
	                onClick: this.onHelperOptions.bind(this)
	            }, {
	                xtype: 'hr'
	            }, {
	                xtype: 'div',
	                cls: 'option',
	                html: L_RENDERER,
	                onClick: this.onRendererOptions.bind(this)
	            }, {
	                xtype: 'div',
	                cls: 'option',
	                html: L_FILTER,
	                onClick: this.onFilterOptions.bind(this)
	            }]
	        }]
	    });

	    container.render();
	};

	// ---------------------------------- 外观选项 ---------------------------------------

	OptionsMenu.prototype.onSurfaceOptions = function () {
	    if (this.optionsWindow === undefined) {
	        this.optionsWindow = new OptionsWindow({
	            app: this.app
	        });
	        this.optionsWindow.render();
	    }
	    this.optionsWindow.show();
	    this.optionsWindow.changeTab(L_SURFACE);
	};

	// ---------------------------------- 渲染器选项 -------------------------------------

	OptionsMenu.prototype.onRendererOptions = function () {
	    if (this.optionsWindow === undefined) {
	        this.optionsWindow = new OptionsWindow({
	            app: this.app
	        });
	        this.optionsWindow.render();
	    }
	    this.optionsWindow.show();
	    this.optionsWindow.changeTab(L_RENDERER);
	};

	// ------------------------------- 帮助器选项 -----------------------------------------

	OptionsMenu.prototype.onHelperOptions = function () {
	    if (this.optionsWindow === undefined) {
	        this.optionsWindow = new OptionsWindow({
	            app: this.app
	        });
	        this.optionsWindow.render();
	    }
	    this.optionsWindow.show();
	    this.optionsWindow.changeTab(L_HELPERS);
	};

	// ------------------------------ 滤镜选项 ---------------------------------------------

	OptionsMenu.prototype.onFilterOptions = function () {
	    if (this.optionsWindow === undefined) {
	        this.optionsWindow = new OptionsWindow({
	            app: this.app
	        });
	        this.optionsWindow.render();
	    }
	    this.optionsWindow.show();
	    this.optionsWindow.changeTab(L_FILTER);
	};

	/**
	 * 帮助菜单
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function HelpMenu(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}

	HelpMenu.prototype = Object.create(UI$1.Control.prototype);
	HelpMenu.prototype.constructor = HelpMenu;

	HelpMenu.prototype.render = function () {

	    var container = UI$1.create({
	        xtype: 'div',
	        parent: this.parent,
	        cls: 'menu',
	        children: [{
	            xtype: 'div',
	            cls: 'title',
	            html: L_HELP
	        }, {
	            xtype: 'div',
	            cls: 'options',
	            children: [{
	                xtype: 'div',
	                cls: 'option',
	                html: L_SOURCE,
	                onClick: () => {
	                    window.open('https://github.com/tengge1/ShadowEditor', '_blank');
	                }
	            }, {
	                xtype: 'div',
	                cls: 'option',
	                html: L_EXAMPLES,
	                onClick: () => {
	                    window.open('https://github.com/tengge1/ShadowEditor-examples', '_blank');
	                }
	            }, {
	                xtype: 'div',
	                cls: 'option',
	                html: L_DOCUMENTS,
	                onClick: () => {
	                    window.open('https://tengge1.github.io/ShadowEditor/', '_blank');
	                }
	            }, {
	                xtype: 'div',
	                cls: 'option',
	                html: L_ABOUT,
	                onClick: () => {
	                    UI$1.alert(
	                        L_ABOUT,
	                        `${L_NAME}: ShadowEditor<br />
                        ${L_AUTHOR}: tengge<br />
                        ${L_LISENSE}: MIT<br />
                        ${L_SOURCE}1: https://github.com/tengge1/ShadowEditor<br />
                        ${L_SOURCE}2: https://gitee.com/tengge1/ShadowEditor`
	                    );
	                }
	            }]
	        }]
	    });

	    container.render();
	};

	/**
	 * 测试菜单
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function TestMenu(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}

	TestMenu.prototype = Object.create(UI$1.Control.prototype);
	TestMenu.prototype.constructor = TestMenu;

	TestMenu.prototype.render = function () {
	    var container = UI$1.create({
	        xtype: 'div',
	        parent: this.parent,
	        cls: 'menu',
	        children: [{
	            xtype: 'div',
	            cls: 'title',
	            html: 'Test'
	        }, {
	            xtype: 'div',
	            cls: 'options',
	            children: [{
	                xtype: 'div',
	                cls: 'option',
	                html: 'Hello World',
	                onClick: this.hello.bind(this),
	            }]
	        }]
	    });

	    container.render();
	};

	TestMenu.prototype.showWin = function () {
	    if (this.win === undefined) {
	        this.win = UI$1.create({
	            xtype: 'window',
	            title: 'Data Visualization',
	            id: 'dataVisualWin',
	            scope: this.id,
	            width: '800px',
	            height: '500px',
	            shade: false,
	            containerStyle: {
	                display: 'flex',
	                flexDirection: 'column',
	            },
	            bodyStyle: {
	                padding: 0,
	            },
	            children: [{
	                xtype: 'div',
	                id: 'container',
	                scope: this.id,
	                style: {
	                    width: '100%',
	                    height: '100%',
	                },
	            }]
	        });
	        this.win.render();
	    }

	    this.win.show();
	};

	TestMenu.prototype.clearContent = function () {
	    var container = UI$1.get('container', this.id);

	    while (container.dom.children.length) {
	        container.dom.removeChild(container.dom.children[0]);
	    }
	};

	TestMenu.prototype.hello = function () {
	    this.showWin();
	    this.clearContent();

	    var container = UI$1.get('container', this.id);

	    var svg = d3.select(container.dom)
	        .append('svg')
	        .attr('width', 500)
	        .attr('height', 500);

	    var circle = svg.append('circle')
	        .attr('cx', 100)
	        .attr('cy', 100)
	        .attr('r', 50)
	        .attr('fill', '#f00');
	};

	/**
	 * 状态菜单（菜单栏右侧）
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function StatusMenu(options) {
	    UI$1.Control.call(this, options);
	    options = options || {};

	    this.app = options.app;
	}

	StatusMenu.prototype = Object.create(UI$1.Control.prototype);
	StatusMenu.prototype.constructor = StatusMenu;

	StatusMenu.prototype.render = function () {
	    var lang = window.localStorage.getItem('lang') || 'zh-CN';

	    var container = UI$1.create({
	        xtype: 'div',
	        id: 'mStatus',
	        parent: this.parent,
	        cls: 'menu right',
	        children: [{
	            xtype: 'button',
	            cls: lang === 'en-US' ? 'IconButton selected' : 'IconButton',
	            id: 'btnEnglish',
	            scope: this.id,
	            text: 'English',
	            onClick: () => {
	                this.selectLanguage('en-US');
	            }
	        }, {
	            xtype: 'button',
	            id: 'btnChinese',
	            scope: this.id,
	            text: '中文',
	            cls: lang === 'zh-CN' ? 'IconButton selected' : 'IconButton',
	            style: {
	                padding: '4px 8px'
	            },
	            onClick: () => {
	                this.selectLanguage('zh-CN');
	            }
	        }, {
	            xtype: 'text',
	            text: 'r' + THREE.REVISION,
	            cls: 'title version'
	        }]
	    });

	    container.render();
	};

	StatusMenu.prototype.selectLanguage = function (lang) {
	    var oldLang = window.localStorage.getItem('lang') || 'zh-CN';

	    if (oldLang === lang) {
	        return;
	    }

	    window.localStorage.setItem('lang', lang);

	    var btnEnglish = UI$1.get('btnEnglish', this.id);
	    var btnChinese = UI$1.get('btnChinese', this.id);

	    if (lang === 'en-US') { // English
	        btnEnglish.dom.className = 'IconButton selected';
	        btnChinese.dom.className = 'IconButton';

	        UI$1.confirm('Confirm', 'Language will change to English after reload. Reload now?', (event, btn) => {
	            if (btn === 'ok') {
	                window.location.reload();
	            }
	        });
	    } else { // Chinese
	        btnEnglish.dom.className = 'IconButton';
	        btnChinese.dom.className = 'IconButton selected';

	        UI$1.confirm('确认', '语言将在刷新后切换到中文，是否现在刷新？', (event, btn) => {
	            if (btn === 'ok') {
	                window.location.reload();
	            }
	        });
	    }
	};

	/**
	 * 菜单栏
	 * @author mrdoob / http://mrdoob.com/
	 * @author tengge / https://github.com/tengge1
	 */
	function Menubar(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}
	Menubar.prototype = Object.create(UI$1.Control.prototype);
	Menubar.prototype.constructor = Menubar;

	Menubar.prototype.render = function () {
	    var params = {
	        app: this.app
	    };

	    var container = UI$1.create({
	        xtype: 'div',
	        id: 'menubar',
	        cls: 'menubar',
	        parent: this.parent,
	        children: [
	            // Logo
	            new Logo(params),

	            // 左侧
	            new SceneMenu(params),
	            new EditMenu(params),
	            new GeometryMenu(params),
	            new LightMenu(params),
	            new AssetMenu(params),
	            //new TerrainMenu(params),
	            new ComponentMenu(params),
	            new PlayMenu(params),
	            new ToolMenu(params),
	            new OptionsMenu(params),
	            new HelpMenu(params),
	            new TestMenu(params),

	            // 右侧
	            new StatusMenu(params)
	        ]
	    });

	    container.render();
	};

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 * Port from https://github.com/mapbox/earcut (v2.1.2)
	 */

	var ID$a = -1;

	/**
	 * 工具基类
	 * @author tengge / https://github.com/tengge1
	 */
	function BaseTool(app) {
	    this.app = app;
	    this.id = `${this.constructor.name}${ID$a--}`;

	    this.dispatch = d3.dispatch('end');

	    this.call = this.dispatch.call.bind(this.dispatch);
	    this.on = this.dispatch.on.bind(this.dispatch);
	}

	BaseTool.prototype.start = function () {

	};

	BaseTool.prototype.stop = function () {

	};

	/**
	 * 挖坑工具
	 * @param {*} app 
	 */
	function DigTool(app) {
	    BaseTool.call(this, app);
	    this.points = [];
	}

	DigTool.prototype = Object.create(BaseTool.prototype);
	DigTool.prototype.constructor = DigTool;

	DigTool.prototype.start = function () {
	    this.app.on(`raycast.${this.id}`, this.onRaycast.bind(this));
	    this.app.on(`dblclick.${this.id}`, this.onDblClick.bind(this));
	    this.app.on(`beforeRender.${this.id}`, this.onBeforeRender.bind(this));
	    this.app.on(`afterRender.${this.id}`, this.onAfterRender.bind(this));
	};

	DigTool.prototype.stop = function () {
	    this.app.on(`raycast.${this.id}`, null);
	    this.app.on(`dblclick.${this.id}`, null);
	    this.app.on(`beforeRender.${this.id}`, null);
	    this.app.on(`afterRender.${this.id}`, null);
	};

	DigTool.prototype.onRaycast = function (obj) {
	    this.points.push(obj.point);
	};

	DigTool.prototype.onDblClick = function () {
	    this.call('end');

	    if (this.scene === undefined) {
	        this.scene = new THREE.Scene();
	    }

	    var xys = this.points.map(n => {
	        return {
	            x: n.x,
	            y: n.z,
	        };
	    });

	    // if (!THREE.ShapeUtils.isClockWise(xys)) {
	    //     this.points.reverse();
	    // }

	    var geometry = new THREE.BufferGeometry();

	    var vertices = [];

	    this.points.forEach((n, i) => {
	        vertices.push(n.x, n.y, n.z);
	    });

	    geometry.addAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));

	    var material = new THREE.MeshBasicMaterial();
	    material.polygonOffset = true;
	    material.polygonOffsetFactor = -1;

	    var mesh = new THREE.Mesh(geometry, material);

	    this.scene.add(mesh);

	    this.points.length = 0;
	};

	DigTool.prototype.onBeforeRender = function () {
	    if (!this.scene || this.scene.children.length === 0) {
	        return;
	    }

	    var renderer = this.app.editor.renderer;
	    var context = renderer.context;
	    var state = renderer.state;

	    state.buffers.color.setMask(false);
	    state.buffers.depth.setMask(false);
	    state.buffers.stencil.setMask(0xff);

	    state.buffers.stencil.setTest(true);
	    state.buffers.stencil.setFunc(context.ALWAYS, 1, 0xff);
	    state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.REPLACE);

	    renderer.render(this.scene, this.app.editor.camera);

	    state.buffers.color.setMask(0xff);
	    state.buffers.depth.setMask(0xff);
	    state.buffers.stencil.setMask(0x0);
	    state.buffers.stencil.setFunc(context.NOTEQUAL, 1, 0xff);
	};

	DigTool.prototype.onAfterRender = function () {
	    if (!this.scene || this.scene.children.length === 0) {
	        return;
	    }

	    var renderer = this.app.editor.renderer;
	    var context = renderer.context;
	    var state = renderer.state;

	    state.buffers.stencil.setMask(0xff);
	    state.buffers.stencil.setTest(false);
	    renderer.clearStencil();
	};

	/**
	 * 工具栏
	 * @author tengge / https://github.com/tengge1
	 */
	function Toolbar(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;

	    this.isAddingPoint = false;
	    this.isAddingLine = false;
	    this.isAddingPolygon = false;
	    this.isSpraying = false;
	}
	Toolbar.prototype = Object.create(UI$1.Control.prototype);
	Toolbar.prototype.constructor = Toolbar;

	Toolbar.prototype.render = function () {

	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        cls: 'toolbar',
	        children: [{
	            xtype: 'iconbutton',
	            id: 'selectBtn',
	            scope: this.id,
	            icon: 'icon-select',
	            title: L_SELECT,
	            onClick: this.enterSelectMode.bind(this)
	        }, {
	            xtype: 'iconbutton',
	            id: 'translateBtn',
	            scope: this.id,
	            icon: 'icon-translate',
	            cls: 'Button IconButton selected',
	            title: L_TRANSLATE_W,
	            onClick: this.enterTranslateMode.bind(this)
	        }, {
	            xtype: 'iconbutton',
	            id: 'rotateBtn',
	            scope: this.id,
	            icon: 'icon-rotate',
	            title: L_ROTATE_E,
	            onClick: this.enterRotateMode.bind(this)
	        }, {
	            xtype: 'iconbutton',
	            id: 'scaleBtn',
	            scope: this.id,
	            icon: 'icon-scale',
	            title: L_SCALE_R,
	            onClick: this.enterScaleMode.bind(this)
	        }, {
	            xtype: 'hr'
	        }, {
	            xtype: 'iconbutton',
	            id: 'addPointBtn',
	            scope: this.id,
	            icon: 'icon-point',
	            title: L_DRAW_POINT,
	            onClick: this.onAddPoint.bind(this)
	        }, {
	            xtype: 'iconbutton',
	            id: 'addLineBtn',
	            scope: this.id,
	            icon: 'icon-line',
	            title: L_DRAW_LINE,
	            onClick: this.onAddLine.bind(this)
	        },
	        // {
	        //     xtype: 'iconbutton',
	        //     id: 'addPolygonBtn',
	        //     scope: this.id,
	        //     icon: 'icon-polygon',
	        //     title: L_DRAW_POLYGON,
	        //     onClick: this.onAddPolygon.bind(this)
	        // }, 
	        {
	            xtype: 'iconbutton',
	            id: 'sprayBtn',
	            scope: this.id,
	            icon: 'icon-spray',
	            title: L_SPRAY,
	            onClick: this.onSpray.bind(this)
	        }, {
	            xtype: 'hr'
	        }, {
	            xtype: 'iconbutton',
	            id: 'digBtn',
	            scope: this.id,
	            icon: 'icon-texture',
	            title: '挖洞',
	            onClick: this.onDig.bind(this)
	        }
	        ]
	    };

	    var control = UI$1.create(data);
	    control.render();

	    this.app.on(`changeMode.${this.id}`, this.onChangeMode.bind(this));
	};

	// --------------------------------- 选择模式 -------------------------------------

	Toolbar.prototype.enterSelectMode = function () {
	    this.app.call('changeMode', this, 'select');
	};

	// -------------------------------- 平移模式 --------------------------------------

	Toolbar.prototype.enterTranslateMode = function () {
	    this.app.call('changeMode', this, 'translate');
	};

	// -------------------------------- 旋转模式 ---------------------------------------

	Toolbar.prototype.enterRotateMode = function () {
	    this.app.call('changeMode', this, 'rotate');
	};

	// -------------------------------- 缩放模式 ---------------------------------------

	Toolbar.prototype.enterScaleMode = function () {
	    this.app.call('changeMode', this, 'scale');
	};

	// ------------------------------ 模式改变事件 -------------------------------------

	Toolbar.prototype.onChangeMode = function (mode) {
	    var selectBtn = UI$1.get('selectBtn', this.id);
	    var translateBtn = UI$1.get('translateBtn', this.id);
	    var rotateBtn = UI$1.get('rotateBtn', this.id);
	    var scaleBtn = UI$1.get('scaleBtn', this.id);

	    selectBtn.unselect();
	    translateBtn.unselect();
	    rotateBtn.unselect();
	    scaleBtn.unselect();

	    switch (mode) {
	        case 'select':
	            selectBtn.select();
	            break;
	        case 'translate':
	            translateBtn.select();
	            break;
	        case 'rotate':
	            rotateBtn.select();
	            break;
	        case 'scale':
	            scaleBtn.select();
	            break;
	    }
	};

	// --------------------------------- 画点 ------------------------------------------

	Toolbar.prototype.onAddPoint = function () {
	    this.isAddingPoint = !this.isAddingPoint;

	    var addPointBtn = UI$1.get('addPointBtn', this.id);

	    if (this.isAddingPoint) {
	        addPointBtn.select();
	        this.app.on(`intersect.${this.id}AddPoint`, this.onAddPointIntersect.bind(this));
	    } else {
	        addPointBtn.unselect();
	        this.app.on(`intersect.${this.id}AddPoint`, null);
	    }
	};

	Toolbar.prototype.onAddPointIntersect = function (obj, event) {
	    if (event.button !== 0) {
	        return;
	    }

	    this.onAddPoint();

	    var geometry = new THREE.CircleBufferGeometry(0.4, 32, 0, Math.PI * 2);

	    var material = new THREE.PointsMaterial({
	        color: 0xffffff * Math.random(),
	        polygonOffset: true,
	        polygonOffsetFactor: -40,
	    });

	    var mesh = new THREE.Mesh(geometry, material);

	    mesh.position.copy(obj.point);

	    var normal = obj.face.normal.clone();
	    normal.transformDirection(obj.object.matrixWorld);

	    mesh.lookAt(new THREE.Vector3().addVectors(obj.point, normal));

	    mesh.name = L_POINT;

	    this.app.editor.execute(new AddObjectCommand(mesh));
	};

	// ---------------------------------- 画线 -----------------------------------------

	Toolbar.prototype.onAddLine = function () {
	    if (this.hasLoadLineScript === undefined) {
	        this.hasLoadLineScript = true;
	        this.app.require('line').then(() => {
	            this._onAddLine();
	        });
	    } else {
	        this._onAddLine();
	    }
	};

	Toolbar.prototype._onAddLine = function () {
	    this.isAddingLine = !this.isAddingLine;

	    var addLineBtn = UI$1.get('addLineBtn', this.id);

	    if (this.isAddingLine) {
	        addLineBtn.select();
	        this.app.on(`intersect.${this.id}AddLine`, this.onAddLineIntersect.bind(this));
	        this.app.on(`dblclick.${this.id}AddLine`, this.onAddLineDblClick.bind(this));

	        this.linePositions = [];
	        this.lineColors = [];

	        var geometry = new THREE.LineGeometry();

	        var material = new THREE.LineMaterial({
	            color: 0xffffff,
	            linewidth: 8, // in pixels
	            vertexColors: THREE.VertexColors,
	            dashed: false,
	            polygonOffset: true,
	            polygonOffsetFactor: -40,
	        });

	        var renderer = this.app.editor.renderer;
	        material.resolution.set(renderer.domElement.clientWidth, renderer.domElement.clientHeight);

	        this.line = new THREE.Line2(geometry, material);
	        this.line.name = L_LINE;

	        this.app.editor.execute(new AddObjectCommand(this.line));
	    } else {
	        addLineBtn.unselect();
	        this.app.on(`intersect.${this.id}AddLine`, null);
	        this.app.on(`dblclick.${this.id}AddLine`, null);

	        this.linePositions = null;
	        this.lineColors = null;
	        this.line = null;
	    }
	};

	Toolbar.prototype.onAddLineIntersect = function (obj, event) {
	    if (event.button !== 0) {
	        return;
	    }

	    this.linePositions.push(obj.point.x, obj.point.y, obj.point.z);

	    var color = new THREE.Color(0xffffff * Math.random());
	    this.lineColors.push(color.r, color.g, color.b);

	    if (this.linePositions.length < 6) {
	        return;
	    }

	    var geometry = this.line.geometry;
	    geometry.setPositions(this.linePositions);
	    geometry.setColors(this.lineColors);

	    geometry.maxInstancedCount = this.linePositions.length / 3 - 1;

	    this.line.computeLineDistances();
	};

	Toolbar.prototype.onAddLineDblClick = function (obj) {
	    this.onAddLine();
	};

	// ---------------------------------- 画面 ------------------------------------------

	Toolbar.prototype.onAddPolygon = function () {
	    this.isAddingPolygon = !this.isAddingPolygon;

	    var addPolygonBtn = UI$1.get('addPolygonBtn', this.id);

	    if (this.isAddingPolygon) {
	        addPolygonBtn.select();
	        this.app.on(`intersect.${this.id}AddPolygon`, this.onAddPolygonIntersect.bind(this));
	        this.app.on(`dblclick.${this.id}AddPolygon`, this.onAddPolygonDblClick.bind(this));

	        var geometry = new THREE.BufferGeometry();

	        geometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array(300), 3));
	        geometry.addAttribute('normal', new THREE.BufferAttribute(new Float32Array(300), 3));
	        geometry.addAttribute('uv', new THREE.BufferAttribute(new Float32Array(200), 2));

	        geometry.attributes.position.count = 0;
	        geometry.attributes.normal.count = 0;
	        geometry.attributes.uv.count = 0;

	        var material = new THREE.MeshBasicMaterial({
	            color: 0xffffff * Math.random(),
	            polygonOffset: true,
	            polygonOffsetFactor: -40,
	            side: THREE.DoubleSide,
	        });

	        this.polygon = new THREE.Mesh(geometry, material);

	        this.polygon.name = L_POLYGON;
	        this.polygon.drawMode = THREE.TriangleStripDrawMode;

	        this.app.editor.execute(new AddObjectCommand(this.polygon));

	        this.polygonPoints = [];
	    } else {
	        addPolygonBtn.unselect();
	        this.app.on(`intersect.${this.id}AddPolygon`, null);
	        this.app.on(`dblclick.${this.id}AddPolygon`, null);

	        this.polygon = null;

	        this.polygonPoints = null;
	    }
	};

	Toolbar.prototype.onAddPolygonIntersect = function (obj) {
	    if (event.button !== 0) {
	        return;
	    }

	    this.polygonPoints.push(obj.point);

	    var position = this.polygon.geometry.attributes.position;
	    var normal = this.polygon.geometry.attributes.normal;
	    var uv = this.polygon.geometry.attributes.uv;

	    var index = position.count;

	    position.setXYZ(
	        index,
	        obj.point.x,
	        obj.point.y,
	        obj.point.z,
	    );

	    normal.setXYZ(index, obj.face.normal.x, obj.face.normal.y, obj.face.normal.z);

	    uv.setXY(index, obj.uv.x, obj.uv.y);

	    position.count++;
	    normal.count++;
	    uv.count++;

	    position.needsUpdate = true;
	    normal.needsUpdate = true;
	    uv.needsUpdate = true;
	};

	Toolbar.prototype.onAddPolygonDblClick = function (obj) {
	    this.onAddPolygon();
	};

	// -------------------------------- 贴花工具 ---------------------------------------

	Toolbar.prototype.onSpray = function () {
	    this.isSpraying = !this.isSpraying;

	    var sprayBtn = UI$1.get('sprayBtn', this.id);

	    if (this.isSpraying) {
	        sprayBtn.select();
	        this.app.on(`intersect.${this.id}Spray`, this.onSprayIntersect.bind(this));
	    } else {
	        sprayBtn.unselect();
	        this.app.on(`intersect.${this.id}Spray`, null);
	    }
	};

	Toolbar.prototype.onSprayIntersect = function (obj, event) {
	    if (event.button !== 0) {
	        return;
	    }

	    this.onSpray();

	    var mesh = obj.object;
	    var position = obj.point;

	    if (mesh instanceof THREE.Points) {
	        return;
	    }

	    var normal = obj.face.normal.clone();
	    normal.transformDirection(obj.object.matrixWorld);

	    var mat = new THREE.Matrix4();
	    mat.lookAt(position, new THREE.Vector3().addVectors(position, normal), mesh.up);

	    var orientation = new THREE.Euler();
	    orientation.setFromRotationMatrix(mat);

	    var size = new THREE.Vector3(1, 1, 1).multiplyScalar(10 + Math.random() * 10);

	    if (this.decalMaterial === undefined) {
	        var textureLoader = new THREE.TextureLoader();

	        var decalDiffuse = textureLoader.load('assets/textures/decal/decal-diffuse.png');
	        var decalNormal = textureLoader.load('assets/textures/decal/decal-normal.jpg');

	        this.decalMaterial = new THREE.MeshPhongMaterial({
	            specular: 0x444444,
	            map: decalDiffuse,
	            normalMap: decalNormal,
	            normalScale: new THREE.Vector2(1, 1),
	            shininess: 30,
	            transparent: true,
	            depthTest: true,
	            depthWrite: false,
	            polygonOffset: true,
	            polygonOffsetFactor: -4,
	            wireframe: false
	        });
	    }

	    var material = this.decalMaterial.clone();
	    material.color.setHex(Math.random() * 0xffffff);

	    var decal = new THREE.Mesh(new THREE.DecalGeometry(mesh, position, orientation, size), material);

	    decal.name = L_DECAL;

	    this.app.editor.execute(new AddObjectCommand(decal));
	};

	// ------------------------------- 挖坑工具 -------------------------------------

	Toolbar.prototype.onDig = function () {
	    var digBtn = UI$1.get('digBtn', this.id);
	    digBtn.select();

	    if (this.digTool === undefined) {
	        this.digTool = new DigTool(this.app);
	        this.digTool.on(`end.${this.id}`, () => {
	            digBtn.unselect();
	        });
	    }

	    this.digTool.start();
	};

	/**
	 * 场景编辑区
	 * @author mrdoob / http://mrdoob.com/
	 * @author tengge / https://github.com/tengge1
	 */
	function Viewport(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}
	Viewport.prototype = Object.create(UI$1.Control.prototype);
	Viewport.prototype.constructor = Viewport;

	Viewport.prototype.render = function () {
	    this.container = UI$1.create({
	        xtype: 'div',
	        id: 'viewport',
	        parent: this.parent,
	        cls: 'viewport'
	    });
	    this.container.render();
	};

	/**
	 * 所有组件基类
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function BaseComponent(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}

	BaseComponent.prototype = Object.create(UI$1.Control.prototype);
	BaseComponent.prototype.constructor = BaseComponent;

	BaseComponent.prototype.render = function () {

	};

	/**
	 * 设置值命令
	 * @author dforrer / https://github.com/dforrer
	 * Developed as part of a project at University of Applied Sciences and Arts Northwestern Switzerland (www.fhnw.ch)
	 * @param object THREE.Object3D
	 * @param attributeName string
	 * @param newValue number, string, boolean or object
	 * @constructor
	 */
	function SetValueCommand(object, attributeName, newValue) {
		Command.call(this);

		this.type = 'SetValueCommand';
		this.name = L_SET + ' ' + attributeName;
		this.updatable = true;

		this.object = object;
		this.attributeName = attributeName;
		this.oldValue = (object !== undefined) ? object[attributeName] : undefined;
		this.newValue = newValue;
	}
	SetValueCommand.prototype = Object.create(Command.prototype);

	Object.assign(SetValueCommand.prototype, {
		constructor: SetValueCommand,

		execute: function () {
			this.object[this.attributeName] = this.newValue;
			this.editor.app.call('objectChanged', this, this.object);
		},

		undo: function () {
			this.object[this.attributeName] = this.oldValue;
			this.editor.app.call('objectChanged', this, this.object);
		},

		update: function (cmd) {
			this.newValue = cmd.newValue;
		},

		toJSON: function () {
			var output = Command.prototype.toJSON.call(this);

			output.objectUuid = this.object.uuid;
			output.attributeName = this.attributeName;
			output.oldValue = this.oldValue;
			output.newValue = this.newValue;

			return output;
		},

		fromJSON: function (json) {
			Command.prototype.fromJSON.call(this, json);

			this.attributeName = json.attributeName;
			this.oldValue = json.oldValue;
			this.newValue = json.newValue;
			this.object = this.editor.objectByUuid(json.objectUuid);
		}
	});

	/**
	 * 基本信息组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function BasicComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	BasicComponent.prototype = Object.create(BaseComponent.prototype);
	BasicComponent.prototype.constructor = BasicComponent;

	BasicComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'basicPanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            borderTop: 0,
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold'
	                },
	                text: L_BASIC_INFO
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_NAME
	            }, {
	                xtype: 'input',
	                id: 'name',
	                scope: this.id,
	                style: {
	                    width: '100px',
	                    fontSize: '12px'
	                },
	                onChange: this.onChangeName.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_TYPE
	            }, {
	                xtype: 'text',
	                id: 'type',
	                scope: this.id
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_VISIBLE
	            }, {
	                xtype: 'checkbox',
	                id: 'visible',
	                scope: this.id,
	                onChange: this.onChangeVisible.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	BasicComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	BasicComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	BasicComponent.prototype.updateUI = function () {
	    var container = UI.get('basicPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var name = UI.get('name', this.id);
	    var type = UI.get('type', this.id);
	    var visible = UI.get('visible', this.id);

	    name.setValue(this.selected.name);
	    type.setValue(this.selected.constructor.name);
	    visible.setValue(this.selected.visible);
	};

	BasicComponent.prototype.onChangeName = function () {
	    var name = UI.get('name', this.id);
	    var editor = this.app.editor;

	    editor.execute(new SetValueCommand(this.selected, 'name', name.getValue()));

	    // bug: https://gitee.com/tengge1/ShadowEditor/issues/IV1V3
	    if (this.selected instanceof Text$1) {
	        this.selected.updateText(name.getValue());
	    }
	};

	BasicComponent.prototype.onChangeVisible = function () {
	    this.selected.visible = UI.get('visible', this.id).getValue();
	};

	/**
	 * 位移组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function TransformComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	TransformComponent.prototype = Object.create(BaseComponent.prototype);
	TransformComponent.prototype.constructor = TransformComponent;

	TransformComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'transformPanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold'
	                },
	                text: L_TRANSFORM_COMPONENT
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_TRANSLATE
	            }, {
	                xtype: 'number',
	                id: 'objectPositionX',
	                scope: this.id,
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChangePosition.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'objectPositionY',
	                scope: this.id,
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChangePosition.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'objectPositionZ',
	                scope: this.id,
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChangePosition.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ROTATE
	            }, {
	                xtype: 'number',
	                id: 'objectRotationX',
	                scope: this.id,
	                step: 10,
	                unit: '°',
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChangeRotation.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'objectRotationY',
	                scope: this.id,
	                step: 10,
	                unit: '°',
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChangeRotation.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'objectRotationZ',
	                scope: this.id,
	                step: 10,
	                unit: '°',
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChangeRotation.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_SCALE
	            }, {
	                xtype: 'checkbox',
	                id: 'objectScaleLock',
	                scope: this.id,
	                value: true,
	                style: {
	                    position: 'absolute',
	                    left: '50px'
	                }
	            }, {
	                xtype: 'number',
	                id: 'objectScaleX',
	                scope: this.id,
	                value: 1,
	                range: [0.01, Infinity],
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChangeScale.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'objectScaleY',
	                scope: this.id,
	                value: 1,
	                range: [0.01, Infinity],
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChangeScale.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'objectScaleZ',
	                scope: this.id,
	                value: 1,
	                range: [0.01, Infinity],
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChangeScale.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	TransformComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	TransformComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	TransformComponent.prototype.updateUI = function () {
	    var container = UI.get('transformPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && !editor.selected.isGlobe) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var objectPositionX = UI.get('objectPositionX', this.id);
	    var objectPositionY = UI.get('objectPositionY', this.id);
	    var objectPositionZ = UI.get('objectPositionZ', this.id);

	    var objectRotationX = UI.get('objectRotationX', this.id);
	    var objectRotationY = UI.get('objectRotationY', this.id);
	    var objectRotationZ = UI.get('objectRotationZ', this.id);

	    var objectScaleX = UI.get('objectScaleX', this.id);
	    var objectScaleY = UI.get('objectScaleY', this.id);
	    var objectScaleZ = UI.get('objectScaleZ', this.id);

	    objectPositionX.setValue(this.selected.position.x);
	    objectPositionY.setValue(this.selected.position.y);
	    objectPositionZ.setValue(this.selected.position.z);

	    objectRotationX.setValue(this.selected.rotation.x * 180 / Math.PI);
	    objectRotationY.setValue(this.selected.rotation.y * 180 / Math.PI);
	    objectRotationZ.setValue(this.selected.rotation.z * 180 / Math.PI);

	    objectScaleX.setValue(this.selected.scale.x);
	    objectScaleY.setValue(this.selected.scale.y);
	    objectScaleZ.setValue(this.selected.scale.z);
	};

	TransformComponent.prototype.onChangePosition = function () {
	    var x = UI.get('objectPositionX', this.id).getValue();
	    var y = UI.get('objectPositionY', this.id).getValue();
	    var z = UI.get('objectPositionZ', this.id).getValue();

	    this.app.editor.execute(new SetPositionCommand(this.selected, new THREE.Vector3(x, y, z)));
	};

	TransformComponent.prototype.onChangeRotation = function () {
	    var x = UI.get('objectRotationX', this.id).getValue();
	    var y = UI.get('objectRotationY', this.id).getValue();
	    var z = UI.get('objectRotationZ', this.id).getValue();

	    this.app.editor.execute(new SetRotationCommand(this.selected, new THREE.Euler(x * Math.PI / 180, y * Math.PI / 180, z * Math.PI / 180)));
	};

	TransformComponent.prototype.onChangeScale = function (value) {
	    var x = UI.get('objectScaleX', this.id).getValue();
	    var y = UI.get('objectScaleY', this.id).getValue();
	    var z = UI.get('objectScaleZ', this.id).getValue();
	    var locked = UI.get('objectScaleLock', this.id).getValue();

	    if (locked) {
	        this.app.editor.execute(new SetScaleCommand(this.selected, new THREE.Vector3(value, value, value)));
	    } else {
	        this.app.editor.execute(new SetScaleCommand(this.selected, new THREE.Vector3(x, y, z)));
	    }
	};

	/**
	 * 相机组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function CameraComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	CameraComponent.prototype = Object.create(BaseComponent.prototype);
	CameraComponent.prototype.constructor = CameraComponent;

	CameraComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'cameraPanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold'
	                },
	                text: L_CAMERA_COMPONENT
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_FOV
	            }, {
	                xtype: 'number',
	                id: 'objectFov',
	                scope: this.id,
	                onChange: this.onSetObjectFov.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_NEAR
	            }, {
	                xtype: 'number',
	                id: 'objectNear',
	                scope: this.id,
	                onChange: this.onSetObjectNear.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_FAR
	            }, {
	                xtype: 'number',
	                id: 'objectFar',
	                scope: this.id,
	                onChange: this.onSetObjectFar.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	CameraComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	CameraComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	CameraComponent.prototype.updateUI = function () {
	    var container = UI.get('cameraPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected instanceof THREE.PerspectiveCamera) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var objectFov = UI.get('objectFov', this.id);
	    var objectNear = UI.get('objectNear', this.id);
	    var objectFar = UI.get('objectFar', this.id);

	    objectFov.setValue(this.selected.fov);
	    objectNear.setValue(this.selected.near);
	    objectFar.setValue(this.selected.far);
	};

	CameraComponent.prototype.onSetObjectFov = function () {
	    var fov = UI.get('objectFov', this.id).getValue();
	    this.app.editor.execute(new SetValueCommand(this.selected, 'fov', fov));
	};

	CameraComponent.prototype.onSetObjectNear = function () {
	    var near = UI.get('objectNear', this.id).getValue();
	    this.app.editor.execute(new SetValueCommand(this.selected, 'near', near));
	};

	CameraComponent.prototype.onSetObjectFar = function () {
	    var far = UI.get('objectFar', this.id).getValue();
	    this.app.editor.execute(new SetValueCommand(this.selected, 'far', far));
	};

	/**
	 * 光源组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function LightComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	LightComponent.prototype = Object.create(BaseComponent.prototype);
	LightComponent.prototype.constructor = LightComponent;

	LightComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'lightPanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold'
	                },
	                text: L_LIGHT_COMPONENT
	            }]
	        }, {
	            xtype: 'row',
	            id: 'objectColorRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_COLOR
	            }, {
	                xtype: 'color',
	                id: 'objectColor',
	                scope: this.id,
	                onChange: this.onChangeColor.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'objectIntensityRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_INTENSITY
	            }, {
	                xtype: 'number',
	                id: 'objectIntensity',
	                scope: this.id,
	                range: [0, Infinity],
	                onChange: this.onChangeIntensity.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'objectDistanceRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_DISTANCE
	            }, {
	                xtype: 'number',
	                id: 'objectDistance',
	                scope: this.id,
	                range: [0, Infinity],
	                onChange: this.onChangeDistance.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'objectAngleRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_ANGLE
	            }, {
	                xtype: 'number',
	                id: 'objectAngle',
	                scope: this.id,
	                precision: 3,
	                range: [0, Math.PI / 2],
	                onChange: this.onChangeAngle.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'objectPenumbraRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_PENUMBRA
	            }, {
	                xtype: 'number',
	                id: 'objectPenumbra',
	                scope: this.id,
	                range: [0, 1],
	                onChange: this.onChangePenumbra.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'objectDecayRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_DECAY
	            }, {
	                xtype: 'number',
	                id: 'objectDecay',
	                scope: this.id,
	                range: [0, Infinity],
	                onChange: this.onChangeDecay.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'objectSkyColorRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_SKY_COLOR
	            }, {
	                xtype: 'color',
	                id: 'objectSkyColor',
	                scope: this.id,
	                onChange: this.onChangeSkyColor.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'objectGroundColorRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_GROUND_COLOR
	            }, {
	                xtype: 'color',
	                id: 'objectGroundColor',
	                scope: this.id,
	                onChange: this.onChangeGroundColor.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'objectWidthRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_WIDTH
	            }, {
	                xtype: 'number',
	                id: 'objectWidth',
	                scope: this.id,
	                range: [0, Infinity],
	                onChange: this.onChangeWidth.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'objectHeightRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_HEIGHT
	            }, {
	                xtype: 'number',
	                id: 'objectHeight',
	                scope: this.id,
	                range: [0, Infinity],
	                onChange: this.onChangeHeight.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	LightComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	LightComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	LightComponent.prototype.updateUI = function () {
	    var container = UI.get('lightPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected instanceof THREE.Light) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var objectColorRow = UI.get('objectColorRow', this.id);
	    var objectIntensityRow = UI.get('objectIntensityRow', this.id);
	    var objectDistanceRow = UI.get('objectDistanceRow', this.id);
	    var objectAngleRow = UI.get('objectAngleRow', this.id);
	    var objectPenumbraRow = UI.get('objectPenumbraRow', this.id);
	    var objectDecayRow = UI.get('objectDecayRow', this.id);
	    var objectSkyColorRow = UI.get('objectSkyColorRow', this.id);
	    var objectGroundColorRow = UI.get('objectGroundColorRow', this.id);
	    var objectWidthRow = UI.get('objectWidthRow', this.id);
	    var objectHeightRow = UI.get('objectHeightRow', this.id);

	    var objectColor = UI.get('objectColor', this.id);
	    var objectIntensity = UI.get('objectIntensity', this.id);
	    var objectDistance = UI.get('objectDistance', this.id);
	    var objectAngle = UI.get('objectAngle', this.id);
	    var objectPenumbra = UI.get('objectPenumbra', this.id);
	    var objectDecay = UI.get('objectDecay', this.id);
	    var objectSkyColor = UI.get('objectSkyColor', this.id);
	    var objectGroundColor = UI.get('objectGroundColor', this.id);
	    var objectWidth = UI.get('objectWidth', this.id);
	    var objectHeight = UI.get('objectHeight', this.id);

	    if (this.selected instanceof THREE.HemisphereLight) {
	        objectColorRow.dom.style.display = 'none';
	    } else {
	        objectColorRow.dom.style.display = '';
	        objectColor.setValue(`#${this.selected.color.getHexString()}`);
	    }

	    objectIntensityRow.dom.style.display = '';
	    objectIntensity.setValue(this.selected.intensity);

	    if (this.selected instanceof THREE.PointLight || this.selected instanceof THREE.SpotLight) {
	        objectDistanceRow.dom.style.display = '';
	        objectDecayRow.dom.style.display = '';
	        objectDistance.setValue(this.selected.distance);
	        objectDecay.setValue(this.selected.decay);
	    } else {
	        objectDistanceRow.dom.style.display = 'none';
	        objectDecayRow.dom.style.display = 'none';
	    }

	    if (this.selected instanceof THREE.SpotLight) {
	        objectAngleRow.dom.style.display = '';
	        objectPenumbraRow.dom.style.display = '';
	        objectAngle.setValue(this.selected.angle);
	        objectPenumbra.setValue(this.selected.penumbra);
	    } else {
	        objectAngleRow.dom.style.display = 'none';
	        objectPenumbraRow.dom.style.display = 'none';
	    }

	    if (this.selected instanceof THREE.HemisphereLight) {
	        objectSkyColorRow.dom.style.display = '';
	        objectGroundColorRow.dom.style.display = '';
	        objectSkyColor.setValue(`#${this.selected.color.getHexString()}`);
	        objectGroundColor.setValue(`#${this.selected.groundColor.getHexString()}`);
	    } else {
	        objectSkyColorRow.dom.style.display = 'none';
	        objectGroundColorRow.dom.style.display = 'none';
	    }

	    if (this.selected instanceof THREE.RectAreaLight) {
	        objectWidthRow.dom.style.display = '';
	        objectHeightRow.dom.style.display = '';
	        objectWidth.setValue(this.selected.width);
	        objectHeight.setValue(this.selected.height);
	    } else {
	        objectWidthRow.dom.style.display = 'none';
	        objectHeightRow.dom.style.display = 'none';
	    }
	};

	LightComponent.prototype.onChangeColor = function () {
	    var objectColor = UI.get('objectColor', this.id);
	    this.selected.color = new THREE.Color(objectColor.getHexValue());
	    var helper = this.selected.children.filter(n => n.userData.type === 'helper')[0];
	    if (helper) {
	        helper.material.color = this.selected.color;
	    }
	};

	LightComponent.prototype.onChangeIntensity = function () {
	    var objectIntensity = UI.get('objectIntensity', this.id);
	    this.selected.intensity = objectIntensity.getValue();
	};

	LightComponent.prototype.onChangeDistance = function () {
	    var objectDistance = UI.get('objectDistance', this.id);
	    this.selected.distance = objectDistance.getValue();
	};

	LightComponent.prototype.onChangeAngle = function () {
	    var objectAngle = UI.get('objectAngle', this.id);
	    this.selected.angle = objectAngle.getValue();
	};

	LightComponent.prototype.onChangePenumbra = function () {
	    var objectPenumbra = UI.get('objectPenumbra', this.id);
	    this.selected.penumbra = objectPenumbra.getValue();
	};

	LightComponent.prototype.onChangeDecay = function () {
	    var objectDecay = UI.get('objectDecay', this.id);
	    this.selected.decay = objectDecay.getValue();
	};

	LightComponent.prototype.onChangeSkyColor = function () {
	    var objectSkyColor = UI.get('objectSkyColor', this.id);
	    this.selected.color = new THREE.Color(objectSkyColor.getHexValue());

	    var sky = this.selected.children.filter(n => n.userData.type === 'sky')[0];
	    if (sky) {
	        sky.material.uniforms.topColor.value = this.selected.color;
	    }
	};

	LightComponent.prototype.onChangeGroundColor = function () {
	    var objectGroundColor = UI.get('objectGroundColor', this.id);
	    this.selected.groundColor = new THREE.Color(objectGroundColor.getHexValue());

	    var sky = this.selected.children.filter(n => n.userData.type === 'sky')[0];
	    if (sky) {
	        sky.material.uniforms.bottomColor.value = this.selected.groundColor;
	    }
	};

	LightComponent.prototype.onChangeWidth = function () {
	    var objectWidth = UI.get('objectWidth', this.id);
	    this.selected.width = objectWidth.getValue();
	};

	LightComponent.prototype.onChangeHeight = function () {
	    var objectHeight = UI.get('objectHeight', this.id);
	    this.selected.height = objectHeight.getValue();
	};

	/**
	 * 阴影组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function ShadowComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	ShadowComponent.prototype = Object.create(BaseComponent.prototype);
	ShadowComponent.prototype.constructor = ShadowComponent;

	ShadowComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'shadowPanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold'
	                },
	                text: L_SHADOW_COMPONENT
	            }]
	        }, {
	            xtype: 'row',
	            id: 'objectShadowRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_SHADOW
	            }, {
	                xtype: 'boolean',
	                id: 'objectCastShadow',
	                scope: this.id,
	                value: false,
	                text: L_CAST,
	                onChange: this.onChangeCastShadow.bind(this)
	            }, {
	                xtype: 'boolean',
	                id: 'objectReceiveShadow',
	                scope: this.id,
	                value: false,
	                text: L_RECEIVE,
	                onChange: this.onChangeReceiveShadow.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'objectShadowRadiusRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_RADIUS
	            }, {
	                xtype: 'number',
	                id: 'objectShadowRadius',
	                scope: this.id,
	                value: 1,
	                onChange: this.onChangeShadowRadius.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'objectMapSizeRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_MAP_SIZE
	            }, {
	                xtype: 'select',
	                id: 'objectMapSize',
	                scope: this.id,
	                options: {
	                    512: '512*512',
	                    1024: '1024*1024',
	                    2048: '2048*2048',
	                    4096: '4096*4096'
	                },
	                value: 512,
	                onChange: this.onChangeMapSize.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'objectBiasRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_BIAS
	            }, {
	                xtype: 'number',
	                id: 'objectBias',
	                scope: this.id,
	                value: 0,
	                range: [0, 1],
	                onChange: this.onChangeBias.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'objectCameraLeftRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_CAMERA_LEFT
	            }, {
	                xtype: 'number',
	                id: 'objectCameraLeft',
	                scope: this.id,
	                value: -5,
	                onChange: this.onChangeCameraLeft.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'objectCameraRightRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_CAMERA_RIGHT
	            }, {
	                xtype: 'number',
	                id: 'objectCameraRight',
	                scope: this.id,
	                value: 5,
	                onChange: this.onChangeCameraRight.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'objectCameraTopRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_CAMERA_TOP
	            }, {
	                xtype: 'number',
	                id: 'objectCameraTop',
	                scope: this.id,
	                value: 5,
	                onChange: this.onChangeCameraTop.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'objectCameraBottomRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_CAMERA_BOTTOM
	            }, {
	                xtype: 'number',
	                id: 'objectCameraBottom',
	                scope: this.id,
	                value: -5,
	                onChange: this.onChangeCameraBottom.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'objectCameraNearRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_CAMERA_NEAR
	            }, {
	                xtype: 'number',
	                id: 'objectCameraNear',
	                scope: this.id,
	                value: 0.5,
	                range: [0, Infinity],
	                onChange: this.onChangeCameraNear.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'objectCameraFarRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_CAMERA_FAR
	            }, {
	                xtype: 'number',
	                id: 'objectCameraFar',
	                scope: this.id,
	                value: 0.5,
	                range: [0, Infinity],
	                onChange: this.onChangeCameraFar.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	ShadowComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	ShadowComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	ShadowComponent.prototype.updateUI = function () {
	    var container = UI.get('shadowPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && (editor.selected instanceof THREE.Mesh || editor.selected instanceof THREE.DirectionalLight || editor.selected instanceof THREE.PointLight || editor.selected instanceof THREE.SpotLight)) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var objectShadowRadiusRow = UI.get('objectShadowRadiusRow', this.id);
	    var objectMapSizeRow = UI.get('objectMapSizeRow', this.id);
	    var objectBiasRow = UI.get('objectBiasRow', this.id);
	    var objectCameraLeftRow = UI.get('objectCameraLeftRow', this.id);
	    var objectCameraRightRow = UI.get('objectCameraRightRow', this.id);
	    var objectCameraTopRow = UI.get('objectCameraTopRow', this.id);
	    var objectCameraBottomRow = UI.get('objectCameraBottomRow', this.id);
	    var objectCameraNearRow = UI.get('objectCameraNearRow', this.id);
	    var objectCameraFarRow = UI.get('objectCameraFarRow', this.id);

	    var objectCastShadow = UI.get('objectCastShadow', this.id);
	    var objectReceiveShadow = UI.get('objectReceiveShadow', this.id);
	    var objectShadowRadius = UI.get('objectShadowRadius', this.id);
	    var objectMapSize = UI.get('objectMapSize', this.id);
	    var objectBias = UI.get('objectBias', this.id);
	    var objectCameraLeft = UI.get('objectCameraLeft', this.id);
	    var objectCameraRight = UI.get('objectCameraRight', this.id);
	    var objectCameraTop = UI.get('objectCameraTop', this.id);
	    var objectCameraBottom = UI.get('objectCameraBottom', this.id);
	    var objectCameraNear = UI.get('objectCameraNear', this.id);
	    var objectCameraFar = UI.get('objectCameraFar', this.id);

	    objectCastShadow.setValue(this.selected.castShadow);

	    if (this.selected instanceof THREE.Light) {
	        objectReceiveShadow.dom.style.display = 'none';
	        objectShadowRadiusRow.dom.style.display = '';
	        objectMapSizeRow.dom.style.display = '';
	        objectBiasRow.dom.style.display = '';
	        objectCameraLeftRow.dom.style.display = '';
	        objectCameraRightRow.dom.style.display = '';
	        objectCameraTopRow.dom.style.display = '';
	        objectCameraBottomRow.dom.style.display = '';
	        objectCameraNearRow.dom.style.display = '';
	        objectCameraFarRow.dom.style.display = '';

	        objectShadowRadius.setValue(this.selected.shadow.radius);
	        var mapSize = this.selected.shadow.mapSize;
	        objectMapSize.setValue(mapSize.x);
	        objectBias.setValue(this.selected.shadow.bias);
	        objectCameraLeft.setValue(this.selected.shadow.camera.left);
	        objectCameraRight.setValue(this.selected.shadow.camera.right);
	        objectCameraTop.setValue(this.selected.shadow.camera.top);
	        objectCameraBottom.setValue(this.selected.shadow.camera.bottom);
	        objectCameraNear.setValue(this.selected.shadow.camera.near);
	        objectCameraFar.setValue(this.selected.shadow.camera.far);
	    } else {
	        objectReceiveShadow.dom.style.display = '';
	        objectShadowRadiusRow.dom.style.display = 'none';
	        objectMapSizeRow.dom.style.display = 'none';
	        objectBiasRow.dom.style.display = 'none';
	        objectCameraLeftRow.dom.style.display = 'none';
	        objectCameraRightRow.dom.style.display = 'none';
	        objectCameraTopRow.dom.style.display = 'none';
	        objectCameraBottomRow.dom.style.display = 'none';
	        objectCameraNearRow.dom.style.display = 'none';
	        objectCameraFarRow.dom.style.display = 'none';

	        objectReceiveShadow.setValue(this.selected.receiveShadow);
	    }
	};

	ShadowComponent.prototype.onChangeCastShadow = function () {
	    var objectCastShadow = UI.get('objectCastShadow', this.id);
	    this.selected.castShadow = objectCastShadow.getValue();
	    if (this.selected instanceof THREE.Mesh) {
	        this.updateMaterial(this.selected.material);
	    }
	};

	ShadowComponent.prototype.onChangeReceiveShadow = function () {
	    var objectReceiveShadow = UI.get('objectReceiveShadow', this.id);
	    this.selected.receiveShadow = objectReceiveShadow.getValue();
	    if (this.selected instanceof THREE.Mesh) {
	        this.updateMaterial(this.selected.material);
	    }
	};

	ShadowComponent.prototype.onChangeShadowRadius = function () {
	    var objectShadowRadius = UI.get('objectShadowRadius', this.id);
	    this.selected.shadow.radius = objectShadowRadius.getValue();
	};

	ShadowComponent.prototype.updateMaterial = function (material) {
	    if (Array.isArray(material)) {
	        material.forEach(n => {
	            n.needsUpdate = true;
	        });
	    } else {
	        material.needsUpdate = true;
	    }
	};

	ShadowComponent.prototype.onChangeMapSize = function () {
	    var objectMapSize = UI.get('objectMapSize', this.id);
	    var mapSize = objectMapSize.getValue();
	    this.selected.shadow.mapSize.x = this.selected.shadow.mapSize.y = parseInt(mapSize);
	};

	ShadowComponent.prototype.onChangeBias = function () {
	    var objectBias = UI.get('objectBias', this.id);
	    this.selected.shadow.bias = objectBias.getValue();
	};

	ShadowComponent.prototype.onChangeCameraLeft = function () {
	    var objectCameraLeft = UI.get('objectCameraLeft', this.id);
	    this.selected.shadow.camera.left = objectCameraLeft.getValue();
	    this.selected.shadow.camera.updateProjectionMatrix();
	};

	ShadowComponent.prototype.onChangeCameraRight = function () {
	    var objectCameraRight = UI.get('objectCameraRight', this.id);
	    this.selected.shadow.camera.right = objectCameraRight.getValue();
	    this.selected.shadow.camera.updateProjectionMatrix();
	};

	ShadowComponent.prototype.onChangeCameraTop = function () {
	    var objectCameraTop = UI.get('objectCameraTop', this.id);
	    this.selected.shadow.camera.top = objectCameraTop.getValue();
	    this.selected.shadow.camera.updateProjectionMatrix();
	};

	ShadowComponent.prototype.onChangeCameraBottom = function () {
	    var objectCameraBottom = UI.get('objectCameraBottom', this.id);
	    this.selected.shadow.camera.bottom = objectCameraBottom.getValue();
	    this.selected.shadow.camera.updateProjectionMatrix();
	};

	ShadowComponent.prototype.onChangeCameraNear = function () {
	    var objectCameraNear = UI.get('objectCameraNear', this.id);
	    this.selected.shadow.camera.near = objectCameraNear.getValue();
	    this.selected.shadow.camera.updateProjectionMatrix();
	};

	ShadowComponent.prototype.onChangeCameraFar = function () {
	    var objectCameraFar = UI.get('objectCameraFar', this.id);
	    this.selected.shadow.camera.far = objectCameraFar.getValue();
	    this.selected.shadow.camera.updateProjectionMatrix();
	};

	/**
	 * 设置几何体命令
	 * @author dforrer / https://github.com/dforrer
	 * Developed as part of a project at University of Applied Sciences and Arts Northwestern Switzerland (www.fhnw.ch)
	 * @param object THREE.Object3D
	 * @param newGeometry THREE.Geometry
	 * @constructor
	 */
	function SetGeometryCommand(object, newGeometry) {
		Command.call(this);

		this.type = 'SetGeometryCommand';
		this.name = L_SET_GEOMETRY;
		this.updatable = true;

		this.object = object;
		this.oldGeometry = (object !== undefined) ? object.geometry : undefined;
		this.newGeometry = newGeometry;
	}
	SetGeometryCommand.prototype = Object.create(Command.prototype);

	Object.assign(SetGeometryCommand.prototype, {
		constructor: SetGeometryCommand,

		execute: function () {
			this.object.geometry.dispose();
			this.object.geometry = this.newGeometry;
			this.object.geometry.computeBoundingSphere();

			this.editor.app.call('geometryChanged', this, this.object);
			this.editor.app.call('sceneGraphChanged', this);
		},

		undo: function () {
			this.object.geometry.dispose();
			this.object.geometry = this.oldGeometry;
			this.object.geometry.computeBoundingSphere();

			this.editor.app.call('geometryChanged', this, this.object);
			this.editor.app.call('sceneGraphChanged', this);
		},

		update: function (cmd) {
			this.newGeometry = cmd.newGeometry;
		},

		toJSON: function () {
			var output = Command.prototype.toJSON.call(this);

			output.objectUuid = this.object.uuid;
			output.oldGeometry = this.object.geometry.toJSON();
			output.newGeometry = this.newGeometry.toJSON();

			return output;
		},

		fromJSON: function (json) {
			Command.prototype.fromJSON.call(this, json);

			this.object = this.editor.objectByUuid(json.objectUuid);

			this.oldGeometry = parseGeometry(json.oldGeometry);
			this.newGeometry = parseGeometry(json.newGeometry);

			function parseGeometry(data) {
				var loader = new THREE.ObjectLoader();
				return loader.parseGeometries([data])[data.uuid];
			}
		}
	});

	/**
	 * 平板组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function PlaneGeometryComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	PlaneGeometryComponent.prototype = Object.create(BaseComponent.prototype);
	PlaneGeometryComponent.prototype.constructor = PlaneGeometryComponent;

	PlaneGeometryComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        id: 'geometryPanel',
	        scope: this.id,
	        style: {
	            borderTop: 0,
	            marginTop: '8px',
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'row',
	                children: [{
	                    xtype: 'label',
	                    text: L_WIDTH
	                }, {
	                    xtype: 'number',
	                    id: 'width',
	                    scope: this.id,
	                    value: 1,
	                    onChange: this.onChangeGeometry.bind(this)
	                }]
	            }, {
	                xtype: 'row',
	                children: [{
	                    xtype: 'label',
	                    text: L_HEIGHT
	                }, {
	                    xtype: 'number',
	                    id: 'height',
	                    scope: this.id,
	                    value: 1,
	                    onChange: this.onChangeGeometry.bind(this)
	                }]
	            }, {
	                xtype: 'row',
	                children: [{
	                    xtype: 'label',
	                    text: L_WIDTH_SEGMENTS
	                }, {
	                    xtype: 'int',
	                    id: 'widthSegments',
	                    scope: this.id,
	                    value: 1,
	                    range: [1, Infinity],
	                    onChange: this.onChangeGeometry.bind(this)
	                }]
	            }, {
	                xtype: 'row',
	                children: [{
	                    xtype: 'label',
	                    text: L_HEIGHT_SEGMENTS
	                }, {
	                    xtype: 'int',
	                    id: 'heightSegments',
	                    scope: this.id,
	                    value: 1,
	                    range: [1, Infinity],
	                    onChange: this.onChangeGeometry.bind(this)
	                }]
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	PlaneGeometryComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	PlaneGeometryComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	PlaneGeometryComponent.prototype.updateUI = function () {
	    var container = UI.get('geometryPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected instanceof THREE.Mesh && editor.selected.geometry instanceof THREE.PlaneBufferGeometry) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var width = UI.get('width', this.id);
	    var height = UI.get('height', this.id);
	    var widthSegments = UI.get('widthSegments', this.id);
	    var heightSegments = UI.get('heightSegments', this.id);

	    width.setValue(this.selected.geometry.parameters.width);
	    height.setValue(this.selected.geometry.parameters.height);
	    widthSegments.setValue(this.selected.geometry.parameters.widthSegments);
	    heightSegments.setValue(this.selected.geometry.parameters.heightSegments);
	};

	PlaneGeometryComponent.prototype.onChangeGeometry = function () {
	    var width = UI.get('width', this.id);
	    var height = UI.get('height', this.id);
	    var widthSegments = UI.get('widthSegments', this.id);
	    var heightSegments = UI.get('heightSegments', this.id);

	    this.app.editor.execute(new SetGeometryCommand(this.selected, new THREE.PlaneBufferGeometry(
	        width.getValue(),
	        height.getValue(),
	        widthSegments.getValue(),
	        heightSegments.getValue()
	    )));
	};

	/**
	 * 正方体组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function BoxGeometryComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	BoxGeometryComponent.prototype = Object.create(BaseComponent.prototype);
	BoxGeometryComponent.prototype.constructor = BoxGeometryComponent;

	BoxGeometryComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        id: 'geometryPanel',
	        scope: this.id,
	        style: {
	            borderTop: 0,
	            marginTop: '8px',
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'row',
	                children: [{
	                    xtype: 'label',
	                    text: L_WIDTH
	                }, {
	                    xtype: 'number',
	                    id: 'width',
	                    scope: this.id,
	                    value: 1,
	                    onChange: this.onChangeGeometry.bind(this)
	                }]
	            }, {
	                xtype: 'row',
	                children: [{
	                    xtype: 'label',
	                    text: L_HEIGHT
	                }, {
	                    xtype: 'number',
	                    id: 'height',
	                    scope: this.id,
	                    value: 1,
	                    onChange: this.onChangeGeometry.bind(this)
	                }]
	            }, {
	                xtype: 'row',
	                children: [{
	                    xtype: 'label',
	                    text: L_DEPTH
	                }, {
	                    xtype: 'number',
	                    id: 'depth',
	                    scope: this.id,
	                    value: 1,
	                    onChange: this.onChangeGeometry.bind(this)
	                }]
	            }, {
	                xtype: 'row',
	                children: [{
	                    xtype: 'label',
	                    text: L_WIDTH_SEGMENTS
	                }, {
	                    xtype: 'int',
	                    id: 'widthSegments',
	                    scope: this.id,
	                    value: 1,
	                    range: [1, Infinity],
	                    onChange: this.onChangeGeometry.bind(this)
	                }]
	            }, {
	                xtype: 'row',
	                children: [{
	                    xtype: 'label',
	                    text: L_HEIGHT_SEGMENTS
	                }, {
	                    xtype: 'int',
	                    id: 'heightSegments',
	                    scope: this.id,
	                    value: 1,
	                    range: [1, Infinity],
	                    onChange: this.onChangeGeometry.bind(this)
	                }]
	            }, {
	                xtype: 'row',
	                children: [{
	                    xtype: 'label',
	                    text: L_DEPTH_SEGMENTS
	                }, {
	                    xtype: 'int',
	                    id: 'depthSegments',
	                    scope: this.id,
	                    value: 1,
	                    range: [1, Infinity],
	                    onChange: this.onChangeGeometry.bind(this)
	                }]
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	BoxGeometryComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	BoxGeometryComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	BoxGeometryComponent.prototype.updateUI = function () {
	    var container = UI.get('geometryPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected instanceof THREE.Mesh && editor.selected.geometry instanceof THREE.BoxBufferGeometry) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var width = UI.get('width', this.id);
	    var height = UI.get('height', this.id);
	    var depth = UI.get('depth', this.id);
	    var widthSegments = UI.get('widthSegments', this.id);
	    var heightSegments = UI.get('heightSegments', this.id);
	    var depthSegments = UI.get('depthSegments', this.id);

	    width.setValue(this.selected.geometry.parameters.width);
	    height.setValue(this.selected.geometry.parameters.height);
	    depth.setValue(this.selected.geometry.parameters.depth);
	    widthSegments.setValue(this.selected.geometry.parameters.widthSegments);
	    heightSegments.setValue(this.selected.geometry.parameters.heightSegments);
	    depthSegments.setValue(this.selected.geometry.parameters.depthSegments);
	};

	BoxGeometryComponent.prototype.onChangeGeometry = function () {
	    var width = UI.get('width', this.id);
	    var height = UI.get('height', this.id);
	    var depth = UI.get('depth', this.id);
	    var widthSegments = UI.get('widthSegments', this.id);
	    var heightSegments = UI.get('heightSegments', this.id);
	    var depthSegments = UI.get('depthSegments', this.id);

	    this.app.editor.execute(new SetGeometryCommand(this.selected, new THREE.BoxBufferGeometry(
	        width.getValue(),
	        height.getValue(),
	        depth.getValue(),
	        widthSegments.getValue(),
	        heightSegments.getValue(),
	        depthSegments.getValue()
	    )));
	};

	/**
	 * 圆形组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function CircleGeometryComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	CircleGeometryComponent.prototype = Object.create(BaseComponent.prototype);
	CircleGeometryComponent.prototype.constructor = CircleGeometryComponent;

	CircleGeometryComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        id: 'geometryPanel',
	        scope: this.id,
	        style: {
	            borderTop: 0,
	            marginTop: '8px',
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_RADIUS
	            }, {
	                xtype: 'number',
	                id: 'radius',
	                scope: this.id,
	                value: 1,
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_SEGMENTS
	            }, {
	                xtype: 'int',
	                id: 'segments',
	                scope: this.id,
	                value: 16,
	                range: [3, Infinity],
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_THETA_START
	            }, {
	                xtype: 'number',
	                id: 'thetaStart',
	                scope: this.id,
	                value: 1,
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_THETA_LENGTH
	            }, {
	                xtype: 'number',
	                id: 'thetaLength',
	                scope: this.id,
	                value: Math.PI * 2,
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	CircleGeometryComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	CircleGeometryComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	CircleGeometryComponent.prototype.updateUI = function () {
	    var container = UI.get('geometryPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected instanceof THREE.Mesh && editor.selected.geometry instanceof THREE.CircleBufferGeometry) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var radius = UI.get('radius', this.id);
	    var segments = UI.get('segments', this.id);
	    var thetaStart = UI.get('thetaStart', this.id);
	    var thetaLength = UI.get('thetaLength', this.id);

	    radius.setValue(this.selected.geometry.parameters.radius);
	    segments.setValue(this.selected.geometry.parameters.segments);
	    thetaStart.setValue(this.selected.geometry.parameters.thetaStart === undefined ? 0 : this.selected.geometry.parameters.thetaStart);
	    thetaLength.setValue(this.selected.geometry.parameters.thetaLength === undefined ? Math.PI * 2 : this.selected.geometry.parameters.thetaLength);
	};

	CircleGeometryComponent.prototype.onChangeGeometry = function () {
	    var radius = UI.get('radius', this.id);
	    var segments = UI.get('segments', this.id);
	    var thetaStart = UI.get('thetaStart', this.id);
	    var thetaLength = UI.get('thetaLength', this.id);

	    this.app.editor.execute(new SetGeometryCommand(this.selected, new THREE.CircleBufferGeometry(
	        radius.getValue(),
	        segments.getValue(),
	        thetaStart.getValue(),
	        thetaLength.getValue()
	    )));
	};

	/**
	 * 圆柱组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function CylinderGeometryComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	CylinderGeometryComponent.prototype = Object.create(BaseComponent.prototype);
	CylinderGeometryComponent.prototype.constructor = CylinderGeometryComponent;

	CylinderGeometryComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        id: 'geometryPanel',
	        scope: this.id,
	        style: {
	            borderTop: 0,
	            marginTop: '8px',
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_RADIUS_TOP
	            }, {
	                xtype: 'number',
	                id: 'radiusTop',
	                scope: this.id,
	                value: 1,
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_RADIUS_BOTTOM
	            }, {
	                xtype: 'number',
	                id: 'radiusBottom',
	                scope: this.id,
	                value: 1,
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_HEIGHT
	            }, {
	                xtype: 'number',
	                id: 'height',
	                scope: this.id,
	                value: 1,
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_RADIAL_SEGMENTS
	            }, {
	                xtype: 'int',
	                id: 'radialSegments',
	                scope: this.id,
	                value: 16,
	                range: [1, Infinity],
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_HEIGHT_SEGMENTS
	            }, {
	                xtype: 'int',
	                id: 'heightSegments',
	                scope: this.id,
	                value: 1,
	                range: [1, Infinity],
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_OPEN_ENDED
	            }, {
	                xtype: 'checkbox',
	                id: 'openEnded',
	                scope: this.id,
	                value: false,
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	CylinderGeometryComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	CylinderGeometryComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	CylinderGeometryComponent.prototype.updateUI = function () {
	    var container = UI.get('geometryPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected instanceof THREE.Mesh && editor.selected.geometry instanceof THREE.CylinderBufferGeometry) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var radiusTop = UI.get('radiusTop', this.id);
	    var radiusBottom = UI.get('radiusBottom', this.id);
	    var height = UI.get('height', this.id);
	    var radialSegments = UI.get('radialSegments', this.id);
	    var heightSegments = UI.get('heightSegments', this.id);
	    var openEnded = UI.get('openEnded', this.id);

	    radiusTop.setValue(this.selected.geometry.parameters.radiusTop);
	    radiusBottom.setValue(this.selected.geometry.parameters.radiusBottom);
	    height.setValue(this.selected.geometry.parameters.height);
	    radialSegments.setValue(this.selected.geometry.parameters.radialSegments);
	    heightSegments.setValue(this.selected.geometry.parameters.heightSegments);
	    openEnded.setValue(this.selected.geometry.parameters.openEnded);
	};

	CylinderGeometryComponent.prototype.onChangeGeometry = function () {
	    var radiusTop = UI.get('radiusTop', this.id);
	    var radiusBottom = UI.get('radiusBottom', this.id);
	    var height = UI.get('height', this.id);
	    var radialSegments = UI.get('radialSegments', this.id);
	    var heightSegments = UI.get('heightSegments', this.id);
	    var openEnded = UI.get('openEnded', this.id);

	    this.app.editor.execute(new SetGeometryCommand(this.selected, new THREE.CylinderBufferGeometry(
	        radiusTop.getValue(),
	        radiusBottom.getValue(),
	        height.getValue(),
	        radialSegments.getValue(),
	        heightSegments.getValue(),
	        openEnded.getValue()
	    )));
	};

	/**
	 * 球体组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function SphereGeometryComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	SphereGeometryComponent.prototype = Object.create(BaseComponent.prototype);
	SphereGeometryComponent.prototype.constructor = SphereGeometryComponent;

	SphereGeometryComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        id: 'geometryPanel',
	        scope: this.id,
	        style: {
	            borderTop: 0,
	            marginTop: '8px',
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_RADIUS
	            }, {
	                xtype: 'number',
	                id: 'radius',
	                scope: this.id,
	                value: 1,
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_WIDTH_SEGMENTS
	            }, {
	                xtype: 'int',
	                id: 'widthSegments',
	                scope: this.id,
	                value: 1,
	                range: [1, Infinity],
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_HEIGHT_SEGMENTS
	            }, {
	                xtype: 'int',
	                id: 'heightSegments',
	                scope: this.id,
	                value: 1,
	                range: [1, Infinity],
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_PHI_START
	            }, {
	                xtype: 'number',
	                id: 'phiStart',
	                scope: this.id,
	                value: 0,
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_PHI_LENGTH
	            }, {
	                xtype: 'number',
	                id: 'phiLength',
	                scope: this.id,
	                value: Math.PI * 2,
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_THETA_START
	            }, {
	                xtype: 'number',
	                id: 'thetaStart',
	                scope: this.id,
	                value: 0,
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_THETA_LENGTH
	            }, {
	                xtype: 'number',
	                id: 'thetaLength',
	                scope: this.id,
	                value: Math.PI / 2,
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	SphereGeometryComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	SphereGeometryComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	SphereGeometryComponent.prototype.updateUI = function () {
	    var container = UI.get('geometryPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected instanceof THREE.Mesh && editor.selected.geometry instanceof THREE.SphereBufferGeometry) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var radius = UI.get('radius', this.id);
	    var widthSegments = UI.get('widthSegments', this.id);
	    var heightSegments = UI.get('heightSegments', this.id);
	    var phiStart = UI.get('phiStart', this.id);
	    var phiLength = UI.get('phiLength', this.id);
	    var thetaStart = UI.get('thetaStart', this.id);
	    var thetaLength = UI.get('thetaLength', this.id);

	    radius.setValue(this.selected.geometry.parameters.radius);
	    widthSegments.setValue(this.selected.geometry.parameters.widthSegments);
	    heightSegments.setValue(this.selected.geometry.parameters.heightSegments);
	    phiStart.setValue(this.selected.geometry.parameters.phiStart);
	    phiLength.setValue(this.selected.geometry.parameters.phiLength);
	    thetaStart.setValue(this.selected.geometry.parameters.thetaStart);
	    thetaLength.setValue(this.selected.geometry.parameters.thetaLength);
	};

	SphereGeometryComponent.prototype.onChangeGeometry = function () {
	    var radius = UI.get('radius', this.id);
	    var widthSegments = UI.get('widthSegments', this.id);
	    var heightSegments = UI.get('heightSegments', this.id);
	    var phiStart = UI.get('phiStart', this.id);
	    var phiLength = UI.get('phiLength', this.id);
	    var thetaStart = UI.get('thetaStart', this.id);
	    var thetaLength = UI.get('thetaLength', this.id);

	    this.app.editor.execute(new SetGeometryCommand(this.selected, new THREE.SphereBufferGeometry(
	        radius.getValue(),
	        widthSegments.getValue(),
	        heightSegments.getValue(),
	        phiStart.getValue(),
	        phiLength.getValue(),
	        thetaStart.getValue(),
	        thetaLength.getValue()
	    )));
	};

	/**
	 * 二十面体组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function IcosahedronGeometryComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	IcosahedronGeometryComponent.prototype = Object.create(BaseComponent.prototype);
	IcosahedronGeometryComponent.prototype.constructor = IcosahedronGeometryComponent;

	IcosahedronGeometryComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        id: 'geometryPanel',
	        scope: this.id,
	        style: {
	            borderTop: 0,
	            marginTop: '8px',
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_RADIUS
	            }, {
	                xtype: 'number',
	                id: 'radius',
	                scope: this.id,
	                value: 1,
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_DETAIL
	            }, {
	                xtype: 'int',
	                id: 'detail',
	                scope: this.id,
	                value: 1,
	                range: [0, Infinity],
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	IcosahedronGeometryComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	IcosahedronGeometryComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	IcosahedronGeometryComponent.prototype.updateUI = function () {
	    var container = UI.get('geometryPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected instanceof THREE.Mesh && editor.selected.geometry instanceof THREE.IcosahedronBufferGeometry) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var radius = UI.get('radius', this.id);
	    var detail = UI.get('detail', this.id);

	    radius.setValue(this.selected.geometry.parameters.radius);
	    detail.setValue(this.selected.geometry.parameters.detail);
	};

	IcosahedronGeometryComponent.prototype.onChangeGeometry = function () {
	    var radius = UI.get('radius', this.id);
	    var detail = UI.get('detail', this.id);

	    this.app.editor.execute(new SetGeometryCommand(this.selected, new THREE.IcosahedronBufferGeometry(
	        radius.getValue(),
	        detail.getValue()
	    )));
	};

	/**
	 * 花托组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function TorusGeometryComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	TorusGeometryComponent.prototype = Object.create(BaseComponent.prototype);
	TorusGeometryComponent.prototype.constructor = TorusGeometryComponent;

	TorusGeometryComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        id: 'geometryPanel',
	        scope: this.id,
	        style: {
	            borderTop: 0,
	            marginTop: '8px',
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_RADIUS
	            }, {
	                xtype: 'number',
	                id: 'radius',
	                scope: this.id,
	                value: 1,
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_TUBE
	            }, {
	                xtype: 'number',
	                id: 'tube',
	                scope: this.id,
	                value: 1,
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_RADIAL_SEGMENTS
	            }, {
	                xtype: 'int',
	                id: 'radialSegments',
	                scope: this.id,
	                value: 16,
	                range: [1, Infinity],
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_TUBULAR_SEGMENTS
	            }, {
	                xtype: 'int',
	                id: 'tubularSegments',
	                scope: this.id,
	                value: 16,
	                range: [1, Infinity],
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ARC
	            }, {
	                xtype: 'number',
	                id: 'arc',
	                scope: this.id,
	                value: Math.PI * 2,
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	TorusGeometryComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	TorusGeometryComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	TorusGeometryComponent.prototype.updateUI = function () {
	    var container = UI.get('geometryPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected instanceof THREE.Mesh && editor.selected.geometry instanceof THREE.TorusBufferGeometry) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var radius = UI.get('radius', this.id);
	    var tube = UI.get('tube', this.id);
	    var radialSegments = UI.get('radialSegments', this.id);
	    var tubularSegments = UI.get('tubularSegments', this.id);
	    var arc = UI.get('arc', this.id);

	    radius.setValue(this.selected.geometry.parameters.radius);
	    tube.setValue(this.selected.geometry.parameters.tube);
	    radialSegments.setValue(this.selected.geometry.parameters.radialSegments);
	    tubularSegments.setValue(this.selected.geometry.parameters.tubularSegments);
	    arc.setValue(this.selected.geometry.parameters.arc);
	};

	TorusGeometryComponent.prototype.onChangeGeometry = function () {
	    var radius = UI.get('radius', this.id);
	    var tube = UI.get('tube', this.id);
	    var radialSegments = UI.get('radialSegments', this.id);
	    var tubularSegments = UI.get('tubularSegments', this.id);
	    var arc = UI.get('arc', this.id);

	    this.app.editor.execute(new SetGeometryCommand(this.selected, new THREE.TorusBufferGeometry(
	        radius.getValue(),
	        tube.getValue(),
	        radialSegments.getValue(),
	        tubularSegments.getValue(),
	        arc.getValue()
	    )));
	};

	/**
	 * 环面纽结组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function TorusKnotGeometryComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	TorusKnotGeometryComponent.prototype = Object.create(BaseComponent.prototype);
	TorusKnotGeometryComponent.prototype.constructor = TorusKnotGeometryComponent;

	TorusKnotGeometryComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        id: 'geometryPanel',
	        scope: this.id,
	        style: {
	            borderTop: 0,
	            marginTop: '8px',
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_RADIUS
	            }, {
	                xtype: 'number',
	                id: 'radius',
	                scope: this.id,
	                value: 16,
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_TUBE
	            }, {
	                xtype: 'number',
	                id: 'tube',
	                scope: this.id,
	                value: 1,
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_TUBULAR_SEGMENTS
	            }, {
	                xtype: 'int',
	                id: 'tubularSegments',
	                scope: this.id,
	                value: 16,
	                range: [1, Infinity],
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_RADIAL_SEGMENTS
	            }, {
	                xtype: 'int',
	                id: 'radialSegments',
	                scope: this.id,
	                value: 16,
	                range: [1, Infinity],
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_TUBE_ARC
	            }, {
	                xtype: 'number',
	                id: 'p',
	                scope: this.id,
	                value: 20,
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_DISTORTED_ARC
	            }, {
	                xtype: 'number',
	                id: 'q',
	                scope: this.id,
	                value: 20,
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	TorusKnotGeometryComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	TorusKnotGeometryComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	TorusKnotGeometryComponent.prototype.updateUI = function () {
	    var container = UI.get('geometryPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected instanceof THREE.Mesh && editor.selected.geometry instanceof THREE.TorusKnotBufferGeometry) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var radius = UI.get('radius', this.id);
	    var tube = UI.get('tube', this.id);
	    var tubularSegments = UI.get('tubularSegments', this.id);
	    var radialSegments = UI.get('radialSegments', this.id);
	    var p = UI.get('p', this.id);
	    var q = UI.get('q', this.id);

	    radius.setValue(this.selected.geometry.parameters.radius);
	    tube.setValue(this.selected.geometry.parameters.tube);
	    tubularSegments.setValue(this.selected.geometry.parameters.tubularSegments);
	    radialSegments.setValue(this.selected.geometry.parameters.radialSegments);
	    p.setValue(this.selected.geometry.parameters.p);
	    q.setValue(this.selected.geometry.parameters.q);
	};

	TorusKnotGeometryComponent.prototype.onChangeGeometry = function () {
	    var radius = UI.get('radius', this.id);
	    var tube = UI.get('tube', this.id);
	    var tubularSegments = UI.get('tubularSegments', this.id);
	    var radialSegments = UI.get('radialSegments', this.id);
	    var p = UI.get('p', this.id);
	    var q = UI.get('q', this.id);

	    this.app.editor.execute(new SetGeometryCommand(this.selected, new THREE.TorusKnotBufferGeometry(
	        radius.getValue(),
	        tube.getValue(),
	        tubularSegments.getValue(),
	        radialSegments.getValue(),
	        p.getValue(),
	        q.getValue()
	    )));
	};

	/**
	 * 车床组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function LatheGeometryComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	LatheGeometryComponent.prototype = Object.create(BaseComponent.prototype);
	LatheGeometryComponent.prototype.constructor = LatheGeometryComponent;

	LatheGeometryComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        id: 'geometryPanel',
	        scope: this.id,
	        style: {
	            borderTop: 0,
	            marginTop: '8px',
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_RADIAL_SEGMENTS
	            }, {
	                xtype: 'int',
	                id: 'segments',
	                scope: this.id,
	                value: 16,
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_PHI_START
	            }, {
	                xtype: 'number',
	                id: 'phiStart',
	                scope: this.id,
	                value: 0,
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_PHI_LENGTH
	            }, {
	                xtype: 'number',
	                id: 'phiLength',
	                scope: this.id,
	                value: Math.PI * 2,
	                onChange: this.onChangeGeometry.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	LatheGeometryComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	LatheGeometryComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	LatheGeometryComponent.prototype.updateUI = function () {
	    var container = UI.get('geometryPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected instanceof THREE.Mesh && editor.selected.geometry instanceof THREE.LatheBufferGeometry) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var segments = UI.get('segments', this.id);
	    var phiStart = UI.get('phiStart', this.id);
	    var phiLength = UI.get('phiLength', this.id);

	    segments.setValue(this.selected.geometry.parameters.segments);
	    phiStart.setValue(this.selected.geometry.parameters.phiStart);
	    phiLength.setValue(this.selected.geometry.parameters.phiLength);
	};

	LatheGeometryComponent.prototype.onChangeGeometry = function () {
	    var segments = UI.get('segments', this.id);
	    var phiStart = UI.get('phiStart', this.id);
	    var phiLength = UI.get('phiLength', this.id);

	    var points = this.selected.geometry.parameters.points;

	    this.app.editor.execute(new SetGeometryCommand(this.selected, new THREE.LatheBufferGeometry(
	        points,
	        segments.getValue(),
	        phiStart.getValue(),
	        phiLength.getValue()
	    )));
	};

	/**
	 * 茶壶组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function TeapotGeometryComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	TeapotGeometryComponent.prototype = Object.create(BaseComponent.prototype);
	TeapotGeometryComponent.prototype.constructor = TeapotGeometryComponent;

	TeapotGeometryComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        id: 'geometryPanel',
	        scope: this.id,
	        style: {
	            borderTop: 0,
	            marginTop: '8px',
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'row',
	                children: [{
	                    xtype: 'label',
	                    text: L_SIZE
	                }, {
	                    xtype: 'number',
	                    id: 'size',
	                    scope: this.id,
	                    value: 3,
	                    onChange: this.onChangeGeometry.bind(this)
	                }]
	            }, {
	                xtype: 'row',
	                children: [{
	                    xtype: 'label',
	                    text: L_SEGMENTS
	                }, {
	                    xtype: 'int',
	                    id: 'segments',
	                    scope: this.id,
	                    value: 10,
	                    range: [1, Infinity],
	                    onChange: this.onChangeGeometry.bind(this)
	                }]
	            }, {
	                xtype: 'row',
	                children: [{
	                    xtype: 'label',
	                    text: L_BOTTOM
	                }, {
	                    xtype: 'checkbox',
	                    id: 'bottom',
	                    scope: this.id,
	                    value: true,
	                    onChange: this.onChangeGeometry.bind(this)
	                }]
	            }, {
	                xtype: 'row',
	                children: [{
	                    xtype: 'label',
	                    text: L_LID
	                }, {
	                    xtype: 'checkbox',
	                    id: 'lid',
	                    scope: this.id,
	                    value: true,
	                    onChange: this.onChangeGeometry.bind(this)
	                }]
	            }, {
	                xtype: 'row',
	                children: [{
	                    xtype: 'label',
	                    text: L_BODY
	                }, {
	                    xtype: 'checkbox',
	                    id: 'body',
	                    scope: this.id,
	                    value: true,
	                    onChange: this.onChangeGeometry.bind(this)
	                }]
	            }, {
	                xtype: 'row',
	                children: [{
	                    xtype: 'label',
	                    text: L_FIT_LID
	                }, {
	                    xtype: 'checkbox',
	                    id: 'fitLid',
	                    scope: this.id,
	                    value: true,
	                    onChange: this.onChangeGeometry.bind(this)
	                }]
	            }, {
	                xtype: 'row',
	                children: [{
	                    xtype: 'label',
	                    text: L_BLINN
	                }, {
	                    xtype: 'checkbox',
	                    id: 'blinn',
	                    scope: this.id,
	                    value: true,
	                    onChange: this.onChangeGeometry.bind(this)
	                }]
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	TeapotGeometryComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	TeapotGeometryComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	TeapotGeometryComponent.prototype.updateUI = function () {
	    var container = UI.get('geometryPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected instanceof THREE.Mesh && editor.selected.geometry instanceof THREE.TeapotBufferGeometry) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var size = UI.get('size', this.id);
	    var segments = UI.get('segments', this.id);
	    var bottom = UI.get('bottom', this.id);
	    var lid = UI.get('lid', this.id);
	    var body = UI.get('body', this.id);
	    var fitLid = UI.get('fitLid', this.id);
	    var blinn = UI.get('blinn', this.id);

	    size.setValue(this.selected.geometry.parameters.size);
	    segments.setValue(this.selected.geometry.parameters.segments);
	    bottom.setValue(this.selected.geometry.parameters.bottom);
	    lid.setValue(this.selected.geometry.parameters.lid);
	    body.setValue(this.selected.geometry.parameters.body);
	    fitLid.setValue(this.selected.geometry.parameters.fitLid);
	    blinn.setValue(this.selected.geometry.parameters.blinn);
	};

	TeapotGeometryComponent.prototype.onChangeGeometry = function () {
	    var size = UI.get('size', this.id);
	    var segments = UI.get('segments', this.id);
	    var bottom = UI.get('bottom', this.id);
	    var lid = UI.get('lid', this.id);
	    var body = UI.get('body', this.id);
	    var fitLid = UI.get('fitLid', this.id);
	    var blinn = UI.get('blinn', this.id);

	    var geometry = new THREE.TeapotBufferGeometry(
	        size.getValue(),
	        segments.getValue(),
	        bottom.getValue(),
	        lid.getValue(),
	        body.getValue(),
	        fitLid.getValue(),
	        blinn.getValue()
	    );

	    geometry.type = 'TeapotBufferGeometry';

	    geometry.parameters = {
	        size: size.getValue(),
	        segments: segments.getValue(),
	        bottom: bottom.getValue(),
	        lid: lid.getValue(),
	        body: body.getValue(),
	        fitLid: fitLid.getValue(),
	        blinn: blinn.getValue()
	    };

	    this.app.editor.execute(new SetGeometryCommand(this.selected, geometry));
	};

	/**
	 * 几何体组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function GeometryComponent(options) {
	    BaseComponent.call(this, options);
	}

	GeometryComponent.prototype = Object.create(BaseComponent.prototype);
	GeometryComponent.prototype.constructor = GeometryComponent;

	GeometryComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        id: 'geometryPanel',
	        scope: this.id,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold'
	                },
	                text: L_GEOMETRY_COMPONENT
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_TYPE
	            }, {
	                xtype: 'text',
	                id: 'name',
	                scope: this.id,
	                text: ''
	            }]
	        },
	        new PlaneGeometryComponent({ app: this.app }),
	        new BoxGeometryComponent({ app: this.app }),
	        new CircleGeometryComponent({ app: this.app }),
	        new CylinderGeometryComponent({ app: this.app }),
	        new SphereGeometryComponent({ app: this.app }),
	        new IcosahedronGeometryComponent({ app: this.app }),
	        new TorusGeometryComponent({ app: this.app }),
	        new TorusKnotGeometryComponent({ app: this.app }),
	        new LatheGeometryComponent({ app: this.app }),
	        new TeapotGeometryComponent({ app: this.app })
	        ]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	};

	GeometryComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	GeometryComponent.prototype.updateUI = function () {
	    var container = UI.get('geometryPanel', this.id);
	    var editor = this.app.editor;

	    var name = UI.get('name', this.id);

	    if (editor.selected && editor.selected instanceof THREE.Mesh) {
	        container.dom.style.display = '';
	        if (editor.selected.geometry instanceof THREE.TeapotBufferGeometry) {
	            name.setValue('TeapotBufferGeometry');
	        } else {
	            name.setValue(editor.selected.geometry.constructor.name);
	        }
	    } else {
	        container.dom.style.display = 'none';
	        name.setValue('');
	    }
	};

	/**
	 * 设置材质命令
	 * @author dforrer / https://github.com/dforrer
	 * Developed as part of a project at University of Applied Sciences and Arts Northwestern Switzerland (www.fhnw.ch)
	 * @param object THREE.Object3D
	 * @param newMaterial THREE.Material
	 * @constructor
	 */
	function SetMaterialCommand(object, newMaterial) {
		Command.call(this);

		this.type = 'SetMaterialCommand';
		this.name = L_NEW_MATERIAL;

		this.object = object;
		this.oldMaterial = (object !== undefined) ? object.material : undefined;
		this.newMaterial = newMaterial;
	}
	SetMaterialCommand.prototype = Object.create(Command.prototype);

	Object.assign(SetMaterialCommand.prototype, {
		constructor: SetMaterialCommand,

		execute: function () {
			this.object.material = this.newMaterial;
			this.editor.app.call('materialChanged', this, this.newMaterial);
		},

		undo: function () {
			this.object.material = this.oldMaterial;
			this.editor.app.call('materialChanged', this, this.oldMaterial);
		},

		toJSON: function () {
			var output = Command.prototype.toJSON.call(this);

			output.objectUuid = this.object.uuid;
			output.oldMaterial = this.oldMaterial.toJSON();
			output.newMaterial = this.newMaterial.toJSON();

			return output;
		},

		fromJSON: function (json) {
			Command.prototype.fromJSON.call(this, json);

			this.object = this.editor.objectByUuid(json.objectUuid);
			this.oldMaterial = parseMaterial(json.oldMaterial);
			this.newMaterial = parseMaterial(json.newMaterial);

			function parseMaterial(json) {
				var loader = new THREE.ObjectLoader();
				var images = loader.parseImages(json.images);
				var textures = loader.parseTextures(json.textures, images);
				var materials = loader.parseMaterials([json], textures);
				return materials[json.uuid];
			}
		}
	});

	/**
	 * 设置材质颜色命令
	 * @author dforrer / https://github.com/dforrer
	 * Developed as part of a project at University of Applied Sciences and Arts Northwestern Switzerland (www.fhnw.ch)
	 * @param object THREE.Object3D
	 * @param attributeName string
	 * @param newValue integer representing a hex color value
	 * @constructor
	 */
	function SetMaterialColorCommand(object, attributeName, newValue) {
		Command.call(this);

		this.type = 'SetMaterialColorCommand';
		this.name = L_SET_MATERIAL + '.' + attributeName;
		this.updatable = true;

		this.object = object;
		this.attributeName = attributeName;
		this.oldValue = (object !== undefined) ? this.object.material[this.attributeName].getHex() : undefined;
		this.newValue = newValue;
	}
	SetMaterialColorCommand.prototype = Object.create(Command.prototype);

	Object.assign(SetMaterialColorCommand.prototype, {
		constructor: SetMaterialColorCommand,

		execute: function () {
			this.object.material[this.attributeName].setHex(this.newValue);
			this.editor.app.call('materialChanged', this, this.object.material);
		},

		undo: function () {
			this.object.material[this.attributeName].setHex(this.oldValue);
			this.editor.app.call('materialChanged', this, this.object.material);
		},

		update: function (cmd) {
			this.newValue = cmd.newValue;
		},

		toJSON: function () {
			var output = Command.prototype.toJSON.call(this);

			output.objectUuid = this.object.uuid;
			output.attributeName = this.attributeName;
			output.oldValue = this.oldValue;
			output.newValue = this.newValue;

			return output;
		},

		fromJSON: function (json) {
			Command.prototype.fromJSON.call(this, json);

			this.object = this.editor.objectByUuid(json.objectUuid);
			this.attributeName = json.attributeName;
			this.oldValue = json.oldValue;
			this.newValue = json.newValue;
		}
	});

	/**
	 * 设置材质值命令
	 * @author dforrer / https://github.com/dforrer
	 * Developed as part of a project at University of Applied Sciences and Arts Northwestern Switzerland (www.fhnw.ch)
	 * @param object THREE.Object3D
	 * @param attributeName string
	 * @param newValue number, string, boolean or object
	 * @constructor
	 */
	function SetMaterialValueCommand(object, attributeName, newValue) {
		Command.call(this);

		this.type = 'SetMaterialValueCommand';
		this.name = L_SET_MATERIAL + '.' + attributeName;
		this.updatable = true;

		this.object = object;
		this.oldValue = (object !== undefined) ? object.material[attributeName] : undefined;
		this.newValue = newValue;
		this.attributeName = attributeName;
	}
	SetMaterialValueCommand.prototype = Object.create(Command.prototype);

	Object.assign(SetMaterialValueCommand.prototype, {
		constructor: SetMaterialValueCommand,

		execute: function () {
			this.object.material[this.attributeName] = this.newValue;
			this.object.material.needsUpdate = true;
			this.editor.app.call('objectChanged', this, this.object);
			this.editor.app.call('materialChanged', this, this.object.material);
		},

		undo: function () {
			this.object.material[this.attributeName] = this.oldValue;
			this.object.material.needsUpdate = true;
			this.editor.app.call('objectChanged', this, this.object);
			this.editor.app.call('materialChanged', this, this.object.material);
		},

		update: function (cmd) {
			this.newValue = cmd.newValue;
		},

		toJSON: function () {
			var output = Command.prototype.toJSON.call(this);

			output.objectUuid = this.object.uuid;
			output.attributeName = this.attributeName;
			output.oldValue = this.oldValue;
			output.newValue = this.newValue;

			return output;
		},

		fromJSON: function (json) {
			Command.prototype.fromJSON.call(this, json);

			this.attributeName = json.attributeName;
			this.oldValue = json.oldValue;
			this.newValue = json.newValue;
			this.object = this.editor.objectByUuid(json.objectUuid);
		}
	});

	/**
	 * 设置材质纹理命令
	 * @author dforrer / https://github.com/dforrer
	 * Developed as part of a project at University of Applied Sciences and Arts Northwestern Switzerland (www.fhnw.ch)
	 * @param object THREE.Object3D
	 * @param mapName string
	 * @param newMap THREE.Texture
	 * @constructor
	 */
	function SetMaterialMapCommand(object, mapName, newMap) {
		Command.call(this);

		this.type = 'SetMaterialMapCommand';
		this.name = L_SET_MATERIAL + '.' + mapName;

		this.object = object;
		this.mapName = mapName;
		this.oldMap = (object !== undefined) ? object.material[mapName] : undefined;
		this.newMap = newMap;
	}
	SetMaterialMapCommand.prototype = Object.create(Command.prototype);

	Object.assign(SetMaterialMapCommand.prototype, {
		constructor: SetMaterialMapCommand,

		execute: function () {
			this.object.material[this.mapName] = this.newMap;
			this.object.material.needsUpdate = true;
			this.editor.app.call('materialChanged', this, this.object.material);
		},

		undo: function () {
			this.object.material[this.mapName] = this.oldMap;
			this.object.material.needsUpdate = true;
			this.editor.app.call('materialChanged', this, this.object.material);
		},

		toJSON: function () {
			var output = Command.prototype.toJSON.call(this);

			output.objectUuid = this.object.uuid;
			output.mapName = this.mapName;
			output.newMap = serializeMap(this.newMap);
			output.oldMap = serializeMap(this.oldMap);

			return output;

			// serializes a map (THREE.Texture)

			function serializeMap(map) {
				if (map === null || map === undefined) return null;

				var meta = {
					geometries: {},
					materials: {},
					textures: {},
					images: {}
				};

				var json = map.toJSON(meta);
				var images = extractFromCache(meta.images);
				if (images.length > 0) json.images = images;
				json.sourceFile = map.sourceFile;

				return json;
			}

			// Note: The function 'extractFromCache' is copied from Object3D.toJSON()

			// extract data from the cache hash
			// remove metadata on each item
			// and return as array
			function extractFromCache(cache) {
				var values = [];
				for (var key in cache) {

					var data = cache[key];
					delete data.metadata;
					values.push(data);

				}
				return values;
			}
		},

		fromJSON: function (json) {
			Command.prototype.fromJSON.call(this, json);

			this.object = this.editor.objectByUuid(json.objectUuid);
			this.mapName = json.mapName;
			this.oldMap = parseTexture(json.oldMap);
			this.newMap = parseTexture(json.newMap);

			function parseTexture(json) {
				var map = null;
				if (json !== null) {

					var loader = new THREE.ObjectLoader();
					var images = loader.parseImages(json.images);
					var textures = loader.parseTextures([json], images);
					map = textures[json.uuid];
					map.sourceFile = json.sourceFile;

				}
				return map;
			}
		}
	});

	var ShaderMaterialVertex = "void main()\t{\r\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}";

	var ShaderMaterialFragment = "void main()\t{\r\n\tgl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\r\n}";

	var RawShaderMaterialVertex = "precision mediump float;\r\n\r\nuniform mat4 modelViewMatrix;\r\nuniform mat4 projectionMatrix;\r\n\r\nattribute vec3 position;\r\n\r\nvoid main()\t{\r\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}";

	var RawShaderMaterialFragment = "precision mediump float;\r\n\r\nvoid main()\t{\r\n\tgl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\r\n}";

	/**
	 * 纹理选择控件
	 * @param {*} options 
	 */
	function TextureSelectControl(options = {}) {
	    UI.Control.call(this, options);

	    this.app = options.app;

	    this.texture = null;
	    this.mapping = options.mapping || THREE.UVMapping;

	    this.isSelecting = false;

	    this.onChange = options.onChange || null;
	}

	TextureSelectControl.prototype = Object.create(UI.Control.prototype);
	TextureSelectControl.prototype.constructor = TextureSelectControl;

	TextureSelectControl.prototype.render = function () {
	    this.dom = document.createElement('div');
	    this.dom.className = 'Texture';

	    this.canvas = document.createElement('canvas');
	    this.canvas.width = 32;
	    this.canvas.height = 16;
	    this.dom.appendChild(this.canvas);

	    this.canvas.addEventListener('click', this.onClick.bind(this));

	    this.name = document.createElement('input');
	    this.name.disabled = true;
	    this.dom.appendChild(this.name);

	    this.parent.appendChild(this.dom);
	};

	TextureSelectControl.prototype.updateUI = function () {
	    var canvas = this.dom.children[0];
	    var name = this.dom.children[1];
	    var context = canvas.getContext('2d');

	    var texture = this.texture;

	    if (texture !== undefined && texture !== null) {
	        var image = texture.image;

	        if (image !== undefined && image.width > 0) {
	            name.value = texture.name;

	            var scale = canvas.width / image.width;
	            context.drawImage(image, 0, 0, image.width * scale, image.height * scale);
	        } else {
	            name.value = L_NO_IMAGE;
	            context.clearRect(0, 0, canvas.width, canvas.height);
	        }

	    } else {
	        name.value = '';

	        if (context !== null) {
	            context.clearRect(0, 0, canvas.width, canvas.height);
	        }
	    }
	};

	TextureSelectControl.prototype.getValue = function () {
	    return this.texture;
	};

	TextureSelectControl.prototype.setValue = function (texture) {
	    this.texture = texture;
	    this.updateUI();
	};

	TextureSelectControl.prototype.onClick = function () {
	    this.app.call(`selectBottomPanel`, this, 'map');
	    UI.msg(L_CLICK_MAP_IN_PANEL);

	    if (this.isSelecting) {
	        return;
	    }

	    this.isSelecting = true;
	    this.app.on(`selectMap.${this.id}`, this.onSelect.bind(this));
	};

	TextureSelectControl.prototype.onSelect = function (data) {
	    this.isSelecting = false;
	    this.app.on(`selectMap.${this.id}`, null);

	    var urls = data.Url.split(';'); // 立体贴图data.Url多于一张，只取第一个。

	    if (data.Type === 'video') { // 视频贴图
	        var video = document.createElement('video');
	        video.src = `${this.app.options.server}${urls[0]}`;
	        video.loop = 'loop';
	        video.autoplay = 'autoplay';
	        video.onplay = () => {
	            var texture = new THREE.VideoTexture(video);
	            texture.minFilter = THREE.LinearFilter;
	            texture.magFilter = THREE.LinearFilter;
	            texture.format = THREE.RGBFormat;
	            this.texture = texture;
	            this.texture.name = data.Name;
	            this.updateUI();
	            this.onChange();
	        };
	    } else { // 其他
	        var loader = new THREE.TextureLoader();
	        loader.load(`${this.app.options.server}${urls[0]}`, texture => {
	            this.texture = texture;
	            this.texture.name = data.Name;
	            texture.mapping = this.mapping;
	            this.updateUI();
	            this.onChange();
	        });
	    }
	};

	/**
	 * 纹理设置窗口
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function TextureSettingWindow(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}

	TextureSettingWindow.prototype = Object.create(UI$1.Control.prototype);
	TextureSettingWindow.prototype.constructor = TextureSettingWindow;

	TextureSettingWindow.prototype.render = function () {
	    this.window = UI$1.create({
	        xtype: 'window',
	        title: L_TEXTURE_SETTINGS,
	        width: '300px',
	        height: '450px',
	        bodyStyle: {
	            padding: 0
	        },
	        shade: false,
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_OFFSET
	            }, {
	                xtype: 'number',
	                id: 'offsetX',
	                scope: this.id,
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'offsetY',
	                scope: this.id,
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ROTATE_CENTER
	            }, {
	                xtype: 'number',
	                id: 'centerX',
	                scope: this.id,
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'centerY',
	                scope: this.id,
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ROTATE
	            }, {
	                xtype: 'number',
	                id: 'rotation',
	                scope: this.id,
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_WRAP_S
	            }, {
	                xtype: 'select',
	                id: 'wrapS',
	                scope: this.id,
	                options: {
	                    [THREE.ClampToEdgeWrapping]: L_CLAMP_TO_EDGE,
	                    [THREE.RepeatWrapping]: L_REPEAT,
	                    [THREE.MirroredRepeatWrapping]: L_MIRRORED_REPEAT
	                },
	                style: {
	                    width: '160px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_WRAP_T
	            }, {
	                xtype: 'select',
	                id: 'wrapT',
	                scope: this.id,
	                options: {
	                    [THREE.ClampToEdgeWrapping]: L_CLAMP_TO_EDGE,
	                    [THREE.RepeatWrapping]: L_REPEAT,
	                    [THREE.MirroredRepeatWrapping]: L_MIRRORED_REPEAT
	                },
	                style: {
	                    width: '160px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_REPEAT_NUM
	            }, {
	                xtype: 'int',
	                id: 'repeatX',
	                scope: this.id,
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'int',
	                id: 'repeatY',
	                scope: this.id,
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_FLIP_Y
	            }, {
	                xtype: 'checkbox',
	                id: 'flipY',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MAG_FILTER
	            }, {
	                xtype: 'select',
	                id: 'magFilter',
	                scope: this.id,
	                options: {
	                    [THREE.LinearFilter]: 'LinearFilter',
	                    [THREE.NearestFilter]: 'NearestFilter'
	                },
	                style: {
	                    width: '160px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MIN_FILTER
	            }, {
	                xtype: 'select',
	                id: 'minFilter',
	                scope: this.id,
	                options: {
	                    [THREE.LinearMipMapLinearFilter]: 'LinearMipMapLinearFilter',
	                    [THREE.NearestFilter]: 'NearestFilter',
	                    [THREE.NearestMipMapNearestFilter]: 'NearestMipMapNearestFilter',
	                    [THREE.NearestMipMapLinearFilter]: 'NearestMipMapLinearFilter',
	                    [THREE.LinearFilter]: 'LinearFilter',
	                    [THREE.LinearMipMapNearestFilter]: 'LinearMipMapNearestFilter'
	                },
	                style: {
	                    width: '160px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_TYPE
	            }, {
	                xtype: 'select',
	                id: 'type',
	                scope: this.id,
	                options: {
	                    [THREE.UnsignedByteType]: 'UnsignedByteType',
	                    [THREE.ByteType]: 'ByteType',
	                    [THREE.ShortType]: 'ShortType',
	                    [THREE.UnsignedShortType]: 'UnsignedShortType',
	                    [THREE.IntType]: 'IntType',
	                    [THREE.UnsignedIntType]: 'UnsignedIntType',
	                    [THREE.FloatType]: 'FloatType',
	                    [THREE.HalfFloatType]: 'HalfFloatType',
	                    [THREE.UnsignedShort4444Type]: 'UnsignedShort4444Type',
	                    [THREE.UnsignedShort5551Type]: 'UnsignedShort5551Type',
	                    [THREE.UnsignedShort565Type]: 'UnsignedShort565Type',
	                    [THREE.UnsignedInt248Type]: 'UnsignedInt248Type'
	                },
	                style: {
	                    width: '160px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ENCODING
	            }, {
	                xtype: 'select',
	                id: 'encoding',
	                scope: this.id,
	                options: {
	                    [THREE.LinearEncoding]: 'LinearEncoding',
	                    [THREE.sRGBEncoding]: 'sRGBEncoding',
	                    [THREE.GammaEncoding]: 'GammaEncoding',
	                    [THREE.RGBEEncoding]: 'RGBEEncoding',
	                    [THREE.LogLuvEncoding]: 'LogLuvEncoding',
	                    [THREE.RGBM7Encoding]: 'RGBM7Encoding',
	                    [THREE.RGBM16Encoding]: 'RGBM16Encoding',
	                    [THREE.RGBDEncoding]: 'RGBDEncoding',
	                    [THREE.BasicDepthPacking]: 'BasicDepthPacking',
	                    [THREE.RGBADepthPacking]: 'RGBADepthPacking'
	                },
	                style: {
	                    width: '160px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_FORMAT
	            }, {
	                xtype: 'select',
	                id: 'format',
	                scope: this.id,
	                options: {
	                    [THREE.RGBAFormat]: 'RGBAFormat',
	                    [THREE.AlphaFormat]: 'AlphaFormat',
	                    [THREE.RGBFormat]: 'RGBFormat',
	                    [THREE.LuminanceFormat]: 'LuminanceFormat',
	                    [THREE.LuminanceAlphaFormat]: 'LuminanceAlphaFormat',
	                    [THREE.RGBEFormat]: 'RGBEFormat',
	                    [THREE.DepthFormat]: 'DepthFormat',
	                    [THREE.DepthStencilFormat]: 'DepthStencilFormat'
	                },
	                style: {
	                    width: '160px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_GENERATE_MIPMAPS
	            }, {
	                xtype: 'checkbox',
	                id: 'generateMipmaps',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MAPPING
	            }, {
	                xtype: 'select',
	                id: 'mapping',
	                scope: this.id,
	                options: {
	                    [THREE.UVMapping]: 'UVMapping',
	                    [THREE.CubeReflectionMapping]: 'CubeReflectionMapping',
	                    [THREE.CubeRefractionMapping]: 'CubeRefractionMapping',
	                    [THREE.EquirectangularReflectionMapping]: 'EquirectangularReflectionMapping',
	                    [THREE.EquirectangularRefractionMapping]: 'EquirectangularRefractionMapping',
	                    [THREE.SphericalReflectionMapping]: 'SphericalReflectionMapping',
	                    [THREE.CubeUVReflectionMapping]: 'CubeUVReflectionMapping',
	                    [THREE.CubeUVRefractionMapping]: 'CubeUVRefractionMapping'
	                },
	                style: {
	                    width: '160px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_PREMULTIPLY_ALPHA
	            }, {
	                xtype: 'checkbox',
	                id: 'premultiplyAlpha',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_UNPACK_ALIGNMENT
	            }, {
	                xtype: 'select',
	                id: 'unpackAlignment',
	                scope: this.id,
	                options: {
	                    [4]: '4',
	                    [1]: '1',
	                    [2]: '2',
	                    [8]: '8'
	                },
	                style: {
	                    width: '160px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ANISOTROPY
	            }, {
	                xtype: 'int',
	                id: 'anisotropy',
	                scope: this.id,
	                style: {
	                    width: '80px'
	                },
	                range: [1, 16],
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    });
	    this.window.render();
	};

	TextureSettingWindow.prototype.show = function () {
	    this.window.show();
	};

	TextureSettingWindow.prototype.hide = function () {
	    this.window.hide();
	};

	TextureSettingWindow.prototype.setData = function (texture) {
	    var anisotropy = UI$1.get('anisotropy', this.id);
	    var centerX = UI$1.get('centerX', this.id);
	    var centerY = UI$1.get('centerY', this.id);
	    var offsetX = UI$1.get('offsetX', this.id);
	    var offsetY = UI$1.get('offsetY', this.id);
	    var repeatX = UI$1.get('repeatX', this.id);
	    var repeatY = UI$1.get('repeatY', this.id);
	    var rotation = UI$1.get('rotation', this.id);
	    var type = UI$1.get('type', this.id);
	    var encoding = UI$1.get('encoding', this.id);
	    var flipY = UI$1.get('flipY', this.id);
	    var format = UI$1.get('format', this.id);
	    var generateMipmaps = UI$1.get('generateMipmaps', this.id);
	    var magFilter = UI$1.get('magFilter', this.id);
	    var minFilter = UI$1.get('minFilter', this.id);
	    var mapping = UI$1.get('mapping', this.id);
	    var premultiplyAlpha = UI$1.get('premultiplyAlpha', this.id);
	    var unpackAlignment = UI$1.get('unpackAlignment', this.id);
	    var wrapS = UI$1.get('wrapS', this.id);
	    var wrapT = UI$1.get('wrapT', this.id);

	    this.texture = texture;

	    anisotropy.setValue(texture.anisotropy);
	    centerX.setValue(texture.center.x);
	    centerY.setValue(texture.center.y);
	    offsetX.setValue(texture.offset.x);
	    offsetY.setValue(texture.offset.y);
	    repeatX.setValue(texture.repeat.x);
	    repeatY.setValue(texture.repeat.y);
	    rotation.setValue(texture.rotation);
	    type.setValue(texture.type);
	    encoding.setValue(texture.encoding);
	    flipY.setValue(texture.flipY);
	    format.setValue(texture.format);
	    generateMipmaps.setValue(texture.generateMipmaps);
	    magFilter.setValue(texture.magFilter);
	    minFilter.setValue(texture.minFilter);
	    mapping.setValue(texture.mapping);
	    premultiplyAlpha.setValue(texture.premultiplyAlpha);
	    unpackAlignment.setValue(texture.unpackAlignment);
	    wrapS.setValue(texture.wrapS);
	    wrapT.setValue(texture.wrapT);
	};

	TextureSettingWindow.prototype.onChange = function () {
	    var anisotropy = UI$1.get('anisotropy', this.id);
	    var centerX = UI$1.get('centerX', this.id);
	    var centerY = UI$1.get('centerY', this.id);
	    var offsetX = UI$1.get('offsetX', this.id);
	    var offsetY = UI$1.get('offsetY', this.id);
	    var repeatX = UI$1.get('repeatX', this.id);
	    var repeatY = UI$1.get('repeatY', this.id);
	    var rotation = UI$1.get('rotation', this.id);
	    var type = UI$1.get('type', this.id);
	    var encoding = UI$1.get('encoding', this.id);
	    var flipY = UI$1.get('flipY', this.id);
	    var format = UI$1.get('format', this.id);
	    var generateMipmaps = UI$1.get('generateMipmaps', this.id);
	    var magFilter = UI$1.get('magFilter', this.id);
	    var minFilter = UI$1.get('minFilter', this.id);
	    var mapping = UI$1.get('mapping', this.id);
	    var premultiplyAlpha = UI$1.get('premultiplyAlpha', this.id);
	    var unpackAlignment = UI$1.get('unpackAlignment', this.id);
	    var wrapS = UI$1.get('wrapS', this.id);
	    var wrapT = UI$1.get('wrapT', this.id);

	    var texture = this.texture;

	    texture.anisotropy = anisotropy.getValue();
	    texture.center.x = centerX.getValue();
	    texture.center.y = centerY.getValue();
	    texture.offset.x = offsetX.getValue();
	    texture.offset.y = offsetY.getValue();
	    texture.repeat.x = repeatX.getValue();
	    texture.repeat.y = repeatY.getValue();
	    texture.rotation = rotation.getValue();
	    texture.type = parseInt(type.getValue());
	    texture.encoding = parseInt(encoding.getValue());
	    texture.flipY = flipY.getValue();
	    texture.format = parseInt(format.getValue());
	    texture.generateMipmaps = generateMipmaps.getValue();
	    texture.magFilter = parseInt(magFilter.getValue());
	    texture.minFilter = parseInt(minFilter.getValue());
	    texture.mapping = parseInt(mapping.getValue());
	    texture.premultiplyAlpha = premultiplyAlpha.getValue();
	    texture.unpackAlignment = parseInt(unpackAlignment.getValue());
	    texture.wrapS = parseInt(wrapS.getValue());
	    texture.wrapT = parseInt(wrapT.getValue());

	    texture.needsUpdate = true;
	};

	/**
	 * 创建材质球图片
	 * @param {*} material 材质
	 * @param {*} width 宽度
	 * @param {*} height 高度
	 */
	function createMaterialImage(material, width = 160, height = 160) {
	    var scene = new THREE.Scene();

	    var camera = new THREE.OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, 0, 1000);
	    camera.position.z = 80;

	    var renderer = new THREE.WebGLRenderer({
	        antialias: true
	    });
	    renderer.setSize(width, height);

	    var light1 = new THREE.AmbientLight(0xffffff, 0.3);
	    scene.add(light1);

	    var light2 = new THREE.DirectionalLight(0xffffff, 0.8);
	    scene.add(light2);
	    light2.position.set(0, 10, 10);
	    light2.lookAt(new THREE.Vector3());

	    var geometry = new THREE.SphereBufferGeometry(72, 32, 32);
	    var mesh = new THREE.Mesh(geometry, material);
	    scene.add(mesh);

	    renderer.setClearColor(0xeeeeee);
	    renderer.clear();
	    renderer.render(scene, camera);

	    geometry.dispose();
	    renderer.dispose();

	    return renderer.domElement;
	}

	/**
	 * 材质工具类
	 */
	const MaterialUtils = {
	    createMaterialImage: createMaterialImage,
	};

	/**
	 * canvas转DataURL
	 * @author cuixiping / https://blog.csdn.net/cuixiping/article/details/45932793
	 * @param {*} canvas 画布
	 * @param {*} type 图片类型 image/png或image/jpeg
	 * @param {*} quality jpeg图片质量
	 */
	function canvasToDataURL(canvas, type = 'image/png', quality = 0.8) {
	    if (type.toLowerCase() === 'image/png') {
	        return canvas.toDataURL(type);
	    } else {
	        return canvas.toDataURL(type, quality);
	    }
	}

	/**
	 * Blob转DataURL
	 * @author cuixiping / https://blog.csdn.net/cuixiping/article/details/45932793
	 * @param {*} blob Blob对象
	 */
	function blobToDataURL(blob) {
	    var reader = new FileReader();

	    return new Promise(resolve => {
	        reader.onload = e => {
	            resolve(e.target.result);
	        };
	        reader.readAsDataURL(blob);
	    });
	}

	/**
	 * 文件转DataURL
	 * @author cuixiping / https://blog.csdn.net/cuixiping/article/details/45932793
	 * @param {*} file 文件
	 */
	function fileToDataURL(file) {
	    return blobToDataURL(file);
	}

	/**
	 * DataURL转Blob
	 * @author cuixiping / https://blog.csdn.net/cuixiping/article/details/45932793
	 * @param {*} dataURL 
	 */
	function dataURLToBlob(dataURL) {
	    var array = dataURL.split(',');
	    var mimeType = array[0].match(/:(.*?);/)[1];
	    var binaryString = atob(array[1]);
	    var length = binaryString.length;
	    var uint8Array = new Uint8Array(length);
	    while (length--) {
	        uint8Array[length] = binaryString.charCodeAt(length);
	    }
	    return new Blob([uint8Array], { type: mimeType });
	}

	/**
	 * DataURL转File
	 * @author cuixiping / https://blog.csdn.net/cuixiping/article/details/45932793
	 * @param {*} dataURL 
	 * @param {*} filename 文件名
	 */
	function dataURLtoFile(dataURL, filename) {
	    var array = dataURL.split(',');
	    var mimeType = array[0].match(/:(.*?);/)[1];
	    var binaryString = atob(array[1]);
	    var length = binaryString.length;
	    var uint8Array = new Uint8Array(length);
	    while (length--) {
	        uint8Array[length] = binaryString.charCodeAt(length);
	    }
	    return new File([uint8Array], filename, { type: mimeType });
	}

	/**
	 * DataURL转图片
	 * @author cuixiping / https://blog.csdn.net/cuixiping/article/details/45932793
	 * @param {*} dataURL 
	 */
	function dataURLToImage(dataURL) {
	    var image = new Image();

	    return new Promise(resolve => {
	        image.onload = () => {
	            image.onload = null;
	            image.onerror = null;
	            resolve(image);
	        };
	        image.onerror = () => {
	            image.onload = null;
	            image.onerror = null;
	            resolve(null);
	        };
	        image.src = dataURL;
	    });
	}

	/**
	 * Blob转图片
	 * @author cuixiping / https://blog.csdn.net/cuixiping/article/details/45932793
	 * @param {*} blob 
	 */
	function BlobToImage(blob) {
	    return new Promise(resolve => {
	        blobToDataURL(blob).then(dataURL => {
	            dataURLToImage(dataURL).then(image => {
	                resolve(image);
	            });
	        });
	    });
	}

	/**
	 * 文件转图片
	 * @author cuixiping / https://blog.csdn.net/cuixiping/article/details/45932793
	 * @param {*} file 文件
	 */
	function FileToImage(file) {
	    return BlobToImage(file);
	}

	/**
	 * 图片转画布
	 * @author cuixiping / https://blog.csdn.net/cuixiping/article/details/45932793
	 * @param {*} image 图片
	 */
	function ImageToCanvas(image) {
	    var canvas = document.createElement('canvas');
	    canvas.width = image.width;
	    canvas.height = image.height;

	    var context = canvas.getContext('2d');
	    context.drawImage(image, 0, 0);

	    return canvas;
	}

	/**
	 * 画布转图片
	 * @param {*} canvas 画布
	 * @param {*} type 类型
	 * @param {*} quality jpeg图片质量
	 */
	function CanvasToImage(canvas, type = 'image/png', quality = 0.8) {
	    var image = new Image();
	    if (type === 'image/jpeg') {
	        image.src = canvas.toDataURL('image/jpeg', quality);
	    } else {
	        image.src = canvas.toDataURL('image/png');
	    }
	    return image;
	}

	/**
	 * 类型转换工具
	 * @author tengge / https://github.com/tengge1
	 */
	const Converter$1 = {
	    canvasToDataURL: canvasToDataURL,
	    blobToDataURL: blobToDataURL,
	    fileToDataURL: fileToDataURL,
	    dataURLToBlob: dataURLToBlob,
	    dataURLtoFile: dataURLtoFile,
	    dataURLToImage: dataURLToImage,
	    BlobToImage: BlobToImage,
	    FileToImage: FileToImage,
	    imageToCanvas: ImageToCanvas,
	    canvasToImage: CanvasToImage,
	};

	/**
	 * 材质组件
	 * @author mrdoob / http://mrdoob.com/
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function MaterialComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	MaterialComponent.prototype = Object.create(BaseComponent.prototype);
	MaterialComponent.prototype.constructor = MaterialComponent;

	MaterialComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'materialPanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold'
	                },
	                text: L_MATERIAL_COMPONENT
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: ''
	            }, {
	                xtype: 'button',
	                text: L_SAVE,
	                onClick: this.onSave.bind(this)
	            }, {
	                xtype: 'button',
	                text: L_SELECT,
	                onClick: this.onLoad.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_TYPE
	            }, {
	                xtype: 'select',
	                id: 'type',
	                scope: this.id,
	                options: {
	                    'LineBasicMaterial': L_LINE_BASIC_MATERIAL,
	                    'LineDashedMaterial': L_LINE_DASHED_MATERIAL,
	                    'MeshBasicMaterial': L_MESH_BASIC_MATERIAL,
	                    'MeshDepthMaterial': L_MESH_DEPTH_MATERIAL,
	                    'MeshNormalMaterial': L_MESH_NORMAL_MATERIAL,
	                    'MeshLambertMaterial': L_MESH_LAMBERT_MATERIAL,
	                    'MeshPhongMaterial': L_MESH_PHONG_MATERIAL,
	                    'PointCloudMaterial': L_POINT_CLOUD_MATERIAL,
	                    'MeshStandardMaterial': L_MESH_STANDARD_MATERIAL,
	                    'MeshPhysicalMaterial': L_MESH_PHYSICAL_MATERIAL,
	                    'SpriteMaterial': L_SPRITE_MATERIAL,
	                    'ShaderMaterial': L_SHADER_MATERIAL,
	                    'RawShaderMaterial': L_RAW_SHADER_MATERIAL
	                },
	                style: {
	                    width: '100px',
	                    fontSize: '12px'
	                },
	                onChange: this.updateMaterial.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'programRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_SHADER_PROGRAM
	            }, {
	                xtype: 'button',
	                scope: this.id,
	                text: L_INFO,
	                style: {
	                    marginLeft: '4px'
	                },
	                onClick: this.editProgramInfo.bind(this)
	            }, {
	                xtype: 'button',
	                scope: this.id,
	                text: L_VERTEX,
	                style: {
	                    marginLeft: '4px'
	                },
	                onClick: this.editVertexShader.bind(this)
	            }, {
	                xtype: 'button',
	                scope: this.id,
	                text: L_FRAGMENT,
	                style: {
	                    marginLeft: '4px'
	                },
	                onClick: this.editFragmentShader.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'colorRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_COLOR
	            }, {
	                xtype: 'color',
	                id: 'color',
	                scope: this.id,
	                onChange: this.updateMaterial.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'roughnessRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_ROUGHNESS
	            }, {
	                xtype: 'number',
	                id: 'roughness',
	                scope: this.id,
	                value: 0.5,
	                style: {
	                    width: '60px'
	                },
	                range: [0, 1],
	                onChange: this.updateMaterial.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'metalnessRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_METALNESS
	            }, {
	                xtype: 'number',
	                id: 'metalness',
	                scope: this.id,
	                value: 0.5,
	                style: {
	                    width: '60px'
	                },
	                range: [0, 1],
	                onChange: this.updateMaterial.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'emissiveRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_EMISSIVE
	            }, {
	                xtype: 'color',
	                id: 'emissive',
	                scope: this.id,
	                value: 0x000000,
	                onChange: this.updateMaterial.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'specularRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_SPECULAR
	            }, {
	                xtype: 'color',
	                id: 'specular',
	                scope: this.id,
	                value: 0x111111,
	                onChange: this.updateMaterial.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'shininessRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_SHININESS
	            }, {
	                xtype: 'number',
	                id: 'shininess',
	                scope: this.id,
	                value: 30,
	                onChange: this.updateMaterial.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'clearCoatRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_CLEAR_COAT
	            }, {
	                xtype: 'number',
	                id: 'clearCoat',
	                scope: this.id,
	                value: 1,
	                style: {
	                    width: '60px'
	                },
	                range: [0, 1],
	                onChange: this.updateMaterial.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'clearCoatRoughnessRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_CLEAR_COAT_ROUGHNESS
	            }, {
	                xtype: 'number',
	                id: 'clearCoatRoughness',
	                scope: this.id,
	                value: 1,
	                style: {
	                    width: '60px'
	                },
	                range: [0, 1],
	                onChange: this.updateMaterial.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'vertexColorsRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_VERTEX_COLOR
	            }, {
	                xtype: 'select',
	                id: 'vertexColors',
	                scope: this.id,
	                options: {
	                    0: L_NO_COLORS,
	                    1: L_FACE_COLORS,
	                    2: L_VERTEX_COLORS
	                },
	                onChange: this.updateMaterial.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'skinningRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_SKIN
	            }, {
	                xtype: 'checkbox',
	                id: 'skinning',
	                scope: this.id,
	                value: false,
	                onChange: this.updateMaterial.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'mapRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_TEXTURE
	            }, {
	                xtype: 'checkbox',
	                id: 'mapEnabled',
	                scope: this.id,
	                value: false,
	                onChange: this.updateMaterial.bind(this)
	            },
	            new TextureSelectControl({
	                app: this.app,
	                id: 'map',
	                scope: this.id,
	                onChange: this.updateMaterial.bind(this)
	            }), {
	                xtype: 'linkbutton',
	                text: L_SET_MAP,
	                style: {
	                    marginLeft: '4px'
	                },
	                onClick: this.onSetMap.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'alphaMapRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_ALPHA_MAP
	            }, {
	                xtype: 'checkbox',
	                id: 'alphaMapEnabled',
	                scope: this.id,
	                value: false,
	                onChange: this.updateMaterial.bind(this)
	            }, new TextureSelectControl({
	                app: this.app,
	                id: 'alphaMap',
	                scope: this.id,
	                onChange: this.updateMaterial.bind(this)
	            })]
	        }, {
	            xtype: 'row',
	            id: 'bumpMapRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_BUMP_MAP
	            }, {
	                xtype: 'checkbox',
	                id: 'bumpMapEnabled',
	                scope: this.id,
	                value: false,
	                onChange: this.updateMaterial.bind(this)
	            }, new TextureSelectControl({
	                app: this.app,
	                id: 'bumpMap',
	                scope: this.id,
	                onChange: this.updateMaterial.bind(this)
	            }), {
	                xtype: 'number',
	                id: 'bumpScale',
	                scope: this.id,
	                value: 1,
	                style: {
	                    width: '30px'
	                },
	                onChange: this.updateMaterial.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'normalMapRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_NORMAL_MAP
	            }, {
	                xtype: 'checkbox',
	                id: 'normalMapEnabled',
	                scope: this.id,
	                value: false,
	                onChange: this.updateMaterial.bind(this)
	            }, new TextureSelectControl({
	                app: this.app,
	                id: 'normalMap',
	                scope: this.id,
	                onChange: this.updateMaterial.bind(this)
	            })]
	        }, {
	            xtype: 'row',
	            id: 'displacementMapRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_DISPLACEMENT_MAP
	            }, {
	                xtype: 'checkbox',
	                id: 'displacementMapEnabled',
	                scope: this.id,
	                value: false,
	                onChange: this.updateMaterial.bind(this)
	            }, new TextureSelectControl({
	                app: this.app,
	                id: 'displacementMap',
	                scope: this.id,
	                onChange: this.updateMaterial.bind(this)
	            }), {
	                xtype: 'number',
	                id: 'displacementScale',
	                scope: this.id,
	                value: 1,
	                style: {
	                    width: '30px'
	                },
	                onChange: this.updateMaterial.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'roughnessMapRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_ROUGHNESS_MAP
	            }, {
	                xtype: 'checkbox',
	                id: 'roughnessMapEnabled',
	                scope: this.id,
	                value: false,
	                onChange: this.updateMaterial.bind(this)
	            }, new TextureSelectControl({
	                app: this.app,
	                id: 'roughnessMap',
	                scope: this.id,
	                onChange: this.updateMaterial.bind(this)
	            })]
	        }, {
	            xtype: 'row',
	            id: 'metalnessMapRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_METALNESS_MAP
	            }, {
	                xtype: 'checkbox',
	                id: 'metalnessMapEnabled',
	                scope: this.id,
	                value: false,
	                onChange: this.updateMaterial.bind(this)
	            }, new TextureSelectControl({
	                app: this.app,
	                id: 'metalnessMap',
	                scope: this.id,
	                onChange: this.updateMaterial.bind(this)
	            })]
	        }, {
	            xtype: 'row',
	            id: 'specularMapRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_SPECULAR_MAP
	            }, {
	                xtype: 'checkbox',
	                id: 'specularMapEnabled',
	                scope: this.id,
	                value: false,
	                onChange: this.updateMaterial.bind(this)
	            }, new TextureSelectControl({
	                app: this.app,
	                id: 'specularMap',
	                scope: this.id,
	                onChange: this.updateMaterial.bind(this)
	            })]
	        }, {
	            xtype: 'row',
	            id: 'envMapRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_ENV_MAP
	            }, {
	                xtype: 'checkbox',
	                id: 'envMapEnabled',
	                scope: this.id,
	                value: false,
	                onChange: this.updateMaterial.bind(this)
	            }, new TextureSelectControl({
	                app: this.app,
	                id: 'envMap',
	                scope: this.id,
	                mapping: THREE.SphericalReflectionMapping,
	                onChange: this.updateMaterial.bind(this)
	            }), {
	                xtype: 'number',
	                id: 'reflectivity',
	                scope: this.id,
	                value: 1,
	                style: {
	                    width: '30px'
	                },
	                onChange: this.updateMaterial.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'lightMapRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_LIGHT_MAP
	            }, {
	                xtype: 'checkbox',
	                id: 'lightMapEnabled',
	                scope: this.id,
	                value: false,
	                onChange: this.updateMaterial.bind(this)
	            }, new TextureSelectControl({
	                app: this.app,
	                id: 'lightMap',
	                scope: this.id,
	                onChange: this.updateMaterial.bind(this)
	            })]
	        }, {
	            xtype: 'row',
	            id: 'aoMapRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_AO_MAP
	            }, {
	                xtype: 'checkbox',
	                id: 'aoMapEnabled',
	                scope: this.id,
	                value: false,
	                onChange: this.updateMaterial.bind(this)
	            }, new TextureSelectControl({
	                app: this.app,
	                id: 'aoMap',
	                scope: this.id,
	                onChange: this.updateMaterial.bind(this)
	            }), {
	                xtype: 'number',
	                id: 'aoScale',
	                scope: this.id,
	                value: 1,
	                range: [0, 1],
	                style: {
	                    width: '30px'
	                },
	                onChange: this.updateMaterial.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'emissiveMapRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_EMISSIVE_MAP
	            }, {
	                xtype: 'checkbox',
	                id: 'emissiveMapEnabled',
	                scope: this.id,
	                value: false,
	                onChange: this.updateMaterial.bind(this)
	            }, new TextureSelectControl({
	                app: this.app,
	                id: 'emissiveMap',
	                scope: this.id,
	                onChange: this.updateMaterial.bind(this)
	            })]
	        }, {
	            xtype: 'row',
	            id: 'sideRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_SIDE
	            }, {
	                xtype: 'select',
	                id: 'side',
	                scope: this.id,
	                options: {
	                    0: L_FRONT_SIDE,
	                    1: L_BACK_SIDE,
	                    2: L_DOUBLE_SIDE
	                },
	                style: {
	                    width: '100px',
	                    fontSize: '12px'
	                },
	                onChange: this.updateMaterial.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'flatShadingRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_FLAT_SHADING
	            }, {
	                xtype: 'checkbox',
	                id: 'flatShading',
	                scope: this.id,
	                onChange: this.updateMaterial.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'blendingRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_BLENDING
	            }, {
	                xtype: 'select',
	                id: 'blending',
	                scope: this.id,
	                options: {
	                    0: L_NO_BLENDING,
	                    1: L_NORMAL_BLENDING,
	                    2: L_ADDITIVE_BLENDING,
	                    3: L_SUBSTRACTIVE_BLENDING,
	                    4: L_MULTIPLY_BLENDING,
	                    5: L_CUSTOM_BLENDING
	                },
	                style: {
	                    width: '100px',
	                    fontSize: '12px'
	                },
	                onChange: this.updateMaterial.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'opacityRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_OPACITY
	            }, {
	                xtype: 'number',
	                id: 'opacity',
	                scope: this.id,
	                value: 1,
	                style: {
	                    width: '60px'
	                },
	                range: [0, 1],
	                onChange: this.updateMaterial.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'transparentRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_TRANSPARENT
	            }, {
	                xtype: 'checkbox',
	                id: 'transparent',
	                scope: this.id,
	                style: {
	                    left: '100px'
	                },
	                onChange: this.updateMaterial.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'alphaTestRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_ALPHA_TEST
	            }, {
	                xtype: 'number',
	                id: 'alphaTest',
	                scope: this.id,
	                style: {
	                    width: '60px'
	                },
	                range: [0, 1],
	                onChange: this.updateMaterial.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'wireframeRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_WIREFRAME
	            }, {
	                xtype: 'checkbox',
	                id: 'wireframe',
	                scope: this.id,
	                value: false,
	                onChange: this.updateMaterial.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'wireframeLinewidth',
	                scope: this.id,
	                value: 1,
	                style: {
	                    width: '60px'
	                },
	                range: [0, 100],
	                onChange: this.updateMaterial.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	MaterialComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	MaterialComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	MaterialComponent.prototype.updateUI = function () {
	    var container = UI.get('materialPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected &&
	        (editor.selected instanceof THREE.Mesh ||
	            editor.selected instanceof THREE.Line ||
	            editor.selected instanceof THREE.Sprite) &&
	        !Array.isArray(editor.selected.material)) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    this.setRowVisibility();
	    this.setRowValue();
	};

	MaterialComponent.prototype.setRowVisibility = function () {
	    var programRow = UI.get('programRow', this.id);
	    var colorRow = UI.get('colorRow', this.id);
	    var roughnessRow = UI.get('roughnessRow', this.id);
	    var metalnessRow = UI.get('metalnessRow', this.id);
	    var emissiveRow = UI.get('emissiveRow', this.id);
	    var specularRow = UI.get('specularRow', this.id);
	    var shininessRow = UI.get('shininessRow', this.id);
	    var clearCoatRow = UI.get('clearCoatRow', this.id);
	    var clearCoatRoughnessRow = UI.get('clearCoatRoughnessRow', this.id);
	    var vertexColorsRow = UI.get('vertexColorsRow', this.id);
	    var skinningRow = UI.get('skinningRow', this.id);
	    var mapRow = UI.get('mapRow', this.id);
	    var alphaMapRow = UI.get('alphaMapRow', this.id);
	    var bumpMapRow = UI.get('bumpMapRow', this.id);
	    var normalMapRow = UI.get('normalMapRow', this.id);
	    var displacementMapRow = UI.get('displacementMapRow', this.id);
	    var roughnessMapRow = UI.get('roughnessMapRow', this.id);
	    var metalnessMapRow = UI.get('metalnessMapRow', this.id);
	    var specularMapRow = UI.get('specularMapRow', this.id);
	    var envMapRow = UI.get('envMapRow', this.id);
	    var lightMapRow = UI.get('lightMapRow', this.id);
	    var aoMapRow = UI.get('aoMapRow', this.id);
	    var emissiveMapRow = UI.get('emissiveMapRow', this.id);
	    var sideRow = UI.get('sideRow', this.id);
	    var flatShadingRow = UI.get('flatShadingRow', this.id);
	    var blendingRow = UI.get('blendingRow', this.id);
	    var opacityRow = UI.get('opacityRow', this.id);
	    var transparentRow = UI.get('transparentRow', this.id);
	    var alphaTestRow = UI.get('alphaTestRow', this.id);
	    var wireframeRow = UI.get('wireframeRow', this.id);

	    var properties = {
	        'vertexShader': programRow,
	        'color': colorRow,
	        'roughness': roughnessRow,
	        'metalness': metalnessRow,
	        'emissive': emissiveRow,
	        'specular': specularRow,
	        'shininess': shininessRow,
	        'clearCoat': clearCoatRow,
	        'clearCoatRoughness': clearCoatRoughnessRow,
	        'vertexColors': vertexColorsRow,
	        'skinning': skinningRow,
	        'map': mapRow,
	        'alphaMap': alphaMapRow,
	        'bumpMap': bumpMapRow,
	        'normalMap': normalMapRow,
	        'displacementMap': displacementMapRow,
	        'roughnessMap': roughnessMapRow,
	        'metalnessMap': metalnessMapRow,
	        'specularMap': specularMapRow,
	        'envMap': envMapRow,
	        'lightMap': lightMapRow,
	        'aoMap': aoMapRow,
	        'emissiveMap': emissiveMapRow,
	        'side': sideRow,
	        'flatShading': flatShadingRow,
	        'blending': blendingRow,
	        'opacity': opacityRow,
	        'transparent': transparentRow,
	        'alphaTest': alphaTestRow,
	        'wireframe': wireframeRow
	    };

	    var material = this.selected.material;
	    for (var property in properties) {
	        properties[property].dom.style.display = material[property] === undefined ? 'none' : '';
	    }
	};

	MaterialComponent.prototype.setRowValue = function () {
	    var type = UI.get('type', this.id);
	    var color = UI.get('color', this.id);
	    var roughness = UI.get('roughness', this.id);
	    var metalness = UI.get('metalness', this.id);
	    var emissive = UI.get('emissive', this.id);
	    var specular = UI.get('specular', this.id);
	    var shininess = UI.get('shininess', this.id);
	    var clearCoat = UI.get('clearCoat', this.id);
	    var clearCoatRoughness = UI.get('clearCoatRoughness', this.id);
	    var vertexColors = UI.get('vertexColors', this.id);
	    var skinning = UI.get('skinning', this.id);
	    var mapEnabled = UI.get('mapEnabled', this.id);
	    var map = UI.get('map', this.id);
	    var alphaMapEnabled = UI.get('alphaMapEnabled', this.id);
	    var alphaMap = UI.get('alphaMap', this.id);
	    var bumpMapEnabled = UI.get('bumpMapEnabled', this.id);
	    var bumpMap = UI.get('bumpMap', this.id);
	    var bumpScale = UI.get('bumpScale', this.id);
	    var normalMapEnabled = UI.get('normalMapEnabled', this.id);
	    var normalMap = UI.get('normalMap', this.id);
	    var displacementMapEnabled = UI.get('displacementMapEnabled', this.id);
	    var displacementMap = UI.get('displacementMap', this.id);
	    var displacementScale = UI.get('displacementScale', this.id);
	    var roughnessMapEnabled = UI.get('roughnessMapEnabled', this.id);
	    var roughnessMap = UI.get('roughnessMap', this.id);
	    var metalnessMapEnabled = UI.get('metalnessMapEnabled', this.id);
	    var metalnessMap = UI.get('metalnessMap', this.id);
	    var specularMapEnabled = UI.get('specularMapEnabled', this.id);
	    var specularMap = UI.get('specularMap', this.id);
	    var envMapEnabled = UI.get('envMapEnabled', this.id);
	    var envMap = UI.get('envMap', this.id);
	    var reflectivity = UI.get('reflectivity', this.id);
	    var lightMapEnabled = UI.get('lightMapEnabled', this.id);
	    var lightMap = UI.get('lightMap', this.id);
	    var aoMapEnabled = UI.get('aoMapEnabled', this.id);
	    var aoMap = UI.get('aoMap', this.id);
	    var aoScale = UI.get('aoScale', this.id);
	    var emissiveMapEnabled = UI.get('emissiveMapEnabled', this.id);
	    var emissiveMap = UI.get('emissiveMap', this.id);
	    var side = UI.get('side', this.id);
	    var flatShading = UI.get('flatShading', this.id);
	    var blending = UI.get('blending', this.id);
	    var opacity = UI.get('opacity', this.id);
	    var transparent = UI.get('transparent', this.id);
	    var alphaTest = UI.get('alphaTest', this.id);
	    var wireframe = UI.get('wireframe', this.id);
	    var wireframeLinewidth = UI.get('wireframeLinewidth', this.id);

	    var material = this.selected.material;

	    type.setValue(material.type);

	    if (material.color) {
	        color.setHexValue(material.color.getHexString());
	    }

	    if (material.roughness !== undefined) {
	        roughness.setValue(material.roughness);
	    }

	    if (material.metalness !== undefined) {
	        metalness.setValue(material.metalness);
	    }

	    if (material.emissive !== undefined) {
	        emissive.setHexValue(material.emissive.getHexString());
	    }

	    if (material.specular !== undefined) {
	        specular.setHexValue(material.specular.getHexString());
	    }

	    if (material.shininess !== undefined) {
	        shininess.setValue(material.shininess);
	    }

	    if (material.clearCoat !== undefined) {
	        clearCoat.setValue(material.clearCoat);
	    }

	    if (material.clearCoatRoughness !== undefined) {
	        clearCoatRoughness.setValue(material.clearCoatRoughness);
	    }

	    if (material.vertexColors !== undefined) {
	        vertexColors.setValue(material.vertexColors);
	    }

	    if (material.skinning !== undefined) {
	        skinning.setValue(material.skinning);
	    }

	    if (material.map) {
	        mapEnabled.setValue(material.map !== null);

	        if (material.map !== null) {
	            map.setValue(material.map);
	        }
	    }

	    if (material.alphaMap !== undefined) {
	        alphaMapEnabled.setValue(material.alphaMap !== null);

	        if (material.alphaMap !== null) {
	            alphaMap.setValue(material.alphaMap);
	        }
	    }

	    if (material.bumpMap !== undefined) {
	        bumpMapEnabled.setValue(material.bumpMap !== null);

	        if (material.bumpMap !== null) {
	            bumpMap.setValue(material.bumpMap);
	            bumpScale.setValue(material.bumpScale);
	        }
	    }

	    if (material.normalMap !== undefined) {
	        normalMapEnabled.setValue(material.normalMap !== null);

	        if (material.normalMap !== null) {
	            normalMap.setValue(material.normalMap);
	        }
	    }

	    if (material.displacementMap !== undefined) {
	        displacementMapEnabled.setValue(material.displacementMap !== null);

	        if (material.displacementMap !== null) {
	            displacementMap.setValue(material.displacementMap);
	            displacementScale.setValue(material.displacementScale);
	        }
	    }

	    if (material.roughnessMap !== undefined) {
	        roughnessMapEnabled.setValue(material.roughnessMap !== null);

	        if (material.roughnessMap !== null) {
	            roughnessMap.setValue(material.roughnessMap);
	        }
	    }

	    if (material.metalnessMap !== undefined) {
	        metalnessMapEnabled.setValue(material.metalnessMap !== null);

	        if (material.metalnessMap !== null) {
	            metalnessMap.setValue(material.metalnessMap);
	        }
	    }

	    if (material.specularMap !== undefined) {
	        specularMapEnabled.setValue(material.specularMap !== null);

	        if (material.specularMap !== null) {
	            specularMap.setValue(material.specularMap);
	        }
	    }

	    if (material.envMap !== undefined) {
	        envMapEnabled.setValue(material.envMap !== null);

	        if (material.envMap !== null) {
	            envMap.setValue(material.envMap);
	        }
	    }

	    if (material.reflectivity !== undefined) {
	        reflectivity.setValue(material.reflectivity);
	    }

	    if (material.lightMap !== undefined) {
	        lightMapEnabled.setValue(material.lightMap !== null);

	        if (material.lightMap !== null) {
	            lightMap.setValue(material.lightMap);
	        }
	    }

	    if (material.aoMap !== undefined) {
	        aoMapEnabled.setValue(material.aoMap !== null);

	        if (material.aoMap !== null) {
	            aoMap.setValue(material.aoMap);
	            aoScale.setValue(material.aoMapIntensity);
	        }
	    }

	    if (material.emissiveMap !== undefined) {
	        emissiveMapEnabled.setValue(material.emissiveMap !== null);

	        if (material.emissiveMap !== null) {
	            emissiveMap.setValue(material.emissiveMap);
	        }
	    }

	    if (material.side !== undefined) {
	        side.setValue(material.side);
	    }

	    if (material.flatShading !== undefined) {
	        flatShading.setValue(material.flatShading);
	    }

	    if (material.blending !== undefined) {
	        blending.setValue(material.blending);
	    }

	    if (material.opacity !== undefined) {
	        opacity.setValue(material.opacity);
	    }

	    if (material.transparent !== undefined) {
	        transparent.setValue(material.transparent);
	    }

	    if (material.alphaTest !== undefined) {
	        alphaTest.setValue(material.alphaTest);
	    }

	    if (material.wireframe !== undefined) {
	        wireframe.setValue(material.wireframe);
	    }

	    if (material.wireframeLinewidth !== undefined) {
	        wireframeLinewidth.setValue(material.wireframeLinewidth);
	    }
	};

	MaterialComponent.prototype.updateMaterial = function () {
	    var type = UI.get('type', this.id);
	    var color = UI.get('color', this.id);
	    var roughness = UI.get('roughness', this.id);
	    var metalness = UI.get('metalness', this.id);
	    var emissive = UI.get('emissive', this.id);
	    var specular = UI.get('specular', this.id);
	    var shininess = UI.get('shininess', this.id);
	    var clearCoat = UI.get('clearCoat', this.id);
	    var clearCoatRoughness = UI.get('clearCoatRoughness', this.id);
	    var vertexColors = UI.get('vertexColors', this.id);
	    var skinning = UI.get('skinning', this.id);
	    var mapEnabled = UI.get('mapEnabled', this.id);
	    var map = UI.get('map', this.id);
	    var alphaMapEnabled = UI.get('alphaMapEnabled', this.id);
	    var alphaMap = UI.get('alphaMap', this.id);
	    var bumpMapEnabled = UI.get('bumpMapEnabled', this.id);
	    var bumpMap = UI.get('bumpMap', this.id);
	    var bumpScale = UI.get('bumpScale', this.id);
	    var normalMapEnabled = UI.get('normalMapEnabled', this.id);
	    var normalMap = UI.get('normalMap', this.id);
	    var displacementMapEnabled = UI.get('displacementMapEnabled', this.id);
	    var displacementMap = UI.get('displacementMap', this.id);
	    var displacementScale = UI.get('displacementScale', this.id);
	    var roughnessMapEnabled = UI.get('roughnessMapEnabled', this.id);
	    var roughnessMap = UI.get('roughnessMap', this.id);
	    var metalnessMapEnabled = UI.get('metalnessMapEnabled', this.id);
	    var metalnessMap = UI.get('metalnessMap', this.id);
	    var specularMapEnabled = UI.get('specularMapEnabled', this.id);
	    var specularMap = UI.get('specularMap', this.id);
	    var envMapEnabled = UI.get('envMapEnabled', this.id);
	    var envMap = UI.get('envMap', this.id);
	    var reflectivity = UI.get('reflectivity', this.id);
	    var lightMapEnabled = UI.get('lightMapEnabled', this.id);
	    var lightMap = UI.get('lightMap', this.id);
	    var aoMapEnabled = UI.get('aoMapEnabled', this.id);
	    var aoMap = UI.get('aoMap', this.id);
	    var aoScale = UI.get('aoScale', this.id);
	    var emissiveMapEnabled = UI.get('emissiveMapEnabled', this.id);
	    var emissiveMap = UI.get('emissiveMap', this.id);
	    var side = UI.get('side', this.id);
	    var flatShading = UI.get('flatShading', this.id);
	    var blending = UI.get('blending', this.id);
	    var opacity = UI.get('opacity', this.id);
	    var transparent = UI.get('transparent', this.id);
	    var alphaTest = UI.get('alphaTest', this.id);
	    var wireframe = UI.get('wireframe', this.id);
	    var wireframeLinewidth = UI.get('wireframeLinewidth', this.id);

	    var editor = this.app.editor;
	    var object = this.selected;
	    var geometry = object.geometry;
	    var material = object.material;

	    var textureWarning = false;
	    var objectHasUvs = false;

	    if (object instanceof THREE.Sprite) {
	        objectHasUvs = true;
	    }

	    if (geometry instanceof THREE.Geometry && geometry.faceVertexUvs[0].length > 0) {
	        objectHasUvs = true;
	    }

	    if (geometry instanceof THREE.BufferGeometry && geometry.attributes.uv !== undefined) {
	        objectHasUvs = true;
	    }

	    if (material instanceof THREE[type.getValue()] === false) {
	        material = new THREE[type.getValue()]();

	        if (material instanceof THREE.ShaderMaterial) {
	            material.uniforms = {
	                time: {
	                    value: 1.0
	                }
	            };
	            material.vertexShader = ShaderMaterialVertex;
	            material.fragmentShader = ShaderMaterialFragment;
	        }

	        if (material instanceof THREE.RawShaderMaterial) {
	            material.uniforms = {
	                time: {
	                    value: 1.0
	                }
	            };
	            material.vertexShader = RawShaderMaterialVertex;
	            material.fragmentShader = RawShaderMaterialFragment;
	        }

	        editor.execute(new SetMaterialCommand(object, material), L_NEW_MATERIAL + ':' + type.getValue());
	    }

	    if (material.color !== undefined && material.color.getHex() !== color.getHexValue()) {
	        editor.execute(new SetMaterialColorCommand(object, 'color', color.getHexValue()));
	    }

	    if (material.roughness !== undefined && Math.abs(material.roughness - roughness.getValue()) >= 0.01) {
	        editor.execute(new SetMaterialValueCommand(object, 'roughness', roughness.getValue()));
	    }

	    if (material.metalness !== undefined && Math.abs(material.metalness - metalness.getValue()) >= 0.01) {
	        editor.execute(new SetMaterialValueCommand(object, 'metalness', metalness.getValue()));
	    }

	    if (material.emissive !== undefined && material.emissive.getHex() !== emissive.getHexValue()) {
	        editor.execute(new SetMaterialColorCommand(object, 'emissive', emissive.getHexValue()));
	    }

	    if (material.specular !== undefined && material.specular.getHex() !== specular.getHexValue()) {
	        editor.execute(new SetMaterialColorCommand(object, 'specular', specular.getHexValue()));
	    }

	    if (material.shininess !== undefined && Math.abs(material.shininess - shininess.getValue()) >= 0.01) {
	        editor.execute(new SetMaterialValueCommand(object, 'shininess', shininess.getValue()));
	    }

	    if (material.clearCoat !== undefined && Math.abs(material.clearCoat - clearCoat.getValue()) >= 0.01) {
	        editor.execute(new SetMaterialValueCommand(object, 'clearCoat', clearCoat.getValue()));
	    }

	    if (material.clearCoatRoughness !== undefined && Math.abs(material.clearCoatRoughness - clearCoatRoughness.getValue()) >= 0.01) {
	        editor.execute(new SetMaterialValueCommand(object, 'clearCoatRoughness', clearCoatRoughness.getValue()));
	    }

	    if (material.vertexColors !== undefined) {
	        if (material.vertexColors !== parseInt(vertexColors.getValue())) {
	            editor.execute(new SetMaterialValueCommand(object, 'vertexColors', parseInt(vertexColors.getValue())));
	        }
	    }

	    if (material.skinning !== undefined && material.skinning !== skinning.getValue()) {
	        editor.execute(new SetMaterialValueCommand(object, 'skinning', skinning.getValue()));
	    }

	    if (material.map !== undefined) {
	        var mapEnabled = mapEnabled.getValue() === true;
	        if (objectHasUvs) {
	            var map = mapEnabled ? map.getValue() : null;
	            if (material.map !== map) {
	                editor.execute(new SetMaterialMapCommand(object, 'map', map));
	            }
	        } else {
	            if (mapEnabled) textureWarning = true;
	        }
	    }

	    if (material.alphaMap !== undefined) {
	        var mapEnabled = alphaMapEnabled.getValue() === true;

	        if (objectHasUvs) {
	            var alphaMap = mapEnabled ? alphaMap.getValue() : null;

	            if (material.alphaMap !== alphaMap) {
	                editor.execute(new SetMaterialMapCommand(object, 'alphaMap', alphaMap));
	            }
	        } else {
	            if (mapEnabled) textureWarning = true;
	        }
	    }

	    if (material.bumpMap !== undefined) {
	        var bumpMapEnabled = bumpMapEnabled.getValue() === true;

	        if (objectHasUvs) {
	            var bumpMap = bumpMapEnabled ? bumpMap.getValue() : null;

	            if (material.bumpMap !== bumpMap) {
	                editor.execute(new SetMaterialMapCommand(object, 'bumpMap', bumpMap));
	            }

	            if (material.bumpScale !== bumpScale.getValue()) {
	                editor.execute(new SetMaterialValueCommand(object, 'bumpScale', bumpScale.getValue()));
	            }
	        } else {
	            if (bumpMapEnabled) textureWarning = true;
	        }
	    }

	    if (material.normalMap !== undefined) {
	        var normalMapEnabled = normalMapEnabled.getValue() === true;

	        if (objectHasUvs) {
	            var normalMap = normalMapEnabled ? normalMap.getValue() : null;

	            if (material.normalMap !== normalMap) {
	                editor.execute(new SetMaterialMapCommand(object, 'normalMap', normalMap));
	            }
	        } else {
	            if (normalMapEnabled) textureWarning = true;
	        }
	    }

	    if (material.displacementMap !== undefined) {
	        var displacementMapEnabled = displacementMapEnabled.getValue() === true;

	        if (objectHasUvs) {
	            var displacementMap = displacementMapEnabled ? displacementMap.getValue() : null;

	            if (material.displacementMap !== displacementMap) {
	                editor.execute(new SetMaterialMapCommand(object, 'displacementMap', displacementMap));
	            }

	            if (material.displacementScale !== displacementScale.getValue()) {
	                editor.execute(new SetMaterialValueCommand(object, 'displacementScale', displacementScale.getValue()));
	            }
	        } else {
	            if (displacementMapEnabled) textureWarning = true;
	        }

	    }

	    if (material.roughnessMap !== undefined) {
	        var roughnessMapEnabled = roughnessMapEnabled.getValue() === true;

	        if (objectHasUvs) {
	            var roughnessMap = roughnessMapEnabled ? roughnessMap.getValue() : null;

	            if (material.roughnessMap !== roughnessMap) {
	                editor.execute(new SetMaterialMapCommand(object, 'roughnessMap', roughnessMap));
	            }
	        } else {
	            if (roughnessMapEnabled) textureWarning = true;
	        }
	    }

	    if (material.metalnessMap !== undefined) {
	        var metalnessMapEnabled = metalnessMapEnabled.getValue() === true;

	        if (objectHasUvs) {
	            var metalnessMap = metalnessMapEnabled ? metalnessMap.getValue() : null;

	            if (material.metalnessMap !== metalnessMap) {
	                editor.execute(new SetMaterialMapCommand(object, 'metalnessMap', metalnessMap));
	            }
	        } else {
	            if (metalnessMapEnabled) textureWarning = true;
	        }
	    }

	    if (material.specularMap !== undefined) {
	        var specularMapEnabled = specularMapEnabled.getValue() === true;

	        if (objectHasUvs) {
	            var specularMap = specularMapEnabled ? specularMap.getValue() : null;

	            if (material.specularMap !== specularMap) {
	                editor.execute(new SetMaterialMapCommand(object, 'specularMap', specularMap));
	            }
	        } else {
	            if (specularMapEnabled) textureWarning = true;
	        }
	    }

	    if (material.envMap !== undefined) {
	        var envMapEnabled = envMapEnabled.getValue() === true;
	        var envMap = envMapEnabled ? envMap.getValue() : null;

	        if (material.envMap !== envMap) {
	            editor.execute(new SetMaterialMapCommand(object, 'envMap', envMap));
	        }
	    }

	    if (material.reflectivity !== undefined) {
	        var reflectivity = reflectivity.getValue();

	        if (material.reflectivity !== reflectivity) {
	            editor.execute(new SetMaterialValueCommand(object, 'reflectivity', reflectivity));
	        }
	    }

	    if (material.lightMap !== undefined) {
	        var lightMapEnabled = lightMapEnabled.getValue() === true;

	        if (objectHasUvs) {
	            var lightMap = lightMapEnabled ? lightMap.getValue() : null;

	            if (material.lightMap !== lightMap) {
	                editor.execute(new SetMaterialMapCommand(object, 'lightMap', lightMap));
	            }
	        } else {
	            if (lightMapEnabled) textureWarning = true;
	        }
	    }

	    if (material.aoMap !== undefined) {
	        var aoMapEnabled = aoMapEnabled.getValue() === true;

	        if (objectHasUvs) {
	            var aoMap = aoMapEnabled ? aoMap.getValue() : null;

	            if (material.aoMap !== aoMap) {
	                editor.execute(new SetMaterialMapCommand(object, 'aoMap', aoMap));
	            }

	            if (material.aoMapIntensity !== aoScale.getValue()) {
	                editor.execute(new SetMaterialValueCommand(object, 'aoMapIntensity', aoScale.getValue()));
	            }
	        } else {
	            if (aoMapEnabled) textureWarning = true;
	        }
	    }

	    if (material.emissiveMap !== undefined) {
	        var emissiveMapEnabled = emissiveMapEnabled.getValue() === true;

	        if (objectHasUvs) {
	            var emissiveMap = emissiveMapEnabled ? emissiveMap.getValue() : null;

	            if (material.emissiveMap !== emissiveMap) {
	                editor.execute(new SetMaterialMapCommand(object, 'emissiveMap', emissiveMap));
	            }
	        } else {
	            if (emissiveMapEnabled) textureWarning = true;
	        }
	    }

	    if (material.side !== undefined) {
	        var side = parseInt(side.getValue());

	        if (material.side !== side) {
	            editor.execute(new SetMaterialValueCommand(object, 'side', side));
	        }
	    }

	    if (material.flatShading !== undefined) {
	        var flatShading = flatShading.getValue();

	        if (material.flatShading != flatShading) {
	            editor.execute(new SetMaterialValueCommand(object, 'flatShading', flatShading));
	        }
	    }

	    if (material.blending !== undefined) {
	        var blending = parseInt(blending.getValue());

	        if (material.blending !== blending) {
	            editor.execute(new SetMaterialValueCommand(object, 'blending', blending));
	        }
	    }

	    if (material.opacity !== undefined && Math.abs(material.opacity - opacity.getValue()) >= 0.01) {
	        editor.execute(new SetMaterialValueCommand(object, 'opacity', opacity.getValue()));
	    }

	    if (material.transparent !== undefined && material.transparent !== transparent.getValue()) {
	        editor.execute(new SetMaterialValueCommand(object, 'transparent', transparent.getValue()));
	    }

	    if (material.alphaTest !== undefined && Math.abs(material.alphaTest - alphaTest.getValue()) >= 0.01) {
	        editor.execute(new SetMaterialValueCommand(object, 'alphaTest', alphaTest.getValue()));
	    }

	    if (material.wireframe !== undefined && material.wireframe !== wireframe.getValue()) {
	        editor.execute(new SetMaterialValueCommand(object, 'wireframe', wireframe.getValue()));
	    }

	    if (material.wireframeLinewidth !== undefined && Math.abs(material.wireframeLinewidth - wireframeLinewidth.getValue()) >= 0.01) {
	        editor.execute(new SetMaterialValueCommand(object, 'wireframeLinewidth', wireframeLinewidth.getValue()));
	    }

	    this.updateUI();

	    if (textureWarning) {
	        console.warn(`${L_CANNOT_SET_TEXTURE} ${this.selected.name} ${L_MATERIAL_HAS_NO_COORDINATES}`);
	    }
	};

	MaterialComponent.prototype.editProgramInfo = function () {
	    var material = this.selected.material;

	    var obj = {
	        defines: material.defines,
	        uniforms: material.uniforms,
	        attributes: material.attributes
	    };

	    this.app.script.open(material.uuid, this.selected.name + '-ProgramInfo', 'json', JSON.stringify(obj), this.selected.name + `-${L_SHADER_INFO}`, source => {
	        try {
	            obj = JSON.parse(source);
	            material.defines = obj.defines;
	            material.uniforms = obj.uniforms;
	            material.attributes = obj.attributes;
	            material.needsUpdate = true;
	        } catch (e) {
	            this.app.error(this.selected.name + `-${L_SHADER_CANNOT_PARSE}`);
	        }
	    });
	};

	MaterialComponent.prototype.editVertexShader = function () {
	    var material = this.selected.material;

	    this.app.script.open(material.uuid, this.selected.name + '-VertexShader', 'vertexShader', material.vertexShader, this.selected.name + `-${L_VERTEX_SHADER}`, source => {
	        material.vertexShader = source;
	        material.needsUpdate = true;
	    });
	};

	MaterialComponent.prototype.editFragmentShader = function () {
	    var material = this.selected.material;

	    this.app.script.open(material.uuid, this.selected.name + '-FragmentShader', 'fragmentShader', material.fragmentShader, this.selected.name + `-${L_FRAGMENT_SHADER}`, source => {
	        material.fragmentShader = source;
	        material.needsUpdate = true;
	    });
	};

	MaterialComponent.prototype.onSetMap = function () {
	    if (this.mapSettingWindow === undefined) {
	        this.mapSettingWindow = new TextureSettingWindow({
	            app: this.app
	        });
	        this.mapSettingWindow.render();
	    }

	    if (!this.selected.material.map) {
	        UI.msg(L_SELECT_TEXTURE_FIRST);
	        return;
	    }

	    this.mapSettingWindow.setData(this.selected.material.map);
	    this.mapSettingWindow.show();
	};

	// --------------------------------------- 材质保存载入 --------------------------------------------------

	MaterialComponent.prototype.onSave = function () {
	    UI.prompt(L_ENTER_MATERIAL_NAME, L_NAME, L_NEW_MATERIAL, (event, value) => {
	        this.commitSave(value);
	    });
	};

	MaterialComponent.prototype.commitSave = function (name) {
	    var material = this.selected.material;
	    var data = (new MaterialsSerializer()).toJSON(material);

	    // 材质球图片
	    var dataURL = MaterialUtils.createMaterialImage(material).toDataURL('image/png');

	    var file = Converter$1.dataURLtoFile(dataURL, name);

	    // 上传图片
	    Ajax.post(`${this.app.options.server}/api/Upload/Upload`, {
	        file: file
	    }, result => {
	        var obj = JSON.parse(result);
	        Ajax.post(`/api/Material/Save`, {
	            Name: name,
	            Data: JSON.stringify(data),
	            Thumbnail: obj.Data.url
	        }, result => {
	            var obj = JSON.parse(result);
	            if (obj.Code === 200) {
	                this.app.call(`showBottomPanel`, this, 'material');
	            }
	            UI.msg(obj.Msg);
	        });
	    });
	};

	MaterialComponent.prototype.onLoad = function () {
	    this.app.call(`selectBottomPanel`, this, 'material');
	    UI.msg(L_CLICK_MATERIAL_ON_PANEL);
	    this.app.on(`selectMaterial.${this.id}`, this.onWaitingForMaterial.bind(this));
	};

	MaterialComponent.prototype.onWaitingForMaterial = function (material) {
	    this.app.on(`selectMaterial.${this.id}`, null);

	    if (this.selected.material) {
	        this.selected.material.dispose();
	    }

	    this.selected.material = material;

	    this.app.call('objectChanged', this, this.selected);
	};

	/**
	 * 物理环境组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function PhysicsWorldComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	PhysicsWorldComponent.prototype = Object.create(BaseComponent.prototype);
	PhysicsWorldComponent.prototype.constructor = PhysicsWorldComponent;

	PhysicsWorldComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'objectPanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold'
	                },
	                text: L_PHYSICS_ENVIRONMENT
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_COLLISION_CONFIG
	            }, {
	                xtype: 'select',
	                id: 'type',
	                scope: this.id,
	                options: {
	                    'btDefaultCollisionConfiguration': L_DEFAULT_COLLISION_CONFIG, // 无法使用布料
	                    'btSoftBodyRigidBodyCollisionConfiguration': L_SOFTBODY_RIGIDBODY_COLLISIONCONFIG
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_GRAVITY
	            }, {
	                xtype: 'number',
	                id: 'gravityX',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'gravityY',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'gravityZ',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	PhysicsWorldComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	PhysicsWorldComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	PhysicsWorldComponent.prototype.updateUI = function () {
	    var container = UI.get('objectPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected === editor.scene) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var type = UI.get('type', this.id);
	    var gravityX = UI.get('gravityX', this.id);
	    var gravityY = UI.get('gravityY', this.id);
	    var gravityZ = UI.get('gravityZ', this.id);

	    var physics = this.selected.userData.physics || {
	        type: 'btSoftBodyRigidBodyCollisionConfiguration',
	        gravityX: 0.0,
	        gravityY: -9.8,
	        gravityZ: 0.0
	    };

	    if (physics.type) {
	        type.setValue(physics.type);
	    }

	    if (physics.gravityX) {
	        gravityX.setValue(physics.gravityX);
	    }

	    if (physics.gravityY) {
	        gravityY.setValue(physics.gravityY);
	    }

	    if (physics.gravityZ) {
	        gravityZ.setValue(physics.gravityZ);
	    }
	};

	PhysicsWorldComponent.prototype.onChange = function () {
	    var type = UI.get('type', this.id);
	    var gravityX = UI.get('gravityX', this.id);
	    var gravityY = UI.get('gravityY', this.id);
	    var gravityZ = UI.get('gravityZ', this.id);

	    this.selected.userData.physics = {
	        type: type.getValue(),
	        gravityX: gravityX.getValue(),
	        gravityY: gravityY.getValue(),
	        gravityZ: gravityZ.getValue(),
	    };
	};

	/**
	 * 音频监听器组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function AudioListenerComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	AudioListenerComponent.prototype = Object.create(BaseComponent.prototype);
	AudioListenerComponent.prototype.constructor = AudioListenerComponent;

	AudioListenerComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        id: 'audioListenerPanel',
	        scope: this.id,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    width: '100%',
	                    color: '#555',
	                    fontWeight: 'bold'
	                },
	                text: L_AUDIO_LISTENER
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MAX_VOLUME
	            }, {
	                xtype: 'number',
	                id: 'masterVolume',
	                scope: this.id,
	                range: [0, 1],
	                value: 1,
	                onChange: this.onChangeMasterVolume.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	AudioListenerComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	AudioListenerComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	AudioListenerComponent.prototype.updateUI = function () {
	    var container = UI.get('audioListenerPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected instanceof THREE.PerspectiveCamera && editor.selected.children.indexOf(editor.audioListener) > -1) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.audioListener;

	    var masterVolume = UI.get('masterVolume', this.id);

	    masterVolume.setValue(this.selected.getMasterVolume());
	};

	AudioListenerComponent.prototype.onChangeMasterVolume = function () {
	    var masterVolume = UI.get('masterVolume', this.id);

	    this.selected.setMasterVolume(masterVolume.getValue());
	};

	/**
	 * 粒子发射器组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function ParticleEmitterComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;

	    this.isPlaying = false;
	}

	ParticleEmitterComponent.prototype = Object.create(BaseComponent.prototype);
	ParticleEmitterComponent.prototype.constructor = ParticleEmitterComponent;

	ParticleEmitterComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'particleEmitterPanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'label',
	            style: {
	                width: '100%',
	                color: '#555',
	                fontWeight: 'bold'
	            },
	            text: L_PARTICLE_EMITTER
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_POSITION
	            }, {
	                xtype: 'number',
	                id: 'positionX',
	                scope: this.id,
	                onChange: this.onChangePosition.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'positionY',
	                scope: this.id,
	                onChange: this.onChangePosition.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'positionZ',
	                scope: this.id,
	                onChange: this.onChangePosition.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_POSITION_SPREAD
	            }, {
	                xtype: 'number',
	                id: 'positionSpreadX',
	                scope: this.id,
	                onChange: this.onChangePosition.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'positionSpreadY',
	                scope: this.id,
	                onChange: this.onChangePosition.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'positionSpreadZ',
	                scope: this.id,
	                onChange: this.onChangePosition.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_VELOCITY
	            }, {
	                xtype: 'number',
	                id: 'velocityX',
	                scope: this.id,
	                onChange: this.onChangeVelocity.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'velocityY',
	                scope: this.id,
	                onChange: this.onChangeVelocity.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'velocityZ',
	                scope: this.id,
	                onChange: this.onChangeVelocity.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_VELOCITY_SPREAD
	            }, {
	                xtype: 'number',
	                id: 'velocitySpreadX',
	                scope: this.id,
	                onChange: this.onChangeVelocity.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'velocitySpreadY',
	                scope: this.id,
	                onChange: this.onChangeVelocity.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'velocitySpreadZ',
	                scope: this.id,
	                onChange: this.onChangeVelocity.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ACCELERATION
	            }, {
	                xtype: 'number',
	                id: 'accelerationX',
	                scope: this.id,
	                onChange: this.onChangeAcceleration.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'accelerationY',
	                scope: this.id,
	                onChange: this.onChangeAcceleration.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'accelerationZ',
	                scope: this.id,
	                onChange: this.onChangeAcceleration.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ACCELERATION_SPREAD
	            }, {
	                xtype: 'number',
	                id: 'accelerationSpreadX',
	                scope: this.id,
	                onChange: this.onChangeAcceleration.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'accelerationSpreadY',
	                scope: this.id,
	                onChange: this.onChangeAcceleration.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'accelerationSpreadZ',
	                scope: this.id,
	                onChange: this.onChangeAcceleration.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_COLOR + '1'
	            }, {
	                xtype: 'color',
	                id: 'color1',
	                scope: this.id,
	                onChange: this.onChangeColor.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_COLOR + '2'
	            }, {
	                xtype: 'color',
	                id: 'color2',
	                scope: this.id,
	                onChange: this.onChangeColor.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_COLOR + '3'
	            }, {
	                xtype: 'color',
	                id: 'color3',
	                scope: this.id,
	                onChange: this.onChangeColor.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_COLOR + '4'
	            }, {
	                xtype: 'color',
	                id: 'color4',
	                scope: this.id,
	                onChange: this.onChangeColor.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_SIZE
	            }, {
	                xtype: 'number',
	                id: 'size',
	                scope: this.id,
	                onChange: this.onChangeSize.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_SIZE_SPREAD
	            }, {
	                xtype: 'number',
	                id: 'sizeSpread',
	                scope: this.id,
	                onChange: this.onChangeSize.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_TEXTURE
	            }, {
	                xtype: 'texture',
	                id: 'texture',
	                scope: this.id,
	                onChange: this.onChangeTexture.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_PARTICLE_COUNT
	            }, {
	                xtype: 'int',
	                range: [1, Infinity],
	                id: 'particleCount',
	                scope: this.id,
	                onChange: this.onChangeParticleCount.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MAX_AGE
	            }, {
	                xtype: 'number',
	                id: 'maxAge',
	                scope: this.id,
	                onChange: this.onChangeMaxAge.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MAX_AGE_SPREAD
	            }, {
	                xtype: 'number',
	                id: 'maxAgeSpread',
	                scope: this.id,
	                onChange: this.onChangeMaxAgeSpread.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label'
	            }, {
	                xtype: 'button',
	                id: 'btnPreview',
	                scope: this.id,
	                text: L_PREVIEW,
	                onClick: this.onPreview.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	ParticleEmitterComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	ParticleEmitterComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	ParticleEmitterComponent.prototype.updateUI = function () {
	    var container = UI.get('particleEmitterPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected.userData.type === 'ParticleEmitter') {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var positionX = UI.get('positionX', this.id);
	    var positionY = UI.get('positionY', this.id);
	    var positionZ = UI.get('positionZ', this.id);

	    var positionSpreadX = UI.get('positionSpreadX', this.id);
	    var positionSpreadY = UI.get('positionSpreadY', this.id);
	    var positionSpreadZ = UI.get('positionSpreadZ', this.id);

	    var velocityX = UI.get('velocityX', this.id);
	    var velocityY = UI.get('velocityY', this.id);
	    var velocityZ = UI.get('velocityZ', this.id);

	    var velocitySpreadX = UI.get('velocitySpreadX', this.id);
	    var velocitySpreadY = UI.get('velocitySpreadY', this.id);
	    var velocitySpreadZ = UI.get('velocitySpreadZ', this.id);

	    var accelerationX = UI.get('accelerationX', this.id);
	    var accelerationY = UI.get('accelerationY', this.id);
	    var accelerationZ = UI.get('accelerationZ', this.id);

	    var accelerationSpreadX = UI.get('accelerationSpreadX', this.id);
	    var accelerationSpreadY = UI.get('accelerationSpreadY', this.id);
	    var accelerationSpreadZ = UI.get('accelerationSpreadZ', this.id);

	    var color1 = UI.get('color1', this.id);
	    var color2 = UI.get('color2', this.id);
	    var color3 = UI.get('color3', this.id);
	    var color4 = UI.get('color4', this.id);

	    var size = UI.get('size', this.id);
	    var sizeSpread = UI.get('sizeSpread', this.id);
	    var texture = UI.get('texture', this.id);
	    var particleCount = UI.get('particleCount', this.id);
	    var maxAge = UI.get('maxAge', this.id);
	    var maxAgeSpread = UI.get('maxAgeSpread', this.id);
	    var btnPreview = UI.get('btnPreview', this.id);

	    var group = this.selected.userData.group;
	    var emitter = group.emitters[0];

	    positionX.setValue(emitter.position.value.x);
	    positionY.setValue(emitter.position.value.y);
	    positionZ.setValue(emitter.position.value.z);

	    positionSpreadX.setValue(emitter.position.spread.x);
	    positionSpreadY.setValue(emitter.position.spread.y);
	    positionSpreadZ.setValue(emitter.position.spread.z);

	    velocityX.setValue(emitter.velocity.value.x);
	    velocityY.setValue(emitter.velocity.value.y);
	    velocityZ.setValue(emitter.velocity.value.z);

	    velocitySpreadX.setValue(emitter.velocity.spread.x);
	    velocitySpreadY.setValue(emitter.velocity.spread.y);
	    velocitySpreadZ.setValue(emitter.velocity.spread.z);

	    accelerationX.setValue(emitter.acceleration.value.x);
	    accelerationY.setValue(emitter.acceleration.value.y);
	    accelerationZ.setValue(emitter.acceleration.value.z);

	    accelerationSpreadX.setValue(emitter.acceleration.spread.x);
	    accelerationSpreadY.setValue(emitter.acceleration.spread.y);
	    accelerationSpreadZ.setValue(emitter.acceleration.spread.z);

	    color1.setValue(`#${emitter.color.value[0].getHexString()}`);
	    color2.setValue(`#${emitter.color.value[1].getHexString()}`);
	    color3.setValue(`#${emitter.color.value[2].getHexString()}`);
	    color4.setValue(`#${emitter.color.value[3].getHexString()}`);

	    size.setValue(emitter.size.value[0]);
	    sizeSpread.setValue(emitter.size.spread[0]);
	    texture.setValue(group.texture);
	    particleCount.setValue(emitter.particleCount);
	    maxAge.setValue(emitter.maxAge.value);
	    maxAgeSpread.setValue(emitter.maxAge.spread);

	    if (this.isPlaying) {
	        btnPreview.setText(L_CANCEL);
	    } else {
	        btnPreview.setText(L_PREVIEW);
	    }
	};

	ParticleEmitterComponent.prototype.onChangePosition = function () {
	    var positionX = UI.get('positionX', this.id);
	    var positionY = UI.get('positionY', this.id);
	    var positionZ = UI.get('positionZ', this.id);

	    var positionSpreadX = UI.get('positionSpreadX', this.id);
	    var positionSpreadY = UI.get('positionSpreadY', this.id);
	    var positionSpreadZ = UI.get('positionSpreadZ', this.id);

	    var group = this.selected.userData.group;
	    var emitter = group.emitters[0];

	    emitter.position.value.x = positionX.getValue();
	    emitter.position.value.y = positionY.getValue();
	    emitter.position.value.z = positionZ.getValue();

	    emitter.position.spread.x = positionSpreadX.getValue();
	    emitter.position.spread.y = positionSpreadY.getValue();
	    emitter.position.spread.z = positionSpreadZ.getValue();

	    emitter.updateFlags.position = true;
	};

	ParticleEmitterComponent.prototype.onChangeVelocity = function () {
	    var velocityX = UI.get('velocityX', this.id);
	    var velocityY = UI.get('velocityY', this.id);
	    var velocityZ = UI.get('velocityZ', this.id);

	    var velocitySpreadX = UI.get('velocitySpreadX', this.id);
	    var velocitySpreadY = UI.get('velocitySpreadY', this.id);
	    var velocitySpreadZ = UI.get('velocitySpreadZ', this.id);

	    var group = this.selected.userData.group;
	    var emitter = group.emitters[0];

	    emitter.velocity.value.x = velocityX.getValue();
	    emitter.velocity.value.y = velocityY.getValue();
	    emitter.velocity.value.z = velocityZ.getValue();

	    emitter.velocity.spread.x = velocitySpreadX.getValue();
	    emitter.velocity.spread.y = velocitySpreadY.getValue();
	    emitter.velocity.spread.z = velocitySpreadZ.getValue();

	    emitter.updateFlags.velocity = true;
	};

	ParticleEmitterComponent.prototype.onChangeAcceleration = function () {
	    var accelerationX = UI.get('accelerationX', this.id);
	    var accelerationY = UI.get('accelerationY', this.id);
	    var accelerationZ = UI.get('accelerationZ', this.id);

	    var accelerationSpreadX = UI.get('accelerationSpreadX', this.id);
	    var accelerationSpreadY = UI.get('accelerationSpreadY', this.id);
	    var accelerationSpreadZ = UI.get('accelerationSpreadZ', this.id);

	    var group = this.selected.userData.group;
	    var emitter = group.emitters[0];

	    emitter.acceleration.value.x = accelerationX.getValue();
	    emitter.acceleration.value.y = accelerationY.getValue();
	    emitter.acceleration.value.z = accelerationZ.getValue();

	    emitter.acceleration.spread.x = accelerationSpreadX.getValue();
	    emitter.acceleration.spread.y = accelerationSpreadY.getValue();
	    emitter.acceleration.spread.z = accelerationSpreadZ.getValue();

	    emitter.updateFlags.acceleration = true;
	};

	ParticleEmitterComponent.prototype.onChangeColor = function () {
	    var color1 = UI.get('color1', this.id);
	    var color2 = UI.get('color2', this.id);
	    var color3 = UI.get('color3', this.id);
	    var color4 = UI.get('color4', this.id);

	    var group = this.selected.userData.group;
	    var emitter = group.emitters[0];

	    emitter.color.value[0] = new THREE.Color(color1.getHexValue());
	    emitter.color.value[1] = new THREE.Color(color2.getHexValue());
	    emitter.color.value[2] = new THREE.Color(color3.getHexValue());
	    emitter.color.value[3] = new THREE.Color(color4.getHexValue());

	    emitter.updateFlags.color = true;
	};

	ParticleEmitterComponent.prototype.onChangeSize = function () {
	    var size = UI.get('size', this.id);
	    var sizeSpread = UI.get('sizeSpread', this.id);

	    var group = this.selected.userData.group;
	    var emitter = group.emitters[0];

	    for (var i = 0; i < emitter.size.value.length; i++) {
	        emitter.size.value[i] = size.getValue();
	        emitter.size.spread[i] = sizeSpread.getValue();
	    }

	    emitter.updateFlags.size = true;
	};

	ParticleEmitterComponent.prototype.onChangeTexture = function () {
	    var texture = UI.get('texture', this.id);

	    var group = this.selected.userData.group;
	    var emitter = group.emitters[0];

	    texture = texture.getValue();
	    texture.needsUpdate = true;

	    group.texture = texture;
	    group.material.uniforms.texture.value = texture;
	};

	ParticleEmitterComponent.prototype.onChangeParticleCount = function () {
	    var particleCount = UI.get('particleCount', this.id);

	    var group = this.selected.userData.group;
	    var emitter = group.emitters[0];

	    emitter.particleCount = particleCount.getValue();

	    emitter.updateFlags.params = true;
	};

	ParticleEmitterComponent.prototype.onChangeMaxAge = function () {
	    var maxAge = UI.get('maxAge', this.id);

	    var group = this.selected.userData.group;
	    var emitter = group.emitters[0];

	    emitter.maxAge.value = maxAge.getValue();

	    emitter.updateFlags.params = true;
	};

	ParticleEmitterComponent.prototype.onChangeMaxAgeSpread = function () {
	    var maxAgeSpread = UI.get('maxAgeSpread', this.id);

	    var group = this.selected.userData.group;
	    var emitter = group.emitters[0];

	    emitter.maxAge.spread = maxAgeSpread.getValue();

	    emitter.updateFlags.params = true;
	};

	ParticleEmitterComponent.prototype.onPreview = function () {
	    if (this.isPlaying) {
	        this.stopPreview();
	    } else {
	        this.startPreview();
	    }
	};

	ParticleEmitterComponent.prototype.startPreview = function () {
	    var btnPreview = UI.get('btnPreview', this.id);

	    this.isPlaying = true;
	    btnPreview.setText(L_CANCEL);

	    this.app.on(`animate.${this.id}`, this.onAnimate.bind(this));
	};

	ParticleEmitterComponent.prototype.stopPreview = function () {
	    var btnPreview = UI.get('btnPreview', this.id);

	    this.isPlaying = false;
	    btnPreview.setText(L_PREVIEW);

	    var group = this.selected.userData.group;
	    var emitter = this.selected.userData.emitter;

	    group.removeEmitter(emitter);
	    group.addEmitter(emitter);
	    group.tick(0);

	    this.app.on(`animate.${this.id}`, null);
	};

	ParticleEmitterComponent.prototype.onAnimate = function (clock, deltaTime) {
	    var group = this.selected.userData.group;
	    group.tick(deltaTime);
	};

	/**
	 * 场景组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function SceneComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	SceneComponent.prototype = Object.create(BaseComponent.prototype);
	SceneComponent.prototype.constructor = SceneComponent;

	SceneComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'scenePanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold'
	                },
	                text: L_SCENE_COMPONENT
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_BACKGROUND
	            }, {
	                xtype: 'select',
	                id: 'backgroundType',
	                scope: this.id,
	                options: {
	                    'Color': L_SOLID_COLOR,
	                    'Image': L_BACKGROUND_IMAGE,
	                    'SkyBox': L_CUBE_TEXTURE
	                },
	                onChange: this.onChangeBackgroundType.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'backgroundColorRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_BACKGROUND_COLOR
	            }, {
	                xtype: 'color',
	                id: 'backgroundColor',
	                scope: this.id,
	                onChange: this.update.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'backgroundImageRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_BACKGROUND_IMAGE
	            }, {
	                xtype: 'texture',
	                id: 'backgroundImage',
	                scope: this.id,
	                onChange: this.update.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'backgroundPosXRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_POS_X
	            }, {
	                xtype: 'texture',
	                id: 'backgroundPosX',
	                scope: this.id,
	                onChange: this.update.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'backgroundNegXRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_NEG_X
	            }, {
	                xtype: 'texture',
	                id: 'backgroundNegX',
	                scope: this.id,
	                onChange: this.update.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'backgroundPosYRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_POS_Y
	            }, {
	                xtype: 'texture',
	                id: 'backgroundPosY',
	                scope: this.id,
	                onChange: this.update.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'backgroundNegYRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_NEG_Y
	            }, {
	                xtype: 'texture',
	                id: 'backgroundNegY',
	                scope: this.id,
	                onChange: this.update.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'backgroundPosZRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_POS_Z
	            }, {
	                xtype: 'texture',
	                id: 'backgroundPosZ',
	                scope: this.id,
	                onChange: this.update.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'backgroundNegZRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_NEG_Z
	            }, {
	                xtype: 'texture',
	                id: 'backgroundNegZ',
	                scope: this.id,
	                onChange: this.update.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'cubeTextureCommandRow',
	            scope: this.id,
	            style: {
	                display: 'none'
	            },
	            children: [{
	                xtype: 'button',
	                text: L_SELECT,
	                onClick: this.onLoadCubeTexture.bind(this)
	            }, {
	                xtype: 'button',
	                text: L_UPLOAD,
	                style: {
	                    marginLeft: '8px'
	                },
	                onClick: this.onSaveCubeTexture.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_FOG
	            }, {
	                xtype: 'select',
	                id: 'fogType',
	                scope: this.id,
	                options: {
	                    'None': L_NONE,
	                    'Fog': L_LINEAR,
	                    'FogExp2': L_EXPONENTIAL
	                },
	                onChange: this.onChangeFogType.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'fogColorRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_FOG_COLOR
	            }, {
	                xtype: 'color',
	                id: 'fogColor',
	                scope: this.id,
	                onChange: this.update.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'fogNearRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_FOG_NEAR
	            }, {
	                xtype: 'number',
	                id: 'fogNear',
	                scope: this.id,
	                range: [0, Infinity],
	                onChange: this.update.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'fogFarRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_FOG_FAR
	            }, {
	                xtype: 'number',
	                id: 'fogFar',
	                scope: this.id,
	                range: [0, Infinity],
	                onChange: this.update.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'fogDensityRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_FOG_DENSITY
	            }, {
	                xtype: 'number',
	                id: 'fogDensity',
	                scope: this.id,
	                range: [0, 0.1],
	                precision: 3,
	                onChange: this.update.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	SceneComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	SceneComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	SceneComponent.prototype.updateUI = function () {
	    var container = UI.get('scenePanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected === editor.scene) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;
	    var scene = this.selected;

	    // 背景
	    var backgroundColorRow = UI.get('backgroundColorRow', this.id);
	    var backgroundImageRow = UI.get('backgroundImageRow', this.id);
	    var backgroundPosXRow = UI.get('backgroundPosXRow', this.id);
	    var backgroundNegXRow = UI.get('backgroundNegXRow', this.id);
	    var backgroundPosYRow = UI.get('backgroundPosYRow', this.id);
	    var backgroundNegYRow = UI.get('backgroundNegYRow', this.id);
	    var backgroundPosZRow = UI.get('backgroundPosZRow', this.id);
	    var backgroundNegZRow = UI.get('backgroundNegZRow', this.id);

	    var backgroundType = UI.get('backgroundType', this.id);
	    var backgroundColor = UI.get('backgroundColor', this.id);
	    var backgroundImage = UI.get('backgroundImage', this.id);
	    var backgroundPosX = UI.get('backgroundPosX', this.id);
	    var backgroundNegX = UI.get('backgroundNegX', this.id);
	    var backgroundPosY = UI.get('backgroundPosY', this.id);
	    var backgroundNegY = UI.get('backgroundNegY', this.id);
	    var backgroundPosZ = UI.get('backgroundPosZ', this.id);
	    var backgroundNegZ = UI.get('backgroundNegZ', this.id);

	    backgroundType.setValue(`${scene.background instanceof THREE.CubeTexture ? 'SkyBox' : (scene.background instanceof THREE.Texture ? 'Image' : 'Color')}`);

	    backgroundColorRow.dom.style.display = scene.background instanceof THREE.Color ? '' : 'none';
	    backgroundColor.setValue(`#${scene.background instanceof THREE.Color ? scene.background.getHexString() : 'aaaaaa'}`);

	    backgroundImageRow.dom.style.display = (scene.background instanceof THREE.Texture && !(scene.background instanceof THREE.CubeTexture)) ? '' : 'none';
	    backgroundImage.setValue((scene.background instanceof THREE.Texture && !(scene.background instanceof THREE.CubeTexture)) ? scene.background : null);

	    backgroundPosXRow.dom.style.display = scene.background instanceof THREE.CubeTexture ? '' : 'none';
	    backgroundNegXRow.dom.style.display = scene.background instanceof THREE.CubeTexture ? '' : 'none';
	    backgroundPosYRow.dom.style.display = scene.background instanceof THREE.CubeTexture ? '' : 'none';
	    backgroundNegYRow.dom.style.display = scene.background instanceof THREE.CubeTexture ? '' : 'none';
	    backgroundPosZRow.dom.style.display = scene.background instanceof THREE.CubeTexture ? '' : 'none';
	    backgroundNegZRow.dom.style.display = scene.background instanceof THREE.CubeTexture ? '' : 'none';

	    backgroundPosX.setValue(scene.background instanceof THREE.CubeTexture ? new THREE.Texture(scene.background.image[0]) : null);
	    backgroundNegX.setValue(scene.background instanceof THREE.CubeTexture ? new THREE.Texture(scene.background.image[1]) : null);
	    backgroundPosY.setValue(scene.background instanceof THREE.CubeTexture ? new THREE.Texture(scene.background.image[2]) : null);
	    backgroundNegY.setValue(scene.background instanceof THREE.CubeTexture ? new THREE.Texture(scene.background.image[3]) : null);
	    backgroundPosZ.setValue(scene.background instanceof THREE.CubeTexture ? new THREE.Texture(scene.background.image[4]) : null);
	    backgroundNegZ.setValue(scene.background instanceof THREE.CubeTexture ? new THREE.Texture(scene.background.image[5]) : null);

	    // 雾效
	    var fogColorRow = UI.get('fogColorRow', this.id);
	    var fogNearRow = UI.get('fogNearRow', this.id);
	    var fogFarRow = UI.get('fogFarRow', this.id);
	    var fogDensityRow = UI.get('fogDensityRow', this.id);

	    var fogType = UI.get('fogType', this.id);
	    var fogColor = UI.get('fogColor', this.id);
	    var fogNear = UI.get('fogNear', this.id);
	    var fogFar = UI.get('fogFar', this.id);
	    var fogDensity = UI.get('fogDensity', this.id);

	    fogType.setValue(scene.fog == null ? 'None' : ((scene.fog instanceof THREE.FogExp2) ? 'FogExp2' : 'Fog'));

	    fogColorRow.dom.style.display = scene.fog == null ? 'none' : '';
	    fogColor.setValue(`#${scene.fog == null ? 'aaaaaa' : scene.fog.color.getHexString()}`);

	    fogNearRow.dom.style.display = (scene.fog && scene.fog instanceof THREE.Fog) ? '' : 'none';
	    fogNear.setValue((scene.fog && scene.fog instanceof THREE.Fog) ? scene.fog.near : 0.1);

	    fogFarRow.dom.style.display = (scene.fog && scene.fog instanceof THREE.Fog) ? '' : 'none';
	    fogFar.setValue((scene.fog && scene.fog instanceof THREE.Fog) ? scene.fog.far : 50);

	    fogDensityRow.dom.style.display = (scene.fog && scene.fog instanceof THREE.FogExp2) ? '' : 'none';
	    fogDensity.setValue((scene.fog && scene.fog instanceof THREE.FogExp2) ? fog.density : 0.05);
	};

	SceneComponent.prototype.onChangeBackgroundType = function () { // 切换背景类型
	    var backgroundType = UI.get('backgroundType', this.id);

	    var backgroundColorRow = UI.get('backgroundColorRow', this.id);
	    var backgroundImageRow = UI.get('backgroundImageRow', this.id);
	    var backgroundPosXRow = UI.get('backgroundPosXRow', this.id);
	    var backgroundNegXRow = UI.get('backgroundNegXRow', this.id);
	    var backgroundPosYRow = UI.get('backgroundPosYRow', this.id);
	    var backgroundNegYRow = UI.get('backgroundNegYRow', this.id);
	    var backgroundPosZRow = UI.get('backgroundPosZRow', this.id);
	    var backgroundNegZRow = UI.get('backgroundNegZRow', this.id);

	    var cubeTextureCommandRow = UI.get('cubeTextureCommandRow', this.id);

	    switch (backgroundType.getValue()) {
	        case 'Color':
	            backgroundColorRow.dom.style.display = '';
	            backgroundImageRow.dom.style.display = 'none';
	            backgroundPosXRow.dom.style.display = 'none';
	            backgroundNegXRow.dom.style.display = 'none';
	            backgroundPosYRow.dom.style.display = 'none';
	            backgroundNegYRow.dom.style.display = 'none';
	            backgroundPosZRow.dom.style.display = 'none';
	            backgroundNegZRow.dom.style.display = 'none';
	            cubeTextureCommandRow.dom.style.display = 'none';
	            break;
	        case 'Image':
	            backgroundColorRow.dom.style.display = 'none';
	            backgroundImageRow.dom.style.display = '';
	            backgroundPosXRow.dom.style.display = 'none';
	            backgroundNegXRow.dom.style.display = 'none';
	            backgroundPosYRow.dom.style.display = 'none';
	            backgroundNegYRow.dom.style.display = 'none';
	            backgroundPosZRow.dom.style.display = 'none';
	            backgroundNegZRow.dom.style.display = 'none';
	            cubeTextureCommandRow.dom.style.display = 'none';
	            break;
	        case 'SkyBox':
	            backgroundColorRow.dom.style.display = 'none';
	            backgroundImageRow.dom.style.display = 'none';
	            backgroundPosXRow.dom.style.display = '';
	            backgroundNegXRow.dom.style.display = '';
	            backgroundPosYRow.dom.style.display = '';
	            backgroundNegYRow.dom.style.display = '';
	            backgroundPosZRow.dom.style.display = '';
	            backgroundNegZRow.dom.style.display = '';
	            cubeTextureCommandRow.dom.style.display = '';
	            break;
	    }

	    this.update();
	};

	SceneComponent.prototype.onLoadCubeTexture = function () { // 加载立体贴图
	    this.app.call(`selectBottomPanel`, this, 'map');
	    UI.msg(L_CLICK_MAP_PANEL);
	    this.app.on(`selectMap.${this.id}`, this.onSelectCubeMap.bind(this));
	};

	SceneComponent.prototype.onSelectCubeMap = function (model) {
	    if (model.Type !== 'cube') {
	        UI.msg(L_ONLY_SELECT_CUBE_TEXTURE);
	        return;
	    }

	    this.app.on(`selectMap.${this.id}`, null);

	    var urls = model.Url.split(';');

	    var loader = new THREE.TextureLoader();

	    var promises = urls.map(url => {
	        return new Promise(resolve => {
	            loader.load(`${this.app.options.server}${url}`, texture => {
	                resolve(texture);
	            }, undefined, error => {
	                console.error(error);
	                UI.msg(L_CUBE_TEXTURE_FETCH_FAILED);
	            });
	        });
	    });

	    Promise.all(promises).then(textures => {
	        UI.get('backgroundPosX', this.id).setValue(textures[0]);
	        UI.get('backgroundNegX', this.id).setValue(textures[1]);
	        UI.get('backgroundPosY', this.id).setValue(textures[2]);
	        UI.get('backgroundNegY', this.id).setValue(textures[3]);
	        UI.get('backgroundPosZ', this.id).setValue(textures[4]);
	        UI.get('backgroundNegZ', this.id).setValue(textures[5]);
	        this.update();
	    });
	};

	SceneComponent.prototype.onSaveCubeTexture = function () { // 保存立体贴图
	    var texturePosX = UI.get('backgroundPosX', this.id).getValue();
	    var textureNegX = UI.get('backgroundNegX', this.id).getValue();
	    var texturePosY = UI.get('backgroundPosY', this.id).getValue();
	    var textureNegY = UI.get('backgroundNegY', this.id).getValue();
	    var texturePosZ = UI.get('backgroundPosZ', this.id).getValue();
	    var textureNegZ = UI.get('backgroundNegZ', this.id).getValue();

	    if (!texturePosX || !textureNegX || !texturePosY || !textureNegY || !texturePosZ || !textureNegZ) {
	        UI.msg(L_UPLOAD_ALL_BEFORE_SAVE);
	        return;
	    }

	    var posXSrc = texturePosX.image.src;
	    var negXSrc = textureNegX.image.src;
	    var posYSrc = texturePosY.image.src;
	    var negYSrc = textureNegY.image.src;
	    var posZSrc = texturePosZ.image.src;
	    var negZSrc = textureNegZ.image.src;

	    if (posXSrc.startsWith('http') || negXSrc.startsWith('http') || posYSrc.startsWith('http') || negYSrc.startsWith('http') || posZSrc.startsWith('http') || negZSrc.startsWith('http')) {
	        UI.msg(L_CUBE_TEXTURE_EXISTED);
	        return;
	    }

	    var promises = [
	        Converter$1.dataURLtoFile(posXSrc, 'posX'),
	        Converter$1.dataURLtoFile(negXSrc, 'negX'),
	        Converter$1.dataURLtoFile(posYSrc, 'posY'),
	        Converter$1.dataURLtoFile(negYSrc, 'negY'),
	        Converter$1.dataURLtoFile(posZSrc, 'posZ'),
	        Converter$1.dataURLtoFile(negZSrc, 'negZ'),
	    ];

	    Promise.all(promises).then(files => {
	        Ajax.post(`${this.app.options.server}/api/Map/Add`, {
	            posX: files[0],
	            negX: files[1],
	            posY: files[2],
	            negY: files[3],
	            posZ: files[4],
	            negZ: files[5],
	        }, result => {
	            var obj = JSON.parse(result);
	            UI.msg(obj.Msg);
	        });
	    });
	};

	SceneComponent.prototype.onChangeFogType = function () { // 切换雾类型
	    var fogType = UI.get('fogType', this.id);
	    var fogColorRow = UI.get('fogColorRow', this.id);
	    var fogNearRow = UI.get('fogNearRow', this.id);
	    var fogFarRow = UI.get('fogFarRow', this.id);
	    var fogDensityRow = UI.get('fogDensityRow', this.id);

	    switch (fogType.getValue()) {
	        case 'None':
	            fogColorRow.dom.style.display = 'none';
	            fogNearRow.dom.style.display = 'none';
	            fogFarRow.dom.style.display = 'none';
	            fogDensityRow.dom.style.display = 'none';
	            break;
	        case 'Fog':
	            fogColorRow.dom.style.display = '';
	            fogNearRow.dom.style.display = '';
	            fogFarRow.dom.style.display = '';
	            fogDensityRow.dom.style.display = 'none';
	            break;
	        case 'FogExp2':
	            fogColorRow.dom.style.display = '';
	            fogNearRow.dom.style.display = 'none';
	            fogFarRow.dom.style.display = 'none';
	            fogDensityRow.dom.style.display = '';
	            break;
	    }

	    this.update();
	};

	SceneComponent.prototype.update = function () {
	    var scene = this.selected;

	    // 背景
	    var backgroundType = UI.get('backgroundType', this.id).getValue();
	    var backgroundColor = UI.get('backgroundColor', this.id).getHexValue();
	    var backgroundImage = UI.get('backgroundImage', this.id).getValue();
	    var backgroundPosX = UI.get('backgroundPosX', this.id).getValue();
	    var backgroundNegX = UI.get('backgroundNegX', this.id).getValue();
	    var backgroundPosY = UI.get('backgroundPosY', this.id).getValue();
	    var backgroundNegY = UI.get('backgroundNegY', this.id).getValue();
	    var backgroundPosZ = UI.get('backgroundPosZ', this.id).getValue();
	    var backgroundNegZ = UI.get('backgroundNegZ', this.id).getValue();

	    switch (backgroundType) {
	        case 'Color':
	            scene.background = new THREE.Color(backgroundColor);
	            break;
	        case 'Image':
	            if (backgroundImage) {
	                scene.background = backgroundImage;
	            }
	            break;
	        case 'SkyBox':
	            if (backgroundPosX && backgroundNegX && backgroundPosY && backgroundNegY && backgroundPosZ && backgroundNegZ) {
	                scene.background = new THREE.CubeTexture([
	                    backgroundPosX.image,
	                    backgroundNegX.image,
	                    backgroundPosY.image,
	                    backgroundNegY.image,
	                    backgroundPosZ.image,
	                    backgroundNegZ.image
	                ]);
	                scene.background.needsUpdate = true;
	            }
	            break;
	    }

	    // 雾
	    var fogType = UI.get('fogType', this.id).getValue();
	    var fogColor = UI.get('fogColor', this.id).getHexValue();
	    var fogNear = UI.get('fogNear', this.id).getValue();
	    var fogFar = UI.get('fogFar', this.id).getValue();
	    var fogDensity = UI.get('fogDensity', this.id).getValue();

	    switch (fogType) {
	        case 'None':
	            scene.fog = null;
	            break;
	        case 'Fog':
	            scene.fog = new THREE.Fog(fogColor, fogNear, fogFar);
	            break;
	        case 'FogExp2':
	            scene.fog = new THREE.FogExp2(fogColor, fogDensity);
	            break;
	    }
	};

	/**
	 * 背景音乐组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function BackgroundMusicComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	BackgroundMusicComponent.prototype = Object.create(BaseComponent.prototype);
	BackgroundMusicComponent.prototype.constructor = BackgroundMusicComponent;

	BackgroundMusicComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        id: 'backgroundMusicPanel',
	        scope: this.id,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold'
	                },
	                text: L_BACKGROUND_MUSIC
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_AUDIO
	            }, {
	                xtype: 'text',
	                id: 'name',
	                scope: this.id,
	                text: '(' + L_NONE + ')',
	                style: {
	                    width: '80px',
	                    border: '1px solid #ddd',
	                    marginRight: '8px'
	                }
	            }, {
	                xtype: 'button',
	                text: L_SELECT,
	                onClick: this.onSelect.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_AUTO_PLAY
	            }, {
	                xtype: 'checkbox',
	                id: 'autoplay',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_LOOP
	            }, {
	                xtype: 'checkbox',
	                id: 'loop',
	                scope: this.id,
	                value: true,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_VOLUME
	            }, {
	                xtype: 'number',
	                id: 'volumn',
	                scope: this.id,
	                range: [0, 1],
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label'
	            }, {
	                xtype: 'button',
	                id: 'btnPlay',
	                scope: this.id,
	                text: L_PLAY,
	                style: {
	                    display: 'none'
	                },
	                onClick: this.onPlay.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	BackgroundMusicComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	BackgroundMusicComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	BackgroundMusicComponent.prototype.updateUI = function () {
	    var container = UI.get('backgroundMusicPanel', this.id);

	    var editor = this.app.editor;
	    if (editor.selected && editor.selected instanceof THREE.Audio) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var name = UI.get('name', this.id);
	    var autoplay = UI.get('autoplay', this.id);
	    var loop = UI.get('loop', this.id);
	    var volumn = UI.get('volumn', this.id);
	    var btnPlay = UI.get('btnPlay', this.id);

	    name.setValue(this.selected.userData.Name);
	    autoplay.setValue(this.selected.userData.autoplay);
	    loop.setValue(this.selected.getLoop());
	    volumn.setValue(this.selected.getVolume());

	    if (this.selected.buffer) {
	        btnPlay.dom.style.display = '';
	        if (this.selected.isPlaying) {
	            btnPlay.setText(L_STOP);
	        } else {
	            btnPlay.setText(L_PLAY);
	        }
	    } else {
	        btnPlay.dom.style.display = 'none';
	    }
	};

	BackgroundMusicComponent.prototype.onSelect = function () {
	    this.app.call(`selectBottomPanel`, this, 'audio');
	    UI.msg(L_CLICK_AUDIO_IN_PANEL);
	    this.app.on(`selectAudio.${this.id}`, this.onSelectAudio.bind(this));
	};

	BackgroundMusicComponent.prototype.onSelectAudio = function (obj) {
	    var btnPlay = UI.get('btnPlay', this.id);

	    this.app.on(`selectAudio.${this.id}`, null);

	    Object.assign(this.selected.userData, obj);

	    var loader = new THREE.AudioLoader();
	    loader.load(obj.Url, buffer => {
	        this.selected.setBuffer(buffer);
	        btnPlay.dom.style.display = '';
	    });

	    this.app.call(`objectChanged`, this, this.selected);
	};

	BackgroundMusicComponent.prototype.onChange = function () {
	    var name = UI.get('name', this.id);
	    var autoplay = UI.get('autoplay', this.id);
	    var loop = UI.get('loop', this.id);
	    var volumn = UI.get('volumn', this.id);

	    this.selected.userData.autoplay = autoplay.getValue(); // 这里不能给this.selected赋值，否则音频会自动播放
	    this.selected.setLoop(loop.getValue());
	    this.selected.setVolume(volumn.getValue());
	    this.updateUI();
	};

	BackgroundMusicComponent.prototype.onPlay = function () {
	    var btnPlay = UI.get('btnPlay', this.id);

	    if (this.selected.buffer) {
	        btnPlay.dom.style.display = '';
	        if (this.selected.isPlaying) {
	            this.selected.stop();
	            btnPlay.setText(L_PLAY);
	        } else {
	            this.selected.play();
	            btnPlay.setText(L_STOP);
	        }
	    } else {
	        btnPlay.dom.style.display = 'none';
	    }
	};

	/**
	 * 火焰组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function FireComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;

	    this.isPlaying = false;
	}

	FireComponent.prototype = Object.create(BaseComponent.prototype);
	FireComponent.prototype.constructor = FireComponent;

	FireComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'firePanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'label',
	            style: {
	                width: '100%',
	                color: '#555',
	                fontWeight: 'bold'
	            },
	            text: L_FIRE_COMPONENT
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_WIDTH
	            }, {
	                xtype: 'int',
	                id: 'width',
	                scope: this.id,
	                range: [0, Infinity],
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_HEIGHT
	            }, {
	                xtype: 'int',
	                id: 'height',
	                scope: this.id,
	                range: [0, Infinity],
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_DEPTH
	            }, {
	                xtype: 'int',
	                id: 'depth',
	                scope: this.id,
	                range: [0, Infinity],
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_SLICE_SPACING
	            }, {
	                xtype: 'number',
	                id: 'sliceSpacing',
	                scope: this.id,
	                range: [0, Infinity],
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label'
	            }, {
	                xtype: 'button',
	                id: 'btnPreview',
	                scope: this.id,
	                text: L_PREVIEW,
	                onClick: this.onPreview.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	FireComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	FireComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	FireComponent.prototype.updateUI = function () {
	    var container = UI.get('firePanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected.userData.type === 'Fire') {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var width = UI.get('width', this.id);
	    var height = UI.get('height', this.id);
	    var depth = UI.get('depth', this.id);
	    var sliceSpacing = UI.get('sliceSpacing', this.id);
	    var btnPreview = UI.get('btnPreview', this.id);

	    var fire = this.selected.userData.fire;
	    width.setValue(fire.mesh.userData.width);
	    height.setValue(fire.mesh.userData.height);
	    depth.setValue(fire.mesh.userData.depth);
	    sliceSpacing.setValue(fire.mesh.userData.sliceSpacing);

	    if (this.isPlaying) {
	        btnPreview.setText('取消');
	    } else {
	        btnPreview.setText('预览');
	    }
	};

	FireComponent.prototype.onChange = function () {
	    var width = UI.get('width', this.id);
	    var height = UI.get('height', this.id);
	    var depth = UI.get('depth', this.id);
	    var sliceSpacing = UI.get('sliceSpacing', this.id);

	    VolumetricFire.texturePath = 'assets/textures/VolumetricFire/';

	    var editor = this.app.editor;

	    var fire = new VolumetricFire(
	        width.getValue(),
	        height.getValue(),
	        depth.getValue(),
	        sliceSpacing.getValue(),
	        editor.camera
	    );

	    fire.mesh.name = this.selected.name;
	    fire.mesh.position.copy(this.selected.position);
	    fire.mesh.rotation.copy(this.selected.rotation);
	    fire.mesh.scale.copy(this.selected.scale);

	    fire.mesh.userData.type = 'Fire';
	    fire.mesh.userData.fire = fire;
	    fire.mesh.userData.width = width.getValue();
	    fire.mesh.userData.height = height.getValue();
	    fire.mesh.userData.depth = depth.getValue();
	    fire.mesh.userData.sliceSpacing = sliceSpacing.getValue();

	    var index = editor.scene.children.indexOf(this.selected);
	    if (index > -1) {
	        editor.scene.children[index] = fire.mesh;
	        fire.mesh.parent = this.selected.parent;
	        this.selected.parent = null;
	        this.app.call(`objectRemoved`, this, this.selected);
	        this.app.call(`objectAdded`, this, fire.mesh);
	        editor.select(fire.mesh);
	        this.app.call('sceneGraphChanged', this.id);

	        fire.update(0);
	    }
	};

	FireComponent.prototype.onPreview = function () {
	    if (this.isPlaying) {
	        this.stopPreview();
	    } else {
	        this.startPreview();
	    }
	};

	FireComponent.prototype.startPreview = function () {
	    var btnPreview = UI.get('btnPreview', this.id);

	    this.isPlaying = true;
	    btnPreview.setText('取消');

	    this.app.on(`animate.${this.id}`, this.onAnimate.bind(this));
	};

	FireComponent.prototype.stopPreview = function () {
	    var btnPreview = UI.get('btnPreview', this.id);

	    this.isPlaying = false;
	    btnPreview.setText('预览');

	    this.app.on(`animate.${this.id}`, null);
	};

	FireComponent.prototype.onAnimate = function (clock, deltaTime) {
	    var elapsed = clock.getElapsedTime();

	    var fire = this.selected.userData.fire;
	    fire.update(elapsed);
	};

	/**
	 * 烟组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function SmokeComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;

	    this.isPlaying = false;
	}

	SmokeComponent.prototype = Object.create(BaseComponent.prototype);
	SmokeComponent.prototype.constructor = SmokeComponent;

	SmokeComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'smokePanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'label',
	            style: {
	                width: '100%',
	                color: '#555',
	                fontWeight: 'bold'
	            },
	            text: L_SMOKE_COMPONENT
	        },
	        // {
	        //     xtype: 'row',
	        //     children: [{
	        //         xtype: 'label',
	        //         text: '数量'
	        //     }, {
	        //         xtype: 'int',
	        //         id: 'particleCount',
	        //         scope: this.id,
	        //         range: [0, Infinity],
	        //         onChange: this.onChange.bind(this)
	        //     }]
	        // }, 
	        {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: '尺寸'
	            }, {
	                xtype: 'int',
	                id: 'size',
	                scope: this.id,
	                range: [0, Infinity],
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: '时长'
	            }, {
	                xtype: 'int',
	                id: 'lifetime',
	                scope: this.id,
	                range: [0, Infinity],
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label'
	            }, {
	                xtype: 'button',
	                id: 'btnPreview',
	                scope: this.id,
	                text: L_PREVIEW,
	                onClick: this.onPreview.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	SmokeComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	SmokeComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	SmokeComponent.prototype.updateUI = function () {
	    var container = UI.get('smokePanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected.userData.type === 'Smoke') {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    // var particleCount = UI.get('particleCount', this.id);
	    var size = UI.get('size', this.id);
	    var lifetime = UI.get('lifetime', this.id);
	    var btnPreview = UI.get('btnPreview', this.id);

	    // particleCount.setValue(this.selected.userData.particleCount);
	    size.setValue(this.selected.userData.size);
	    lifetime.setValue(this.selected.userData.lifetime);

	    if (this.isPlaying) {
	        btnPreview.setText(L_CANCEL);
	    } else {
	        btnPreview.setText(L_PREVIEW);
	    }
	};

	SmokeComponent.prototype.onChange = function () {
	    // var particleCount = UI.get('particleCount', this.id);
	    var size = UI.get('size', this.id);
	    var lifetime = UI.get('lifetime', this.id);

	    // this.selected.userData.particleCount = particleCount.getValue();
	    this.selected.userData.size = size.getValue();
	    this.selected.userData.lifetime = lifetime.getValue();

	    this.selected.material.uniforms.size.value = size.getValue();
	    this.selected.material.uniforms.lifetime.value = lifetime.getValue();
	};

	SmokeComponent.prototype.onPreview = function () {
	    if (this.isPlaying) {
	        this.stopPreview();
	    } else {
	        this.startPreview();
	    }
	};

	SmokeComponent.prototype.startPreview = function () {
	    var btnPreview = UI.get('btnPreview', this.id);

	    this.isPlaying = true;
	    btnPreview.setText(L_CANCEL);

	    this.app.on(`animate.${this.id}`, this.onAnimate.bind(this));
	};

	SmokeComponent.prototype.stopPreview = function () {
	    var btnPreview = UI.get('btnPreview', this.id);

	    this.isPlaying = false;
	    btnPreview.setText(L_PREVIEW);

	    this.app.on(`animate.${this.id}`, null);
	};

	SmokeComponent.prototype.onAnimate = function (clock, deltaTime) {
	    var elapsed = clock.getElapsedTime();
	    this.selected.update(elapsed);
	};

	/**
	 * 反光组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function ReflectorComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	ReflectorComponent.prototype = Object.create(BaseComponent.prototype);
	ReflectorComponent.prototype.constructor = ReflectorComponent;

	ReflectorComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'reflectorPanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold'
	                },
	                text: L_REFLECTOR_COMPONENT
	            }]
	        }, {
	            xtype: 'row',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_REFLECT
	            }, {
	                xtype: 'checkbox',
	                id: 'reflect',
	                scope: this.id,
	                onChange: this.onChangeReflect.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'colorRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_COLOR
	            }, {
	                xtype: 'color',
	                id: 'color',
	                scope: this.id,
	                value: 0xffffff,
	                onChange: this.onChangeReflect.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'sizeRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_TEXTURE_SIZE
	            }, {
	                xtype: 'select',
	                id: 'size',
	                scope: this.id,
	                options: {
	                    512: '512*512',
	                    1024: '1024*1024',
	                    2048: '2048*2048'
	                },
	                value: '1024',
	                onChange: this.onChangeReflect.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'clipBiasRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_CLIP_BIAS
	            }, {
	                xtype: 'number',
	                id: 'clipBias',
	                scope: this.id,
	                value: 0,
	                onChange: this.onChangeReflect.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'recursionRow',
	            scope: this.id,
	            children: [{
	                xtype: 'label',
	                text: L_RECURSION
	            }, {
	                xtype: 'checkbox',
	                id: 'recursion',
	                scope: this.id,
	                value: false,
	                onChange: this.onChangeReflect.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	ReflectorComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	ReflectorComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	ReflectorComponent.prototype.updateUI = function () {
	    var container = UI.get('reflectorPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected instanceof THREE.Mesh) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var colorRow = UI.get('colorRow', this.id);
	    var sizeRow = UI.get('sizeRow', this.id);
	    var clipBiasRow = UI.get('clipBiasRow', this.id);
	    var recursionRow = UI.get('recursionRow', this.id);

	    var reflect = UI.get('reflect', this.id);
	    var color = UI.get('color', this.id);
	    var size = UI.get('size', this.id);
	    var clipBias = UI.get('clipBias', this.id);
	    var recursion = UI.get('recursion', this.id);

	    reflect.setValue(this.selected instanceof THREE.Reflector);

	    if (this.selected instanceof THREE.Reflector) {
	        colorRow.dom.style.display = '';
	        sizeRow.dom.style.display = '';
	        clipBiasRow.dom.style.display = '';
	        recursionRow.dom.style.display = '';
	        color.setHexValue(this.selected.userData.color);
	        size.setValue(this.selected.userData.size);
	        clipBias.setValue(this.selected.userData.clipBias);
	        recursion.setValue(this.selected.userData.recursion);
	    } else {
	        colorRow.dom.style.display = 'none';
	        sizeRow.dom.style.display = 'none';
	        clipBiasRow.dom.style.display = 'none';
	        recursionRow.dom.style.display = 'none';
	    }
	};

	ReflectorComponent.prototype.onChangeReflect = function () {
	    var reflect = UI.get('reflect', this.id);
	    var color = UI.get('color', this.id);
	    var size = UI.get('size', this.id);
	    var clipBias = UI.get('clipBias', this.id);
	    var recursion = UI.get('recursion', this.id);

	    var editor = this.app.editor;

	    if (reflect.getValue()) {
	        color = color.getHexValue();

	        if (!(this.selected instanceof THREE.Reflector) && !Array.isArray(this.selected.material) && this.selected.material.color) {
	            color = this.selected.material.color.getHex();
	        }

	        var reflector = new THREE.Reflector(this.selected.geometry, {
	            color: color,
	            textureWidth: parseInt(size.getValue()),
	            textureHeight: parseInt(size.getValue()),
	            clipBias: clipBias.getValue(),
	            recursion: recursion.getValue() ? 1 : 0
	        });

	        reflector.name = this.selected.name;
	        reflector.position.copy(this.selected.position);
	        reflector.rotation.copy(this.selected.rotation);
	        reflector.scale.copy(this.selected.scale);
	        reflector.castShadow = this.selected.castShadow;
	        reflector.receiveShadow = this.selected.receiveShadow;

	        if (this.selected instanceof THREE.Reflector) {
	            Object.assign(reflector.userData, this.selected.userData);
	        } else {
	            Object.assign(reflector.userData, this.selected.userData, {
	                mesh: this.selected
	            });
	        }

	        reflector.userData.color = color;
	        reflector.userData.size = size.getValue();
	        reflector.userData.clipBias = clipBias.getValue();
	        reflector.userData.recursion = recursion.getValue();

	        var index = editor.scene.children.indexOf(this.selected);
	        if (index > -1) {
	            editor.scene.children[index] = reflector;
	            reflector.parent = this.selected.parent;
	            this.selected.parent = null;
	            this.app.call(`objectRemoved`, this, this.selected);
	            this.app.call(`objectAdded`, this, reflector);
	            editor.select(reflector);
	            this.app.call('sceneGraphChanged', this.id);
	        }
	    } else {
	        if (this.selected instanceof THREE.Reflector) {
	            var mesh = this.selected.userData.mesh;
	            this.selected.userData.mesh = null;

	            mesh.name = this.selected.name;
	            mesh.position.copy(this.selected.position);
	            mesh.rotation.copy(this.selected.rotation);
	            mesh.scale.copy(this.selected.scale);
	            mesh.castShadow = this.selected.castShadow;
	            mesh.receiveShadow = this.selected.receiveShadow;

	            if (!Array.isArray(mesh.material) && mesh.material.color) {
	                mesh.material.color = new THREE.Color(color.getHexValue());
	            }

	            Object.assign(mesh.userData, this.selected.userData);

	            var index = editor.scene.children.indexOf(this.selected);
	            if (index > -1) {
	                editor.scene.children[index] = mesh;
	                mesh.parent = this.selected.parent;
	                this.selected.parent = null;
	                this.app.call(`objectRemoved`, this, this.selected);
	                this.app.call(`objectAdded`, this, mesh);
	                editor.select(mesh);
	                this.app.call('sceneGraphChanged', this.id);
	            }
	        }
	    }
	};

	/**
	 * LMesh组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function LMeshComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;

	    this.isPlaying = false;
	}

	LMeshComponent.prototype = Object.create(BaseComponent.prototype);
	LMeshComponent.prototype.constructor = LMeshComponent;

	LMeshComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'lmeshPanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    width: '100%',
	                    color: '#555',
	                    fontWeight: 'bold'
	                },
	                text: L_LMESH_COMPONENT
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ANIMATION
	            }, {
	                xtype: 'select',
	                id: 'anims',
	                scope: this.id,
	                onChange: this.onSelectAnim.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label'
	            }, {
	                xtype: 'button',
	                id: 'btnPreview',
	                scope: this.id,
	                text: L_PREVIEW,
	                onClick: this.onPreview.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	LMeshComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	LMeshComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	LMeshComponent.prototype.updateUI = function () {
	    var container = UI.get('lmeshPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected.userData.type === 'lol') {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var anims = UI.get('anims', this.id);
	    var btnPreview = UI.get('btnPreview', this.id);

	    var model = this.selected.userData.model;
	    var animNames = model.getAnimations();

	    var options = {

	    };

	    animNames.forEach(n => {
	        options[n] = n;
	    });

	    anims.setOptions(options);
	    anims.setValue(animNames[0]);

	    if (this.isPlaying) {
	        btnPreview.setText('取消');
	    } else {
	        btnPreview.setText('预览');
	    }
	};

	LMeshComponent.prototype.onSelectAnim = function () {
	    var anims = UI.get('anims', this.id);

	    var model = this.selected.userData.model;
	    model.setAnimation(anims.getValue());
	};

	LMeshComponent.prototype.onPreview = function () {
	    if (this.isPlaying) {
	        this.stopPreview();
	    } else {
	        this.startPreview();
	    }
	};

	LMeshComponent.prototype.startPreview = function () {
	    var btnPreview = UI.get('btnPreview', this.id);

	    this.isPlaying = true;
	    btnPreview.setText('取消');

	    this.onSelectAnim();

	    this.app.on(`animate.${this.id}`, this.onAnimate.bind(this));
	};

	LMeshComponent.prototype.stopPreview = function () {
	    var btnPreview = UI.get('btnPreview', this.id);

	    this.isPlaying = false;
	    btnPreview.setText('预览');

	    this.app.on(`animate.${this.id}`, null);
	};

	LMeshComponent.prototype.onAnimate = function (clock, deltaTime) {
	    var model = this.selected.userData.model;
	    model.update(clock.getElapsedTime() * 1000);
	};

	// import MMDWindow from '../editor/window/MMDWindow';

	/**
	 * MMD模型组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function MMDComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	MMDComponent.prototype = Object.create(BaseComponent.prototype);
	MMDComponent.prototype.constructor = MMDComponent;

	MMDComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'mmdPanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    width: '100%',
	                    color: '#555',
	                    fontWeight: 'bold'
	                },
	                text: L_MMD_MODEL
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MODEL_ANIMATION
	            }, {
	                xtype: 'input',
	                id: 'animation',
	                scope: this.id,
	                disabled: true,
	                style: {
	                    width: '80px',
	                    fontSize: '12px'
	                }
	            }, {
	                xtype: 'button',
	                text: L_SELECT,
	                onClick: this.selectAnimation.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_CAMERA_ANIMATION
	            }, {
	                xtype: 'input',
	                id: 'cameraAnimation',
	                scope: this.id,
	                disabled: true,
	                style: {
	                    width: '80px',
	                    fontSize: '12px'
	                }
	            }, {
	                xtype: 'button',
	                text: L_SELECT,
	                onClick: this.selectCameraAnimation.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_AUDIO
	            }, {
	                xtype: 'input',
	                id: 'audio',
	                scope: this.id,
	                disabled: true,
	                style: {
	                    width: '80px',
	                    fontSize: '12px'
	                }
	            }, {
	                xtype: 'button',
	                text: L_SELECT,
	                onClick: this.selectAudio.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	MMDComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	MMDComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	MMDComponent.prototype.updateUI = function () {
	    var container = UI.get('mmdPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && (editor.selected.userData.Type === 'pmd' || editor.selected.userData.Type === 'pmx')) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var animation = UI.get('animation', this.id);
	    var cameraAnimation = UI.get('cameraAnimation', this.id);
	    var audio = UI.get('audio', this.id);

	    if (this.selected.userData.Animation) {
	        animation.setValue(this.selected.userData.Animation.Name);
	    } else {
	        animation.setValue('');
	    }

	    if (this.selected.userData.CameraAnimation) {
	        cameraAnimation.setValue(this.selected.userData.CameraAnimation.Name);
	    } else {
	        cameraAnimation.setValue('');
	    }

	    if (this.selected.userData.Audio) {
	        audio.setValue(this.selected.userData.Audio.Name);
	    } else {
	        audio.setValue('');
	    }
	};

	// ----------------------------- 模型动画 ------------------------------------------

	MMDComponent.prototype.selectAnimation = function () {
	    this.app.call(`selectBottomPanel`, this, 'animation');
	    UI.msg(L_CLICK_ANIMATION_PANEL);
	    this.app.on(`selectAnimation.${this.id}`, this.onSelectAnimation.bind(this));
	};

	MMDComponent.prototype.onSelectAnimation = function (data) {
	    if (data.Type !== 'mmd') {
	        UI.msg(L_SELECT_MMD_ANIMATION_ONLY);
	        return;
	    }
	    this.app.on(`selectAnimation.${this.id}`, null);

	    this.selected.userData.Animation = {};
	    Object.assign(this.selected.userData.Animation, data);
	    this.updateUI();
	};

	// ---------------------------- 相机动画 -------------------------------------------

	MMDComponent.prototype.selectCameraAnimation = function () {
	    this.app.call(`selectBottomPanel`, this, 'animation');
	    UI.msg(L_CLICK_CAMERA_ANIMATION);
	    this.app.on(`selectAnimation.${this.id}`, this.onSelectCameraAnimation.bind(this));
	};

	MMDComponent.prototype.onSelectCameraAnimation = function (data) {
	    if (data.Type !== 'mmd') {
	        UI.msg(L_SELECT_CAMERA_ANIMATION_ONLY);
	        return;
	    }
	    this.app.on(`selectAnimation.${this.id}`, null);

	    this.selected.userData.CameraAnimation = {};
	    Object.assign(this.selected.userData.CameraAnimation, data);
	    this.updateUI();
	};

	// ------------------------------ MMD音乐 --------------------------------------------

	MMDComponent.prototype.selectAudio = function () {
	    this.app.call(`selectBottomPanel`, this, 'audio');
	    UI.msg(L_SELECT_MMD_AUDIO);
	    this.app.on(`selectAudio.${this.id}`, this.onSelectAudio.bind(this));
	};

	MMDComponent.prototype.onSelectAudio = function (data) {
	    this.app.on(`selectAudio.${this.id}`, null);

	    this.selected.userData.Audio = {};
	    Object.assign(this.selected.userData.Audio, data);
	    this.updateUI();
	};

	/**
	 * 立方体帮助器
	 * @param {*} object 
	 */
	function BoxShapeHelper(object) {
	    this.object = object;

	    var geometry = this.object.geometry;
	    geometry.computeBoundingBox();

	    var box = geometry.boundingBox;

	    var x = box.max.x - box.min.x;
	    var y = box.max.y - box.min.y;
	    var z = box.max.z - box.min.z;

	    var center = new THREE.Vector3();
	    box.getCenter(center);

	    var geometry = new THREE.BoxBufferGeometry(x, y, z);
	    geometry.translate(center.x, center.y, center.z);

	    var material = new THREE.MeshBasicMaterial({
	        color: 0xffff00
	    });

	    material.wireframe = true;
	    material.depthTest = false;

	    THREE.Mesh.call(this, geometry, material);

	    this.update();
	}
	BoxShapeHelper.prototype = Object.create(THREE.Mesh.prototype);
	BoxShapeHelper.prototype.constructor = BoxShapeHelper;

	BoxShapeHelper.prototype.update = function () {
	    this.object.geometry.computeBoundingBox();

	    this.position.copy(this.object.position);
	    this.rotation.copy(this.object.rotation);
	    this.scale.copy(this.object.scale);
	};

	/**
	 * 立方体帮助器
	 * @param {*} object 
	 */
	function SphereShapeHelper(object) {
	    this.object = object;

	    var geometry = this.object.geometry;
	    geometry.computeBoundingSphere();

	    var sphere = geometry.boundingSphere;

	    var geometry = new THREE.SphereBufferGeometry(sphere.radius);
	    var material = new THREE.MeshBasicMaterial({
	        color: 0xffff00
	    });

	    material.wireframe = true;
	    material.depthTest = false;

	    THREE.Mesh.call(this, geometry, material);

	    this.update();
	}
	SphereShapeHelper.prototype = Object.create(THREE.Mesh.prototype);
	SphereShapeHelper.prototype.constructor = SphereShapeHelper;

	SphereShapeHelper.prototype.update = function () {
	    this.object.geometry.computeBoundingSphere();

	    this.position.copy(this.object.position);
	    this.rotation.copy(this.object.rotation);
	    this.scale.copy(this.object.scale);
	};

	var physicsShapeHelper = {
	    btBoxShape: BoxShapeHelper,
	    btSphereShape: SphereShapeHelper,
	};

	/**
	 * 刚体组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function RigidBodyComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	RigidBodyComponent.prototype = Object.create(BaseComponent.prototype);
	RigidBodyComponent.prototype.constructor = RigidBodyComponent;

	RigidBodyComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'panel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    width: '100%',
	                    color: '#555',
	                    fontWeight: 'bold'
	                },
	                text: L_RIGID_BODY
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_SHAPE
	            }, {
	                xtype: 'select',
	                id: 'shape',
	                scope: this.id,
	                options: {
	                    btBoxShape: L_BOX_SHAPE,
	                    // btBvhTriangleMeshShape: 'bvh三角形网格',
	                    // btCapsuleShape: '胶囊',
	                    // btCapsuleShapeX: 'x轴胶囊',
	                    // btCapsuleShapeZ: 'z轴胶囊',
	                    // btCollisionShape: '碰撞体',
	                    // btCompoundShape: '复合形状',
	                    // btConcaveShape: '凹面体',
	                    // btConeShape: '圆锥体',
	                    // btConeShapeX: 'x轴圆椎体',
	                    // btConeShapeZ: 'z轴圆椎体',
	                    // btConvexHullShape: '凸包',
	                    // btConvexShape: '凸面体',
	                    // btConvexTriangleMeshShape: '凸三角形网格',
	                    // btCylinderShape: '圆柱体',
	                    // btCylinderShapeX: 'x轴圆柱体',
	                    // btCylinderShapeZ: 'z轴圆柱体',
	                    // btHeightfieldTerrainShape: '灰阶高程地形',
	                    btSphereShape: L_SPHERE_SHAPE,
	                    // btStaticPlaneShape: '静态平板',
	                    // btTriangleMeshShape: '三角网格'
	                },
	                style: {
	                    width: '130px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MASS
	            }, {
	                xtype: 'number',
	                id: 'mass',
	                scope: this.id,
	                style: {
	                    width: '100px',
	                    fontSize: '12px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_INERTIA
	            }, {
	                xtype: 'number',
	                id: 'inertiaX',
	                scope: this.id,
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'inertiaY',
	                scope: this.id,
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'inertiaZ',
	                scope: this.id,
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	    this.app.on(`objectRemoved.${this.id}`, this.onObjectRemoved.bind(this));
	};

	RigidBodyComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	    // this.showPhysicsShapeHelper();
	};

	RigidBodyComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	    // this.showPhysicsShapeHelper();
	};

	RigidBodyComponent.prototype.onObjectRemoved = function (object) {
	    if (this.helper && this.helper.object === object) {
	        this.app.editor.removePhysicsHelper(this.helper);
	    }
	};

	RigidBodyComponent.prototype.updateUI = function () {
	    var container = UI.get('panel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected &&
	        editor.selected.userData.physics &&
	        editor.selected.userData.physics.enabled &&
	        editor.selected.userData.physics.type === 'rigidBody') {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        if (this.helper !== undefined) {
	            this.app.editor.removePhysicsHelper(this.helper);
	        }
	        return;
	    }

	    this.selected = editor.selected;

	    var shape = UI.get('shape', this.id);
	    var mass = UI.get('mass', this.id);
	    var inertiaX = UI.get('inertiaX', this.id);
	    var inertiaY = UI.get('inertiaY', this.id);
	    var inertiaZ = UI.get('inertiaZ', this.id);

	    var physics = this.selected.userData.physics;

	    physics.shape = physics.shape || 'btBoxShape';
	    physics.mass = physics.mass || 0;
	    physics.inertia = physics.inertia || {
	        x: 0,
	        y: 0,
	        z: 0
	    };

	    shape.setValue(physics.shape);
	    mass.setValue(physics.mass);
	    inertiaX.setValue(physics.inertia.x);
	    inertiaY.setValue(physics.inertia.y);
	    inertiaZ.setValue(physics.inertia.z);
	};

	RigidBodyComponent.prototype.onChange = function () {
	    var shape = UI.get('shape', this.id);
	    var mass = UI.get('mass', this.id);
	    var inertiaX = UI.get('inertiaX', this.id);
	    var inertiaY = UI.get('inertiaY', this.id);
	    var inertiaZ = UI.get('inertiaZ', this.id);

	    var physics = this.selected.userData.physics;

	    physics.shape = shape.getValue();
	    physics.mass = mass.getValue();
	    physics.inertia.x = inertiaX.getValue();
	    physics.inertia.y = inertiaY.getValue();
	    physics.inertia.z = inertiaZ.getValue();

	    this.app.call(`objectChanged`, this, this.selected);
	};

	// -------------------------- 物理形状帮助器 -------------------------------------

	RigidBodyComponent.prototype.showPhysicsShapeHelper = function () {
	    if (this.selected == null) {
	        return;
	    }

	    if (this.helper !== undefined) {
	        this.app.editor.removePhysicsHelper(this.helper);
	    }

	    var physics = this.selected.userData.physics;
	    if (!physics || !physics.enabled) {
	        return;
	    }

	    var helper = physicsShapeHelper[physics.shape];

	    if (!helper) {
	        console.warn(`RigidBodyComponent: ${physics.shape} ${L_HAS_NO_PHYSICS_HELPER}`);
	        return;
	    }

	    this.helper = new helper(this.selected);
	    this.app.editor.addPhysicsHelper(this.helper);
	};

	/**
	 * 天空组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function SkyComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	SkyComponent.prototype = Object.create(BaseComponent.prototype);
	SkyComponent.prototype.constructor = SkyComponent;

	SkyComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        id: 'skyPanel',
	        scope: this.id,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    width: '100%',
	                    color: '#555',
	                    fontWeight: 'bold'
	                },
	                text: L_SKY
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_TURBIDITY
	            }, {
	                xtype: 'number',
	                id: 'turbidity',
	                scope: this.id,
	                range: [0, Infinity],
	                value: 10,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_RAYLEIGH
	            }, {
	                xtype: 'number',
	                id: 'rayleigh',
	                scope: this.id,
	                range: [0, Infinity],
	                value: 2,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_LUMINANCE
	            }, {
	                xtype: 'number',
	                id: 'luminance',
	                scope: this.id,
	                range: [0, Infinity],
	                value: 1,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MIE_COEFFICIENT
	            }, {
	                xtype: 'number',
	                id: 'mieCoefficient',
	                scope: this.id,
	                range: [0, Infinity],
	                value: 0.005,
	                unit: '%',
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MIE_DIRECTIONAL_G
	            }, {
	                xtype: 'number',
	                id: 'mieDirectionalG',
	                scope: this.id,
	                range: [0, Infinity],
	                value: 0.005,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	SkyComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	SkyComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	SkyComponent.prototype.updateUI = function () {
	    var container = UI.get('skyPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected instanceof Sky) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var turbidity = UI.get('turbidity', this.id);
	    var rayleigh = UI.get('rayleigh', this.id);
	    var luminance = UI.get('luminance', this.id);
	    var mieCoefficient = UI.get('mieCoefficient', this.id);
	    var mieDirectionalG = UI.get('mieDirectionalG', this.id);

	    turbidity.setValue(this.selected.userData.turbidity);
	    rayleigh.setValue(this.selected.userData.rayleigh);
	    luminance.setValue(this.selected.userData.luminance);
	    mieCoefficient.setValue(this.selected.userData.mieCoefficient * 100);
	    mieDirectionalG.setValue(this.selected.userData.mieDirectionalG);
	};

	SkyComponent.prototype.onChange = function () {
	    var turbidity = UI.get('turbidity', this.id);
	    var rayleigh = UI.get('rayleigh', this.id);
	    var luminance = UI.get('luminance', this.id);
	    var mieCoefficient = UI.get('mieCoefficient', this.id);
	    var mieDirectionalG = UI.get('mieDirectionalG', this.id);

	    this.selected.userData.turbidity = turbidity.getValue();
	    this.selected.userData.rayleigh = rayleigh.getValue();
	    this.selected.userData.luminance = luminance.getValue();
	    this.selected.userData.mieCoefficient = mieCoefficient.getValue() / 100;
	    this.selected.userData.mieDirectionalG = mieDirectionalG.getValue();

	    var sky = this.selected.children.filter(n => n instanceof THREE.Sky)[0];
	    if (sky) {
	        var uniforms = sky.material.uniforms;
	        uniforms.turbidity.value = turbidity.getValue();
	        uniforms.rayleigh.value = rayleigh.getValue();
	        uniforms.luminance.value = luminance.getValue();
	        uniforms.mieCoefficient.value = mieCoefficient.getValue() / 100;
	        uniforms.mieDirectionalG.value = mieDirectionalG.getValue();
	        sky.material.needsUpdate = true;
	    }

	    this.app.call(`objectSelected`, this, this.selected);
	};

	/**
	 * 柏林地形组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function PerlinTerrainComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	PerlinTerrainComponent.prototype = Object.create(BaseComponent.prototype);
	PerlinTerrainComponent.prototype.constructor = PerlinTerrainComponent;

	PerlinTerrainComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        id: 'perlinPanel',
	        scope: this.id,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    width: '100%',
	                    color: '#555',
	                    fontWeight: 'bold'
	                },
	                text: L_PERLIN_TERRAIN
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_WIDTH
	            }, {
	                xtype: 'int',
	                id: 'width',
	                scope: this.id,
	                range: [0, Infinity],
	                value: 1000,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_DEPTH
	            }, {
	                xtype: 'int',
	                id: 'depth',
	                scope: this.id,
	                range: [0, Infinity],
	                value: 1000,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_WIDTH_SEGMENTS
	            }, {
	                xtype: 'int',
	                id: 'widthSegments',
	                scope: this.id,
	                range: [0, Infinity],
	                value: 256,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_DEPTH_SEGMENTS
	            }, {
	                xtype: 'int',
	                id: 'depthSegments',
	                scope: this.id,
	                range: [0, Infinity],
	                value: 256,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_QUALITY
	            }, {
	                xtype: 'int',
	                id: 'quality',
	                scope: this.id,
	                range: [0, Infinity],
	                value: 80,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	PerlinTerrainComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	PerlinTerrainComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	PerlinTerrainComponent.prototype.updateUI = function () {
	    var container = UI.get('perlinPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected instanceof PerlinTerrain) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var width = UI.get('width', this.id);
	    var depth = UI.get('depth', this.id);
	    var widthSegments = UI.get('widthSegments', this.id);
	    var depthSegments = UI.get('depthSegments', this.id);
	    var quality = UI.get('quality', this.id);

	    width.setValue(this.selected.userData.width);
	    depth.setValue(this.selected.userData.depth);
	    widthSegments.setValue(this.selected.userData.widthSegments);
	    depthSegments.setValue(this.selected.userData.depthSegments);
	    quality.setValue(this.selected.userData.quality);
	};

	PerlinTerrainComponent.prototype.onChange = function () {
	    var width = UI.get('width', this.id);
	    var depth = UI.get('depth', this.id);
	    var widthSegments = UI.get('widthSegments', this.id);
	    var depthSegments = UI.get('depthSegments', this.id);
	    var quality = UI.get('quality', this.id);

	    var terrain = new PerlinTerrain(
	        width.getValue(),
	        depth.getValue(),
	        widthSegments.getValue(),
	        depthSegments.getValue(),
	        quality.getValue()
	    );

	    var editor = this.app.editor;

	    var index = editor.scene.children.indexOf(this.selected);
	    if (index > -1) {
	        editor.scene.children[index] = terrain;
	        terrain.parent = this.selected.parent;
	        this.selected.parent = null;
	        this.app.call(`objectRemoved`, this, this.selected);
	        this.app.call(`objectAdded`, this, terrain);
	        editor.select(terrain);
	        this.app.call('sceneGraphChanged', this.id);
	    }
	};

	/**
	 * 水组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function WaterComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;

	    this.isPlaying = false;
	}

	WaterComponent.prototype = Object.create(BaseComponent.prototype);
	WaterComponent.prototype.constructor = WaterComponent;

	WaterComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'waterPanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'label',
	            style: {
	                width: '100%',
	                color: '#555',
	                fontWeight: 'bold'
	            },
	            text: '水组件'
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label'
	            }, {
	                xtype: 'button',
	                id: 'btnPreview',
	                scope: this.id,
	                text: '预览',
	                onClick: this.onPreview.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	WaterComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	WaterComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	WaterComponent.prototype.updateUI = function () {
	    var container = UI.get('waterPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected.userData.type === 'Water') {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var btnPreview = UI.get('btnPreview', this.id);

	    if (this.isPlaying) {
	        btnPreview.setText('取消');
	    } else {
	        btnPreview.setText('预览');
	    }
	};

	WaterComponent.prototype.onPreview = function () {
	    if (this.isPlaying) {
	        this.stopPreview();
	    } else {
	        this.startPreview();
	    }
	};

	WaterComponent.prototype.startPreview = function () {
	    var btnPreview = UI.get('btnPreview', this.id);

	    this.isPlaying = true;
	    btnPreview.setText('取消');

	    this.app.on(`animate.${this.id}`, this.onAnimate.bind(this));
	};

	WaterComponent.prototype.stopPreview = function () {
	    var btnPreview = UI.get('btnPreview', this.id);

	    this.isPlaying = false;
	    btnPreview.setText('预览');

	    this.app.on(`animate.${this.id}`, null);
	};

	WaterComponent.prototype.onAnimate = function (clock, deltaTime) {
	    this.selected.update();
	};

	/**
	 * 布组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function ClothComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;

	    this.isPlaying = false;
	}

	ClothComponent.prototype = Object.create(BaseComponent.prototype);
	ClothComponent.prototype.constructor = ClothComponent;

	ClothComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'clothPanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'label',
	            style: {
	                width: '100%',
	                color: '#555',
	                fontWeight: 'bold'
	            },
	            text: L_CLOTH_COMPONENT
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label'
	            }, {
	                xtype: 'button',
	                id: 'btnPreview',
	                scope: this.id,
	                text: L_PREVIEW,
	                onClick: this.onPreview.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	ClothComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	ClothComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	ClothComponent.prototype.updateUI = function () {
	    var container = UI.get('clothPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected.userData.type === 'Cloth') {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var btnPreview = UI.get('btnPreview', this.id);

	    if (this.isPlaying) {
	        btnPreview.setText(L_CANCEL);
	    } else {
	        btnPreview.setText(L_PREVIEW);
	    }
	};

	ClothComponent.prototype.onPreview = function () {
	    if (this.isPlaying) {
	        this.stopPreview();
	    } else {
	        this.startPreview();
	    }
	};

	ClothComponent.prototype.startPreview = function () {
	    var btnPreview = UI.get('btnPreview', this.id);

	    this.isPlaying = true;
	    btnPreview.setText(L_CANCEL);

	    this.app.on(`animate.${this.id}`, this.onAnimate.bind(this));
	};

	ClothComponent.prototype.stopPreview = function () {
	    var btnPreview = UI.get('btnPreview', this.id);

	    this.isPlaying = false;
	    btnPreview.setText(L_PREVIEW);

	    this.app.on(`animate.${this.id}`, null);
	};

	ClothComponent.prototype.onAnimate = function (clock, deltaTime) {
	    this.selected.update();
	};

	/**
	 * 控制组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function ControlComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	ControlComponent.prototype = Object.create(BaseComponent.prototype);
	ControlComponent.prototype.constructor = ControlComponent;

	ControlComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'controlPanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            borderTop: '1px solid #ddd',
	            display: 'none',
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold',
	                    width: '100%'
	                },
	                text: L_SCENE_CONTROLLER
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_TYPE
	            }, {
	                xtype: 'select',
	                id: 'type',
	                scope: this.id,
	                options: {
	                    '': L_NONE,
	                    'FirstPersonControls': L_FIRST_PERSON_CONTROLS,
	                    'FlyControls': L_FLY_CONTROLS,
	                    'OrbitControls': L_ORBIT_CONTROLS,
	                    'PointerLockControls': L_POINTER_LOCK_CONTROLS,
	                    'TrackballControls': L_TRACEBALL_CONTROLS
	                },
	                onChange: this.onChangeType.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	ControlComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	ControlComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	ControlComponent.prototype.updateUI = function () {
	    var container = UI.get('controlPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected === this.app.editor.camera) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var type = UI.get('type', this.id);

	    type.setValue(this.selected.userData.control);
	};

	ControlComponent.prototype.onChangeType = function () {
	    var type = UI.get('type', this.id);

	    this.selected.userData.control = type.getValue();

	    this.app.call('objectChanged', this, this.selected);
	};

	/**
	 * 第一视角控制器组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function FirstPersonControlComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	FirstPersonControlComponent.prototype = Object.create(BaseComponent.prototype);
	FirstPersonControlComponent.prototype.constructor = FirstPersonControlComponent;

	FirstPersonControlComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'controlPanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            borderTop: '1px solid #ddd',
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold',
	                    width: '100%'
	                },
	                text: L_FIRST_PERSON_CONTROLS
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MOVEMENT_SPEED
	            }, {
	                xtype: 'number',
	                id: 'movementSpeed',
	                scope: this.id,
	                value: 10.0,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_LOOK_SPEED
	            }, {
	                xtype: 'number',
	                id: 'lookSpeed',
	                scope: this.id,
	                value: 0.05,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_LOOK_VERTICAL
	            }, {
	                xtype: 'checkbox',
	                id: 'lookVertical',
	                scope: this.id,
	                value: true,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_AUTO_FORWARD
	            }, {
	                xtype: 'checkbox',
	                id: 'autoForward',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ACTIVE_LOCK
	            }, {
	                xtype: 'checkbox',
	                id: 'activeLook',
	                scope: this.id,
	                value: true,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_HEIGHT_SPEED
	            }, {
	                xtype: 'checkbox',
	                id: 'heightSpeed',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_HEIGHT_COEF
	            }, {
	                xtype: 'number',
	                id: 'heightCoef',
	                scope: this.id,
	                value: 1.0,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_HEIGHT_MIN
	            }, {
	                xtype: 'number',
	                id: 'heightMin',
	                scope: this.id,
	                value: 0.0,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_HEIGHT_MAX
	            }, {
	                xtype: 'number',
	                id: 'heightMax',
	                scope: this.id,
	                value: 1.0,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_CONSTRAIN_VERTICAL
	            }, {
	                xtype: 'checkbox',
	                id: 'constrainVertical',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_VERTICAL_MIN
	            }, {
	                xtype: 'number',
	                id: 'verticalMin',
	                scope: this.id,
	                value: 0,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_VERTICAL_MAX
	            }, {
	                xtype: 'number',
	                id: 'verticalMax',
	                scope: this.id,
	                value: 3.14,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	FirstPersonControlComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	FirstPersonControlComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	FirstPersonControlComponent.prototype.updateUI = function () {
	    var container = UI.get('controlPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected === this.app.editor.camera && editor.selected.userData.control === 'FirstPersonControls') {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var movementSpeed = UI.get('movementSpeed', this.id);
	    var lookSpeed = UI.get('lookSpeed', this.id);
	    var lookVertical = UI.get('lookVertical', this.id);
	    var autoForward = UI.get('autoForward', this.id);
	    var activeLook = UI.get('activeLook', this.id);
	    var heightSpeed = UI.get('heightSpeed', this.id);
	    var heightCoef = UI.get('heightCoef', this.id);
	    var heightMin = UI.get('heightMin', this.id);
	    var heightMax = UI.get('heightMax', this.id);
	    var constrainVertical = UI.get('constrainVertical', this.id);
	    var verticalMin = UI.get('verticalMin', this.id);
	    var verticalMax = UI.get('verticalMax', this.id);

	    var options = this.selected.userData.firstPersonOptions || {
	        movementSpeed: 10.0,
	        lookSpeed: 0.05,
	        lookVertical: true,
	        autoForward: false,
	        activeLook: true,
	        heightSpeed: false,
	        heightCoef: 1.0,
	        heightMin: 0.0,
	        heightMax: 1.0,
	        constrainVertical: false,
	        verticalMin: 0,
	        verticalMax: 3.14,
	    };

	    if (this.selected.userData.firstPersonOptions === undefined) {
	        this.selected.userData.firstPersonOptions = {};
	        Object.assign(this.selected.userData.firstPersonOptions, options);
	    }

	    movementSpeed.setValue(options.movementSpeed);
	    lookSpeed.setValue(options.lookSpeed);
	    lookVertical.setValue(options.lookVertical);
	    autoForward.setValue(options.autoForward);
	    activeLook.setValue(options.activeLook);
	    heightSpeed.setValue(options.heightSpeed);
	    heightCoef.setValue(options.heightCoef);
	    heightMin.setValue(options.heightMin);
	    heightMax.setValue(options.heightMax);
	    constrainVertical.setValue(options.constrainVertical);
	    verticalMin.setValue(options.verticalMin);
	    verticalMax.setValue(options.verticalMax);
	};

	FirstPersonControlComponent.prototype.onChange = function () {
	    var movementSpeed = UI.get('movementSpeed', this.id);
	    var lookSpeed = UI.get('lookSpeed', this.id);
	    var lookVertical = UI.get('lookVertical', this.id);
	    var autoForward = UI.get('autoForward', this.id);
	    var activeLook = UI.get('activeLook', this.id);
	    var heightSpeed = UI.get('heightSpeed', this.id);
	    var heightCoef = UI.get('heightCoef', this.id);
	    var heightMin = UI.get('heightMin', this.id);
	    var heightMax = UI.get('heightMax', this.id);
	    var constrainVertical = UI.get('constrainVertical', this.id);
	    var verticalMin = UI.get('verticalMin', this.id);
	    var verticalMax = UI.get('verticalMax', this.id);

	    Object.assign(this.selected.userData.firstPersonOptions, {
	        movementSpeed: movementSpeed.getValue(),
	        lookSpeed: lookSpeed.getValue(),
	        lookVertical: lookVertical.getValue(),
	        autoForward: autoForward.getValue(),
	        activeLook: activeLook.getValue(),
	        heightSpeed: heightSpeed.getValue(),
	        heightCoef: heightCoef.getValue(),
	        heightMin: heightMin.getValue(),
	        heightMax: heightMax.getValue(),
	        constrainVertical: constrainVertical.getValue(),
	        verticalMin: verticalMin.getValue(),
	        verticalMax: verticalMax.getValue(),
	    });
	};

	/**
	 * 飞行控制器组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function FlyControlComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	FlyControlComponent.prototype = Object.create(BaseComponent.prototype);
	FlyControlComponent.prototype.constructor = FlyControlComponent;

	FlyControlComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'controlPanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            borderTop: '1px solid #ddd',
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold',
	                    width: '100%'
	                },
	                text: L_FLY_CONTROLS
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MOVEMENT_SPEED
	            }, {
	                xtype: 'number',
	                id: 'movementSpeed',
	                scope: this.id,
	                value: 10.0,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ROTATE_SPEED
	            }, {
	                xtype: 'number',
	                id: 'rollSpeed',
	                scope: this.id,
	                value: 0.05,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_DRAG_TO_LOOK
	            }, {
	                xtype: 'checkbox',
	                id: 'dragToLook',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_AUTO_FORWARD
	            }, {
	                xtype: 'checkbox',
	                id: 'autoForward',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	FlyControlComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	FlyControlComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	FlyControlComponent.prototype.updateUI = function () {
	    var container = UI.get('controlPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected === this.app.editor.camera && editor.selected.userData.control === 'FlyControls') {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var movementSpeed = UI.get('movementSpeed', this.id);
	    var rollSpeed = UI.get('rollSpeed', this.id);
	    var dragToLook = UI.get('dragToLook', this.id);
	    var autoForward = UI.get('autoForward', this.id);

	    var options = this.selected.userData.flyOptions || {
	        movementSpeed: 20.0,
	        rollSpeed: 0.2,
	        dragToLook: false,
	        autoForward: false,
	    };

	    if (this.selected.userData.flyOptions === undefined) {
	        this.selected.userData.flyOptions = {};
	        Object.assign(this.selected.userData.flyOptions, options);
	    }

	    movementSpeed.setValue(options.movementSpeed);
	    rollSpeed.setValue(options.rollSpeed);
	    dragToLook.setValue(options.dragToLook);
	    autoForward.setValue(options.autoForward);
	};

	FlyControlComponent.prototype.onChange = function () {
	    var movementSpeed = UI.get('movementSpeed', this.id);
	    var rollSpeed = UI.get('rollSpeed', this.id);
	    var dragToLook = UI.get('dragToLook', this.id);
	    var autoForward = UI.get('autoForward', this.id);

	    Object.assign(this.selected.userData.flyOptions, {
	        movementSpeed: movementSpeed.getValue(),
	        rollSpeed: rollSpeed.getValue(),
	        dragToLook: dragToLook.getValue(),
	        autoForward: autoForward.getValue(),
	    });
	};

	/**
	 * 轨道控制器组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function OrbitControlComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	OrbitControlComponent.prototype = Object.create(BaseComponent.prototype);
	OrbitControlComponent.prototype.constructor = OrbitControlComponent;

	OrbitControlComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'controlPanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            borderTop: '1px solid #ddd',
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold',
	                    width: '100%'
	                },
	                text: L_ORBIT_CONTROLS
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MIN_DISTANCE
	            }, {
	                xtype: 'number',
	                id: 'minDistance',
	                scope: this.id,
	                value: 0.0,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MAX_DISTANCE
	            }, {
	                xtype: 'number',
	                id: 'maxDistance',
	                scope: this.id,
	                value: 100000,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MIN_POLAR_ANGLE
	            }, {
	                xtype: 'number',
	                id: 'minPolarAngle',
	                scope: this.id,
	                value: 100000,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MAX_POLAR_ANGLE
	            }, {
	                xtype: 'number',
	                id: 'maxPolarAngle',
	                scope: this.id,
	                value: 3.14,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MIN_AZIMUTH_ANGLE
	            }, {
	                xtype: 'number',
	                id: 'minAzimuthAngle',
	                scope: this.id,
	                value: -100,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MAX_AZIMUTH_ANGLE
	            }, {
	                xtype: 'number',
	                id: 'maxAzimuthAngle',
	                scope: this.id,
	                value: 100,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ENABLE_DAMPING
	            }, {
	                xtype: 'checkbox',
	                id: 'enableDamping',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_DAMPING_FACTOR
	            }, {
	                xtype: 'number',
	                id: 'dampingFactor',
	                scope: this.id,
	                value: 0.25,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ENABLE_ZOOM
	            }, {
	                xtype: 'checkbox',
	                id: 'enableZoom',
	                scope: this.id,
	                value: true,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ZOOM_SPEED
	            }, {
	                xtype: 'number',
	                id: 'zoomSpeed',
	                scope: this.id,
	                value: true,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ENABLE_ROTATE
	            }, {
	                xtype: 'checkbox',
	                id: 'enableRotate',
	                scope: this.id,
	                value: true,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ROTATE_SPEED
	            }, {
	                xtype: 'number',
	                id: 'rotateSpeed',
	                scope: this.id,
	                value: 1.0,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ENABLE_PAN
	            }, {
	                xtype: 'checkbox',
	                id: 'enablePan',
	                scope: this.id,
	                value: true,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_PAN_SPEED
	            }, {
	                xtype: 'number',
	                id: 'panSpeed',
	                scope: this.id,
	                value: 1.0,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_SCREEN_SPACE_PANNING
	            }, {
	                xtype: 'checkbox',
	                id: 'screenSpacePanning',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_KEY_PAN_SPEED
	            }, {
	                xtype: 'number',
	                id: 'keyPanSpeed',
	                scope: this.id,
	                value: 7.0,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_AUTO_ROTATE
	            }, {
	                xtype: 'checkbox',
	                id: 'autoRotate',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_AUTO_ROTATE_SPEED
	            }, {
	                xtype: 'number',
	                id: 'autoRotateSpeed',
	                scope: this.id,
	                value: 2.0,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ENABLE_KEYS
	            }, {
	                xtype: 'checkbox',
	                id: 'enableKeys',
	                scope: this.id,
	                value: true,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	OrbitControlComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	OrbitControlComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	OrbitControlComponent.prototype.updateUI = function () {
	    var container = UI.get('controlPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected === this.app.editor.camera && editor.selected.userData.control === 'OrbitControls') {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var minDistance = UI.get('minDistance', this.id);
	    var maxDistance = UI.get('maxDistance', this.id);
	    var minPolarAngle = UI.get('minPolarAngle', this.id);
	    var maxPolarAngle = UI.get('maxPolarAngle', this.id);
	    var minAzimuthAngle = UI.get('minAzimuthAngle', this.id);
	    var maxAzimuthAngle = UI.get('maxAzimuthAngle', this.id);
	    var enableDamping = UI.get('enableDamping', this.id);
	    var dampingFactor = UI.get('dampingFactor', this.id);
	    var enableZoom = UI.get('enableZoom', this.id);
	    var zoomSpeed = UI.get('zoomSpeed', this.id);
	    var enableRotate = UI.get('enableRotate', this.id);
	    var rotateSpeed = UI.get('rotateSpeed', this.id);
	    var enablePan = UI.get('enablePan', this.id);
	    var panSpeed = UI.get('panSpeed', this.id);
	    var screenSpacePanning = UI.get('screenSpacePanning', this.id);
	    var keyPanSpeed = UI.get('keyPanSpeed', this.id);
	    var autoRotate = UI.get('autoRotate', this.id);
	    var autoRotateSpeed = UI.get('autoRotateSpeed', this.id);
	    var enableKeys = UI.get('enableKeys', this.id);

	    var options = this.selected.userData.orbitOptions || {
	        minDistance: 0,
	        maxDistance: 99999,
	        minPolarAngle: 0,
	        maxPolarAngle: Math.PI,
	        minAzimuthAngle: - 9999,
	        maxAzimuthAngle: 9999,
	        enableDamping: false,
	        dampingFactor: 0.25,
	        enableZoom: true,
	        zoomSpeed: 1.0,
	        enableRotate: true,
	        rotateSpeed: 1.0,
	        enablePan: true,
	        panSpeed: 1.0,
	        screenSpacePanning: false,
	        keyPanSpeed: 7.0,
	        autoRotate: false,
	        autoRotateSpeed: 2.0,
	        enableKeys: true,
	    };

	    if (this.selected.userData.orbitOptions === undefined) {
	        this.selected.userData.orbitOptions = {};
	        Object.assign(this.selected.userData.orbitOptions, options);
	    }

	    minDistance.setValue(options.minDistance);
	    maxDistance.setValue(options.maxDistance);
	    minPolarAngle.setValue(options.minPolarAngle);
	    maxPolarAngle.setValue(options.maxPolarAngle);
	    minAzimuthAngle.setValue(options.minAzimuthAngle);
	    maxAzimuthAngle.setValue(options.maxAzimuthAngle);
	    enableDamping.setValue(options.enableDamping);
	    dampingFactor.setValue(options.dampingFactor);
	    enableZoom.setValue(options.enableZoom);
	    zoomSpeed.setValue(options.zoomSpeed);
	    enableRotate.setValue(options.enableRotate);
	    rotateSpeed.setValue(options.rotateSpeed);
	    enablePan.setValue(options.enablePan);
	    panSpeed.setValue(options.panSpeed);
	    screenSpacePanning.setValue(options.screenSpacePanning);
	    keyPanSpeed.setValue(options.keyPanSpeed);
	    autoRotate.setValue(options.autoRotate);
	    autoRotateSpeed.setValue(options.autoRotateSpeed);
	    enableKeys.setValue(options.enableKeys);
	};

	OrbitControlComponent.prototype.onChange = function () {
	    var minDistance = UI.get('minDistance', this.id);
	    var maxDistance = UI.get('maxDistance', this.id);
	    var minPolarAngle = UI.get('minPolarAngle', this.id);
	    var maxPolarAngle = UI.get('maxPolarAngle', this.id);
	    var minAzimuthAngle = UI.get('minAzimuthAngle', this.id);
	    var maxAzimuthAngle = UI.get('maxAzimuthAngle', this.id);
	    var enableDamping = UI.get('enableDamping', this.id);
	    var dampingFactor = UI.get('dampingFactor', this.id);
	    var enableZoom = UI.get('enableZoom', this.id);
	    var zoomSpeed = UI.get('zoomSpeed', this.id);
	    var enableRotate = UI.get('enableRotate', this.id);
	    var rotateSpeed = UI.get('rotateSpeed', this.id);
	    var enablePan = UI.get('enablePan', this.id);
	    var panSpeed = UI.get('panSpeed', this.id);
	    var screenSpacePanning = UI.get('screenSpacePanning', this.id);
	    var keyPanSpeed = UI.get('keyPanSpeed', this.id);
	    var autoRotate = UI.get('autoRotate', this.id);
	    var autoRotateSpeed = UI.get('autoRotateSpeed', this.id);
	    var enableKeys = UI.get('enableKeys', this.id);

	    Object.assign(this.selected.userData.orbitOptions, {
	        minDistance: minDistance.getValue(),
	        maxDistance: maxDistance.getValue(),
	        minPolarAngle: minPolarAngle.getValue(),
	        maxPolarAngle: maxPolarAngle.getValue(),
	        minAzimuthAngle: minAzimuthAngle.getValue(),
	        maxAzimuthAngle: maxAzimuthAngle.getValue(),
	        enableDamping: enableDamping.getValue(),
	        dampingFactor: dampingFactor.getValue(),
	        enableZoom: enableZoom.getValue(),
	        zoomSpeed: zoomSpeed.getValue(),
	        enableRotate: enableRotate.getValue(),
	        rotateSpeed: rotateSpeed.getValue(),
	        enablePan: enablePan.getValue(),
	        panSpeed: panSpeed.getValue(),
	        screenSpacePanning: screenSpacePanning.getValue(),
	        keyPanSpeed: keyPanSpeed.getValue(),
	        autoRotate: autoRotate.getValue(),
	        autoRotateSpeed: autoRotateSpeed.getValue(),
	        enableKeys: enableKeys.getValue(),
	    });
	};

	/**
	 * 指针锁定控制器组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function PointerLockControlComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	PointerLockControlComponent.prototype = Object.create(BaseComponent.prototype);
	PointerLockControlComponent.prototype.constructor = PointerLockControlComponent;

	PointerLockControlComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'controlPanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            borderTop: '1px solid #ddd',
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold',
	                    width: '100%'
	                },
	                text: L_POINTER_LOCK_CONTROLS
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_IS_LOCKED
	            }, {
	                xtype: 'checkbox',
	                id: 'isLocked',
	                scope: this.id,
	                value: true,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	PointerLockControlComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	PointerLockControlComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	PointerLockControlComponent.prototype.updateUI = function () {
	    var container = UI.get('controlPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected === this.app.editor.camera && editor.selected.userData.control === 'PointerLockControls') {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var isLocked = UI.get('isLocked', this.id);

	    var options = this.selected.userData.pointerLockOptions || {
	        isLocked: true,
	    };

	    if (this.selected.userData.pointerLockOptions === undefined) {
	        this.selected.userData.pointerLockOptions = {};
	        Object.assign(this.selected.userData.pointerLockOptions, options);
	    }

	    isLocked.setValue(options.isLocked);
	};

	PointerLockControlComponent.prototype.onChange = function () {
	    var isLocked = UI.get('isLocked', this.id);

	    Object.assign(this.selected.userData.pointerLockOptions, {
	        isLocked: isLocked.getValue(),
	    });
	};

	/**
	 * 轨迹球控制器组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function TrackballControlComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	TrackballControlComponent.prototype = Object.create(BaseComponent.prototype);
	TrackballControlComponent.prototype.constructor = TrackballControlComponent;

	TrackballControlComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'controlPanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            borderTop: '1px solid #ddd',
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold',
	                    width: '100%'
	                },
	                text: L_TRACEBALL_CONTROLS
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ROTATE_SPEED
	            }, {
	                xtype: 'number',
	                id: 'rotateSpeed',
	                scope: this.id,
	                value: 1.0,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ZOOM_SPEED
	            }, {
	                xtype: 'number',
	                id: 'zoomSpeed',
	                scope: this.id,
	                value: 1.2,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_PAN_SPEED
	            }, {
	                xtype: 'number',
	                id: 'panSpeed',
	                scope: this.id,
	                value: 0.3,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_NO_ROTATE
	            }, {
	                xtype: 'checkbox',
	                id: 'noRotate',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_NO_ZOOM
	            }, {
	                xtype: 'checkbox',
	                id: 'noZoom',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_NO_PAN
	            }, {
	                xtype: 'checkbox',
	                id: 'noPan',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_STATIC_MOVING
	            }, {
	                xtype: 'checkbox',
	                id: 'staticMoving',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_DYNAMIC_DAMPING_FACTOR
	            }, {
	                xtype: 'number',
	                id: 'dynamicDampingFactor',
	                scope: this.id,
	                value: 0.2,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MIN_DISTANCE
	            }, {
	                xtype: 'number',
	                id: 'minDistance',
	                scope: this.id,
	                value: 0,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MAX_DISTANCE
	            }, {
	                xtype: 'number',
	                id: 'maxDistance',
	                scope: this.id,
	                value: 99999,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	TrackballControlComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	TrackballControlComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	TrackballControlComponent.prototype.updateUI = function () {
	    var container = UI.get('controlPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected === this.app.editor.camera && editor.selected.userData.control === 'TrackballControls') {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var rotateSpeed = UI.get('rotateSpeed', this.id);
	    var zoomSpeed = UI.get('zoomSpeed', this.id);
	    var panSpeed = UI.get('panSpeed', this.id);
	    var noRotate = UI.get('noRotate', this.id);
	    var noZoom = UI.get('noZoom', this.id);
	    var noPan = UI.get('noPan', this.id);
	    var staticMoving = UI.get('staticMoving', this.id);
	    var dynamicDampingFactor = UI.get('dynamicDampingFactor', this.id);
	    var minDistance = UI.get('minDistance', this.id);
	    var maxDistance = UI.get('maxDistance', this.id);


	    var options = this.selected.userData.trackballOptions || {
	        rotateSpeed: 1.0,
	        zoomSpeed: 1.2,
	        panSpeed: 0.3,
	        noRotate: false,
	        noZoom: false,
	        noPan: false,
	        staticMoving: false,
	        dynamicDampingFactor: 0.2,
	        minDistance: 0,
	        maxDistance: 99999
	    };

	    if (this.selected.userData.trackballOptions === undefined) {
	        this.selected.userData.trackballOptions = {};
	        Object.assign(this.selected.userData.trackballOptions, options);
	    }

	    rotateSpeed.setValue(options.rotateSpeed);
	    zoomSpeed.setValue(options.zoomSpeed);
	    panSpeed.setValue(options.panSpeed);
	    noRotate.setValue(options.noRotate);
	    noZoom.setValue(options.noZoom);
	    noPan.setValue(options.noPan);
	    staticMoving.setValue(options.staticMoving);
	    dynamicDampingFactor.setValue(options.dynamicDampingFactor);
	    minDistance.setValue(options.minDistance);
	    maxDistance.setValue(options.maxDistance);
	};

	TrackballControlComponent.prototype.onChange = function () {
	    var rotateSpeed = UI.get('rotateSpeed', this.id);
	    var zoomSpeed = UI.get('zoomSpeed', this.id);
	    var panSpeed = UI.get('panSpeed', this.id);
	    var noRotate = UI.get('noRotate', this.id);
	    var noZoom = UI.get('noZoom', this.id);
	    var noPan = UI.get('noPan', this.id);
	    var staticMoving = UI.get('staticMoving', this.id);
	    var dynamicDampingFactor = UI.get('dynamicDampingFactor', this.id);
	    var minDistance = UI.get('minDistance', this.id);
	    var maxDistance = UI.get('maxDistance', this.id);


	    Object.assign(this.selected.userData.trackballOptions, {
	        rotateSpeed: rotateSpeed.getValue(),
	        zoomSpeed: zoomSpeed.getValue(),
	        panSpeed: panSpeed.getValue(),
	        noRotate: noRotate.getValue(),
	        noZoom: noZoom.getValue(),
	        noPan: noPan.getValue(),
	        staticMoving: staticMoving.getValue(),
	        dynamicDampingFactor: dynamicDampingFactor.getValue(),
	        minDistance: minDistance.getValue(),
	        maxDistance: maxDistance.getValue(),
	    });
	};

	/**
	 * 点阵化组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function DotScreenComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	DotScreenComponent.prototype = Object.create(BaseComponent.prototype);
	DotScreenComponent.prototype.constructor = DotScreenComponent;

	DotScreenComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'panel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold',
	                    width: '100%'
	                },
	                text: L_DOT_SCREEN_EFFECT
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ENABLE_STATE
	            }, {
	                xtype: 'checkbox',
	                id: 'enabled',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_SCALE
	            }, {
	                xtype: 'number',
	                id: 'scale',
	                scope: this.id,
	                value: 4,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	DotScreenComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	DotScreenComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	DotScreenComponent.prototype.updateUI = function () {
	    var container = UI.get('panel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected === editor.scene) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var enabled = UI.get('enabled', this.id);
	    var scale = UI.get('scale', this.id);

	    var scene = this.selected;
	    var postProcessing = scene.userData.postProcessing || {};

	    if (postProcessing.dotScreen) {
	        enabled.setValue(postProcessing.dotScreen.enabled);
	        scale.setValue(postProcessing.dotScreen.scale);
	    }
	};

	DotScreenComponent.prototype.onChange = function () {
	    var enabled = UI.get('enabled', this.id);
	    var scale = UI.get('scale', this.id);

	    var scene = this.selected;
	    scene.userData.postProcessing = scene.userData.postProcessing || {};

	    Object.assign(scene.userData.postProcessing, {
	        dotScreen: {
	            enabled: enabled.getValue(),
	            scale: scale.getValue(),
	        },
	    });

	    this.app.call(`postProcessingChanged`, this);
	};

	/**
	 * 颜色偏移组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function RgbShiftComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	RgbShiftComponent.prototype = Object.create(BaseComponent.prototype);
	RgbShiftComponent.prototype.constructor = RgbShiftComponent;

	RgbShiftComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'panel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold',
	                    width: '100%'
	                },
	                text: L_RGB_SHIFT_EFFECT
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ENABLE_STATE
	            }, {
	                xtype: 'checkbox',
	                id: 'enabled',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_AMOUNT
	            }, {
	                xtype: 'number',
	                id: 'amount',
	                scope: this.id,
	                value: 0.1,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	RgbShiftComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	RgbShiftComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	RgbShiftComponent.prototype.updateUI = function () {
	    var container = UI.get('panel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected === editor.scene) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var enabled = UI.get('enabled', this.id);
	    var amount = UI.get('amount', this.id);

	    var scene = this.selected;
	    var postProcessing = scene.userData.postProcessing || {};

	    if (postProcessing.rgbShift) {
	        enabled.setValue(postProcessing.rgbShift.enabled);
	        amount.setValue(postProcessing.rgbShift.amount);
	    }
	};

	RgbShiftComponent.prototype.onChange = function () {
	    var enabled = UI.get('enabled', this.id);
	    var amount = UI.get('amount', this.id);

	    var scene = this.selected;
	    scene.userData.postProcessing = scene.userData.postProcessing || {};

	    Object.assign(scene.userData.postProcessing, {
	        rgbShift: {
	            enabled: enabled.getValue(),
	            amount: amount.getValue()
	        },
	    });

	    this.app.call(`postProcessingChanged`, this);
	};

	/**
	 * 残影特效组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function AfterimageComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	AfterimageComponent.prototype = Object.create(BaseComponent.prototype);
	AfterimageComponent.prototype.constructor = AfterimageComponent;

	AfterimageComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'panel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold',
	                    width: '100%'
	                },
	                text: L_AFTERIMAGE_EFFECT
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ENABLE_STATE
	            }, {
	                xtype: 'checkbox',
	                id: 'enabled',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_DAMP
	            }, {
	                xtype: 'number',
	                id: 'damp',
	                scope: this.id,
	                value: 0.92,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	AfterimageComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	AfterimageComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	AfterimageComponent.prototype.updateUI = function () {
	    var container = UI.get('panel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected === editor.scene) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var enabled = UI.get('enabled', this.id);
	    var damp = UI.get('damp', this.id);

	    var scene = this.selected;
	    var postProcessing = scene.userData.postProcessing || {};

	    if (postProcessing.afterimage) {
	        enabled.setValue(postProcessing.afterimage.enabled);
	        damp.setValue(postProcessing.afterimage.damp);
	    }
	};

	AfterimageComponent.prototype.onChange = function () {
	    var enabled = UI.get('enabled', this.id);
	    var damp = UI.get('damp', this.id);

	    var scene = this.selected;
	    scene.userData.postProcessing = scene.userData.postProcessing || {};

	    Object.assign(scene.userData.postProcessing, {
	        afterimage: {
	            enabled: enabled.getValue(),
	            damp: damp.getValue()
	        },
	    });

	    this.app.call(`postProcessingChanged`, this);
	};

	/**
	 * 背景虚化特效组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function BokehComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	BokehComponent.prototype = Object.create(BaseComponent.prototype);
	BokehComponent.prototype.constructor = BokehComponent;

	BokehComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'panel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold',
	                    width: '100%'
	                },
	                text: L_BOKEH_EFFECT
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ENABLE_STATE
	            }, {
	                xtype: 'checkbox',
	                id: 'enabled',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_FOCUS
	            }, {
	                xtype: 'number',
	                id: 'focus',
	                scope: this.id,
	                value: 50, // 距离相机距离，哪里最清晰
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_APERTURE
	            }, {
	                xtype: 'number',
	                id: 'aperture',
	                scope: this.id,
	                value: 2.8, // *1e-4，光圈越小越清楚
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MAX_BLUR
	            }, {
	                xtype: 'number',
	                id: 'maxBlur',
	                scope: this.id,
	                value: 1, // 最大模糊程度，越大越模糊
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	BokehComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	BokehComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	BokehComponent.prototype.updateUI = function () {
	    var container = UI.get('panel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected === editor.scene) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var enabled = UI.get('enabled', this.id);
	    var focus = UI.get('focus', this.id);
	    var aperture = UI.get('aperture', this.id);
	    var maxBlur = UI.get('maxBlur', this.id);

	    var scene = this.selected;
	    var postProcessing = scene.userData.postProcessing || {};

	    if (postProcessing.bokeh) {
	        enabled.setValue(postProcessing.bokeh.enabled);
	        focus.setValue(postProcessing.bokeh.focus);
	        aperture.setValue(postProcessing.bokeh.aperture);
	        maxBlur.setValue(postProcessing.bokeh.maxBlur);
	    }
	};

	BokehComponent.prototype.onChange = function () {
	    var enabled = UI.get('enabled', this.id);
	    var focus = UI.get('focus', this.id);
	    var aperture = UI.get('aperture', this.id);
	    var maxBlur = UI.get('maxBlur', this.id);

	    var scene = this.selected;
	    scene.userData.postProcessing = scene.userData.postProcessing || {};

	    Object.assign(scene.userData.postProcessing, {
	        bokeh: {
	            enabled: enabled.getValue(),
	            focus: focus.getValue(),
	            aperture: aperture.getValue(),
	            maxBlur: maxBlur.getValue(),
	        },
	    });

	    this.app.call(`postProcessingChanged`, this);
	};

	/**
	 * 快速近似抗锯齿(FXAA)组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function FxaaComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	FxaaComponent.prototype = Object.create(BaseComponent.prototype);
	FxaaComponent.prototype.constructor = FxaaComponent;

	FxaaComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'panel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold',
	                    width: '100%'
	                },
	                text: L_FXAA
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ENABLE_STATE
	            }, {
	                xtype: 'checkbox',
	                id: 'enabled',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	FxaaComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	FxaaComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	FxaaComponent.prototype.updateUI = function () {
	    var container = UI.get('panel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected === editor.scene) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var enabled = UI.get('enabled', this.id);

	    var scene = this.selected;
	    var postProcessing = scene.userData.postProcessing || {};

	    if (postProcessing.fxaa) {
	        enabled.setValue(postProcessing.fxaa.enabled);
	    }
	};

	FxaaComponent.prototype.onChange = function () {
	    var enabled = UI.get('enabled', this.id);

	    var scene = this.selected;
	    scene.userData.postProcessing = scene.userData.postProcessing || {};

	    Object.assign(scene.userData.postProcessing, {
	        fxaa: {
	            enabled: enabled.getValue(),
	        },
	    });

	    this.app.call(`postProcessingChanged`, this);
	};

	/**
	 * 毛刺组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function GlitchComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	GlitchComponent.prototype = Object.create(BaseComponent.prototype);
	GlitchComponent.prototype.constructor = GlitchComponent;

	GlitchComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'panel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold',
	                    width: '100%'
	                },
	                text: L_GLITCH_EFFECT
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ENABLE_STATE
	            }, {
	                xtype: 'checkbox',
	                id: 'enabled',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_WILD_MODE
	            }, {
	                xtype: 'checkbox',
	                id: 'wild',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	GlitchComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	GlitchComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	GlitchComponent.prototype.updateUI = function () {
	    var container = UI.get('panel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected === editor.scene) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var enabled = UI.get('enabled', this.id);
	    var wild = UI.get('wild', this.id);

	    var scene = this.selected;
	    var postProcessing = scene.userData.postProcessing || {};

	    if (postProcessing.glitch) {
	        enabled.setValue(postProcessing.glitch.enabled);
	        wild.setValue(postProcessing.glitch.wild);
	    }
	};

	GlitchComponent.prototype.onChange = function () {
	    var enabled = UI.get('enabled', this.id);
	    var wild = UI.get('wild', this.id);

	    var scene = this.selected;
	    scene.userData.postProcessing = scene.userData.postProcessing || {};

	    Object.assign(scene.userData.postProcessing, {
	        glitch: {
	            enabled: enabled.getValue(),
	            wild: wild.getValue()
	        },
	    });

	    this.app.call(`postProcessingChanged`, this);
	};

	/**
	 * 半色调特效组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function HalftoneComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	HalftoneComponent.prototype = Object.create(BaseComponent.prototype);
	HalftoneComponent.prototype.constructor = HalftoneComponent;

	HalftoneComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'panel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold',
	                    width: '100%'
	                },
	                text: L_HALFTONE_EFFECT
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ENABLE_STATE
	            }, {
	                xtype: 'checkbox',
	                id: 'enabled',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_SHAPE
	            }, {
	                xtype: 'select',
	                id: 'shape',
	                scope: this.id,
	                options: {
	                    1: L_POINT,
	                    2: L_ELLIPSE,
	                    3: L_LINE,
	                    4: L_SQUARE
	                },
	                value: 1,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_RADIUS
	            }, {
	                xtype: 'number',
	                id: 'radius',
	                scope: this.id,
	                range: [1, 25],
	                value: 4,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ROTATE_RED
	            }, {
	                xtype: 'number',
	                id: 'rotateR',
	                scope: this.id,
	                value: 15,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ROTATE_GREEN
	            }, {
	                xtype: 'number',
	                id: 'rotateG',
	                scope: this.id,
	                value: 45,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ROTATE_BLUE
	            }, {
	                xtype: 'number',
	                id: 'rotateB',
	                scope: this.id,
	                value: 30,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_SCATTER
	            }, {
	                xtype: 'number',
	                id: 'scatter',
	                scope: this.id,
	                value: 0,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_BLENDING
	            }, {
	                xtype: 'number',
	                id: 'blending',
	                scope: this.id,
	                range: [0, 1],
	                value: 1,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_BLENDING_MODE
	            }, {
	                xtype: 'select',
	                id: 'blendingMode',
	                scope: this.id,
	                options: {
	                    1: L_LINEAR,
	                    2: L_MULTIPLY,
	                    3: L_ADD,
	                    4: L_LIGHTER,
	                    5: L_DARKER
	                },
	                value: 1,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_GREY_SCALE
	            }, {
	                xtype: 'checkbox',
	                id: 'greyscale',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	HalftoneComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	HalftoneComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	HalftoneComponent.prototype.updateUI = function () {
	    var container = UI.get('panel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected === editor.scene) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var enabled = UI.get('enabled', this.id);
	    var shape = UI.get('shape', this.id);
	    var radius = UI.get('radius', this.id);
	    var rotateR = UI.get('rotateR', this.id);
	    var rotateB = UI.get('rotateB', this.id);
	    var rotateG = UI.get('rotateG', this.id);
	    var scatter = UI.get('scatter', this.id);
	    var blending = UI.get('blending', this.id);
	    var blendingMode = UI.get('blendingMode', this.id);
	    var greyscale = UI.get('greyscale', this.id);

	    var scene = this.selected;
	    var postProcessing = scene.userData.postProcessing || {};

	    if (postProcessing.halftone) {
	        enabled.setValue(postProcessing.halftone.enabled);
	        shape.setValue(postProcessing.halftone.shape);
	        radius.setValue(postProcessing.halftone.radius);
	        rotateR.setValue(postProcessing.halftone.rotateR);
	        rotateB.setValue(postProcessing.halftone.rotateB);
	        rotateG.setValue(postProcessing.halftone.rotateG);
	        scatter.setValue(postProcessing.halftone.scatter);
	        blending.setValue(postProcessing.halftone.blending);
	        blendingMode.setValue(postProcessing.halftone.blendingMode);
	        greyscale.setValue(postProcessing.halftone.greyscale);
	    }
	};

	HalftoneComponent.prototype.onChange = function () {
	    var enabled = UI.get('enabled', this.id);
	    var shape = UI.get('shape', this.id);
	    var radius = UI.get('radius', this.id);
	    var rotateR = UI.get('rotateR', this.id);
	    var rotateB = UI.get('rotateB', this.id);
	    var rotateG = UI.get('rotateG', this.id);
	    var scatter = UI.get('scatter', this.id);
	    var blending = UI.get('blending', this.id);
	    var blendingMode = UI.get('blendingMode', this.id);
	    var greyscale = UI.get('greyscale', this.id);

	    var scene = this.selected;
	    scene.userData.postProcessing = scene.userData.postProcessing || {};

	    Object.assign(scene.userData.postProcessing, {
	        halftone: {
	            enabled: enabled.getValue(),
	            shape: shape.getValue(),
	            radius: radius.getValue(),
	            rotateR: rotateR.getValue(),
	            rotateB: rotateB.getValue(),
	            rotateG: rotateG.getValue(),
	            scatter: scatter.getValue(),
	            blending: blending.getValue(),
	            blendingMode: blendingMode.getValue(),
	            greyscale: greyscale.getValue()
	        },
	    });

	    this.app.call(`postProcessingChanged`, this);
	};

	/**
	 * 全屏抗锯齿(SSAA)组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function SsaaComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	SsaaComponent.prototype = Object.create(BaseComponent.prototype);
	SsaaComponent.prototype.constructor = SsaaComponent;

	SsaaComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'panel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold',
	                    width: '100%'
	                },
	                text: L_SSAA
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ENABLE_STATE
	            }, {
	                xtype: 'checkbox',
	                id: 'enabled',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: '等级'
	            }, {
	                xtype: 'select',
	                id: 'sampleLevel',
	                scope: this.id,
	                options: {
	                    0: L_ONE_SAMPLE,
	                    1: L_TWO_SAMPLES,
	                    2: L_FOUR_SAMPLES,
	                    3: L_EIGHT_SAMPLES,
	                    4: L_SIXTEEN_SAMPLES,
	                    5: L_THIRTYTWO_SAMPLES
	                },
	                value: '3',
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_UNBIASED
	            }, {
	                xtype: 'checkbox',
	                id: 'unbiased',
	                scope: this.id,
	                value: true,
	                onChange: this.onChange.bind(this)
	            }]
	        },]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	SsaaComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	SsaaComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	SsaaComponent.prototype.updateUI = function () {
	    var container = UI.get('panel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected === editor.scene) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var enabled = UI.get('enabled', this.id);
	    var sampleLevel = UI.get('sampleLevel', this.id);
	    var unbiased = UI.get('unbiased', this.id);

	    var scene = this.selected;
	    var postProcessing = scene.userData.postProcessing || {};

	    if (postProcessing.ssaa) {
	        enabled.setValue(postProcessing.ssaa.enabled);
	        sampleLevel.setValue(postProcessing.ssaa.sampleLevel);
	        unbiased.setValue(postProcessing.ssaa.unbiased);
	    }
	};

	SsaaComponent.prototype.onChange = function () {
	    var enabled = UI.get('enabled', this.id);
	    var sampleLevel = UI.get('sampleLevel', this.id);
	    var unbiased = UI.get('unbiased', this.id);

	    var scene = this.selected;
	    scene.userData.postProcessing = scene.userData.postProcessing || {};

	    Object.assign(scene.userData.postProcessing, {
	        ssaa: {
	            enabled: enabled.getValue(),
	            sampleLevel: parseInt(sampleLevel.getValue()),
	            unbiased: unbiased.getValue(),
	        },
	    });

	    this.app.call(`postProcessingChanged`, this);
	};

	/**
	 * 像素特效组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function PixelComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	PixelComponent.prototype = Object.create(BaseComponent.prototype);
	PixelComponent.prototype.constructor = PixelComponent;

	PixelComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'panel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold',
	                    width: '100%'
	                },
	                text: L_PIXEL_EFFECT
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ENABLE_STATE
	            }, {
	                xtype: 'checkbox',
	                id: 'enabled',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_PIXEL_SIZE
	            }, {
	                xtype: 'int',
	                id: 'pixelSize',
	                scope: this.id,
	                value: 8,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	PixelComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	PixelComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	PixelComponent.prototype.updateUI = function () {
	    var container = UI.get('panel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected === editor.scene) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var enabled = UI.get('enabled', this.id);
	    var pixelSize = UI.get('pixelSize', this.id);

	    var scene = this.selected;
	    var postProcessing = scene.userData.postProcessing || {};

	    if (postProcessing.pixel) {
	        enabled.setValue(postProcessing.pixel.enabled);
	        pixelSize.setValue(postProcessing.pixel.pixelSize);
	    }
	};

	PixelComponent.prototype.onChange = function () {
	    var enabled = UI.get('enabled', this.id);
	    var pixelSize = UI.get('pixelSize', this.id);

	    var scene = this.selected;
	    scene.userData.postProcessing = scene.userData.postProcessing || {};

	    Object.assign(scene.userData.postProcessing, {
	        pixel: {
	            enabled: enabled.getValue(),
	            pixelSize: pixelSize.getValue()
	        },
	    });

	    this.app.call(`postProcessingChanged`, this);
	};

	/**
	 * 可扩展环境光遮挡(SAO)组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function SaoComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	SaoComponent.prototype = Object.create(BaseComponent.prototype);
	SaoComponent.prototype.constructor = SaoComponent;

	SaoComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'panel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold',
	                    width: '100%'
	                },
	                text: L_SAO
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ENABLE_STATE
	            }, {
	                xtype: 'checkbox',
	                id: 'enabled',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_OUTPUT
	            }, {
	                xtype: 'select',
	                id: 'output',
	                scope: this.id,
	                options: {
	                    1: L_BEAUTY, // THREE.SAOPass.OUTPUT.Beauty
	                    0: L_BEAUTY_AND_OCCLUSION, // THREE.SAOPass.OUTPUT.Default
	                    2: L_OCCLUSION, // THREE.SAOPass.OUTPUT.SAO
	                    3: L_DEPTH, // THREE.SAOPass.OUTPUT.Depth
	                    4: L_NORMAL // THREE.SAOPass.OUTPUT.Normal
	                },
	                value: 0, // THREE.SAOPass.OUTPUT.Default
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_BIAS
	            }, {
	                xtype: 'number',
	                id: 'saoBias',
	                scope: this.id,
	                range: [-1, 1],
	                value: 0.5,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_INTENSITY
	            }, {
	                xtype: 'number',
	                id: 'saoIntensity',
	                scope: this.id,
	                range: [0, 1],
	                value: 0.02,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_SCALE
	            }, {
	                xtype: 'number',
	                id: 'saoScale',
	                scope: this.id,
	                range: [0, 500],
	                value: 100,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_KERNAL_RADIUS
	            }, {
	                xtype: 'number',
	                id: 'saoKernelRadius',
	                scope: this.id,
	                range: [1, 100],
	                value: 50,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MIN_RESOLUTION
	            }, {
	                xtype: 'number',
	                id: 'saoMinResolution',
	                scope: this.id,
	                range: [0, 1],
	                value: 0,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_BLUR
	            }, {
	                xtype: 'checkbox',
	                id: 'saoBlur',
	                scope: this.id,
	                value: true,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_BLUR_RADIUS
	            }, {
	                xtype: 'number',
	                id: 'saoBlurRadius',
	                scope: this.id,
	                range: [0, 200],
	                value: 16,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_BLUR_STD_DEV
	            }, {
	                xtype: 'number',
	                id: 'saoBlurStdDev',
	                scope: this.id,
	                range: [0.5, 150],
	                value: 32.6,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_BLUR_DEPTH_CUTOFF
	            }, {
	                xtype: 'number',
	                id: 'saoBlurDepthCutoff',
	                scope: this.id,
	                range: [0.0, 0.1],
	                value: 0.046,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	SaoComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	SaoComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	SaoComponent.prototype.updateUI = function () {
	    var container = UI.get('panel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected === editor.scene) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var enabled = UI.get('enabled', this.id);
	    var output = UI.get('output', this.id);
	    var saoBias = UI.get('saoBias', this.id);
	    var saoIntensity = UI.get('saoIntensity', this.id);
	    var saoScale = UI.get('saoScale', this.id);
	    var saoKernelRadius = UI.get('saoKernelRadius', this.id);
	    var saoMinResolution = UI.get('saoMinResolution', this.id);
	    var saoBlur = UI.get('saoBlur', this.id);
	    var saoBlurRadius = UI.get('saoBlurRadius', this.id);
	    var saoBlurStdDev = UI.get('saoBlurStdDev', this.id);
	    var saoBlurDepthCutoff = UI.get('saoBlurDepthCutoff', this.id);

	    var scene = this.selected;
	    var postProcessing = scene.userData.postProcessing || {};

	    if (postProcessing.sao) {
	        enabled.setValue(postProcessing.sao.enabled);
	        output.setValue(postProcessing.sao.output.toString());
	        saoBias.setValue(postProcessing.sao.saoBias);
	        saoIntensity.setValue(postProcessing.sao.saoIntensity);
	        saoScale.setValue(postProcessing.sao.saoScale);
	        saoKernelRadius.setValue(postProcessing.sao.saoKernelRadius);
	        saoMinResolution.setValue(postProcessing.sao.saoMinResolution);
	        saoBlur.setValue(postProcessing.sao.saoBlur);
	        saoBlurRadius.setValue(postProcessing.sao.saoBlurRadius);
	        saoBlurStdDev.setValue(postProcessing.sao.saoBlurStdDev);
	        saoBlurDepthCutoff.setValue(postProcessing.sao.saoBlurDepthCutoff);
	    }
	};

	SaoComponent.prototype.onChange = function () {
	    var enabled = UI.get('enabled', this.id);
	    var output = UI.get('output', this.id);
	    var saoBias = UI.get('saoBias', this.id);
	    var saoIntensity = UI.get('saoIntensity', this.id);
	    var saoScale = UI.get('saoScale', this.id);
	    var saoKernelRadius = UI.get('saoKernelRadius', this.id);
	    var saoMinResolution = UI.get('saoMinResolution', this.id);
	    var saoBlur = UI.get('saoBlur', this.id);
	    var saoBlurRadius = UI.get('saoBlurRadius', this.id);
	    var saoBlurStdDev = UI.get('saoBlurStdDev', this.id);
	    var saoBlurDepthCutoff = UI.get('saoBlurDepthCutoff', this.id);

	    var scene = this.selected;
	    scene.userData.postProcessing = scene.userData.postProcessing || {};

	    Object.assign(scene.userData.postProcessing, {
	        sao: {
	            enabled: enabled.getValue(),
	            output: parseInt(output.getValue()),
	            saoBias: saoBias.getValue(),
	            saoIntensity: saoIntensity.getValue(),
	            saoScale: saoScale.getValue(),
	            saoKernelRadius: saoKernelRadius.getValue(),
	            saoMinResolution: saoMinResolution.getValue(),
	            saoBlur: saoBlur.getValue(),
	            saoBlurRadius: saoBlurRadius.getValue(),
	            saoBlurStdDev: saoBlurStdDev.getValue(),
	            saoBlurDepthCutoff: saoBlurDepthCutoff.getValue(),
	        },
	    });

	    this.app.call(`postProcessingChanged`, this);
	};

	/**
	 * 多重采样抗锯齿(SMAA)组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function SmaaComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	SmaaComponent.prototype = Object.create(BaseComponent.prototype);
	SmaaComponent.prototype.constructor = SmaaComponent;

	SmaaComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'panel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold',
	                    width: '100%'
	                },
	                text: L_SMAA
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ENABLE_STATE
	            }, {
	                xtype: 'checkbox',
	                id: 'enabled',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	SmaaComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	SmaaComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	SmaaComponent.prototype.updateUI = function () {
	    var container = UI.get('panel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected === editor.scene) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var enabled = UI.get('enabled', this.id);

	    var scene = this.selected;
	    var postProcessing = scene.userData.postProcessing || {};

	    if (postProcessing.smaa) {
	        enabled.setValue(postProcessing.smaa.enabled);
	    }
	};

	SmaaComponent.prototype.onChange = function () {
	    var enabled = UI.get('enabled', this.id);

	    var scene = this.selected;
	    scene.userData.postProcessing = scene.userData.postProcessing || {};

	    Object.assign(scene.userData.postProcessing, {
	        smaa: {
	            enabled: enabled.getValue(),
	        },
	    });

	    this.app.call(`postProcessingChanged`, this);
	};

	/**
	 * 屏幕空间环境光遮蔽(SSAO)组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function SsaoComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	SsaoComponent.prototype = Object.create(BaseComponent.prototype);
	SsaoComponent.prototype.constructor = SsaoComponent;

	SsaoComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'panel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold',
	                    width: '100%'
	                },
	                text: L_SSAO
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ENABLE_STATE
	            }, {
	                xtype: 'checkbox',
	                id: 'enabled',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_OUTPUT
	            }, {
	                xtype: 'select',
	                id: 'output',
	                scope: this.id,
	                options: {
	                    0: L_DEFAULT, // THREE.SSAOPass.OUTPUT.Default
	                    1: L_OCCLUSION, // THREE.SSAOPass.OUTPUT.SSAO
	                    2: L_OCCLUSION_AND_BLUR, // THREE.SSAOPass.OUTPUT.Blur
	                    3: L_BEAUTY, // THREE.SSAOPass.OUTPUT.Beauty
	                    4: L_DEPTH, // THREE.SSAOPass.OUTPUT.Depth
	                    5: L_NORMAL // THREE.SSAOPass.OUTPUT.Normal
	                },
	                value: 0, // THREE.SSAOPass.OUTPUT.Default
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_KERNAL_RADIUS
	            }, {
	                xtype: 'number',
	                id: 'kernelRadius',
	                scope: this.id,
	                range: [0, 32],
	                value: 10,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MIN_DISTANCE
	            }, {
	                xtype: 'number',
	                id: 'minDistance',
	                scope: this.id,
	                range: [0.001, 0.02],
	                value: 0.001,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MAX_DISTANCE
	            }, {
	                xtype: 'number',
	                id: 'maxDistance',
	                scope: this.id,
	                range: [0.01, 0.3],
	                value: 0.1,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	SsaoComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	SsaoComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	SsaoComponent.prototype.updateUI = function () {
	    var container = UI.get('panel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected === editor.scene) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var enabled = UI.get('enabled', this.id);
	    var output = UI.get('output', this.id);
	    var kernelRadius = UI.get('kernelRadius', this.id);
	    var minDistance = UI.get('minDistance', this.id);
	    var maxDistance = UI.get('maxDistance', this.id);

	    var scene = this.selected;
	    var postProcessing = scene.userData.postProcessing || {};

	    if (postProcessing.ssao) {
	        enabled.setValue(postProcessing.ssao.enabled);
	        output.setValue(postProcessing.ssao.output.toString());
	        kernelRadius.setValue(postProcessing.ssao.kernelRadius);
	        minDistance.setValue(postProcessing.ssao.minDistance);
	        maxDistance.setValue(postProcessing.ssao.maxDistance);
	    }
	};

	SsaoComponent.prototype.onChange = function () {
	    var enabled = UI.get('enabled', this.id);
	    var output = UI.get('output', this.id);
	    var kernelRadius = UI.get('kernelRadius', this.id);
	    var minDistance = UI.get('minDistance', this.id);
	    var maxDistance = UI.get('maxDistance', this.id);

	    var scene = this.selected;
	    scene.userData.postProcessing = scene.userData.postProcessing || {};

	    Object.assign(scene.userData.postProcessing, {
	        ssao: {
	            enabled: enabled.getValue(),
	            output: parseInt(output.getValue()),
	            kernelRadius: kernelRadius.getValue(),
	            minDistance: minDistance.getValue(),
	            maxDistance: maxDistance.getValue()
	        },
	    });

	    this.app.call(`postProcessingChanged`, this);
	};

	/**
	 * 时间抗锯齿(TAA)组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function TaaComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	TaaComponent.prototype = Object.create(BaseComponent.prototype);
	TaaComponent.prototype.constructor = TaaComponent;

	TaaComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'panel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold',
	                    width: '100%'
	                },
	                text: L_TAA
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ENABLE_STATE
	            }, {
	                xtype: 'checkbox',
	                id: 'enabled',
	                scope: this.id,
	                value: false,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_LEVEL
	            }, {
	                xtype: 'select',
	                id: 'sampleLevel',
	                scope: this.id,
	                options: {
	                    0: L_ONE_SAMPLE,
	                    1: L_TWO_SAMPLES,
	                    2: L_FOUR_SAMPLES,
	                    3: L_EIGHT_SAMPLES,
	                    4: L_SIXTEEN_SAMPLES,
	                    5: L_THIRTYTWO_SAMPLES
	                },
	                value: '3',
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_UNBIASED
	            }, {
	                xtype: 'checkbox',
	                id: 'unbiased',
	                scope: this.id,
	                value: true,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	TaaComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	TaaComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	TaaComponent.prototype.updateUI = function () {
	    var container = UI.get('panel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected === editor.scene) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var enabled = UI.get('enabled', this.id);
	    var sampleLevel = UI.get('sampleLevel', this.id);
	    var unbiased = UI.get('unbiased', this.id);

	    var scene = this.selected;
	    var postProcessing = scene.userData.postProcessing || {};

	    if (postProcessing.taa) {
	        enabled.setValue(postProcessing.taa.enabled);
	        sampleLevel.setValue(postProcessing.taa.sampleLevel);
	        unbiased.setValue(postProcessing.taa.unbiased);
	    }
	};

	TaaComponent.prototype.onChange = function () {
	    var enabled = UI.get('enabled', this.id);
	    var sampleLevel = UI.get('sampleLevel', this.id);
	    var unbiased = UI.get('unbiased', this.id);

	    var scene = this.selected;
	    scene.userData.postProcessing = scene.userData.postProcessing || {};

	    Object.assign(scene.userData.postProcessing, {
	        taa: {
	            enabled: enabled.getValue(),
	            sampleLevel: parseInt(sampleLevel.getValue()),
	            unbiased: unbiased.getValue(),
	        },
	    });

	    this.app.call(`postProcessingChanged`, this);
	};

	/**
	 * 柔软体组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function SoftVolumeComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	SoftVolumeComponent.prototype = Object.create(BaseComponent.prototype);
	SoftVolumeComponent.prototype.constructor = SoftVolumeComponent;

	SoftVolumeComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'panel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    width: '100%',
	                    color: '#555',
	                    fontWeight: 'bold'
	                },
	                text: L_SOFT_VOLUME
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_MASS
	            }, {
	                xtype: 'number',
	                id: 'mass',
	                scope: this.id,
	                style: {
	                    width: '100px',
	                    fontSize: '12px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_PRESSURE
	            }, {
	                xtype: 'number',
	                id: 'pressure',
	                scope: this.id,
	                style: {
	                    width: '100px',
	                    fontSize: '12px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	SoftVolumeComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	SoftVolumeComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	SoftVolumeComponent.prototype.updateUI = function () {
	    var container = UI.get('panel', this.id);
	    var editor = this.app.editor;

	    if (editor.selected &&
	        editor.selected.userData.physics &&
	        editor.selected.userData.physics.enabled &&
	        editor.selected.userData.physics.type === 'softVolume'
	    ) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var mass = UI.get('mass', this.id);
	    var pressure = UI.get('pressure', this.id);

	    var physics = this.selected.userData.physics;

	    physics.mass = physics.mass || 0;
	    physics.pressure = physics.pressure === undefined ? 30 : physics.pressure;

	    mass.setValue(physics.mass);
	    pressure.setValue(physics.pressure);
	};

	SoftVolumeComponent.prototype.onChange = function () {
	    var mass = UI.get('mass', this.id);
	    var pressure = UI.get('pressure', this.id);

	    var physics = this.selected.userData.physics;

	    physics.mass = mass.getValue();
	    physics.pressure = pressure.getValue();

	    this.app.call(`objectChanged`, this, this.selected);
	};

	/**
	 * 物理环境组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function PhysicsTypeComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	PhysicsTypeComponent.prototype = Object.create(BaseComponent.prototype);
	PhysicsTypeComponent.prototype.constructor = PhysicsTypeComponent;

	PhysicsTypeComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'objectPanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold'
	                },
	                text: L_PHYSICS_TYPE
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_ENABLED
	            }, {
	                xtype: 'checkbox',
	                id: 'enabled',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_TYPE
	            }, {
	                xtype: 'select',
	                id: 'type',
	                scope: this.id,
	                options: {
	                    rigidBody: L_RIGID_BODY,
	                    softVolume: L_SOFT_VOLUME
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	PhysicsTypeComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	PhysicsTypeComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	PhysicsTypeComponent.prototype.updateUI = function () {
	    var container = UI.get('objectPanel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected.userData && editor.selected.userData.physics) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var enabled = UI.get('enabled', this.id);
	    var type = UI.get('type', this.id);

	    var physics = this.selected.userData.physics;

	    physics.enabled = physics.enabled || false;
	    physics.type = physics.type || 'rigidBody';

	    enabled.setValue(physics.enabled);
	    type.setValue(physics.type);
	};

	PhysicsTypeComponent.prototype.onChange = function () {
	    var enabled = UI.get('enabled', this.id);
	    var type = UI.get('type', this.id);

	    var physics = this.selected.userData.physics;

	    physics.enabled = enabled.getValue();
	    physics.type = type.getValue();

	    this.app.call(`objectChanged`, this, this.selected);
	};

	/**
	 * 线段组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function LineCurveComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	LineCurveComponent.prototype = Object.create(BaseComponent.prototype);
	LineCurveComponent.prototype.constructor = LineCurveComponent;

	LineCurveComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        id: 'panel',
	        scope: this.id,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'label',
	            style: {
	                width: '100%',
	                color: '#555',
	                fontWeight: 'bold'
	            },
	            text: L_LINE_CURVE
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: '起点'
	            }, {
	                xtype: 'number',
	                id: 'v1x',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'v1y',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'v1z',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: '终点'
	            }, {
	                xtype: 'number',
	                id: 'v2x',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'v2y',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'v2z',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	LineCurveComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	LineCurveComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	LineCurveComponent.prototype.updateUI = function () {
	    var container = UI.get('panel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected.userData.type === 'LineCurve') {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var v1x = UI.get('v1x', this.id);
	    var v1y = UI.get('v1y', this.id);
	    var v1z = UI.get('v1z', this.id);
	    var v2x = UI.get('v2x', this.id);
	    var v2y = UI.get('v2y', this.id);
	    var v2z = UI.get('v2z', this.id);

	    var points = this.selected.userData.points;

	    v1x.setValue(points[0].x);
	    v1y.setValue(points[0].y);
	    v1z.setValue(points[0].z);
	    v2x.setValue(points[1].x);
	    v2y.setValue(points[1].y);
	    v2z.setValue(points[1].z);
	};

	LineCurveComponent.prototype.onChange = function () {
	    var v1x = UI.get('v1x', this.id);
	    var v1y = UI.get('v1y', this.id);
	    var v1z = UI.get('v1z', this.id);
	    var v2x = UI.get('v2x', this.id);
	    var v2y = UI.get('v2y', this.id);
	    var v2z = UI.get('v2z', this.id);

	    this.selected.userData.points = [
	        new THREE.Vector3(v1x.getValue(), v1y.getValue(), v1z.getValue()),
	        new THREE.Vector3(v2x.getValue(), v2y.getValue(), v2z.getValue())
	    ];

	    this.selected.update();

	    this.app.call('objectChanged', this, this.selected);
	};

	/**
	 * CatmullRom曲线组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function CatmullRomCurveComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	CatmullRomCurveComponent.prototype = Object.create(BaseComponent.prototype);
	CatmullRomCurveComponent.prototype.constructor = CatmullRomCurveComponent;

	CatmullRomCurveComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        id: 'panel',
	        scope: this.id,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'label',
	            style: {
	                width: '100%',
	                color: '#555',
	                fontWeight: 'bold'
	            },
	            text: L_CATMULL_ROM_CURVE
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: ''
	            }, {
	                xtype: 'button',
	                text: '添加点',
	                onClick: this.onAddPoint.bind(this)
	            }, {
	                xtype: 'button',
	                text: '移除点',
	                onClick: this.onRemovePoint.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: '闭合'
	            }, {
	                xtype: 'checkbox',
	                id: 'closed',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'row',
	                children: [{
	                    xtype: 'label',
	                    text: '线型'
	                }, {
	                    xtype: 'select',
	                    id: 'curveType',
	                    scope: this.id,
	                    options: {
	                        centripetal: '向心力',
	                        chordal: '弦线',
	                        catmullrom: 'catmullrom'
	                    },
	                    onChange: this.onChange.bind(this)
	                }]
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: '张力'
	            }, {
	                xtype: 'number',
	                id: 'tension',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	CatmullRomCurveComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	CatmullRomCurveComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	CatmullRomCurveComponent.prototype.updateUI = function () {
	    var container = UI.get('panel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected.userData.type === 'CatmullRomCurve') {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var closed = UI.get('closed', this.id);
	    var curveType = UI.get('curveType', this.id);
	    var tension = UI.get('tension', this.id);

	    closed.setValue(this.selected.userData.closed);
	    curveType.setValue(this.selected.userData.curveType);
	    tension.setValue(this.selected.userData.tension);
	};

	CatmullRomCurveComponent.prototype.onChange = function () {
	    var closed = UI.get('closed', this.id);
	    var curveType = UI.get('curveType', this.id);
	    var tension = UI.get('tension', this.id);

	    Object.assign(this.selected.userData, {
	        closed: closed.getValue(),
	        curveType: curveType.getValue(),
	        tension: tension.getValue(),
	    });

	    this.selected.update();

	    this.app.call('objectChanged', this, this.selected);
	};

	CatmullRomCurveComponent.prototype.onAddPoint = function () {
	    var points = this.selected.userData.points;
	    var closed = this.selected.userData.closed;
	    var curveType = this.selected.userData.curveType;
	    var tension = this.selected.userData.tension;

	    var curve = new THREE.CatmullRomCurve3(points, closed, curveType, tension);

	    var point = new THREE.Vector3(
	        parseInt((Math.random() - 0.5) * 40),
	        parseInt(Math.random() * 20),
	        parseInt((Math.random() - 0.5) * 40)
	    );

	    points.splice(points.length, 0, point);

	    this.selected.update();

	    this.app.call('objectChanged', this, this.selected);
	};

	CatmullRomCurveComponent.prototype.onRemovePoint = function () {
	    var points = this.selected.userData.points;

	    if (points.length === 3) {
	        UI.msg('CatmullRom曲线至少应该有三个点！');
	        return;
	    }

	    points.splice(points.length - 1, 1);

	    this.selected.update();

	    this.app.call('objectChanged', this, this.selected);
	};

	/**
	 * 二次贝塞尔曲线组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function QuadraticBezierCurveComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	QuadraticBezierCurveComponent.prototype = Object.create(BaseComponent.prototype);
	QuadraticBezierCurveComponent.prototype.constructor = QuadraticBezierCurveComponent;

	QuadraticBezierCurveComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        id: 'panel',
	        scope: this.id,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'label',
	            style: {
	                width: '100%',
	                color: '#555',
	                fontWeight: 'bold'
	            },
	            text: L_QUADRATIC_BEZIER_CURVE
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: '点0'
	            }, {
	                xtype: 'number',
	                id: 'v0x',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'v0y',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'v0z',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: '点1'
	            }, {
	                xtype: 'number',
	                id: 'v1x',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'v1y',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'v1z',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: '点2'
	            }, {
	                xtype: 'number',
	                id: 'v2x',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'v2y',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'v2z',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	QuadraticBezierCurveComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	QuadraticBezierCurveComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	QuadraticBezierCurveComponent.prototype.updateUI = function () {
	    var container = UI.get('panel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected.userData.type === 'QuadraticBezierCurve') {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var v0x = UI.get('v0x', this.id);
	    var v0y = UI.get('v0y', this.id);
	    var v0z = UI.get('v0z', this.id);
	    var v1x = UI.get('v1x', this.id);
	    var v1y = UI.get('v1y', this.id);
	    var v1z = UI.get('v1z', this.id);
	    var v2x = UI.get('v2x', this.id);
	    var v2y = UI.get('v2y', this.id);
	    var v2z = UI.get('v2z', this.id);

	    var points = this.selected.userData.points;

	    v0x.setValue(points[0].x);
	    v0y.setValue(points[0].y);
	    v0z.setValue(points[0].z);
	    v1x.setValue(points[1].x);
	    v1y.setValue(points[1].y);
	    v1z.setValue(points[1].z);
	    v2x.setValue(points[2].x);
	    v2y.setValue(points[2].y);
	    v2z.setValue(points[2].z);
	};

	QuadraticBezierCurveComponent.prototype.onChange = function () {
	    var v0x = UI.get('v0x', this.id);
	    var v0y = UI.get('v0y', this.id);
	    var v0z = UI.get('v0z', this.id);
	    var v1x = UI.get('v1x', this.id);
	    var v1y = UI.get('v1y', this.id);
	    var v1z = UI.get('v1z', this.id);
	    var v2x = UI.get('v2x', this.id);
	    var v2y = UI.get('v2y', this.id);
	    var v2z = UI.get('v2z', this.id);

	    this.selected.userData.points = [
	        new THREE.Vector3(v0x.getValue(), v0y.getValue(), v0z.getValue()),
	        new THREE.Vector3(v1x.getValue(), v1y.getValue(), v1z.getValue()),
	        new THREE.Vector3(v2x.getValue(), v2y.getValue(), v2z.getValue())
	    ];

	    this.selected.update();

	    this.app.call('objectChanged', this, this.selected);
	};

	/**
	 * 三次贝塞尔曲线组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function CubicBezierCurveComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	CubicBezierCurveComponent.prototype = Object.create(BaseComponent.prototype);
	CubicBezierCurveComponent.prototype.constructor = CubicBezierCurveComponent;

	CubicBezierCurveComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        id: 'panel',
	        scope: this.id,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'label',
	            style: {
	                width: '100%',
	                color: '#555',
	                fontWeight: 'bold'
	            },
	            text: L_CUBIC_BEZIER_CURVE
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: '点0'
	            }, {
	                xtype: 'number',
	                id: 'v0x',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'v0y',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'v0z',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: '点1'
	            }, {
	                xtype: 'number',
	                id: 'v1x',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'v1y',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'v1z',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: '点2'
	            }, {
	                xtype: 'number',
	                id: 'v2x',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'v2y',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'v2z',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: '点3'
	            }, {
	                xtype: 'number',
	                id: 'v3x',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'v3y',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'v3z',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	CubicBezierCurveComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	CubicBezierCurveComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	CubicBezierCurveComponent.prototype.updateUI = function () {
	    var container = UI.get('panel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected.userData.type === 'CubicBezierCurve') {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var v0x = UI.get('v0x', this.id);
	    var v0y = UI.get('v0y', this.id);
	    var v0z = UI.get('v0z', this.id);
	    var v1x = UI.get('v1x', this.id);
	    var v1y = UI.get('v1y', this.id);
	    var v1z = UI.get('v1z', this.id);
	    var v2x = UI.get('v2x', this.id);
	    var v2y = UI.get('v2y', this.id);
	    var v2z = UI.get('v2z', this.id);
	    var v3x = UI.get('v3x', this.id);
	    var v3y = UI.get('v3y', this.id);
	    var v3z = UI.get('v3z', this.id);

	    var points = this.selected.userData.points;

	    v0x.setValue(points[0].x);
	    v0y.setValue(points[0].y);
	    v0z.setValue(points[0].z);
	    v1x.setValue(points[1].x);
	    v1y.setValue(points[1].y);
	    v1z.setValue(points[1].z);
	    v2x.setValue(points[2].x);
	    v2y.setValue(points[2].y);
	    v2z.setValue(points[2].z);
	    v3x.setValue(points[3].x);
	    v3y.setValue(points[3].y);
	    v3z.setValue(points[3].z);
	};

	CubicBezierCurveComponent.prototype.onChange = function () {
	    var v0x = UI.get('v0x', this.id);
	    var v0y = UI.get('v0y', this.id);
	    var v0z = UI.get('v0z', this.id);
	    var v1x = UI.get('v1x', this.id);
	    var v1y = UI.get('v1y', this.id);
	    var v1z = UI.get('v1z', this.id);
	    var v2x = UI.get('v2x', this.id);
	    var v2y = UI.get('v2y', this.id);
	    var v2z = UI.get('v2z', this.id);
	    var v3x = UI.get('v3x', this.id);
	    var v3y = UI.get('v3y', this.id);
	    var v3z = UI.get('v3z', this.id);

	    this.selected.userData.points = [
	        new THREE.Vector3(v0x.getValue(), v0y.getValue(), v0z.getValue()),
	        new THREE.Vector3(v1x.getValue(), v1y.getValue(), v1z.getValue()),
	        new THREE.Vector3(v2x.getValue(), v2y.getValue(), v2z.getValue()),
	        new THREE.Vector3(v3x.getValue(), v3y.getValue(), v3z.getValue())
	    ];

	    this.selected.update();

	    this.app.call('objectChanged', this, this.selected);
	};

	/**
	 * 椭圆曲线组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function EllipseCurveComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	EllipseCurveComponent.prototype = Object.create(BaseComponent.prototype);
	EllipseCurveComponent.prototype.constructor = EllipseCurveComponent;

	EllipseCurveComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        id: 'panel',
	        scope: this.id,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'label',
	            style: {
	                width: '100%',
	                color: '#555',
	                fontWeight: 'bold'
	            },
	            text: L_ELLIPSE_CURVE
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: '中心'
	            }, {
	                xtype: 'number',
	                id: 'aX',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'aY',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: '半径'
	            }, {
	                xtype: 'number',
	                id: 'xRadius',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'yRadius',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: '旋转角度'
	            }, {
	                xtype: 'number',
	                id: 'aStartAngle',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'aEndAngle',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: '顺时针'
	            }, {
	                xtype: 'checkbox',
	                id: 'aClockwise',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: '偏转'
	            }, {
	                xtype: 'number',
	                id: 'aRotation',
	                scope: this.id,
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	EllipseCurveComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	EllipseCurveComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	EllipseCurveComponent.prototype.updateUI = function () {
	    var container = UI.get('panel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected.userData.type === 'EllipseCurve') {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var aX = UI.get('aX', this.id);
	    var aY = UI.get('aY', this.id);
	    var xRadius = UI.get('xRadius', this.id);
	    var yRadius = UI.get('yRadius', this.id);
	    var aStartAngle = UI.get('aStartAngle', this.id);
	    var aEndAngle = UI.get('aEndAngle', this.id);
	    var aClockwise = UI.get('aClockwise', this.id);
	    var aRotation = UI.get('aRotation', this.id);

	    aX.setValue(this.selected.userData.aX);
	    aY.setValue(this.selected.userData.aY);
	    xRadius.setValue(this.selected.userData.xRadius);
	    yRadius.setValue(this.selected.userData.yRadius);
	    aStartAngle.setValue(this.selected.userData.aStartAngle);
	    aEndAngle.setValue(this.selected.userData.aEndAngle);
	    aClockwise.setValue(this.selected.userData.aClockwise);
	    aRotation.setValue(this.selected.userData.aRotation);
	};

	EllipseCurveComponent.prototype.onChange = function () {
	    var aX = UI.get('aX', this.id);
	    var aY = UI.get('aY', this.id);
	    var xRadius = UI.get('xRadius', this.id);
	    var yRadius = UI.get('yRadius', this.id);
	    var aStartAngle = UI.get('aStartAngle', this.id);
	    var aEndAngle = UI.get('aEndAngle', this.id);
	    var aClockwise = UI.get('aClockwise', this.id);
	    var aRotation = UI.get('aRotation', this.id);

	    Object.assign(this.selected.userData, {
	        aX: aX.getValue(),
	        aY: aY.getValue(),
	        xRadius: xRadius.getValue(),
	        yRadius: yRadius.getValue(),
	        aStartAngle: aStartAngle.getValue(),
	        aEndAngle: aEndAngle.getValue(),
	        aClockwise: aClockwise.getValue(),
	        aRotation: aRotation.getValue(),
	    });

	    this.selected.update();

	    this.app.call('objectChanged', this, this.selected);
	};

	/**
	 * GIS基本组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function GisBasicComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	GisBasicComponent.prototype = Object.create(BaseComponent.prototype);
	GisBasicComponent.prototype.constructor = GisBasicComponent;

	GisBasicComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'panel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            borderTop: 0,
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    color: '#555',
	                    fontWeight: 'bold'
	                },
	                text: L_GIS_COMPONENT
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_TILE_MAP
	            }, {
	                xtype: 'select',
	                id: 'bakcground',
	                scope: this.id,
	                options: {
	                    google: L_GOOGLE_MAP,
	                    bing: L_BING_MAP,
	                    tianditu: L_TIANDITU_MAP,
	                },
	                onChange: this.onChangeBackground.bind(this),
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	};

	GisBasicComponent.prototype.onObjectSelected = function () {
	    this.updateUI();
	};

	GisBasicComponent.prototype.onObjectChanged = function () {
	    this.updateUI();
	};

	GisBasicComponent.prototype.updateUI = function () {
	    var container = UI.get('panel', this.id);
	    var editor = this.app.editor;
	    if (editor.selected && editor.selected.userData.type === 'Globe') {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.selected = editor.selected;

	    var bakcground = UI.get('bakcground', this.id);

	    bakcground.setValue(this.selected.getBackground());
	};

	GisBasicComponent.prototype.onChangeBackground = function () {
	    var bakcground = UI.get('bakcground', this.id).getValue();
	    this.selected.setBackground(bakcground);
	};

	/**
	 * 属性面板
	 * @author mrdoob / http://mrdoob.com/
	 * @author tengge / https://github.com/tengge1
	 */
	function PropertyPanel(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}
	PropertyPanel.prototype = Object.create(UI$1.Control.prototype);
	PropertyPanel.prototype.constructor = PropertyPanel;

	PropertyPanel.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        children: [
	            new BasicComponent({ app: this.app }),
	            new TransformComponent({ app: this.app }),
	            new SceneComponent({ app: this.app }),
	            new CameraComponent({ app: this.app }),
	            new LightComponent({ app: this.app }),
	            new ShadowComponent({ app: this.app }),
	            new ControlComponent({ app: this.app }),
	            new FirstPersonControlComponent({ app: this.app }),
	            new FlyControlComponent({ app: this.app }),
	            new OrbitControlComponent({ app: this.app }),
	            new PointerLockControlComponent({ app: this.app }),
	            new TrackballControlComponent({ app: this.app }),
	            new ReflectorComponent({ app: this.app }),
	            new PhysicsWorldComponent({ app: this.app }),

	            new GisBasicComponent({ app: this.app }),

	            // 后期处理
	            new DotScreenComponent({ app: this.app }),
	            new RgbShiftComponent({ app: this.app }),
	            new AfterimageComponent({ app: this.app }),
	            new BokehComponent({ app: this.app }),
	            new FxaaComponent({ app: this.app }),
	            new GlitchComponent({ app: this.app }),
	            new HalftoneComponent({ app: this.app }),
	            new SsaaComponent({ app: this.app }),
	            new PixelComponent({ app: this.app }),
	            new SaoComponent({ app: this.app }),
	            new SmaaComponent({ app: this.app }),
	            new SsaoComponent({ app: this.app }),
	            new TaaComponent({ app: this.app }),

	            new SkyComponent({ app: this.app }),
	            new PerlinTerrainComponent({ app: this.app }),
	            new AudioListenerComponent({ app: this.app }),
	            new BackgroundMusicComponent({ app: this.app }),
	            new ParticleEmitterComponent({ app: this.app }),
	            new FireComponent({ app: this.app }),
	            new SmokeComponent({ app: this.app }),
	            new WaterComponent({ app: this.app }),
	            new ClothComponent({ app: this.app }),
	            new LMeshComponent({ app: this.app }),
	            new MMDComponent({ app: this.app }),

	            new LineCurveComponent({ app: this.app }),
	            new CatmullRomCurveComponent({ app: this.app }),
	            new QuadraticBezierCurveComponent({ app: this.app }),
	            new CubicBezierCurveComponent({ app: this.app }),
	            new EllipseCurveComponent({ app: this.app }),

	            // 物理组件
	            new PhysicsTypeComponent({ app: this.app }),
	            new RigidBodyComponent({ app: this.app }),
	            new SoftVolumeComponent({ app: this.app }),

	            new GeometryComponent({ app: this.app }),
	            new MaterialComponent({ app: this.app }),
	        ]
	    };

	    var control = UI$1.create(data);
	    control.render();
	};

	/**
	 * 动画基本信息组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function BasicAnimationComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	BasicAnimationComponent.prototype = Object.create(BaseComponent.prototype);
	BasicAnimationComponent.prototype.constructor = BasicAnimationComponent;

	BasicAnimationComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'basicAnimationPanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            borderTop: 0,
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    width: '100%',
	                    color: '#555',
	                    fontWeight: 'bold'
	                },
	                text: L_BASIC_INFORMATION
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_NAME
	            }, {
	                xtype: 'input',
	                id: 'name',
	                scope: this.id,
	                style: {
	                    width: '120px'
	                },
	                onInput: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_TARGET
	            }, {
	                xtype: 'input',
	                id: 'target',
	                scope: this.id,
	                disabled: true,
	                style: {
	                    width: '80px',
	                    marginRight: '8px'
	                }
	            }, {
	                xtype: 'button',
	                id: 'btnSetTarget',
	                scope: this.id,
	                text: L_SET,
	                onClick: this.onSetTarget.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_TYPE
	            }, {
	                xtype: 'select',
	                id: 'type',
	                scope: this.id,
	                options: {
	                    Tween: L_TWEEN_ANIMATION,
	                    Skeletal: L_SKELETAL_ANIMATION,
	                    Audio: L_PLAY_AUDIO,
	                    Filter: L_FILTER_ANIMATION,
	                    Particle: L_PARTICLE_ANIMATION
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_BEGIN_TIME
	            }, {
	                xtype: 'number',
	                id: 'beginTime',
	                scope: this.id,
	                range: [0, Infinity],
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_END_TIME
	            }, {
	                xtype: 'number',
	                id: 'endTime',
	                scope: this.id,
	                range: [0, Infinity],
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`animationSelected.${this.id}`, this.onAnimationSelected.bind(this));
	    this.app.on(`animationChanged.${this.id}`, this.onAnimationChanged.bind(this));
	};

	BasicAnimationComponent.prototype.onAnimationSelected = function (animation) {
	    this.updateUI(animation);
	};

	BasicAnimationComponent.prototype.onAnimationChanged = function (animation) {
	    this.updateUI(animation);
	};

	BasicAnimationComponent.prototype.updateUI = function (animation) {
	    var container = UI.get('basicAnimationPanel', this.id);
	    if (animation) {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.animation = animation;

	    var name = UI.get('name', this.id);
	    var target = UI.get('target', this.id);
	    var type = UI.get('type', this.id);
	    var beginTime = UI.get('beginTime', this.id);
	    var endTime = UI.get('endTime', this.id);

	    name.setValue(this.animation.name);

	    if (!this.animation.target) {
	        target.setValue('(' + L_NONE + ')');
	    } else {
	        var obj = this.app.editor.objectByUuid(this.animation.target);
	        if (obj === null) {
	            target.setValue('(' + L_NONE + ')');
	            console.warn(`BasicAnimationComponent: ${L_ANIMATION_OBJECT} ${this.animation.target} ${L_NOT_EXISTED_IN_SCENE}`);
	        } else {
	            target.setValue(obj.name);
	        }
	    }

	    type.setValue(this.animation.type);
	    beginTime.setValue(this.animation.beginTime);
	    endTime.setValue(this.animation.endTime);
	};

	BasicAnimationComponent.prototype.onSetTarget = function () {
	    var selected = this.app.editor.selected;
	    if (selected == null) {
	        this.animation.target = null;
	    } else {
	        this.animation.target = selected.uuid;
	    }

	    this.app.call('animationChanged', this, this.animation);
	};

	BasicAnimationComponent.prototype.onChange = function () {
	    var name = UI.get('name', this.id);
	    var type = UI.get('type', this.id);
	    var beginTime = UI.get('beginTime', this.id);
	    var endTime = UI.get('endTime', this.id);

	    this.animation.name = name.getValue();
	    this.animation.type = type.getValue();
	    this.animation.beginTime = beginTime.getValue();
	    this.animation.endTime = endTime.getValue();

	    this.app.call('animationChanged', this, this.animation);
	};

	/**
	 * 补间动画组件
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function TweenAnimationComponent(options) {
	    BaseComponent.call(this, options);
	    this.selected = null;
	}

	TweenAnimationComponent.prototype = Object.create(BaseComponent.prototype);
	TweenAnimationComponent.prototype.constructor = TweenAnimationComponent;

	TweenAnimationComponent.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'tweenAnimationPanel',
	        scope: this.id,
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            display: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                style: {
	                    width: '100%',
	                    color: '#555',
	                    fontWeight: 'bold'
	                },
	                text: L_TWEEN_ANIMATION
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_BEGIN_STATUS
	            }, {
	                xtype: 'select',
	                id: 'beginStatus',
	                scope: this.id,
	                options: {
	                    Current: L_CURRENT_STATUS,
	                    Custom: L_CUSTOM_STATUS
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'beginPositionRow',
	            scope: this.id,
	            style: {
	                display: 'none'
	            },
	            children: [{
	                xtype: 'label',
	                text: L_TRANSLATE
	            }, {
	                xtype: 'number',
	                id: 'beginPositionX',
	                scope: this.id,
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'beginPositionY',
	                scope: this.id,
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'beginPositionZ',
	                scope: this.id,
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'beginRotationRow',
	            scope: this.id,
	            style: {
	                display: 'none'
	            },
	            children: [{
	                xtype: 'label',
	                text: L_ROTATE
	            }, {
	                xtype: 'number',
	                id: 'beginRotationX',
	                scope: this.id,
	                step: 10,
	                unit: '°',
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'beginRotationY',
	                scope: this.id,
	                step: 10,
	                unit: '°',
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'beginRotationZ',
	                scope: this.id,
	                step: 10,
	                unit: '°',
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'beginScaleRow',
	            scope: this.id,
	            style: {
	                display: 'none'
	            },
	            children: [{
	                xtype: 'label',
	                text: L_SCALE
	            }, {
	                xtype: 'checkbox',
	                id: 'beginScaleLock',
	                scope: this.id,
	                value: true,
	                style: {
	                    position: 'absolute',
	                    left: '50px'
	                }
	            }, {
	                xtype: 'number',
	                id: 'beginScaleX',
	                scope: this.id,
	                value: 1,
	                range: [0.01, Infinity],
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'beginScaleY',
	                scope: this.id,
	                value: 1,
	                range: [0.01, Infinity],
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'beginScaleZ',
	                scope: this.id,
	                value: 1,
	                range: [0.01, Infinity],
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_EASE_FUNC
	            }, {
	                xtype: 'select',
	                id: 'ease',
	                scope: this.id,
	                options: {
	                    linear: 'Linear',
	                    quadIn: 'Quad In',
	                    quadOut: 'Quad Out',
	                    quadInOut: 'Quad In Out',
	                    cubicIn: 'Cubic In',
	                    cubicOut: 'Cubic Out',
	                    cubicInOut: 'Cubic InOut',
	                    quartIn: 'Quart In',
	                    quartOut: 'Quart Out',
	                    quartInOut: 'Quart InOut',
	                    quintIn: 'Quint In',
	                    quintOut: 'Quint Out',
	                    quintInOut: 'Quint In Out',
	                    sineIn: 'Sine In',
	                    sineOut: 'Sine Out',
	                    sineInOut: 'Sine In Out',
	                    backIn: 'Back In',
	                    backOut: 'Back Out',
	                    backInOut: 'Back In Out',
	                    circIn: 'Circ In',
	                    circOut: 'Circ Out',
	                    circInOut: 'Circ In Out',
	                    bounceIn: 'Bounce In',
	                    bounceOut: 'Bounce Out',
	                    bounceInOut: 'Bounce In Out',
	                    elasticIn: 'Elastic In',
	                    elasticOut: 'Elastic Out',
	                    elasticInOut: 'Elastic In Out'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_END_STATUS
	            }, {
	                xtype: 'select',
	                id: 'endStatus',
	                scope: this.id,
	                options: {
	                    Current: L_CURRENT_STATUS,
	                    Custom: L_CUSTOM_STATUS
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'endPositionRow',
	            scope: this.id,
	            style: {
	                display: 'none'
	            },
	            children: [{
	                xtype: 'label',
	                text: L_TRANSLATE
	            }, {
	                xtype: 'number',
	                id: 'endPositionX',
	                scope: this.id,
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'endPositionY',
	                scope: this.id,
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'endPositionZ',
	                scope: this.id,
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'endRotationRow',
	            scope: this.id,
	            style: {
	                display: 'none'
	            },
	            children: [{
	                xtype: 'label',
	                text: L_ROTATE
	            }, {
	                xtype: 'number',
	                id: 'endRotationX',
	                scope: this.id,
	                step: 10,
	                unit: '°',
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'endRotationY',
	                scope: this.id,
	                step: 10,
	                unit: '°',
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'endRotationZ',
	                scope: this.id,
	                step: 10,
	                unit: '°',
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            id: 'endScaleRow',
	            scope: this.id,
	            style: {
	                display: 'none'
	            },
	            children: [{
	                xtype: 'label',
	                text: L_SCALE
	            }, {
	                xtype: 'checkbox',
	                id: 'endScaleLock',
	                scope: this.id,
	                value: true,
	                style: {
	                    position: 'absolute',
	                    left: '50px'
	                }
	            }, {
	                xtype: 'number',
	                id: 'endScaleX',
	                scope: this.id,
	                value: 1,
	                range: [0.01, Infinity],
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'endScaleY',
	                scope: this.id,
	                value: 1,
	                range: [0.01, Infinity],
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }, {
	                xtype: 'number',
	                id: 'endScaleZ',
	                scope: this.id,
	                value: 1,
	                range: [0.01, Infinity],
	                style: {
	                    width: '40px'
	                },
	                onChange: this.onChange.bind(this)
	            }]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`animationSelected.${this.id}`, this.onAnimationSelected.bind(this));
	    this.app.on(`animationChanged.${this.id}`, this.onAnimationChanged.bind(this));
	};

	TweenAnimationComponent.prototype.onAnimationSelected = function (animation) {
	    this.updateUI(animation);
	};

	TweenAnimationComponent.prototype.onAnimationChanged = function (animation) {
	    this.updateUI(animation);
	};

	TweenAnimationComponent.prototype.updateUI = function (animation) {
	    var container = UI.get('tweenAnimationPanel', this.id);
	    if (animation && animation.type === 'Tween') {
	        container.dom.style.display = '';
	    } else {
	        container.dom.style.display = 'none';
	        return;
	    }

	    this.animation = animation;

	    var beginPositionRow = UI.get('beginPositionRow', this.id);
	    var beginRotationRow = UI.get('beginRotationRow', this.id);
	    var beginScaleRow = UI.get('beginScaleRow', this.id);
	    var endPositionRow = UI.get('endPositionRow', this.id);
	    var endRotationRow = UI.get('endRotationRow', this.id);
	    var endScaleRow = UI.get('endScaleRow', this.id);

	    var beginStatus = UI.get('beginStatus', this.id);
	    var beginPositionX = UI.get('beginPositionX', this.id);
	    var beginPositionY = UI.get('beginPositionY', this.id);
	    var beginPositionZ = UI.get('beginPositionZ', this.id);
	    var beginRotationX = UI.get('beginRotationX', this.id);
	    var beginRotationY = UI.get('beginRotationY', this.id);
	    var beginRotationZ = UI.get('beginRotationZ', this.id);
	    var beginScaleLock = UI.get('beginScaleLock', this.id);
	    var beginScaleX = UI.get('beginScaleX', this.id);
	    var beginScaleY = UI.get('beginScaleY', this.id);
	    var beginScaleZ = UI.get('beginScaleZ', this.id);
	    var ease = UI.get('ease', this.id);
	    var endStatus = UI.get('endStatus', this.id);
	    var endPositionX = UI.get('endPositionX', this.id);
	    var endPositionY = UI.get('endPositionY', this.id);
	    var endPositionZ = UI.get('endPositionZ', this.id);
	    var endRotationX = UI.get('endRotationX', this.id);
	    var endRotationY = UI.get('endRotationY', this.id);
	    var endRotationZ = UI.get('endRotationZ', this.id);
	    var endScaleLock = UI.get('endScaleLock', this.id);
	    var endScaleX = UI.get('endScaleX', this.id);
	    var endScaleY = UI.get('endScaleY', this.id);
	    var endScaleZ = UI.get('endScaleZ', this.id);

	    var data = this.animation.data;

	    switch (data.beginStatus) {
	        case 'Current':
	            beginPositionRow.dom.style.display = 'none';
	            beginRotationRow.dom.style.display = 'none';
	            beginScaleRow.dom.style.display = 'none';
	            break;
	        case 'Custom':
	            beginPositionRow.dom.style.display = '';
	            beginRotationRow.dom.style.display = '';
	            beginScaleRow.dom.style.display = '';
	            break;
	    }

	    switch (data.endStatus) {
	        case 'Current':
	            endPositionRow.dom.style.display = 'none';
	            endRotationRow.dom.style.display = 'none';
	            endScaleRow.dom.style.display = 'none';
	            break;
	        case 'Custom':
	            endPositionRow.dom.style.display = '';
	            endRotationRow.dom.style.display = '';
	            endScaleRow.dom.style.display = '';
	            break;
	    }

	    beginStatus.setValue(data.beginStatus);
	    beginPositionX.setValue(data.beginPositionX);
	    beginPositionY.setValue(data.beginPositionY);
	    beginPositionZ.setValue(data.beginPositionZ);
	    beginRotationX.setValue(data.beginRotationX * 180 / Math.PI);
	    beginRotationY.setValue(data.beginRotationY * 180 / Math.PI);
	    beginRotationZ.setValue(data.beginRotationZ * 180 / Math.PI);
	    beginScaleLock.setValue(data.beginScaleLock);
	    beginScaleX.setValue(data.beginScaleX);
	    beginScaleY.setValue(data.beginScaleY);
	    beginScaleZ.setValue(data.beginScaleZ);
	    ease.setValue(data.ease);
	    endStatus.setValue(data.endStatus);
	    endPositionX.setValue(data.endPositionX);
	    endPositionY.setValue(data.endPositionY);
	    endPositionZ.setValue(data.endPositionZ);
	    endRotationX.setValue(data.endRotationX * 180 / Math.PI);
	    endRotationY.setValue(data.endRotationY * 180 / Math.PI);
	    endRotationZ.setValue(data.endRotationZ * 180 / Math.PI);
	    endScaleLock.setValue(data.endScaleLock);
	    endScaleX.setValue(data.endScaleX);
	    endScaleY.setValue(data.endScaleY);
	    endScaleZ.setValue(data.endScaleZ);
	};

	TweenAnimationComponent.prototype.onChange = function () {
	    var beginPositionRow = UI.get('beginPositionRow', this.id);
	    var beginRotationRow = UI.get('beginRotationRow', this.id);
	    var beginScaleRow = UI.get('beginScaleRow', this.id);
	    var endPositionRow = UI.get('endPositionRow', this.id);
	    var endRotationRow = UI.get('endRotationRow', this.id);
	    var endScaleRow = UI.get('endScaleRow', this.id);

	    var beginStatus = UI.get('beginStatus', this.id);
	    var beginPositionX = UI.get('beginPositionX', this.id);
	    var beginPositionY = UI.get('beginPositionY', this.id);
	    var beginPositionZ = UI.get('beginPositionZ', this.id);
	    var beginRotationX = UI.get('beginRotationX', this.id);
	    var beginRotationY = UI.get('beginRotationY', this.id);
	    var beginRotationZ = UI.get('beginRotationZ', this.id);
	    var beginScaleLock = UI.get('beginScaleLock', this.id);
	    var beginScaleX = UI.get('beginScaleX', this.id);
	    var beginScaleY = UI.get('beginScaleY', this.id);
	    var beginScaleZ = UI.get('beginScaleZ', this.id);
	    var ease = UI.get('ease', this.id);
	    var endStatus = UI.get('endStatus', this.id);
	    var endPositionX = UI.get('endPositionX', this.id);
	    var endPositionY = UI.get('endPositionY', this.id);
	    var endPositionZ = UI.get('endPositionZ', this.id);
	    var endRotationX = UI.get('endRotationX', this.id);
	    var endRotationY = UI.get('endRotationY', this.id);
	    var endRotationZ = UI.get('endRotationZ', this.id);
	    var endScaleLock = UI.get('endScaleLock', this.id);
	    var endScaleX = UI.get('endScaleX', this.id);
	    var endScaleY = UI.get('endScaleY', this.id);
	    var endScaleZ = UI.get('endScaleZ', this.id);

	    switch (beginStatus.getValue()) {
	        case 'Current':
	            beginPositionRow.dom.style.display = 'none';
	            beginRotationRow.dom.style.display = 'none';
	            beginScaleRow.dom.style.display = 'none';
	            break;
	        case 'Custom':
	            beginPositionRow.dom.style.display = '';
	            beginRotationRow.dom.style.display = '';
	            beginScaleRow.dom.style.display = '';
	            break;
	    }

	    switch (endStatus.getValue()) {
	        case 'Current':
	            endPositionRow.dom.style.display = 'none';
	            endRotationRow.dom.style.display = 'none';
	            endScaleRow.dom.style.display = 'none';
	            break;
	        case 'Custom':
	            endPositionRow.dom.style.display = '';
	            endRotationRow.dom.style.display = '';
	            endScaleRow.dom.style.display = '';
	            break;
	    }

	    this.animation.data = this.animation.data || {};

	    this.animation.data.beginStatus = beginStatus.getValue();
	    this.animation.data.beginPositionX = beginPositionX.getValue();
	    this.animation.data.beginPositionY = beginPositionY.getValue();
	    this.animation.data.beginPositionZ = beginPositionZ.getValue();
	    this.animation.data.beginRotationX = beginRotationX.getValue() * Math.PI / 180;
	    this.animation.data.beginRotationY = beginRotationY.getValue() * Math.PI / 180;
	    this.animation.data.beginRotationZ = beginRotationZ.getValue() * Math.PI / 180;
	    this.animation.data.beginScaleLock = beginScaleLock.getValue();
	    this.animation.data.beginScaleX = beginScaleX.getValue();
	    this.animation.data.beginScaleY = beginScaleY.getValue();
	    this.animation.data.beginScaleZ = beginScaleZ.getValue();
	    this.animation.data.ease = ease.getValue();
	    this.animation.data.endStatus = endStatus.getValue();
	    this.animation.data.endPositionX = endPositionX.getValue();
	    this.animation.data.endPositionY = endPositionY.getValue();
	    this.animation.data.endPositionZ = endPositionZ.getValue();
	    this.animation.data.endRotationX = endRotationX.getValue() * Math.PI / 180;
	    this.animation.data.endRotationY = endRotationY.getValue() * Math.PI / 180;
	    this.animation.data.endRotationZ = endRotationZ.getValue() * Math.PI / 180;
	    this.animation.data.endScaleLock = endScaleLock.getValue();
	    this.animation.data.endScaleX = endScaleX.getValue();
	    this.animation.data.endScaleY = endScaleY.getValue();
	    this.animation.data.endScaleZ = endScaleZ.getValue();

	    this.app.call('animationChanged', this, this.animation);
	};

	/**
	 * 动画面板
	 */
	function AnimationPanel(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}
	AnimationPanel.prototype = Object.create(UI$1.Control.prototype);
	AnimationPanel.prototype.constructor = AnimationPanel;

	AnimationPanel.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        children: [
	            new BasicAnimationComponent({ app: this.app }),
	            new TweenAnimationComponent({ app: this.app }),
	        ]
	    };

	    var control = UI$1.create(data);
	    control.render();
	};

	/**
	 * 历史记录面板
	 * @author dforrer / https://github.com/dforrer
	 * Developed as part of a project at University of Applied Sciences and Arts Northwestern Switzerland (www.fhnw.ch)
	 */
	function HistoryPanel(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}
	HistoryPanel.prototype = Object.create(UI$1.Control.prototype);
	HistoryPanel.prototype.constructor = HistoryPanel;

	HistoryPanel.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        cls: 'Panel',
	        children: [{
	            xtype: 'label',
	            text: L_HISTORY
	        }, {
	            xtype: 'br'
	        }, {
	            xtype: 'br'
	        }, {
	            xtype: 'div',
	            id: 'panel',
	            scope: this.id,
	            style: {
	                width: '100%',
	                height: '320px',
	                border: '1px solid #ddd',
	                overflowY: 'auto'
	            }
	        }]
	    };

	    var control = UI$1.create(data);
	    control.render();

	    var panel = UI$1.get('panel', this.id);
	    panel.dom.addEventListener('click', this.onChange.bind(this));

	    this.app.on(`editorCleared.${this.id}`, this.refreshUI.bind(this));
	    this.app.on(`historyChanged.${this.id}`, this.refreshUI.bind(this));
	};

	HistoryPanel.prototype.refreshUI = function () {
	    var panel = UI$1.get('panel', this.id);

	    panel.dom.innerHTML = '';

	    var history = this.app.editor.history;

	    // 撤销
	    for (var i = 0, l = history.undos.length; i < l; i++) {
	        var undo = history.undos[i];
	        var option = document.createElement('div');
	        option.value = undo.id;
	        option.innerHTML = `&nbsp;${undo.name}`;
	        option.style.padding = '4px';
	        panel.dom.appendChild(option);
	    }

	    // 重做
	    for (var i = history.redos.length - 1; i >= 0; i--) {
	        var redo = history.redos[i];
	        var option = document.createElement('div');
	        option.value = redo.id;
	        option.innerHTML = `&nbsp;${redo.name}`;
	        option.style.opacity = 0.3;
	        option.style.padding = '4px';
	        panel.dom.appendChild(option);
	    }
	};

	HistoryPanel.prototype.onChange = function (event) {
	    if (!event.target.value) {
	        return;
	    }

	    this.app.editor.history.goToState(event.target.value);
	};

	/**
	 * 侧边栏
	 * @author mrdoob / http://mrdoob.com/
	 * @author tengge / https://github.com/tengge1
	 */
	function Sidebar(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}
	Sidebar.prototype = Object.create(UI$1.Control.prototype);
	Sidebar.prototype.constructor = Sidebar;

	Sidebar.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        cls: 'sidebar rsidebar',
	        children: [{
	            xtype: 'div',
	            cls: 'tabs',
	            style: {
	                position: 'sticky',
	                top: 0,
	                zIndex: 10
	            },
	            children: [{
	                xtype: 'text',
	                id: 'propertyTab',
	                scope: this.id,
	                text: L_PROPERTY,
	                onClick: () => {
	                    this.app.call('tabSelected', this, 'property');
	                }
	            }, {
	                xtype: 'text',
	                id: 'animationTab',
	                scope: this.id,
	                text: L_ANIMATION,
	                onClick: () => {
	                    this.app.call('tabSelected', this, 'animation');
	                }
	            }, {
	                xtype: 'text',
	                id: 'historyTab',
	                scope: this.id,
	                text: L_HISTORY,
	                onClick: () => {
	                    this.app.call('tabSelected', this, 'history');
	                }
	            }]
	        }, {
	            xtype: 'div',
	            id: 'propertyPanel',
	            scope: this.id,
	            children: [
	                new PropertyPanel({ app: this.app })
	            ]
	        }, {
	            xtype: 'div',
	            id: 'animationPanel',
	            scope: this.id,
	            children: [
	                new AnimationPanel({ app: this.app })
	            ]
	        }, {
	            xtype: 'div',
	            id: 'historyPanel',
	            scope: this.id,
	            children: [
	                new HistoryPanel({ app: this.app })
	            ]
	        }]
	    };

	    var control = UI$1.create(data);
	    control.render();

	    this.app.on(`appStarted.${this.id}`, this.onAppStarted.bind(this));
	    this.app.on(`tabSelected.${this.id}`, this.onTabSelected.bind(this));
	};

	Sidebar.prototype.onAppStarted = function () {
	    this.app.call('tabSelected', this, 'property');
	};

	Sidebar.prototype.onTabSelected = function (tabName) {
	    var tabNames = [
	        'property',
	        'animation',
	        'history'
	    ];
	    if (tabNames.indexOf(tabName) === -1) {
	        return;
	    }

	    var propertyTab = UI$1.get('propertyTab', this.id);
	    var animationTab = UI$1.get('animationTab', this.id);
	    var historyTab = UI$1.get('historyTab', this.id);

	    var propertyPanel = UI$1.get('propertyPanel', this.id);
	    var animationPanel = UI$1.get('animationPanel', this.id);
	    var historyPanel = UI$1.get('historyPanel', this.id);

	    propertyTab.dom.className = '';
	    animationTab.dom.className = '';
	    historyTab.dom.className = '';

	    propertyPanel.dom.style.display = 'none';
	    animationPanel.dom.style.display = 'none';
	    historyPanel.dom.style.display = 'none';

	    switch (tabName) {
	        case 'property':
	            propertyTab.dom.className = 'selected';
	            propertyPanel.dom.style.display = '';
	            break;
	        case 'animation':
	            animationTab.dom.className = 'selected';
	            animationPanel.dom.style.display = '';
	            break;
	        case 'history':
	            historyTab.dom.className = 'selected';
	            historyPanel.dom.style.display = '';
	            break;
	    }
	};

	/**
	 * 移动物体命令
	 * @author dforrer / https://github.com/dforrer
	 * Developed as part of a project at University of Applied Sciences and Arts Northwestern Switzerland (www.fhnw.ch)
	 * @param object THREE.Object3D
	 * @param newParent THREE.Object3D
	 * @param newBefore THREE.Object3D
	 * @constructor
	 */
	function MoveObjectCommand(object, newParent, newBefore) {
		Command.call(this);

		this.type = 'MoveObjectCommand';
		this.name = L_MOVE_OBJECT;

		this.object = object;
		this.oldParent = (object !== undefined) ? object.parent : undefined;
		this.oldIndex = (this.oldParent !== undefined) ? this.oldParent.children.indexOf(this.object) : undefined;
		this.newParent = newParent;

		if (newBefore !== undefined) {
			this.newIndex = (newParent !== undefined) ? newParent.children.indexOf(newBefore) : undefined;
		} else {
			this.newIndex = (newParent !== undefined) ? newParent.children.length : undefined;
		}

		if (this.oldParent === this.newParent && this.newIndex > this.oldIndex) {
			this.newIndex--;
		}

		this.newBefore = newBefore;
	}
	MoveObjectCommand.prototype = Object.create(Command.prototype);

	Object.assign(MoveObjectCommand.prototype, {
		constructor: MoveObjectCommand,

		execute: function () {
			this.oldParent.remove(this.object);

			var children = this.newParent.children;
			children.splice(this.newIndex, 0, this.object);
			this.object.parent = this.newParent;

			this.editor.app.call('sceneGraphChanged', this);
		},

		undo: function () {
			this.newParent.remove(this.object);

			var children = this.oldParent.children;
			children.splice(this.oldIndex, 0, this.object);
			this.object.parent = this.oldParent;

			this.editor.app.call('sceneGraphChanged', this);
		},

		toJSON: function () {
			var output = Command.prototype.toJSON.call(this);

			output.objectUuid = this.object.uuid;
			output.newParentUuid = this.newParent.uuid;
			output.oldParentUuid = this.oldParent.uuid;
			output.newIndex = this.newIndex;
			output.oldIndex = this.oldIndex;

			return output;
		},

		fromJSON: function (json) {
			Command.prototype.fromJSON.call(this, json);

			this.object = this.editor.objectByUuid(json.objectUuid);
			this.oldParent = this.editor.objectByUuid(json.oldParentUuid);
			if (this.oldParent === undefined) {

				this.oldParent = this.editor.scene;

			}
			this.newParent = this.editor.objectByUuid(json.newParentUuid);
			if (this.newParent === undefined) {

				this.newParent = this.editor.scene;

			}
			this.newIndex = json.newIndex;
			this.oldIndex = json.oldIndex;
		}
	});

	/**
	 * 场景层次图面板
	 * @author mrdoob / http://mrdoob.com/
	 * @author tengge / https://github.com/tengge1
	 */
	function HierachyPanel(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}
	HierachyPanel.prototype = Object.create(UI$1.Control.prototype);
	HierachyPanel.prototype.constructor = HierachyPanel;

	HierachyPanel.prototype.render = function () {
	    var editor = this.app.editor;

	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            height: 'calc(50% - 40px)',
	            borderTop: 0,
	            overflowY: 'auto',
	        },
	        children: [{
	            xtype: 'tree',
	            id: 'tree',
	            scope: this.id,
	            cls: 'Tree Hierachy',
	            onClick: this.onClick.bind(this),
	            onDblClick: this.onDblClick.bind(this),
	            onDrag: this.onDrag.bind(this),
	        }]
	    };

	    var control = UI$1.create(data);
	    control.render();

	    this.app.on(`sceneGraphChanged.${this.id}`, this.updateUI.bind(this));

	    // bug: https://gitee.com/tengge1/ShadowEditor/issues/ITCA9
	    this.app.on(`objectChanged.${this.id}`, this.updateUI.bind(this));

	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	};

	/**
	 * 单击树节点
	 * @param {*} data 
	 */
	HierachyPanel.prototype.onClick = function (data) {
	    this.app.editor.selectByUuid(data.value);
	};

	HierachyPanel.prototype.onDblClick = function (data) {
	    this.app.editor.focusByUUID(data.value);
	};

	/**
	 * 选中物体改变
	 * @param {*} object 
	 */
	HierachyPanel.prototype.onObjectSelected = function (object) {
	    var tree = UI$1.get('tree', this.id);

	    if (!object) {
	        var selected = tree.getSelected();
	        if (selected) {
	            tree.unselect(selected.value);
	        }
	        return;
	    }

	    tree.select(object.uuid);
	};

	/**
	 * 根据场景变化，更新场景树状图
	 */
	HierachyPanel.prototype.updateUI = function () {
	    var camera = this.app.editor.camera;
	    var scene = this.app.editor.scene;

	    var list = [{
	        value: camera.uuid,
	        text: camera.name,
	        cls: 'Camera',
	        children: []
	    }];

	    this._parseData(scene, list);

	    var tree = UI$1.get('tree', this.id);
	    tree.setValue(list);
	};

	HierachyPanel.prototype._parseData = function (obj, list) {
	    var scene = this.app.editor.scene;

	    var cls = null;

	    if (obj === scene) {
	        cls = 'Scene';
	    } else if (obj instanceof THREE.Line) {
	        cls = 'Line';
	    } else if (obj instanceof THREE.Light) {
	        cls = 'Light';
	    } else if (obj instanceof THREE.Points) {
	        cls = 'Points';
	    } else {
	        cls = 'Default';
	    }

	    var data = {
	        value: obj.uuid,
	        text: obj.name,
	        expand: obj === scene,
	        draggable: obj !== scene,
	        cls: cls,
	        children: []
	    };
	    list.push(data);

	    if (Array.isArray(obj.children)) {
	        obj.children.forEach(n => {
	            this._parseData(n, data.children);
	        });
	    }
	};

	/**
	 * 拖动节点
	 */
	HierachyPanel.prototype.onDrag = function (objData, newParentData, newBeforeData) {
	    var object, newParent, newBefore;

	    var editor = this.app.editor;

	    object = editor.objectByUuid(objData.value);
	    newParent = editor.objectByUuid(newParentData.value);

	    if (newBeforeData) {
	        newBefore = editor.objectByUuid(newBeforeData.value);
	    }

	    this.app.editor.execute(new MoveObjectCommand(object, newParent, newBefore));

	    var tree = UI$1.get('tree', this.id);
	    tree.expand(newParentData.value);
	};

	/**
	 * 添加脚本命令
	 * @author dforrer / https://github.com/dforrer
	 * Developed as part of a project at University of Applied Sciences and Arts Northwestern Switzerland (www.fhnw.ch)
	 * @param object THREE.Object3D
	 * @param script javascript object
	 * @constructor
	 */
	var AddScriptCommand = function (object, script) {
		Command.call(this);

		this.type = 'AddScriptCommand';
		this.name = L_ADD_SCRIPT;

		this.object = object;
		this.script = script;
	};

	AddScriptCommand.prototype = Object.create(Command.prototype);

	Object.assign(AddScriptCommand.prototype, {
		constructor: AddScriptCommand,

		execute: function () {
			if (this.editor.scripts[this.object.uuid] === undefined) {
				this.editor.scripts[this.object.uuid] = [];
			}

			this.editor.scripts[this.object.uuid].push(this.script);
			this.editor.app.call('scriptAdded', this, this.script);
		},

		undo: function () {
			if (this.editor.scripts[this.object.uuid] === undefined) return;

			var index = this.editor.scripts[this.object.uuid].indexOf(this.script);

			if (index !== - 1) {
				this.editor.scripts[this.object.uuid].splice(index, 1);
			}

			this.editor.app.call('scriptRemoved', this, this.script);
		},

		toJSON: function () {
			var output = Command.prototype.toJSON.call(this);

			output.objectUuid = this.object.uuid;
			output.script = this.script;

			return output;
		},

		fromJSON: function (json) {
			Command.prototype.fromJSON.call(this, json);

			this.script = json.script;
			this.object = this.editor.objectByUuid(json.objectUuid);
		}
	});

	/**
	 * JavaScript起始代码
	 */
	function JavaScriptStarter() {
	    return `
// ${L_EXECUTE_BEFORE_SCENE_RENDER}
function init() {

}

// ${L_EXECUTE_AFTER_SCENE_RENDER}
function start() {

}

// ${L_EXECUTE_EACH_FRAME_DURING_RUNNING}
function update(clock, deltaTime) {

}

// ${L_EXECUTE_AFTER_PROGRAM_STOP}
function stop() {

}

// ${L_LISTEN_TO_CLICK_EVENT}
function onClick(event) {

}

// ${L_LISTEN_TO_DBLCLICK_EVENT}
function onDblClick(event) {

}

// ${L_LISTEN_TO_KEYDOWN_EVENT}
function onKeyDown(event) {

}

// ${L_LISTEN_TO_KEYUP_EVENT}
function onKeyUp(event) {

}

// ${L_LISTEN_TO_MOUSEDOWN_EVENT}
function onMouseDown(event) {

}

// ${L_LISTEN_TO_MOUSEMOVE_EVENT}
function onMouseMove(event) {

}

// ${L_LISTEN_TO_MOUSEUP_EVENT}
function onMouseUp(event) {

}

// ${L_LISTEN_TO_MOUSEWHEEL_EVENT}
function onMouseWheel(event) {

}

// ${L_LISTEN_TO_RESIZE_EVENT}
function onResize(event) {

}
`;
	}

	/**
	 * 顶点着色器起始代码
	 */
	function VertexShaderStarter() {
		return `
precision mediump float;

uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;

attribute vec3 position;

void main()	{
	gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
}
`;
	}

	/**
	 * 片源着色器起始代码
	 */
	function FragmentShaderStarter() {
		return `
precision mediump float;

void main()	{
	gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
}
`;
	}

	/**
	 * Json起始代码
	 */
	function JsonStarter() {
	    return `
{
    "defines": {

    },
    "uniforms": {

    },
    "attributes": {

    }
}
`;
	}

	/**
	 * 脚本创建窗口
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function ScriptWindow(options) {
	    UI$1.Control.call(this, options);
	    options = options || {};

	    this.app = options.app;
	}

	ScriptWindow.prototype = Object.create(UI$1.Control.prototype);
	ScriptWindow.prototype.constructor = ScriptWindow;

	ScriptWindow.prototype.render = function () {
	    var container = UI$1.create({
	        xtype: 'window',
	        id: 'scriptWindow',
	        scope: this.id,
	        parent: this.app.container,
	        title: L_CREATE_SCRIPT,
	        width: '350px',
	        height: '220px',
	        bodyStyle: {
	            paddingTop: '32px'
	        },
	        shade: false,
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_NAME
	            }, {
	                xtype: 'input',
	                id: 'scriptName',
	                scope: this.id,
	                text: L_NO_NAME
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_TYPE
	            }, {
	                xtype: 'select',
	                id: 'scriptType',
	                scope: this.id,
	                options: {
	                    'javascript': 'JavaScript',
	                    'vertexShader': L_VERTEX_SHADER,
	                    'fragmentShader': L_FRAGMENT_SHADER,
	                    'json': L_SHADER_PROGRAM_INFO
	                },
	                value: 'javascript',
	                disabled: true
	            }]
	        }],
	        buttons: [{
	            xtype: 'button',
	            text: L_OK,
	            onClick: this.onCreateScript.bind(this)
	        }, {
	            xtype: 'button',
	            text: L_CANCEL,
	            onClick: this.onCancelScript.bind(this)
	        }]
	    });

	    container.render();
	};

	ScriptWindow.prototype.show = function () {
	    var container = UI$1.get('scriptWindow', this.id);
	    container.show();
	};

	ScriptWindow.prototype.hide = function () {
	    var container = UI$1.get('scriptWindow', this.id);
	    container.hide();
	};

	ScriptWindow.prototype.reset = function () {
	    var scriptName = UI$1.get('scriptName', this.id);
	    var scriptType = UI$1.get('scriptType', this.id);

	    scriptName.setValue(L_NO_NAME);
	    scriptType.setValue('javascript');
	};

	ScriptWindow.prototype.onCreateScript = function () {
	    var scriptName = UI$1.get('scriptName', this.id).getValue();
	    var scriptType = UI$1.get('scriptType', this.id).getValue();

	    // 判断脚本名称是否重复
	    var scripts = Object.values(this.app.editor.scripts);
	    if (scripts.filter(n => n.name === scriptName).length > 0) {
	        UI$1.msg(L_SCRIPT_NAME_EXISTED);
	        return;
	    }

	    this.hide();

	    var initCode;

	    switch (scriptType) {
	        case 'javascript':
	            initCode = JavaScriptStarter();
	            break;
	        case 'vertexShader':
	            initCode = VertexShaderStarter();
	            break;
	        case 'fragmentShader':
	            initCode = FragmentShaderStarter();
	            break;
	        case 'json':
	            initCode = JsonStarter();
	            break;
	        default:
	            initCode = JavaScriptStarter();
	            break;
	    }

	    var uuid = THREE.Math.generateUUID();

	    this.app.script.open(uuid, scriptName, scriptType, initCode, scriptName, source => {
	        var script = this.app.editor.scripts[uuid];
	        script.source = source;
	    });

	    this.app.editor.scripts[uuid] = {
	        id: 0,
	        name: scriptName,
	        type: scriptType,
	        source: initCode,
	        uuid: uuid
	    };

	    this.app.call('scriptChanged', this);
	};

	ScriptWindow.prototype.onCancelScript = function () {
	    var container = UI$1.get('scriptWindow', this.id);
	    container.hide();
	};

	/**
	 * 脚本面板
	 * @author mrdoob / http://mrdoob.com/
	 * @author tengge / https://github.com/tengge1
	 */
	function ScriptPanel(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}
	ScriptPanel.prototype = Object.create(UI$1.Control.prototype);
	ScriptPanel.prototype.constructor = ScriptPanel;

	ScriptPanel.prototype.render = function () {
	    var editor = this.app.editor;

	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        cls: 'Panel scriptPanel',
	        style: {
	            height: 'calc(50% - 40px)',
	            borderTop: 0,
	            overflowY: 'auto',
	        },
	        children: [{
	            xtype: 'row',
	            id: 'scriptsContainer'
	        }, {
	            xtype: 'button',
	            id: 'newCustomScript',
	            text: L_NEW_SCRIPT,
	            onClick: this.createNewScript.bind(this)
	        }]
	    };

	    var control = UI$1.create(data);
	    control.render();

	    this.app.on(`scriptChanged.${this.id}`, this.update.bind(this));
	};

	ScriptPanel.prototype.createNewScript = function () {
	    if (this.window == null) {
	        this.window = new ScriptWindow({
	            app: this.app
	        });
	        this.window.render();
	    }
	    this.window.reset();
	    this.window.show();
	};

	ScriptPanel.prototype.update = function () {
	    var container = UI$1.get('scriptsContainer');
	    container.dom.innerHTML = '';
	    container.dom.style.display = 'none';

	    var scripts = this.app.editor.scripts;

	    if (Object.keys(scripts).length === 0) {
	        return;
	    }

	    container.dom.style.display = 'block';

	    Object.keys(scripts).forEach(n => {
	        var script = scripts[n];
	        var uuid = script.uuid;
	        var name = script.name;
	        var extension;

	        switch (script.type) {
	            case 'javascript':
	                extension = '.js';
	                break;
	            case 'vertexShader':
	            case 'fragmentShader':
	                extension = '.glsl';
	                break;
	            case 'json':
	                extension = '.json';
	                break;
	        }

	        var data = {
	            xtype: 'container',
	            parent: container.dom,
	            children: [{
	                xtype: 'text',
	                text: name + extension,
	                style: {
	                    width: '100px',
	                    fontSize: '12px'
	                }
	            }, {
	                xtype: 'button',
	                text: L_EDIT,
	                style: {
	                    marginLeft: '4px'
	                },
	                onClick: () => {
	                    this.editScript(uuid);
	                }
	            }, {
	                xtype: 'button',
	                text: L_DELETE,
	                style: {
	                    marginLeft: '4px'
	                },
	                onClick: () => {
	                    this.deleteScript(uuid);
	                }
	            }, {
	                xtype: 'br'
	            }]
	        };

	        UI$1.create(data).render();
	    });
	};

	/**
	 * 编辑脚本
	 * @param {*} uuid 
	 */
	ScriptPanel.prototype.editScript = function (uuid) {
	    var script = this.app.editor.scripts[uuid];
	    if (script) {
	        this.app.script.open(uuid, script.name, script.type, script.source, script.name, source => {
	            script.source = source;
	        });
	    }
	};

	/**
	 * 删除脚本
	 * @param {*} uuid 
	 */
	ScriptPanel.prototype.deleteScript = function (uuid) {
	    var script = this.app.editor.scripts[uuid];

	    UI$1.confirm(L_CONFIRM, `${L_DELETE} ${script.name}？`, (event, btn) => {
	        if (btn === 'ok') {
	            delete this.app.editor.scripts[uuid];
	            this.app.call('scriptChanged', this);
	        }
	    });
	};

	/**
	 * 侧边栏2
	 * @author mrdoob / http://mrdoob.com/
	 * @author tengge / https://github.com/tengge1
	 */
	function Sidebar$1(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}
	Sidebar$1.prototype = Object.create(UI$1.Control.prototype);
	Sidebar$1.prototype.constructor = Sidebar$1;

	Sidebar$1.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        cls: 'sidebar lsidebar',
	        parent: this.parent,
	        children: [{
	            xtype: 'div',
	            cls: 'tabs',
	            children: [{
	                xtype: 'text',
	                text: L_HIERACHY,
	                cls: 'selected'
	            }]
	        },
	        new HierachyPanel({ app: this.app }), // 场景面板
	        {
	            xtype: 'div',
	            cls: 'tabs',
	            children: [{
	                xtype: 'text',
	                text: L_SCRIPT,
	                cls: 'selected'
	            }]
	        },
	        new ScriptPanel({ app: this.app }), // 脚本面板
	        ]
	    };

	    var control = UI$1.create(data);
	    control.render();
	};

	var ID$b = -1;

	const STOP = 0;
	const PLAY = 1;
	const PAUSE = 2;

	/**
	 * 时间面板
	 * @author tengge / https://github.com/tengge1
	 */
	function TimePanel(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;

	    this.status = STOP;
	    this.sliderLeft = 0;
	    this.speed = 4;
	}
	TimePanel.prototype = Object.create(UI$1.Control.prototype);
	TimePanel.prototype.constructor = TimePanel;

	TimePanel.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        cls: 'animation-panel',
	        children: [{
	            xtype: 'div',
	            cls: 'controls',
	            children: [{
	                xtype: 'iconbutton',
	                icon: 'icon-add',
	                onClick: this.onAddLayer.bind(this)
	            }, {
	                xtype: 'iconbutton',
	                icon: 'icon-delete',
	                onClick: this.onRemoveLayer.bind(this)
	            }, {
	                xtype: 'div',
	                style: {
	                    width: '2px',
	                    height: '20px',
	                    borderLeft: '1px solid #aaa',
	                    borderRight: '1px solid #aaa',
	                    boxSizing: 'border-box',
	                    margin: '5px 8px'
	                }
	            }, {
	                xtype: 'iconbutton',
	                icon: 'icon-backward',
	                onClick: this.onBackward.bind(this)
	            }, {
	                xtype: 'iconbutton',
	                id: 'btnPlay',
	                scope: this.id,
	                icon: 'icon-play',
	                onClick: this.onPlay.bind(this)
	            }, {
	                xtype: 'iconbutton',
	                id: 'btnPause',
	                scope: this.id,
	                icon: 'icon-pause',
	                style: {
	                    display: 'none'
	                },
	                onClick: this.onPause.bind(this)
	            }, {
	                xtype: 'iconbutton',
	                icon: 'icon-forward',
	                onClick: this.onForward.bind(this)
	            }, {
	                xtype: 'iconbutton',
	                icon: 'icon-stop',
	                onClick: this.onStop.bind(this)
	            }, {
	                xtype: 'text',
	                id: 'time',
	                scope: this.id,
	                style: {
	                    marginLeft: '8px',
	                    color: '#555',
	                    fontSize: '12px'
	                },
	                text: '00:00'
	            }, {
	                xtype: 'text',
	                id: 'speed',
	                scope: this.id,
	                style: {
	                    marginLeft: '8px',
	                    color: '#aaa',
	                    fontSize: '12px'
	                },
	                text: 'X 1'
	            }, {
	                xtype: 'toolbarfiller'
	            }, {
	                xtype: 'text',
	                scope: this.id,
	                style: {
	                    marginLeft: '8px',
	                    color: '#aaa',
	                    fontSize: '12px'
	                },
	                text: L_ILLUSTRATE_DOUBLE_CLICK_ADD_ANIM
	            }]
	        }, {
	            xtype: 'div',
	            cls: 'box',
	            children: [{
	                xtype: 'div',
	                cls: 'left-area',
	                id: 'layerInfo',
	                scope: this.id
	            }, {
	                xtype: 'div',
	                cls: 'right-area',
	                children: [{
	                    xtype: 'timeline',
	                    id: 'timeline',
	                    cls: 'timeline',
	                    scope: this.id
	                }, {
	                    xtype: 'div',
	                    cls: 'layers',
	                    id: 'layers',
	                    scope: this.id,
	                    children: []
	                }, {
	                    xtype: 'div',
	                    cls: 'slider',
	                    id: 'slider',
	                    scope: this.id
	                }]
	            }]
	        }]
	    };

	    var control = UI$1.create(data);
	    control.render();

	    this.app.on(`appStarted.${this.id}`, this.onAppStarted.bind(this));
	};

	TimePanel.prototype.onAppStarted = function () {
	    var timeline = UI$1.get('timeline', this.id);
	    var layers = UI$1.get('layers', this.id);

	    timeline.updateUI();
	    layers.dom.style.width = timeline.dom.clientWidth + 'px';

	    layers.dom.addEventListener(`click`, this.onClick.bind(this));
	    layers.dom.addEventListener(`dblclick`, this.onDblClick.bind(this));

	    this.app.on(`animationChanged.${this.id}`, this.updateUI.bind(this));
	    this.app.on(`resetAnimation.${this.id}`, this.onResetAnimation.bind(this));
	    this.app.on(`startAnimation.${this.id}`, this.onPlay.bind(this));
	};

	TimePanel.prototype.updateUI = function () {
	    var animations = this.app.editor.animations;

	    var timeline = UI$1.get('timeline', this.id);
	    var layerInfo = UI$1.get('layerInfo', this.id);
	    var layers = UI$1.get('layers', this.id);

	    while (layerInfo.dom.children.length) {
	        var child = layerInfo.dom.children[0];
	        layerInfo.dom.removeChild(child);
	    }

	    while (layers.dom.children.length) {
	        var child = layers.dom.children[0];
	        child.data = null;
	        layers.dom.removeChild(child);
	    }

	    animations.forEach(n => {
	        // 动画组信息区
	        var layerName = document.createElement('div');
	        layerName.className = 'layer-info';
	        layerName.innerHTML = `<input type="checkbox" data-uuid="${n.uuid}" />${n.layerName || n.name}`; // || n.name兼容旧数据
	        layerInfo.dom.appendChild(layerName);

	        // 动画区
	        var layer = document.createElement('div');
	        layer.className = 'layer';
	        layer.setAttribute('droppable', true);
	        layer.data = n;
	        layer.addEventListener('dragenter', this.onDragEnterLayer.bind(this));
	        layer.addEventListener('dragover', this.onDragOverLayer.bind(this));
	        layer.addEventListener('dragleave', this.onDragLeaveLayer.bind(this));
	        layer.addEventListener('drop', this.onDropLayer.bind(this));
	        layers.dom.appendChild(layer);

	        n.animations.forEach(m => {
	            var item = document.createElement('div');
	            item.data = m;
	            item.className = 'item';
	            item.setAttribute('draggable', true);
	            item.setAttribute('droppable', false);
	            item.style.left = m.beginTime * timeline.scale + 'px';
	            item.style.width = (m.endTime - m.beginTime) * timeline.scale + 'px';
	            item.innerHTML = m.name;
	            item.addEventListener('dragstart', this.onDragStartAnimation.bind(this));
	            item.addEventListener('dragend', this.onDragEndAnimation.bind(this));
	            layer.appendChild(item);
	        });
	    });
	};

	TimePanel.prototype.updateSlider = function () {
	    var timeline = UI$1.get('timeline', this.id);
	    var slider = UI$1.get('slider', this.id);
	    var time = UI$1.get('time', this.id);
	    var speed = UI$1.get('speed', this.id);

	    slider.dom.style.left = this.sliderLeft + 'px';

	    var animationTime = this.sliderLeft / timeline.scale;

	    var minute = ('0' + Math.floor(animationTime / 60)).slice(-2);
	    var second = ('0' + Math.floor(animationTime % 60)).slice(-2);

	    time.setValue(`${minute}:${second}`);

	    if (this.speed >= 4) {
	        speed.dom.innerHTML = `X ${this.speed / 4}`;
	    } else {
	        speed.dom.innerHTML = `X 1/${4 / this.speed}`;
	    }

	    this.app.call('animationTime', this, animationTime);
	};

	TimePanel.prototype.onAnimate = function () {
	    var timeline = UI$1.get('timeline', this.id);
	    this.sliderLeft += this.speed / 4;

	    if (this.sliderLeft >= timeline.dom.clientWidth) {
	        this.sliderLeft = 0;
	    }

	    this.updateSlider();
	};

	TimePanel.prototype.onAddLayer = function () {
	    var animations = this.app.editor.animations;

	    var maxLayer = Math.max.apply(Math, animations.map(n => n.layer));

	    var animation = {
	        id: null,
	        uuid: THREE.Math.generateUUID(),
	        layer: maxLayer + 1,
	        layerName: `${L_ANIM_LAYER}${maxLayer + 2}`,
	        animations: []
	    };
	    this.app.editor.animations.push(animation);
	    this.updateUI();
	};

	TimePanel.prototype.onRemoveLayer = function () {
	    var inputs = document.querySelectorAll('.animation-panel .left-area input:checked');

	    var uuids = [];
	    inputs.forEach(n => {
	        uuids.push(n.getAttribute('data-uuid'));
	    });

	    if (uuids.length === 0) {
	        UI$1.msg(L_CHECK_DELETE_LAYER);
	        return;
	    }

	    var animations = this.app.editor.animations;

	    UI$1.confirm(L_CONFIRM, L_DELETE_LAYER_WILL_DELETE_ANIM, (event, btn) => {
	        if (btn === 'ok') {
	            uuids.forEach(n => {
	                var index = animations.findIndex(m => m.uuid === n);
	                if (index > -1) {
	                    animations.splice(index, 1);
	                }
	            });
	            this.updateUI();
	        }
	    });
	};

	// ----------------------------------- 播放器事件 -------------------------------------------

	TimePanel.prototype.onPlay = function () {
	    if (this.status === PLAY) {
	        return;
	    }
	    this.status = PLAY;

	    UI$1.get('btnPlay', this.id).dom.style.display = 'none';
	    UI$1.get('btnPause', this.id).dom.style.display = '';

	    this.app.on(`animate.${this.id}`, this.onAnimate.bind(this));
	};

	TimePanel.prototype.onPause = function () {
	    if (this.status === PAUSE) {
	        return;
	    }
	    this.status = PAUSE;

	    UI$1.get('btnPlay', this.id).dom.style.display = '';
	    UI$1.get('btnPause', this.id).dom.style.display = 'none';

	    this.app.on(`animate.${this.id}`, null);
	    this.updateSlider();
	};

	TimePanel.prototype.onForward = function () {
	    if (this.speed >= 16) {
	        return;
	    }
	    this.speed *= 2;
	};

	TimePanel.prototype.onBackward = function () {
	    if (this.speed <= 1) {
	        return;
	    }
	    this.speed /= 2;
	};

	TimePanel.prototype.onStop = function () {
	    if (this.status === STOP) {
	        return;
	    }
	    this.status = STOP;

	    UI$1.get('btnPlay', this.id).dom.style.display = '';
	    UI$1.get('btnPause', this.id).dom.style.display = 'none';

	    this.app.on(`animate.${this.id}`, null);
	    this.sliderLeft = 0;
	    this.updateSlider();
	};

	TimePanel.prototype.onResetAnimation = function () {
	    this.onStop();
	    this.speed = 4;
	};

	TimePanel.prototype.onClick = function (event) {
	    if (!event.target.data || !event.target.data.type) {
	        return;
	    }
	    this.app.call('tabSelected', this, 'animation');
	    this.app.call('animationSelected', this, event.target.data);
	};

	TimePanel.prototype.onDblClick = function (event) {
	    var timeline = UI$1.get('timeline', this.id);

	    if (event.target.data && event.target.data.layer !== undefined) {
	        event.stopPropagation();

	        var animation = {
	            id: null,
	            uuid: THREE.Math.generateUUID(),
	            name: `${L_ANIMATION}${ID$b--}`,
	            target: null,
	            type: 'Tween',
	            beginTime: event.offsetX / timeline.scale,
	            endTime: (event.offsetX + 80) / timeline.scale,
	            data: {
	                beginStatus: 'Current', // 开始状态：Current-当前位置、Custom-自定义位置
	                beginPositionX: 0,
	                beginPositionY: 0,
	                beginPositionZ: 0,
	                beginRotationX: 0,
	                beginRotationY: 0,
	                beginRotationZ: 0,
	                beginScaleLock: true,
	                beginScaleX: 1.0,
	                beginScaleY: 1.0,
	                beginScaleZ: 1.0,
	                ease: 'linear', // linear, quadIn, quadOut, quadInOut, cubicIn, cubicOut, cubicInOut, quartIn, quartOut, quartInOut, quintIn, quintOut, quintInOut, sineIn, sineOut, sineInOut, backIn, backOut, backInOut, circIn, circOut, circInOut, bounceIn, bounceOut, bounceInOut, elasticIn, elasticOut, elasticInOut
	                endStatus: 'Current',
	                endPositionX: 0,
	                endPositionY: 0,
	                endPositionZ: 0,
	                endRotationX: 0,
	                endRotationY: 0,
	                endRotationZ: 0,
	                endScaleLock: true,
	                endScaleX: 1.0,
	                endScaleY: 1.0,
	                endScaleZ: 1.0,
	            }
	        };

	        event.target.data.animations.push(animation);
	        this.app.call('animationChanged', this);
	    }
	};

	// ----------------------- 拖动动画事件 ---------------------------------------------

	TimePanel.prototype.onDragStartAnimation = function (event) {
	    event.dataTransfer.setData('uuid', event.target.data.uuid);
	    event.dataTransfer.setData('offsetX', event.offsetX);
	};

	TimePanel.prototype.onDragEndAnimation = function (event) {
	    event.dataTransfer.clearData();
	};

	TimePanel.prototype.onDragEnterLayer = function (event) {
	    event.preventDefault();
	};

	TimePanel.prototype.onDragOverLayer = function (event) {
	    event.preventDefault();
	};

	TimePanel.prototype.onDragLeaveLayer = function (event) {
	    event.preventDefault();
	};

	TimePanel.prototype.onDropLayer = function (event) {
	    event.preventDefault();
	    var uuid = event.dataTransfer.getData('uuid');
	    var offsetX = event.dataTransfer.getData('offsetX');

	    var groups = this.app.editor.animations;
	    var group = null;
	    var animation_index = -1;
	    var animation = null;

	    for (var i = 0; i < groups.length; i++) {
	        var index = groups[i].animations.findIndex(n => n.uuid === uuid);

	        if (index > -1) {
	            group = groups[i];
	            animation_index = index;
	            animation = group.animations[index];
	            break;
	        }
	    }

	    if (!animation) {
	        return;
	    }

	    if (event.target.parentElement.data && event.target.parentElement.data.animations) { // 拖动到其他动画上
	        UI$1.msg('不允许将动画拖动到其他动画上。');
	        return;
	    }

	    group.animations.splice(animation_index, 1);

	    var timeline = UI$1.get('timeline', this.id);

	    var length = animation.endTime - animation.beginTime;

	    if (event.target.data && event.target.data.animations) {
	        animation.beginTime = (event.offsetX - offsetX) / timeline.scale;
	        animation.endTime = animation.beginTime + length;
	        event.target.data.animations.splice(event.target.data.animations.length, 0, animation);
	    }

	    this.updateUI();
	};

	/**
	 * 类别编辑窗口
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function CategoryEditWindow(options = {}) {
	    UI$1.Control.call(this, options);

	    this.app = options.app;

	    this.ID = ''; // ObjectId格式
	    this.Name = '';

	    this.type = options.type || 'Scene';
	    this.callback = options.callback || null; // 保存回调函数
	}

	CategoryEditWindow.prototype = Object.create(UI$1.Control.prototype);
	CategoryEditWindow.prototype.constructor = CategoryEditWindow;

	CategoryEditWindow.prototype.render = function () {
	    var container = UI$1.create({
	        xtype: 'window',
	        id: 'window',
	        scope: this.id,
	        parent: this.parent,
	        title: L_CATEGORY_EDIT,
	        width: '300px',
	        height: '240px',
	        shade: true,
	        bodyStyle: {
	            height: 'calc(100% - 35px)',
	            padding: '24px',
	            boxSizing: 'border-box'
	        },
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_NAME
	            }, {
	                xtype: 'input',
	                id: 'name',
	                scope: this.id
	            }]
	        }, {
	            xtype: 'row',
	            style: {
	                justifyContent: 'center',
	                marginTop: '8px'
	            },
	            children: [{
	                xtype: 'button',
	                text: L_OK,
	                style: {
	                    margin: '0 8px'
	                },
	                onClick: this.onSave.bind(this)
	            }, {
	                xtype: 'button',
	                text: L_CANCEL,
	                style: {
	                    margin: '0 8px'
	                },
	                onClick: this.onCancel.bind(this)
	            }]
	        }]
	    });
	    container.render();
	};

	CategoryEditWindow.prototype.setData = function (data) {
	    this.ID = data.ID;
	    this.Name = data.Name;

	    var name = UI$1.get('name', this.id);
	    name.setValue(this.Name);
	};

	CategoryEditWindow.prototype.show = function () {
	    UI$1.get('window', this.id).show();
	};

	CategoryEditWindow.prototype.hide = function () {
	    UI$1.get('window', this.id).hide();
	};

	CategoryEditWindow.prototype.onSave = function () {
	    this.Name = UI$1.get('name', this.id).getValue();
	    var body = new FormData();
	    body.append('ID', this.ID);
	    body.append('Name', this.Name);

	    Ajax.post(`${this.app.options.server}/api/Category/Save`, {
	        ID: this.ID,
	        Name: this.Name,
	        Type: this.type
	    }, result => {
	        var json = JSON.parse(result);
	        if (json.Code === 200) {
	            this.hide();
	        }

	        if (typeof (this.callback) === 'function') {
	            this.callback();
	        }

	        UI$1.msg(json.Msg);
	    });
	};

	CategoryEditWindow.prototype.onCancel = function () {
	    this.hide();
	};

	/**
	 * 类别列表窗口
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function CategoryListWindow(options = {}) {
	    UI$1.Control.call(this, options);

	    this.app = options.app;
	    this.type = options.type || 'Scene'; // 类型类型：Scene, Model, Map, Texture, Audio, Particle
	    this.title = options.title || L_CATEGORY_LIST;
	}

	CategoryListWindow.prototype = Object.create(UI$1.Control.prototype);
	CategoryListWindow.prototype.constructor = CategoryListWindow;

	CategoryListWindow.prototype.render = function () {
	    var container = UI$1.create({
	        xtype: 'window',
	        id: 'window',
	        scope: this.id,
	        parent: this.parent,
	        title: this.title,
	        width: '500px',
	        height: '400px',
	        shade: true,
	        bodyStyle: {
	            padding: 0,
	            display: 'flex',
	            flexDirection: 'column',
	            border: 'none'
	        },
	        children: [{
	            xtype: 'row',
	            style: {
	                position: 'sticky',
	                top: 0,
	                padding: '2px',
	                boxSizing: 'border-box',
	                backgroundColor: '#eee',
	                zIndex: 500
	            },
	            children: [{
	                xtype: 'button',
	                text: L_ADD,
	                onClick: this.addCategory.bind(this)
	            }, {
	                xtype: 'button',
	                text: L_EDIT,
	                onClick: this.editCategory.bind(this)
	            }, {
	                xtype: 'button',
	                text: L_DELETE,
	                onClick: this.deleteCategory.bind(this)
	            }]
	        }, {
	            xtype: 'datatable',
	            id: 'list',
	            scope: this.id,
	            cols: [{
	                field: 'Name',
	                title: L_NAME
	            }],
	            style: {
	                width: '100%',
	                height: 'calc(100% - 35px)',
	                padding: '0',
	                boxSizing: 'border-box'
	            }
	        }]
	    });
	    container.render();
	};

	CategoryListWindow.prototype.show = function () {
	    UI$1.get('window', this.id).show();

	    this.update();
	};

	CategoryListWindow.prototype.hide = function () {
	    UI$1.get('window', this.id).hide();
	};

	CategoryListWindow.prototype.update = function () {
	    var list = UI$1.get('list', this.id);

	    list.clear();

	    Ajax.getJson(`/api/Category/List?Type=${this.type}`, json => {
	        list.rows = json.Data;
	        list.reload();
	    });
	};

	CategoryListWindow.prototype.createEditWin = function () {
	    if (this.editWin === undefined) {
	        this.editWin = new CategoryEditWindow({
	            app: this.app,
	            type: this.type,
	            callback: this.update.bind(this)
	        });
	        this.editWin.render();
	    }
	};

	CategoryListWindow.prototype.addCategory = function () {
	    this.createEditWin();

	    this.editWin.setData({
	        ID: '',
	        Name: ''
	    });

	    this.editWin.show();
	};

	CategoryListWindow.prototype.editCategory = function () {
	    this.createEditWin();

	    var list = UI$1.get('list', this.id);
	    var selected = list.getSelected();

	    if (selected == null) {
	        UI$1.msg(L_PLEASE_SELECT_CATEGORY);
	        return;
	    }

	    this.editWin.setData({
	        ID: selected.ID,
	        Name: selected.Name
	    });

	    this.editWin.show();
	};

	CategoryListWindow.prototype.deleteCategory = function () {
	    var list = UI$1.get('list', this.id);
	    var selected = list.getSelected();

	    if (selected == null) {
	        UI$1.msg(L_PLEASE_SELECT_CATEGORY);
	        return;
	    }

	    UI$1.confirm(L_CONFIRM, `${L_DELETE} ${selected.Name}?`, (event, btn) => {
	        if (btn === 'ok') {
	            Ajax.post(`/api/Category/Delete?ID=${selected.ID}`, result => {
	                var obj = JSON.parse(result);
	                if (obj.Code === 200) {
	                    this.update();
	                }
	                UI$1.msg(L_DELETE_SUCCESS);
	            });
	        }
	    });
	};

	/**
	 * 编辑窗口
	 * @author tengge / https://github.com/tengge1
	 * @param {*} options 
	 */
	function EditWindow(options = {}) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;

	    this.type = options.type || 'Scene'; // Scene, Mesh, Map, Texture, Material, Audio, Particle
	    this.typeName = options.typeName || L_SCENE;
	    this.saveUrl = options.saveUrl || `${this.app.options.server}/api/Scene/Edit`;
	    this.callback = options.callback || null;
	}

	EditWindow.prototype = Object.create(UI$1.Control.prototype);
	EditWindow.prototype.constructor = EditWindow;

	EditWindow.prototype.render = function () {
	    var container = UI$1.create({
	        xtype: 'window',
	        id: 'window',
	        scope: this.id,
	        parent: this.parent,
	        title: `编辑${this.typeName}`,
	        width: '320px',
	        height: '280px',
	        shade: true,
	        children: [{
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_NAME
	            }, {
	                xtype: 'input',
	                id: 'name',
	                scope: this.id
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_TYPE
	            }, {
	                xtype: 'select',
	                id: 'category',
	                scope: this.id
	            }, {
	                xtype: 'button',
	                id: 'btnEditType',
	                scope: this.id,
	                text: L_EDIT,
	                style: {
	                    position: 'absolute',
	                    right: 0,
	                    marginRight: '24px'
	                },
	                onClick: this.onEditCategory.bind(this)
	            }]
	        }, {
	            xtype: 'row',
	            children: [{
	                xtype: 'label',
	                text: L_THUMBNAIL
	            }, {
	                xtype: 'imageuploader',
	                id: 'image',
	                scope: this.id,
	                server: this.app.options.server
	            }]
	        }, {
	            xtype: 'row',
	            style: {
	                justifyContent: 'center',
	                marginTop: '8px'
	            },
	            children: [{
	                xtype: 'button',
	                text: L_OK,
	                style: {
	                    margin: '0 8px'
	                },
	                onClick: this.save.bind(this)
	            }, {
	                xtype: 'button',
	                text: L_CANCEL,
	                style: {
	                    margin: '0 8px'
	                },
	                onClick: this.hide.bind(this)
	            }]
	        }]
	    });
	    container.render();
	};

	EditWindow.prototype.show = function () {
	    UI$1.get('window', this.id).show();
	};

	EditWindow.prototype.hide = function () {
	    UI$1.get('window', this.id).hide();
	};

	EditWindow.prototype.setData = function (data) {
	    this.data = data;
	    this.updateUI();
	};

	EditWindow.prototype.updateUI = function () {
	    if (this.data === undefined) {
	        return;
	    }

	    var name = UI$1.get('name', this.id);
	    var image = UI$1.get('image', this.id);
	    name.setValue(this.data.Name);
	    image.setValue(this.data.Thumbnail);

	    var category = UI$1.get('category', this.id);
	    category.clear();

	    Ajax.getJson(`/api/Category/List?Type=${this.type}`, json => {
	        var options = {
	            '': L_NOT_SET
	        };
	        json.Data.forEach(n => {
	            options[n.ID] = n.Name;
	        });
	        category.options = options;
	        category.value = this.data.CategoryID;
	        category.render();
	    });
	};

	EditWindow.prototype.save = function () {
	    if (!this.data) {
	        return;
	    }

	    var name = UI$1.get('name', this.id);
	    var category = UI$1.get('category', this.id);
	    var image = UI$1.get('image', this.id);

	    Ajax.post(this.saveUrl, {
	        ID: this.data.ID,
	        Name: name.getValue(),
	        Category: category.getValue(),
	        Image: image.getValue()
	    }, json => {
	        var obj = JSON.parse(json);
	        UI$1.msg(obj.Msg);
	        if (obj.Code === 200) {
	            this.hide();
	            this.callback && this.callback(obj);
	        }
	    });
	};

	// ----------------------------- 类别编辑 ----------------------------------------

	EditWindow.prototype.onEditCategory = function () {
	    if (this.categoryListWin === undefined) {
	        this.categoryListWin = new CategoryListWindow({
	            app: this.app,
	            type: this.type,
	            title: `${L_EDIT} ${this.typeName} ${L_CATEGORY}`,
	        });
	        this.categoryListWin.render();
	    }

	    this.categoryListWin.show();
	};

	/**
	 * 场景面板
	 * @author tengge / https://github.com/tengge1
	 */
	function ScenePanel(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;

	    this.firstShow = true;

	    this.data = [];
	}
	ScenePanel.prototype = Object.create(UI$1.Control.prototype);
	ScenePanel.prototype.constructor = ScenePanel;

	ScenePanel.prototype.render = function () {
	    this.app.on(`showBottomPanel.${this.id}`, this.onShowPanel.bind(this));
	};

	ScenePanel.prototype.onShowPanel = function (tabName) {
	    if (tabName !== 'scene') {
	        return;
	    }

	    if (this.firstShow) {
	        this.firstShow = false;
	        this.renderUI();
	    }

	    this.update();
	};

	ScenePanel.prototype.renderUI = function () {
	    var control = UI$1.create({
	        xtype: 'div',
	        parent: this.parent,
	        style: {
	            position: 'relative',
	            width: '100%',
	            height: '100%',
	            display: 'flex',
	            flexDirection: 'row',
	        },
	        children: [{
	            xtype: 'div',
	            style: {
	                width: '200px',
	                display: 'flex',
	                flexDirection: 'column',
	                boxSizing: 'border-box',
	                borderRight: '1px solid #ddd',
	            },
	            children: [{
	                xtype: 'div',
	                style: {
	                    display: 'flex'
	                },
	                children: [{
	                    xtype: 'searchfield',
	                    id: 'search',
	                    scope: this.id,
	                    showSearchButton: false,
	                    showResetButton: true,
	                    onInput: this.onSearch.bind(this)
	                }]
	            }, {
	                xtype: 'div',
	                style: {
	                    height: 'calc(100% - 30px)'
	                },
	                children: [{
	                    xtype: 'category',
	                    id: 'category',
	                    scope: this.id,
	                    onChange: this.onSearch.bind(this)
	                }]
	            }]
	        }, {
	            xtype: 'div',
	            style: {
	                width: '100%',
	                height: '100%',
	                flex: 1,
	                overflow: 'auto'
	            },
	            children: [{
	                xtype: 'imagelist',
	                id: 'images',
	                scope: this.id,
	                style: {
	                    width: '100%',
	                    maxHeight: '100%',
	                },
	                onClick: this.onClick.bind(this)
	            }]
	        }]
	    });

	    control.render();

	    this.app.on(`sceneSaved.${this.id}`, this.update.bind(this));
	};

	ScenePanel.prototype.update = function () {
	    this.updateCategory();
	    this.updateList();
	};

	ScenePanel.prototype.updateCategory = function () {
	    var category = UI$1.get('category', this.id);
	    category.clear();

	    Ajax.getJson(`/api/Category/List?type=Scene`, obj => {
	        category.options = {};
	        obj.Data.forEach(n => {
	            category.options[n.ID] = n.Name;
	        });
	        category.render();
	    });
	};

	ScenePanel.prototype.updateList = function () {
	    var search = UI$1.get('search', this.id);

	    Ajax.getJson(`/api/Scene/List`, obj => {
	        this.data = obj.Data;
	        search.setValue('');
	        this.onSearch();
	    });
	};

	ScenePanel.prototype.onSearch = function () {
	    var search = UI$1.get('search', this.id);
	    var category = UI$1.get('category', this.id);

	    var name = search.getValue();
	    var categories = category.getValue();

	    var list = this.data;

	    if (name.trim() !== '') {
	        name = name.toLowerCase();

	        list = list.filter(n => {
	            return n.Name.indexOf(name) > -1 ||
	                n.FirstPinYin.indexOf(name) > -1 ||
	                n.TotalPinYin.indexOf(name) > -1;
	        });
	    }

	    if (categories.length > 0) {
	        list = list.filter(n => {
	            return categories.indexOf(n.CategoryID) > -1;
	        });
	    }

	    this.renderList(list);
	};

	ScenePanel.prototype.renderList = function (list) {
	    var images = UI$1.get('images', this.id);
	    images.clear();

	    images.children = list.map(n => {
	        return {
	            xtype: 'image',
	            src: n.Thumbnail ? n.Thumbnail : null,
	            title: n.Name,
	            data: n,
	            icon: 'icon-scenes',
	            cornerText: `v${n.Version}`,
	            style: {
	                backgroundColor: '#eee'
	            }
	        };
	    });

	    images.render();
	};

	ScenePanel.prototype.onClick = function (event, index, btn, control) {
	    var data = control.children[index].data;

	    if (btn === 'edit') {
	        if (typeof (this.onEdit) === 'function') {
	            this.onEdit(data);
	        }
	    } else if (btn === 'delete') {
	        if (typeof (this.onDelete) === 'function') {
	            this.onDelete(data);
	        }
	    } else {
	        if (typeof (this.onClick) === 'function') {
	            this.onLoad(data);
	        }
	    }
	};

	// ------------------------------------- 加载场景 ------------------------------------

	ScenePanel.prototype.onLoad = function (data) {
	    var app = this.app;
	    var editor = app.editor;
	    var server = app.options.server;
	    document.title = data.Name;

	    Ajax.get(`${server}/api/Scene/Load?ID=${data.ID}`, (json) => {
	        var obj = JSON.parse(json);

	        editor.clear(false);

	        (new Converter()).fromJson(obj.Data, {
	            server: this.app.options.server,
	            camera: this.app.editor.camera
	        }).then(obj => {
	            this.onLoadScene(obj);

	            editor.sceneID = data.ID;
	            editor.sceneName = data.Name;
	            document.title = data.Name;

	            if (obj.options) {
	                this.app.call('optionsChanged', this, this.app.options);

	                if (obj.options.sceneType === 'GIS') {
	                    if (this.app.editor.gis) {
	                        this.app.editor.gis.stop();
	                    }
	                    this.app.editor.gis = new Scene(this.app);
	                    this.app.editor.gis.start();
	                }
	            }

	            if (obj.scripts) {
	                this.app.call('scriptChanged', this);
	            }

	            if (obj.scene) {
	                this.app.call('sceneGraphChanged', this);
	            }

	            UI$1.msg(L_LOAD_SUCCESS);
	        });
	    });
	};

	ScenePanel.prototype.onLoadScene = function (obj) {
	    if (obj.options) {
	        Object.assign(this.app.options, obj.options);
	    }

	    if (obj.camera) {
	        this.app.editor.camera.copy(obj.camera);

	        this.app.editor.camera.children.forEach(n => {
	            if (n instanceof THREE.AudioListener) {
	                this.app.editor.camera.remove(n);
	            }
	        });

	        var audioListener = obj.camera.children.filter(n => n instanceof THREE.AudioListener)[0];
	        if (audioListener) {
	            this.app.editor.audioListener = audioListener;
	            this.app.editor.camera.add(audioListener);
	        }
	    }

	    if (obj.renderer) {
	        var viewport = this.app.viewport.container.dom;
	        var oldRenderer = this.app.editor.renderer;

	        viewport.removeChild(oldRenderer.domElement);
	        viewport.appendChild(obj.renderer.domElement);
	        this.app.editor.renderer = obj.renderer;
	        this.app.editor.renderer.setSize(viewport.offsetWidth, viewport.offsetHeight);
	        this.app.call('resize', this);
	    }

	    if (obj.scripts) {
	        Object.assign(this.app.editor.scripts, obj.scripts);
	    }

	    if (obj.animations) {
	        Object.assign(this.app.editor.animations, obj.animations);
	    } else {
	        this.app.editor.animations = [{
	            id: null,
	            uuid: THREE.Math.generateUUID(),
	            layer: 0,
	            layerName: L_ANIMATION_LAYER_1,
	            animations: []
	        }, {
	            id: null,
	            uuid: THREE.Math.generateUUID(),
	            layer: 1,
	            layerName: L_ANIMATION_LAYER_2,
	            animations: []
	        }, {
	            id: null,
	            uuid: THREE.Math.generateUUID(),
	            layer: 2,
	            layerName: L_ANIMATION_LAYER_3,
	            animations: []
	        }];
	    }

	    if (obj.scene) {
	        this.app.editor.setScene(obj.scene);
	    }

	    this.app.editor.camera.updateProjectionMatrix();

	    if (obj.options.selected) {
	        var obj = this.app.editor.objectByUuid(obj.options.selected);
	        if (obj) {
	            this.app.editor.select(obj);
	        }
	    }

	    this.app.call('sceneLoaded', this);
	    this.app.call('animationChanged', this);
	};

	// ------------------------------- 编辑场景 ---------------------------------------

	ScenePanel.prototype.onEdit = function (data) {
	    if (this.editWindow === undefined) {
	        this.editWindow = new EditWindow({
	            app: this.app,
	            parent: document.body,
	            type: 'Scene',
	            typeName: L_SCENE,
	            saveUrl: `${this.app.options.server}/api/Scene/Edit`,
	            callback: this.updateList.bind(this)
	        });
	        this.editWindow.render();
	    }
	    this.editWindow.setData(data);
	    this.editWindow.show();
	};

	// ------------------------------ 删除场景 ----------------------------------------

	ScenePanel.prototype.onDelete = function (data) {
	    var server = this.app.options.server;

	    UI$1.confirm(L_CONFIRM, `${L_DELETE} ${data.Name}?`, (event, btn) => {
	        if (btn === 'ok') {
	            Ajax.post(`${server}/api/Scene/Delete?ID=${data.ID}`, json => {
	                var obj = JSON.parse(json);
	                if (obj.Code === 200) {
	                    this.update();
	                }
	                UI$1.msg(obj.Msg);
	            });
	        }
	    });
	};

	/**
	 * 模型面板
	 * @author tengge / https://github.com/tengge1
	 */
	function ModelPanel(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;

	    this.firstShow = true;

	    this.data = [];
	}
	ModelPanel.prototype = Object.create(UI$1.Control.prototype);
	ModelPanel.prototype.constructor = ModelPanel;

	ModelPanel.prototype.render = function () {
	    this.app.on(`showBottomPanel.${this.id}`, this.onShowPanel.bind(this));
	};

	ModelPanel.prototype.onShowPanel = function (tabName) {
	    if (tabName !== 'model') {
	        return;
	    }

	    if (this.firstShow) {
	        this.firstShow = false;
	        this.renderUI();
	    }

	    this.update();
	};

	ModelPanel.prototype.renderUI = function () {
	    var control = UI$1.create({
	        xtype: 'div',
	        parent: this.parent,
	        style: {
	            position: 'relative',
	            width: '100%',
	            height: '100%',
	            display: 'flex',
	            flexDirection: 'row',
	        },
	        children: [{
	            xtype: 'div',
	            style: {
	                width: '200px',
	                display: 'flex',
	                flexDirection: 'column',
	                boxSizing: 'border-box',
	                borderRight: '1px solid #ddd',
	            },
	            children: [{
	                xtype: 'div',
	                style: {
	                    display: 'flex'
	                },
	                children: [{
	                    xtype: 'iconbutton',
	                    icon: 'icon-upload',
	                    title: L_UPLOAD,
	                    style: {
	                        padding: '2px'
	                    },
	                    onClick: this.onUpload.bind(this)
	                }, {
	                    xtype: 'searchfield',
	                    id: 'search',
	                    scope: this.id,
	                    showSearchButton: false,
	                    showResetButton: true,
	                    onInput: this.onSearch.bind(this)
	                }]
	            }, {
	                xtype: 'div',
	                style: {
	                    height: 'calc(100% - 30px)'
	                },
	                children: [{
	                    xtype: 'category',
	                    id: 'category',
	                    scope: this.id,
	                    onChange: this.onSearch.bind(this)
	                }]
	            }]
	        }, {
	            xtype: 'div',
	            style: {
	                width: '100%',
	                height: '100%',
	                flex: 1,
	                overflow: 'auto'
	            },
	            children: [{
	                xtype: 'imagelist',
	                id: 'images',
	                scope: this.id,
	                style: {
	                    width: '100%',
	                    maxHeight: '100%',
	                },
	                onClick: this.onClick.bind(this)
	            }]
	        }]
	    });

	    control.render();
	};

	ModelPanel.prototype.update = function () {
	    this.updateCategory();
	    this.updateList();
	};

	ModelPanel.prototype.updateCategory = function () {
	    var category = UI$1.get('category', this.id);
	    category.clear();

	    Ajax.getJson(`/api/Category/List?type=Mesh`, obj => {
	        category.options = {};
	        obj.Data.forEach(n => {
	            category.options[n.ID] = n.Name;
	        });
	        category.render();
	    });
	};

	ModelPanel.prototype.updateList = function () {
	    var search = UI$1.get('search', this.id);

	    Ajax.getJson(`/api/Mesh/List`, obj => {
	        this.data = obj.Data;
	        search.setValue('');
	        this.onSearch();
	    });
	};

	ModelPanel.prototype.onSearch = function () {
	    var search = UI$1.get('search', this.id);
	    var category = UI$1.get('category', this.id);

	    var name = search.getValue();
	    var categories = category.getValue();

	    var list = this.data;

	    if (name.trim() !== '') {
	        name = name.toLowerCase();

	        list = list.filter(n => {
	            return n.Name.indexOf(name) > -1 ||
	                n.FirstPinYin.indexOf(name) > -1 ||
	                n.TotalPinYin.indexOf(name) > -1;
	        });
	    }

	    if (categories.length > 0) {
	        list = list.filter(n => {
	            return categories.indexOf(n.CategoryID) > -1;
	        });
	    }

	    this.renderList(list);
	};

	ModelPanel.prototype.renderList = function (list) {
	    var images = UI$1.get('images', this.id);
	    images.clear();

	    images.children = list.map(n => {
	        return {
	            xtype: 'image',
	            src: n.Thumbnail ? n.Thumbnail : null,
	            title: n.Name,
	            data: n,
	            icon: 'icon-model',
	            cornerText: n.Type,
	            style: {
	                backgroundColor: '#eee'
	            }
	        };
	    });
	    images.render();
	};

	ModelPanel.prototype.onClick = function (event, index, btn, control) {
	    var data = control.children[index].data;

	    if (btn === 'edit') {
	        if (typeof (this.onEdit) === 'function') {
	            this.onEdit(data);
	        }
	    } else if (btn === 'delete') {
	        if (typeof (this.onDelete) === 'function') {
	            this.onDelete(data);
	        }
	    } else {
	        if (typeof (this.onClick) === 'function') {
	            this.onAddMesh(data);
	        }
	    }
	};

	// ------------------------------------- 添加 ------------------------------------

	ModelPanel.prototype.onAddMesh = function (model) {
	    var loader = new ModelLoader(this.app);

	    var url = model.Url;

	    if (model.Url.indexOf(';') > -1) { // 包含多个入口文件
	        url = url.split(';').map(n => this.app.options.server + n);
	    } else {
	        url = this.app.options.server + model.Url;
	    }

	    loader.load(url, model, {
	        camera: this.app.editor.camera,
	        renderer: this.app.editor.renderer,
	        audioListener: this.app.editor.audioListener
	    }).then(obj => {
	        if (!obj) {
	            return;
	        }
	        obj.name = model.Name;

	        Object.assign(obj.userData, model, {
	            Server: true
	        });

	        var cmd = new AddObjectCommand(obj);
	        cmd.execute();

	        if (obj.userData.scripts) {
	            obj.userData.scripts.forEach(n => {
	                this.app.editor.scripts[n.uuid] = n;
	            });
	            this.app.call('scriptChanged', this);
	        }
	    });
	};

	// ----------------------------------- 上传 ----------------------------------------

	ModelPanel.prototype.onUpload = function () {
	    if (this.input === undefined) {
	        this.input = document.createElement('input');
	        this.input.id = `file_${this.id}`;
	        this.input.type = 'file';
	        this.input.style.display = 'none';
	        this.input.addEventListener('change', this.onCommitUpload.bind(this));
	        document.body.appendChild(this.input);
	    }

	    this.input.value = null;
	    this.input.click();
	};

	ModelPanel.prototype.onCommitUpload = function () {
	    UploadUtils.upload(`file_${this.id}`, `/api/Mesh/Add`, event => {
	        if (event.target.status === 200) {
	            var response = event.target.response;
	            var obj = JSON.parse(response);
	            UI$1.msg(obj.Msg);
	            if (obj.Code === 200) {
	                this.updateList();
	            }
	        } else {
	            UI$1.msg(L_UPLOAD_FAILED);
	        }
	    }, () => {
	        UI$1.msg(L_UPLOAD_FAILED);
	    });
	};

	// ------------------------------- 编辑 ---------------------------------------

	ModelPanel.prototype.onEdit = function (data) {
	    if (this.editWindow === undefined) {
	        this.editWindow = new EditWindow({
	            app: this.app,
	            parent: document.body,
	            type: 'Mesh',
	            typeName: L_MODEL,
	            saveUrl: `${this.app.options.server}/api/Mesh/Edit`,
	            callback: this.updateList.bind(this)
	        });
	        this.editWindow.render();
	    }
	    this.editWindow.setData(data);
	    this.editWindow.show();
	};

	// -------------------------------- 删除 ----------------------------------------

	ModelPanel.prototype.onDelete = function (data) {
	    UI$1.confirm(L_CONFIRM, `${L_DELETE}${data.Name}?`, (event, btn) => {
	        if (btn === 'ok') {
	            Ajax.post(`/api/Mesh/Delete?ID=${data.ID}`, json => {
	                var obj = JSON.parse(json);
	                if (obj.Code === 200) {
	                    this.update();
	                }
	                UI$1.msg(obj.Msg);
	            });
	        }
	    });
	};

	/**
	 * 贴图面板
	 * @author tengge / https://github.com/tengge1
	 */
	function MapPanel(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;

	    this.firstShow = true;

	    this.data = [];
	}
	MapPanel.prototype = Object.create(UI$1.Control.prototype);
	MapPanel.prototype.constructor = MapPanel;

	MapPanel.prototype.render = function () {
	    this.app.on(`showBottomPanel.${this.id}`, this.onShowPanel.bind(this));
	};

	MapPanel.prototype.onShowPanel = function (tabName) {
	    if (tabName !== 'map') {
	        return;
	    }

	    if (this.firstShow) {
	        this.firstShow = false;
	        this.renderUI();
	    }

	    this.update();
	};

	MapPanel.prototype.renderUI = function () {
	    var control = UI$1.create({
	        xtype: 'div',
	        parent: this.parent,
	        style: {
	            position: 'relative',
	            width: '100%',
	            height: '100%',
	            display: 'flex',
	            flexDirection: 'row',
	        },
	        children: [{
	            xtype: 'div',
	            style: {
	                width: '200px',
	                display: 'flex',
	                flexDirection: 'column',
	                boxSizing: 'border-box',
	                borderRight: '1px solid #ddd',
	            },
	            children: [{
	                xtype: 'div',
	                style: {
	                    display: 'flex'
	                },
	                children: [{
	                    xtype: 'iconbutton',
	                    icon: 'icon-upload',
	                    title: L_UPLOAD,
	                    style: {
	                        padding: '2px'
	                    },
	                    onClick: this.onUpload.bind(this)
	                }, {
	                    xtype: 'searchfield',
	                    id: 'search',
	                    scope: this.id,
	                    showSearchButton: false,
	                    showResetButton: true,
	                    onInput: this.onSearch.bind(this)
	                }]
	            }, {
	                xtype: 'div',
	                style: {
	                    height: 'calc(100% - 30px)'
	                },
	                children: [{
	                    xtype: 'category',
	                    id: 'category',
	                    scope: this.id,
	                    onChange: this.onSearch.bind(this)
	                }]
	            }]
	        }, {
	            xtype: 'div',
	            style: {
	                width: '100%',
	                height: '100%',
	                flex: 1,
	                overflow: 'auto'
	            },
	            children: [{
	                xtype: 'imagelist',
	                id: 'images',
	                scope: this.id,
	                style: {
	                    width: '100%',
	                    maxHeight: '100%',
	                },
	                onClick: this.onClick.bind(this)
	            }]
	        }]
	    });

	    control.render();
	};

	MapPanel.prototype.update = function () {
	    this.updateCategory();
	    this.updateList();
	};

	MapPanel.prototype.updateCategory = function () {
	    var category = UI$1.get('category', this.id);
	    category.clear();

	    Ajax.getJson(`/api/Category/List?type=Map`, obj => {
	        category.options = {};
	        obj.Data.forEach(n => {
	            category.options[n.ID] = n.Name;
	        });
	        category.render();
	    });
	};

	MapPanel.prototype.updateList = function () {
	    var search = UI$1.get('search', this.id);

	    Ajax.getJson(`/api/Map/List`, obj => {
	        this.data = obj.Data;
	        search.setValue('');
	        this.onSearch();
	    });
	};

	MapPanel.prototype.onSearch = function () {
	    var search = UI$1.get('search', this.id);
	    var category = UI$1.get('category', this.id);

	    var name = search.getValue();
	    var categories = category.getValue();

	    var list = this.data;

	    if (name.trim() !== '') {
	        name = name.toLowerCase();

	        list = list.filter(n => {
	            return n.Name.indexOf(name) > -1 ||
	                n.FirstPinYin.indexOf(name) > -1 ||
	                n.TotalPinYin.indexOf(name) > -1;
	        });
	    }

	    if (categories.length > 0) {
	        list = list.filter(n => {
	            return categories.indexOf(n.CategoryID) > -1;
	        });
	    }

	    this.renderList(list);
	};

	MapPanel.prototype.renderList = function (list) {
	    var images = UI$1.get('images', this.id);
	    images.clear();

	    images.children = list.map(n => {
	        return {
	            xtype: 'image',
	            src: n.Thumbnail ? n.Thumbnail : null,
	            title: n.Name,
	            data: n,
	            icon: 'icon-scenes',
	            // cornerText: n.Type,
	            style: {
	                backgroundColor: '#eee'
	            }
	        };
	    });
	    images.render();
	};

	MapPanel.prototype.onClick = function (event, index, btn, control) {
	    var data = control.children[index].data;

	    if (btn === 'edit') {
	        if (typeof (this.onEdit) === 'function') {
	            this.onEdit(data);
	        }
	    } else if (btn === 'delete') {
	        if (typeof (this.onDelete) === 'function') {
	            this.onDelete(data);
	        }
	    } else {
	        if (typeof (this.onClick) === 'function') {
	            this.onAddMap(data);
	        }
	    }
	};

	// ------------------------------------- 添加 ------------------------------------

	MapPanel.prototype.onAddMap = function (data) {
	    this.app.call(`selectMap`, this, data);
	};

	// ----------------------------------- 上传 ----------------------------------------

	MapPanel.prototype.onUpload = function () {
	    if (this.input === undefined) {
	        this.input = document.createElement('input');
	        this.input.id = `file_${this.id}`;
	        this.input.type = 'file';
	        this.input.style.display = 'none';
	        this.input.addEventListener('change', this.onCommitUpload.bind(this));
	        document.body.appendChild(this.input);
	    }

	    this.input.value = null;
	    this.input.click();
	};

	MapPanel.prototype.onCommitUpload = function () {
	    UploadUtils.upload(`file_${this.id}`, `/api/Map/Add`, event => {
	        if (event.target.status === 200) {
	            var response = event.target.response;
	            var obj = JSON.parse(response);
	            UI$1.msg(obj.Msg);
	            if (obj.Code === 200) {
	                this.updateList();
	            }
	        } else {
	            UI$1.msg(L_UPLOAD_FAILED);
	        }
	    }, () => {
	        UI$1.msg(L_UPLOAD_FAILED);
	    });
	};

	// ------------------------------- 编辑 ---------------------------------------

	MapPanel.prototype.onEdit = function (data) {
	    if (this.editWindow === undefined) {
	        this.editWindow = new EditWindow({
	            app: this.app,
	            parent: document.body,
	            type: 'Map',
	            typeName: L_MAP,
	            saveUrl: `${this.app.options.server}/api/Map/Edit`,
	            callback: this.updateList.bind(this)
	        });
	        this.editWindow.render();
	    }
	    this.editWindow.setData(data);
	    this.editWindow.show();
	};

	// -------------------------------- 删除 ----------------------------------------

	MapPanel.prototype.onDelete = function (data) {
	    UI$1.confirm(L_CONFIRM, `${L_DELETE}${data.Name}?`, (event, btn) => {
	        if (btn === 'ok') {
	            Ajax.post(`/api/Map/Delete?ID=${data.ID}`, json => {
	                var obj = JSON.parse(json);
	                if (obj.Code === 200) {
	                    this.update();
	                }
	                UI$1.msg(obj.Msg);
	            });
	        }
	    });
	};

	/**
	 * 材质面板
	 * @author tengge / https://github.com/tengge1
	 */
	function MaterialPanel(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;

	    this.firstShow = true;

	    this.data = [];
	}
	MaterialPanel.prototype = Object.create(UI$1.Control.prototype);
	MaterialPanel.prototype.constructor = MaterialPanel;

	MaterialPanel.prototype.render = function () {
	    this.app.on(`showBottomPanel.${this.id}`, this.onShowPanel.bind(this));
	};

	MaterialPanel.prototype.onShowPanel = function (tabName) {
	    if (tabName !== 'material') {
	        return;
	    }

	    if (this.firstShow) {
	        this.firstShow = false;
	        this.renderUI();
	    }

	    this.update();
	};

	MaterialPanel.prototype.renderUI = function () {
	    var control = UI$1.create({
	        xtype: 'div',
	        parent: this.parent,
	        style: {
	            position: 'relative',
	            width: '100%',
	            height: '100%',
	            display: 'flex',
	            flexDirection: 'row',
	        },
	        children: [{
	            xtype: 'div',
	            style: {
	                width: '200px',
	                display: 'flex',
	                flexDirection: 'column',
	                boxSizing: 'border-box',
	                borderRight: '1px solid #ddd',
	            },
	            children: [{
	                xtype: 'div',
	                style: {
	                    display: 'flex'
	                },
	                children: [{
	                    xtype: 'searchfield',
	                    id: 'search',
	                    scope: this.id,
	                    showSearchButton: false,
	                    showResetButton: true,
	                    onInput: this.onSearch.bind(this)
	                }]
	            }, {
	                xtype: 'div',
	                style: {
	                    height: 'calc(100% - 30px)'
	                },
	                children: [{
	                    xtype: 'category',
	                    id: 'category',
	                    scope: this.id,
	                    onChange: this.onSearch.bind(this)
	                }]
	            }]
	        }, {
	            xtype: 'div',
	            style: {
	                width: '100%',
	                height: '100%',
	                flex: 1,
	                overflow: 'auto'
	            },
	            children: [{
	                xtype: 'imagelist',
	                id: 'images',
	                scope: this.id,
	                style: {
	                    width: '100%',
	                    maxHeight: '100%',
	                },
	                onClick: this.onClick.bind(this)
	            }]
	        }]
	    });

	    control.render();
	};

	MaterialPanel.prototype.update = function () {
	    this.updateCategory();
	    this.updateList();
	};

	MaterialPanel.prototype.updateCategory = function () {
	    var category = UI$1.get('category', this.id);
	    category.clear();

	    Ajax.getJson(`/api/Category/List?type=Material`, obj => {
	        category.options = {};
	        obj.Data.forEach(n => {
	            category.options[n.ID] = n.Name;
	        });
	        category.render();
	    });
	};

	MaterialPanel.prototype.updateList = function () {
	    var search = UI$1.get('search', this.id);

	    Ajax.getJson(`/api/Material/List`, obj => {
	        this.data = obj.Data;
	        search.setValue('');
	        this.onSearch();
	    });
	};

	MaterialPanel.prototype.onSearch = function () {
	    var search = UI$1.get('search', this.id);
	    var category = UI$1.get('category', this.id);

	    var name = search.getValue();
	    var categories = category.getValue();

	    var list = this.data;

	    if (name.trim() !== '') {
	        name = name.toLowerCase();

	        list = list.filter(n => {
	            return n.Name.indexOf(name) > -1 ||
	                n.FirstPinYin.indexOf(name) > -1 ||
	                n.TotalPinYin.indexOf(name) > -1;
	        });
	    }

	    if (categories.length > 0) {
	        list = list.filter(n => {
	            return categories.indexOf(n.CategoryID) > -1;
	        });
	    }

	    this.renderList(list);
	};

	MaterialPanel.prototype.renderList = function (list) {
	    var images = UI$1.get('images', this.id);
	    images.clear();

	    images.children = list.map(n => {
	        return {
	            xtype: 'image',
	            src: n.Thumbnail ? n.Thumbnail : null,
	            title: n.Name,
	            data: n,
	            icon: 'icon-model',
	            cornerText: n.Type,
	            style: {
	                backgroundColor: '#eee'
	            }
	        };
	    });
	    images.render();
	};

	MaterialPanel.prototype.onClick = function (event, index, btn, control) {
	    var data = control.children[index].data;

	    if (btn === 'edit') {
	        if (typeof (this.onEdit) === 'function') {
	            this.onEdit(data);
	        }
	    } else if (btn === 'delete') {
	        if (typeof (this.onDelete) === 'function') {
	            this.onDelete(data);
	        }
	    } else {
	        if (typeof (this.onClick) === 'function') {
	            this.onSelectMaterial(data);
	        }
	    }
	};

	// ------------------------------------- 选择 ------------------------------------

	MaterialPanel.prototype.onSelectMaterial = function (data) {
	    Ajax.get(`/api/Material/Get?ID=${data.ID}`, result => {
	        var obj = JSON.parse(result);
	        if (obj.Code === 200) {
	            var material = (new MaterialsSerializer()).fromJSON(obj.Data.Data);
	            this.app.call(`selectMaterial`, this, material);
	        }
	    });
	};

	// ------------------------------- 编辑 ---------------------------------------

	MaterialPanel.prototype.onEdit = function (data) {
	    if (this.editWindow === undefined) {
	        this.editWindow = new EditWindow({
	            app: this.app,
	            parent: document.body,
	            type: 'Material',
	            typeName: L_MATERIAL,
	            saveUrl: `${this.app.options.server}/api/Material/Edit`,
	            callback: this.updateList.bind(this)
	        });
	        this.editWindow.render();
	    }
	    this.editWindow.setData(data);
	    this.editWindow.show();
	};

	// -------------------------------- 删除 ----------------------------------------

	MaterialPanel.prototype.onDelete = function (data) {
	    UI$1.confirm(L_CONFIRM, `${L_DELETE}${data.Name}?`, (event, btn) => {
	        if (btn === 'ok') {
	            Ajax.post(`/api/Material/Delete?ID=${data.ID}`, json => {
	                var obj = JSON.parse(json);
	                if (obj.Code === 200) {
	                    this.update();
	                }
	                UI$1.msg(obj.Msg);
	            });
	        }
	    });
	};

	/**
	 * 音频面板
	 * @author tengge / https://github.com/tengge1
	 */
	function AudioPanel(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;

	    this.firstShow = true;

	    this.data = [];
	}
	AudioPanel.prototype = Object.create(UI$1.Control.prototype);
	AudioPanel.prototype.constructor = AudioPanel;

	AudioPanel.prototype.render = function () {
	    this.app.on(`showBottomPanel.${this.id}`, this.onShowPanel.bind(this));
	};

	AudioPanel.prototype.onShowPanel = function (tabName) {
	    if (tabName !== 'audio') {
	        return;
	    }

	    if (this.firstShow) {
	        this.firstShow = false;
	        this.renderUI();
	    }

	    this.update();
	};

	AudioPanel.prototype.renderUI = function () {
	    var control = UI$1.create({
	        xtype: 'div',
	        parent: this.parent,
	        style: {
	            position: 'relative',
	            width: '100%',
	            height: '100%',
	            display: 'flex',
	            flexDirection: 'row',
	        },
	        children: [{
	            xtype: 'div',
	            style: {
	                width: '200px',
	                display: 'flex',
	                flexDirection: 'column',
	                boxSizing: 'border-box',
	                borderRight: '1px solid #ddd',
	            },
	            children: [{
	                xtype: 'div',
	                style: {
	                    display: 'flex'
	                },
	                children: [{
	                    xtype: 'iconbutton',
	                    icon: 'icon-upload',
	                    title: L_UPLOAD,
	                    style: {
	                        padding: '2px'
	                    },
	                    onClick: this.onUpload.bind(this)
	                }, {
	                    xtype: 'searchfield',
	                    id: 'search',
	                    scope: this.id,
	                    showSearchButton: false,
	                    showResetButton: true,
	                    onInput: this.onSearch.bind(this)
	                }]
	            }, {
	                xtype: 'div',
	                style: {
	                    height: 'calc(100% - 30px)'
	                },
	                children: [{
	                    xtype: 'category',
	                    id: 'category',
	                    scope: this.id,
	                    onChange: this.onSearch.bind(this)
	                }]
	            }]
	        }, {
	            xtype: 'div',
	            style: {
	                width: '100%',
	                height: '100%',
	                flex: 1,
	                overflow: 'auto'
	            },
	            children: [{
	                xtype: 'imagelist',
	                id: 'images',
	                scope: this.id,
	                style: {
	                    width: '100%',
	                    maxHeight: '100%',
	                },
	                onClick: this.onClick.bind(this)
	            }]
	        }]
	    });

	    control.render();
	};

	AudioPanel.prototype.update = function () {
	    this.updateCategory();
	    this.updateList();
	};

	AudioPanel.prototype.updateCategory = function () {
	    var category = UI$1.get('category', this.id);
	    category.clear();

	    Ajax.getJson(`/api/Category/List?type=Audio`, obj => {
	        category.options = {};
	        obj.Data.forEach(n => {
	            category.options[n.ID] = n.Name;
	        });
	        category.render();
	    });
	};

	AudioPanel.prototype.updateList = function () {
	    var search = UI$1.get('search', this.id);

	    Ajax.getJson(`/api/Audio/List`, obj => {
	        this.data = obj.Data;
	        search.setValue('');
	        this.onSearch();
	    });
	};

	AudioPanel.prototype.onSearch = function () {
	    var search = UI$1.get('search', this.id);
	    var category = UI$1.get('category', this.id);

	    var name = search.getValue();
	    var categories = category.getValue();

	    var list = this.data;

	    if (name.trim() !== '') {
	        name = name.toLowerCase();

	        list = list.filter(n => {
	            return n.Name.indexOf(name) > -1 ||
	                n.FirstPinYin.indexOf(name) > -1 ||
	                n.TotalPinYin.indexOf(name) > -1;
	        });
	    }

	    if (categories.length > 0) {
	        list = list.filter(n => {
	            return categories.indexOf(n.CategoryID) > -1;
	        });
	    }

	    this.renderList(list);
	};

	AudioPanel.prototype.renderList = function (list) {
	    var images = UI$1.get('images', this.id);
	    images.clear();

	    images.children = list.map(n => {
	        return {
	            xtype: 'image',
	            src: n.Thumbnail ? n.Thumbnail : null,
	            title: n.Name,
	            data: n,
	            icon: 'icon-audio',
	            // cornerText: n.Type,
	            style: {
	                backgroundColor: '#eee'
	            }
	        };
	    });
	    images.render();
	};

	AudioPanel.prototype.onClick = function (event, index, btn, control) {
	    var data = control.children[index].data;

	    if (btn === 'edit') {
	        if (typeof (this.onEdit) === 'function') {
	            this.onEdit(data);
	        }
	    } else if (btn === 'delete') {
	        if (typeof (this.onDelete) === 'function') {
	            this.onDelete(data);
	        }
	    } else {
	        if (typeof (this.onClick) === 'function') {
	            this.onAddAudio(data);
	        }
	    }
	};

	// ------------------------------------- 添加 ------------------------------------

	AudioPanel.prototype.onAddAudio = function (data) {
	    this.app.call(`selectAudio`, this, data);
	};

	// ----------------------------------- 上传 ----------------------------------------

	AudioPanel.prototype.onUpload = function () {
	    if (this.input === undefined) {
	        this.input = document.createElement('input');
	        this.input.id = `file_${this.id}`;
	        this.input.type = 'file';
	        this.input.style.display = 'none';
	        this.input.addEventListener('change', this.onCommitUpload.bind(this));
	        document.body.appendChild(this.input);
	    }

	    this.input.value = null;
	    this.input.click();
	};

	AudioPanel.prototype.onCommitUpload = function () {
	    UploadUtils.upload(`file_${this.id}`, `/api/Audio/Add`, event => {
	        if (event.target.status === 200) {
	            var response = event.target.response;
	            var obj = JSON.parse(response);
	            UI$1.msg(obj.Msg);
	            if (obj.Code === 200) {
	                this.updateList();
	            }
	        } else {
	            UI$1.msg(L_UPLOAD_FAILED);
	        }
	    }, () => {
	        UI$1.msg(L_UPLOAD_FAILED);
	    });
	};

	// ------------------------------- 编辑 ---------------------------------------

	AudioPanel.prototype.onEdit = function (data) {
	    if (this.editWindow === undefined) {
	        this.editWindow = new EditWindow({
	            app: this.app,
	            parent: document.body,
	            type: 'Audio',
	            typeName: L_AUDIO,
	            saveUrl: `${this.app.options.server}/api/Audio/Edit`,
	            callback: this.updateList.bind(this)
	        });
	        this.editWindow.render();
	    }
	    this.editWindow.setData(data);
	    this.editWindow.show();
	};

	// -------------------------------- 删除 ----------------------------------------

	AudioPanel.prototype.onDelete = function (data) {
	    UI$1.confirm(L_CONFIRM, `${L_DELETE}${data.Name}?`, (event, btn) => {
	        if (btn === 'ok') {
	            Ajax.post(`/api/Audio/Delete?ID=${data.ID}`, json => {
	                var obj = JSON.parse(json);
	                if (obj.Code === 200) {
	                    this.update();
	                }
	                UI$1.msg(obj.Msg);
	            });
	        }
	    });
	};

	/**
	 * 动画面板
	 * @author tengge / https://github.com/tengge1
	 */
	function AnimationPanel$1(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;

	    this.firstShow = true;

	    this.data = [];
	}
	AnimationPanel$1.prototype = Object.create(UI$1.Control.prototype);
	AnimationPanel$1.prototype.constructor = AnimationPanel$1;

	AnimationPanel$1.prototype.render = function () {
	    this.app.on(`showBottomPanel.${this.id}`, this.onShowPanel.bind(this));
	};

	AnimationPanel$1.prototype.onShowPanel = function (tabName) {
	    if (tabName !== 'animation') {
	        return;
	    }

	    if (this.firstShow) {
	        this.firstShow = false;
	        this.renderUI();
	    }

	    this.update();
	};

	AnimationPanel$1.prototype.renderUI = function () {
	    var control = UI$1.create({
	        xtype: 'div',
	        parent: this.parent,
	        style: {
	            position: 'relative',
	            width: '100%',
	            height: '100%',
	            display: 'flex',
	            flexDirection: 'row',
	        },
	        children: [{
	            xtype: 'div',
	            style: {
	                width: '200px',
	                display: 'flex',
	                flexDirection: 'column',
	                boxSizing: 'border-box',
	                borderRight: '1px solid #ddd',
	            },
	            children: [{
	                xtype: 'div',
	                style: {
	                    display: 'flex'
	                },
	                children: [{
	                    xtype: 'iconbutton',
	                    icon: 'icon-upload',
	                    title: L_UPLOAD,
	                    style: {
	                        padding: '2px'
	                    },
	                    onClick: this.onUpload.bind(this)
	                }, {
	                    xtype: 'searchfield',
	                    id: 'search',
	                    scope: this.id,
	                    showSearchButton: false,
	                    showResetButton: true,
	                    onInput: this.onSearch.bind(this)
	                }]
	            }, {
	                xtype: 'div',
	                style: {
	                    height: 'calc(100% - 30px)'
	                },
	                children: [{
	                    xtype: 'category',
	                    id: 'category',
	                    scope: this.id,
	                    onChange: this.onSearch.bind(this)
	                }]
	            }]
	        }, {
	            xtype: 'div',
	            style: {
	                width: '100%',
	                height: '100%',
	                flex: 1,
	                overflow: 'auto'
	            },
	            children: [{
	                xtype: 'imagelist',
	                id: 'images',
	                scope: this.id,
	                style: {
	                    width: '100%',
	                    maxHeight: '100%',
	                },
	                onClick: this.onClick.bind(this)
	            }]
	        }]
	    });

	    control.render();
	};

	AnimationPanel$1.prototype.update = function () {
	    this.updateCategory();
	    this.updateList();
	};

	AnimationPanel$1.prototype.updateCategory = function () {
	    var category = UI$1.get('category', this.id);
	    category.clear();

	    Ajax.getJson(`/api/Category/List?type=Animation`, obj => {
	        category.options = {};
	        obj.Data.forEach(n => {
	            category.options[n.ID] = n.Name;
	        });
	        category.render();
	    });
	};

	AnimationPanel$1.prototype.updateList = function () {
	    var search = UI$1.get('search', this.id);

	    Ajax.getJson(`/api/Animation/List`, obj => {
	        this.data = obj.Data;
	        search.setValue('');
	        this.onSearch();
	    });
	};

	AnimationPanel$1.prototype.onSearch = function () {
	    var search = UI$1.get('search', this.id);
	    var category = UI$1.get('category', this.id);

	    var name = search.getValue();
	    var categories = category.getValue();

	    var list = this.data;

	    if (name.trim() !== '') {
	        name = name.toLowerCase();

	        list = list.filter(n => {
	            return n.Name.indexOf(name) > -1 ||
	                n.FirstPinYin.indexOf(name) > -1 ||
	                n.TotalPinYin.indexOf(name) > -1;
	        });
	    }

	    if (categories.length > 0) {
	        list = list.filter(n => {
	            return categories.indexOf(n.CategoryID) > -1;
	        });
	    }

	    this.renderList(list);
	};

	AnimationPanel$1.prototype.renderList = function (list) {
	    var images = UI$1.get('images', this.id);
	    images.clear();

	    images.children = list.map(n => {
	        return {
	            xtype: 'image',
	            src: n.Thumbnail ? n.Thumbnail : null,
	            title: n.Name,
	            data: n,
	            icon: 'icon-scenes',
	            // cornerText: n.Type,
	            style: {
	                backgroundColor: '#eee'
	            }
	        };
	    });
	    images.render();
	};

	AnimationPanel$1.prototype.onClick = function (event, index, btn, control) {
	    var data = control.children[index].data;

	    if (btn === 'edit') {
	        if (typeof (this.onEdit) === 'function') {
	            this.onEdit(data);
	        }
	    } else if (btn === 'delete') {
	        if (typeof (this.onDelete) === 'function') {
	            this.onDelete(data);
	        }
	    } else {
	        if (typeof (this.onClick) === 'function') {
	            this.onAddMap(data);
	        }
	    }
	};

	// ------------------------------------- 添加 ------------------------------------

	AnimationPanel$1.prototype.onAddMap = function (data) {
	    this.app.call(`selectAnimation`, this, data);
	};

	// ----------------------------------- 上传 ----------------------------------------

	AnimationPanel$1.prototype.onUpload = function () {
	    if (this.input === undefined) {
	        this.input = document.createElement('input');
	        this.input.id = `file_${this.id}`;
	        this.input.type = 'file';
	        this.input.style.display = 'none';
	        this.input.addEventListener('change', this.onCommitUpload.bind(this));
	        document.body.appendChild(this.input);
	    }

	    this.input.value = null;
	    this.input.click();
	};

	AnimationPanel$1.prototype.onCommitUpload = function () {
	    UploadUtils.upload(`file_${this.id}`, `/api/Animation/Add`, event => {
	        if (event.target.status === 200) {
	            var response = event.target.response;
	            var obj = JSON.parse(response);
	            UI$1.msg(obj.Msg);
	            if (obj.Code === 200) {
	                this.updateList();
	            }
	        } else {
	            UI$1.msg(L_UPLOAD_FAILED);
	        }
	    }, () => {
	        UI$1.msg(L_UPLOAD_FAILED);
	    });
	};

	// ------------------------------- 编辑 ---------------------------------------

	AnimationPanel$1.prototype.onEdit = function (data) {
	    if (this.editWindow === undefined) {
	        this.editWindow = new EditWindow({
	            app: this.app,
	            parent: document.body,
	            type: 'Animation',
	            typeName: L_ANIMATION,
	            saveUrl: `${this.app.options.server}/api/Animation/Edit`,
	            callback: this.updateList.bind(this)
	        });
	        this.editWindow.render();
	    }
	    this.editWindow.setData(data);
	    this.editWindow.show();
	};

	// -------------------------------- 删除 ----------------------------------------

	AnimationPanel$1.prototype.onDelete = function (data) {
	    UI$1.confirm(L_CONFIRM, `${L_DELETE}${data.Name}?`, (event, btn) => {
	        if (btn === 'ok') {
	            Ajax.post(`/api/Animation/Delete?ID=${data.ID}`, json => {
	                var obj = JSON.parse(json);
	                if (obj.Code === 200) {
	                    this.update();
	                }
	                UI$1.msg(obj.Msg);
	            });
	        }
	    });
	};

	/**
	 * 粒子面板
	 * @author tengge / https://github.com/tengge1
	 */
	function ParticlePanel(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;

	    this.firstShow = true;

	    this.data = [];
	}
	ParticlePanel.prototype = Object.create(UI$1.Control.prototype);
	ParticlePanel.prototype.constructor = ParticlePanel;

	ParticlePanel.prototype.render = function () {
	    this.app.on(`showBottomPanel.${this.id}`, this.onShowPanel.bind(this));
	};

	ParticlePanel.prototype.onShowPanel = function (tabName) {
	    if (tabName !== 'particle') {
	        return;
	    }

	    if (this.firstShow) {
	        this.firstShow = false;
	        this.renderUI();
	    }

	    this.update();
	};

	ParticlePanel.prototype.renderUI = function () {
	    var control = UI$1.create({
	        xtype: 'div',
	        parent: this.parent,
	        style: {
	            position: 'relative',
	            width: '100%',
	            height: '100%',
	            display: 'flex',
	            flexDirection: 'row',
	        },
	        children: [{
	            xtype: 'div',
	            style: {
	                width: '200px',
	                display: 'flex',
	                flexDirection: 'column',
	                boxSizing: 'border-box',
	                borderRight: '1px solid #ddd',
	            },
	            children: [{
	                xtype: 'div',
	                style: {
	                    display: 'flex'
	                },
	                children: [{
	                    xtype: 'searchfield',
	                    id: 'search',
	                    scope: this.id,
	                    showSearchButton: false,
	                    showResetButton: true,
	                    onInput: this.onSearch.bind(this)
	                }]
	            }, {
	                xtype: 'div',
	                style: {
	                    height: 'calc(100% - 30px)'
	                },
	                children: [{
	                    xtype: 'category',
	                    id: 'category',
	                    scope: this.id,
	                    onChange: this.onSearch.bind(this)
	                }]
	            }]
	        }, {
	            xtype: 'div',
	            style: {
	                width: '100%',
	                height: '100%',
	                flex: 1,
	                overflow: 'auto'
	            },
	            children: [{
	                xtype: 'imagelist',
	                id: 'images',
	                scope: this.id,
	                style: {
	                    width: '100%',
	                    maxHeight: '100%',
	                },
	                onClick: this.onClick.bind(this)
	            }]
	        }]
	    });

	    control.render();
	};

	ParticlePanel.prototype.update = function () {
	    this.updateCategory();
	    this.updateList();
	};

	ParticlePanel.prototype.updateCategory = function () {
	    var category = UI$1.get('category', this.id);
	    category.clear();

	    Ajax.getJson(`/api/Category/List?type=Particle`, obj => {
	        category.options = {};
	        obj.Data.forEach(n => {
	            category.options[n.ID] = n.Name;
	        });
	        category.render();
	    });
	};

	ParticlePanel.prototype.updateList = function () {
	    var search = UI$1.get('search', this.id);

	    Ajax.getJson(`/api/Particle/List`, obj => {
	        this.data = obj.Data;
	        search.setValue('');
	        this.onSearch();
	    });
	};

	ParticlePanel.prototype.onSearch = function () {
	    var search = UI$1.get('search', this.id);
	    var category = UI$1.get('category', this.id);

	    var name = search.getValue();
	    var categories = category.getValue();

	    var list = this.data;

	    if (name.trim() !== '') {
	        name = name.toLowerCase();

	        list = list.filter(n => {
	            return n.Name.indexOf(name) > -1 ||
	                n.FirstPinYin.indexOf(name) > -1 ||
	                n.TotalPinYin.indexOf(name) > -1;
	        });
	    }

	    if (categories.length > 0) {
	        list = list.filter(n => {
	            return categories.indexOf(n.CategoryID) > -1;
	        });
	    }

	    this.renderList(list);
	};

	ParticlePanel.prototype.renderList = function (list) {
	    var images = UI$1.get('images', this.id);
	    images.clear();

	    images.children = list.map(n => {
	        return {
	            xtype: 'image',
	            src: n.Thumbnail ? n.Thumbnail : null,
	            title: n.Name,
	            data: n,
	            icon: 'icon-model',
	            cornerText: n.Type,
	            style: {
	                backgroundColor: '#eee'
	            }
	        };
	    });
	    images.render();
	};

	ParticlePanel.prototype.onClick = function (event, index, btn, control) {
	    var data = control.children[index].data;

	    if (btn === 'edit') {
	        if (typeof (this.onEdit) === 'function') {
	            this.onEdit(data);
	        }
	    } else if (btn === 'delete') {
	        if (typeof (this.onDelete) === 'function') {
	            this.onDelete(data);
	        }
	    } else {
	        if (typeof (this.onClick) === 'function') {
	            this.onSelectMaterial(data);
	        }
	    }
	};

	// ------------------------------------- 选择 ------------------------------------

	ParticlePanel.prototype.onSelectMaterial = function (data) {
	    Ajax.get(`/api/Particle/Get?ID=${data.ID}`, result => {
	        var obj = JSON.parse(result);
	        if (obj.Code === 200) ;
	    });
	};


	// ------------------------------- 编辑 ---------------------------------------

	ParticlePanel.prototype.onEdit = function (data) {
	    if (this.editWindow === undefined) {
	        this.editWindow = new EditWindow({
	            app: this.app,
	            parent: document.body,
	            type: 'Particle',
	            typeName: L_PARTICLE,
	            saveUrl: `${this.app.options.server}/api/Particle/Edit`,
	            callback: this.updateList.bind(this)
	        });
	        this.editWindow.render();
	    }
	    this.editWindow.setData(data);
	    this.editWindow.show();
	};

	// -------------------------------- 删除 ----------------------------------------

	ParticlePanel.prototype.onDelete = function (data) {
	    UI$1.confirm(L_CONFIRM, `${L_DELETE}${data.Name}?`, (event, btn) => {
	        if (btn === 'ok') {
	            Ajax.post(`/api/Particle/Delete?ID=${data.ID}`, json => {
	                var obj = JSON.parse(json);
	                if (obj.Code === 200) {
	                    this.update();
	                }
	                UI$1.msg(obj.Msg);
	            });
	        }
	    });
	};

	/**
	 * 预设体面板
	 * @author tengge / https://github.com/tengge1
	 */
	function PrefabPanel(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;

	    this.firstShow = true;

	    this.data = [];
	}
	PrefabPanel.prototype = Object.create(UI$1.Control.prototype);
	PrefabPanel.prototype.constructor = PrefabPanel;

	PrefabPanel.prototype.render = function () {
	    this.app.on(`showBottomPanel.${this.id}`, this.onShowPanel.bind(this));
	};

	PrefabPanel.prototype.onShowPanel = function (tabName) {
	    if (tabName !== 'prefab') {
	        return;
	    }

	    if (this.firstShow) {
	        this.firstShow = false;
	        this.renderUI();
	    }

	    this.update();
	};

	PrefabPanel.prototype.renderUI = function () {
	    var control = UI$1.create({
	        xtype: 'div',
	        parent: this.parent,
	        style: {
	            position: 'relative',
	            width: '100%',
	            height: '100%',
	            display: 'flex',
	            flexDirection: 'row',
	        },
	        children: [{
	            xtype: 'div',
	            style: {
	                width: '200px',
	                display: 'flex',
	                flexDirection: 'column',
	                boxSizing: 'border-box',
	                borderRight: '1px solid #ddd',
	            },
	            children: [{
	                xtype: 'div',
	                style: {
	                    display: 'flex'
	                },
	                children: [{
	                    xtype: 'searchfield',
	                    id: 'search',
	                    scope: this.id,
	                    showSearchButton: false,
	                    showResetButton: true,
	                    onInput: this.onSearch.bind(this)
	                }]
	            }, {
	                xtype: 'div',
	                style: {
	                    height: 'calc(100% - 30px)'
	                },
	                children: [{
	                    xtype: 'category',
	                    id: 'category',
	                    scope: this.id,
	                    onChange: this.onSearch.bind(this)
	                }]
	            }]
	        }, {
	            xtype: 'div',
	            style: {
	                width: '100%',
	                height: '100%',
	                flex: 1,
	                overflow: 'auto'
	            },
	            children: [{
	                xtype: 'imagelist',
	                id: 'images',
	                scope: this.id,
	                style: {
	                    width: '100%',
	                    maxHeight: '100%',
	                },
	                onClick: this.onClick.bind(this)
	            }]
	        }]
	    });

	    control.render();
	};

	PrefabPanel.prototype.update = function () {
	    this.updateCategory();
	    this.updateList();
	};

	PrefabPanel.prototype.updateCategory = function () {
	    var category = UI$1.get('category', this.id);
	    category.clear();

	    Ajax.getJson(`/api/Category/List?type=Prefab`, obj => {
	        category.options = {};
	        obj.Data.forEach(n => {
	            category.options[n.ID] = n.Name;
	        });
	        category.render();
	    });
	};

	PrefabPanel.prototype.updateList = function () {
	    var search = UI$1.get('search', this.id);

	    Ajax.getJson(`/api/Prefab/List`, obj => {
	        this.data = obj.Data;
	        search.setValue('');
	        this.onSearch();
	    });
	};

	PrefabPanel.prototype.onSearch = function () {
	    var search = UI$1.get('search', this.id);
	    var category = UI$1.get('category', this.id);

	    var name = search.getValue();
	    var categories = category.getValue();

	    var list = this.data;

	    if (name.trim() !== '') {
	        name = name.toLowerCase();

	        list = list.filter(n => {
	            return n.Name.indexOf(name) > -1 ||
	                n.FirstPinYin.indexOf(name) > -1 ||
	                n.TotalPinYin.indexOf(name) > -1;
	        });
	    }

	    if (categories.length > 0) {
	        list = list.filter(n => {
	            return categories.indexOf(n.CategoryID) > -1;
	        });
	    }

	    this.renderList(list);
	};

	PrefabPanel.prototype.renderList = function (list) {
	    var images = UI$1.get('images', this.id);
	    images.clear();

	    images.children = list.map(n => {
	        return {
	            xtype: 'image',
	            src: n.Thumbnail ? n.Thumbnail : null,
	            title: n.Name,
	            data: n,
	            icon: 'icon-model',
	            cornerText: n.Type,
	            style: {
	                backgroundColor: '#eee'
	            }
	        };
	    });
	    images.render();
	};

	PrefabPanel.prototype.onClick = function (event, index, btn, control) {
	    var data = control.children[index].data;

	    if (btn === 'edit') {
	        if (typeof (this.onEdit) === 'function') {
	            this.onEdit(data);
	        }
	    } else if (btn === 'delete') {
	        if (typeof (this.onDelete) === 'function') {
	            this.onDelete(data);
	        }
	    } else {
	        if (typeof (this.onClick) === 'function') {
	            this.onSelectMaterial(data);
	        }
	    }
	};

	// ------------------------------------- 选择 ------------------------------------

	PrefabPanel.prototype.onSelectMaterial = function (data) {
	    Ajax.get(`/api/Prefab/Get?ID=${data.ID}`, result => {
	        var obj = JSON.parse(result);
	        if (obj.Code === 200) ;
	    });
	};


	// ------------------------------- 编辑 ---------------------------------------

	PrefabPanel.prototype.onEdit = function (data) {
	    if (this.editWindow === undefined) {
	        this.editWindow = new EditWindow({
	            app: this.app,
	            parent: document.body,
	            type: 'Prefab',
	            typeName: L_PREFAB,
	            saveUrl: `${this.app.options.server}/api/Prefab/Edit`,
	            callback: this.updateList.bind(this)
	        });
	        this.editWindow.render();
	    }
	    this.editWindow.setData(data);
	    this.editWindow.show();
	};

	// -------------------------------- 删除 ----------------------------------------

	PrefabPanel.prototype.onDelete = function (data) {
	    UI$1.confirm(L_CONFIRM, `${L_DELETE}${data.Name}?`, (event, btn) => {
	        if (btn === 'ok') {
	            Ajax.post(`/api/Prefab/Delete?ID=${data.ID}`, json => {
	                var obj = JSON.parse(json);
	                if (obj.Code === 200) {
	                    this.update();
	                }
	                UI$1.msg(obj.Msg);
	            });
	        }
	    });
	};

	/**
	 * 角色面板
	 * @author tengge / https://github.com/tengge1
	 */
	function CharacterPanel(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;

	    this.firstShow = true;

	    this.data = [];
	}
	CharacterPanel.prototype = Object.create(UI$1.Control.prototype);
	CharacterPanel.prototype.constructor = CharacterPanel;

	CharacterPanel.prototype.render = function () {
	    this.app.on(`showBottomPanel.${this.id}`, this.onShowPanel.bind(this));
	};

	CharacterPanel.prototype.onShowPanel = function (tabName) {
	    if (tabName !== 'character') {
	        return;
	    }

	    if (this.firstShow) {
	        this.firstShow = false;
	        this.renderUI();
	    }

	    this.update();
	};

	CharacterPanel.prototype.renderUI = function () {
	    var control = UI$1.create({
	        xtype: 'div',
	        parent: this.parent,
	        style: {
	            position: 'relative',
	            width: '100%',
	            height: '100%',
	            display: 'flex',
	            flexDirection: 'row',
	        },
	        children: [{
	            xtype: 'div',
	            style: {
	                width: '200px',
	                display: 'flex',
	                flexDirection: 'column',
	                boxSizing: 'border-box',
	                borderRight: '1px solid #ddd',
	            },
	            children: [{
	                xtype: 'div',
	                style: {
	                    display: 'flex'
	                },
	                children: [{
	                    xtype: 'searchfield',
	                    id: 'search',
	                    scope: this.id,
	                    showSearchButton: false,
	                    showResetButton: true,
	                    onInput: this.onSearch.bind(this)
	                }]
	            }, {
	                xtype: 'div',
	                style: {
	                    height: 'calc(100% - 30px)'
	                },
	                children: [{
	                    xtype: 'category',
	                    id: 'category',
	                    scope: this.id,
	                    onChange: this.onSearch.bind(this)
	                }]
	            }]
	        }, {
	            xtype: 'div',
	            style: {
	                width: '100%',
	                height: '100%',
	                flex: 1,
	                overflow: 'auto'
	            },
	            children: [{
	                xtype: 'imagelist',
	                id: 'images',
	                scope: this.id,
	                style: {
	                    width: '100%',
	                    maxHeight: '100%',
	                },
	                onClick: this.onClick.bind(this)
	            }]
	        }]
	    });

	    control.render();
	};

	CharacterPanel.prototype.update = function () {
	    this.updateCategory();
	    this.updateList();
	};

	CharacterPanel.prototype.updateCategory = function () {
	    var category = UI$1.get('category', this.id);
	    category.clear();

	    Ajax.getJson(`/api/Category/List?type=Character`, obj => {
	        category.options = {};
	        obj.Data.forEach(n => {
	            category.options[n.ID] = n.Name;
	        });
	        category.render();
	    });
	};

	CharacterPanel.prototype.updateList = function () {
	    var search = UI$1.get('search', this.id);

	    Ajax.getJson(`/api/Character/List`, obj => {
	        this.data = obj.Data;
	        search.setValue('');
	        this.onSearch();
	    });
	};

	CharacterPanel.prototype.onSearch = function () {
	    var search = UI$1.get('search', this.id);
	    var category = UI$1.get('category', this.id);

	    var name = search.getValue();
	    var categories = category.getValue();

	    var list = this.data;

	    if (name.trim() !== '') {
	        name = name.toLowerCase();

	        list = list.filter(n => {
	            return n.Name.indexOf(name) > -1 ||
	                n.FirstPinYin.indexOf(name) > -1 ||
	                n.TotalPinYin.indexOf(name) > -1;
	        });
	    }

	    if (categories.length > 0) {
	        list = list.filter(n => {
	            return categories.indexOf(n.CategoryID) > -1;
	        });
	    }

	    this.renderList(list);
	};

	CharacterPanel.prototype.renderList = function (list) {
	    var images = UI$1.get('images', this.id);
	    images.clear();

	    images.children = list.map(n => {
	        return {
	            xtype: 'image',
	            src: n.Thumbnail ? n.Thumbnail : null,
	            title: n.Name,
	            data: n,
	            icon: 'icon-model',
	            cornerText: n.Type,
	            style: {
	                backgroundColor: '#eee'
	            }
	        };
	    });
	    images.render();
	};

	CharacterPanel.prototype.onClick = function (event, index, btn, control) {
	    var data = control.children[index].data;

	    if (btn === 'edit') {
	        if (typeof (this.onEdit) === 'function') {
	            this.onEdit(data);
	        }
	    } else if (btn === 'delete') {
	        if (typeof (this.onDelete) === 'function') {
	            this.onDelete(data);
	        }
	    } else {
	        if (typeof (this.onClick) === 'function') {
	            this.onSelectMaterial(data);
	        }
	    }
	};

	// ------------------------------------- 选择 ------------------------------------

	CharacterPanel.prototype.onSelectMaterial = function (data) {
	    Ajax.get(`/api/Character/Get?ID=${data.ID}`, result => {
	        var obj = JSON.parse(result);
	        if (obj.Code === 200) ;
	    });
	};


	// ------------------------------- 编辑 ---------------------------------------

	CharacterPanel.prototype.onEdit = function (data) {
	    if (this.editWindow === undefined) {
	        this.editWindow = new EditWindow({
	            app: this.app,
	            parent: document.body,
	            type: 'Character',
	            typeName: L_CHARACTER,
	            saveUrl: `${this.app.options.server}/api/Character/Edit`,
	            callback: this.updateList.bind(this)
	        });
	        this.editWindow.render();
	    }
	    this.editWindow.setData(data);
	    this.editWindow.show();
	};

	// -------------------------------- 删除 ----------------------------------------

	CharacterPanel.prototype.onDelete = function (data) {
	    UI$1.confirm(L_CONFIRM, `${L_DELETE}${data.Name}?`, (event, btn) => {
	        if (btn === 'ok') {
	            Ajax.post(`/api/Character/Delete?ID=${data.ID}`, json => {
	                var obj = JSON.parse(json);
	                if (obj.Code === 200) {
	                    this.update();
	                }
	                UI$1.msg(obj.Msg);
	            });
	        }
	    });
	};

	/**
	 * 日志面板
	 * @author tengge / https://github.com/tengge1
	 */
	function LogPanel(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}
	LogPanel.prototype = Object.create(UI$1.Control.prototype);
	LogPanel.prototype.constructor = LogPanel;

	LogPanel.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        cls: 'Panel',
	        style: {
	            position: 'relative'
	        },
	        children: [{
	            xtype: 'button',
	            text: L_CLEAR,
	            onClick: this.onClearLog.bind(this)
	        }, {
	            xtype: 'br'
	        }, {
	            xtype: 'div',
	            style: {
	                height: '140px',
	                marginTop: '8px',
	                backgroundColor: '#fff',
	                overflowY: 'auto'
	            },
	            id: 'logContent'
	        }]
	    };

	    var control = UI$1.create(data);
	    control.render();

	    this.app.on(`log.${this.id}`, this.onLog.bind(this));
	};

	LogPanel.prototype.onLog = function (content, type) {
	    var dom = UI$1.get('logContent').dom;

	    var date = new Date();
	    var hour = date.getHours();
	    var minute = date.getMinutes();
	    var second = date.getSeconds();

	    hour = hour < 10 ? '0' + hour : hour;
	    minute = minute < 10 ? '0' + minute : minute;
	    second = second < 10 ? '0' + second : second;

	    content = `<span style="font-weight: bold; margin-right: 8px">${hour}:${minute}:${second}</span>${content}`;

	    var box = document.createElement('div');
	    box.innerHTML = content;

	    if (dom.children.length === 0) {
	        dom.appendChild(box);
	    } else {
	        dom.insertBefore(box, dom.children[0]);
	    }

	    if (type === 'warn') {
	        box.style.backgroundColor = '#fffbe5';
	        box.style.color = '#5c3c00';
	    } else if (type === 'error') {
	        box.style.backgroundColor = '#fff0f0';
	        box.style.color = '#ff0000';
	    }
	};

	LogPanel.prototype.onClearLog = function () {
	    var dom = UI$1.get('logContent').dom;
	    dom.innerHTML = '';
	    this.onLog(L_CLEAR_LOGS);
	};

	/**
	 * 底部面板
	 * @author mrdoob / http://mrdoob.com/
	 * @author tengge / https://github.com/tengge1
	 */
	function BottomPanel(options) {
	    Control.call(this, options);
	    this.app = options.app;
	    this.show = true;
	}
	BottomPanel.prototype = Object.create(Control.prototype);
	BottomPanel.prototype.constructor = BottomPanel;

	BottomPanel.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        id: 'bottomPanel',
	        scope: this.id,
	        cls: 'sidebar bottomPanel',
	        parent: this.parent,
	        children: [{
	            xtype: 'div',
	            cls: 'tabs',
	            style: {
	                zIndex: 20,
	                display: 'block',
	            },
	            children: [{
	                xtype: 'text',
	                id: 'timeTab',
	                text: L_TIME,
	                onClick: () => {
	                    this.selectTab('time');
	                }
	            }, {
	                xtype: 'text',
	                id: 'sceneTab',
	                text: L_SCENE,
	                onClick: () => {
	                    this.selectTab('scene');
	                }
	            }, {
	                xtype: 'text',
	                id: 'modelTab',
	                text: L_MODEL,
	                onClick: () => {
	                    this.selectTab('model');
	                }
	            }, {
	                xtype: 'text',
	                id: 'mapTab',
	                text: L_MAP,
	                onClick: () => {
	                    this.selectTab('map');
	                }
	            }, {
	                xtype: 'text',
	                id: 'materialTab',
	                text: L_MATERIAL,
	                onClick: () => {
	                    this.selectTab('material');
	                }
	            }, {
	                xtype: 'text',
	                id: 'audioTab',
	                text: L_AUDIO,
	                onClick: () => {
	                    this.selectTab('audio');
	                }
	            }, {
	                xtype: 'text',
	                id: 'animationTab',
	                text: L_ANIMATION,
	                onClick: () => {
	                    this.selectTab('animation');
	                }
	            }, {
	                xtype: 'text',
	                id: 'particleTab',
	                text: L_PARTICLE,
	                onClick: () => {
	                    this.selectTab('particle');
	                }
	            }, {
	                xtype: 'text',
	                id: 'prefabTab',
	                text: L_PREFAB,
	                onClick: () => {
	                    this.selectTab('prefab');
	                }
	            }, {
	                xtype: 'text',
	                id: 'characterTab',
	                text: L_CHARACTER,
	                onClick: () => {
	                    this.selectTab('character');
	                }
	            }, {
	                xtype: 'text',
	                id: 'logTab',
	                text: L_LOG,
	                onClick: () => {
	                    this.selectTab('log');
	                }
	            }, {
	                xtype: 'div',
	                style: {
	                    display: 'inline-block',
	                    float: 'right'
	                },
	                children: [{
	                    xtype: 'iconbutton',
	                    icon: 'icon-sort',
	                    title: '排序',
	                    style: {
	                        margin: '5px',
	                        padding: '2px 4px',
	                        boxSizing: 'border-box'
	                    },
	                    onClick: this.onSort.bind(this)
	                }, {
	                    xtype: 'iconbutton',
	                    id: 'maximizeBtn',
	                    scope: this.id,
	                    icon: 'icon-maximize',
	                    title: '最大化',
	                    style: {
	                        margin: '5px 5px 5px 0',
	                        padding: '2px 4px',
	                        boxSizing: 'border-box'
	                    },
	                    onClick: this.onMaximize.bind(this)
	                }, {
	                    xtype: 'iconbutton',
	                    id: 'collapseBtn',
	                    scope: this.id,
	                    icon: 'icon-down-arrow',
	                    title: L_COLLAPSE,
	                    style: {
	                        margin: '5px 5px 5px 0',
	                        padding: '2px 4px',
	                        boxSizing: 'border-box'
	                    },
	                    onClick: this.toggleShowPanel.bind(this)
	                }]
	            }]
	        }, {
	            xtype: 'div',
	            id: 'timePanel',
	            style: {
	                height: 'calc(100% - 40px)'
	            },
	            children: [
	                new TimePanel({
	                    app: this.app
	                })
	            ]
	        }, {
	            xtype: 'div',
	            id: 'scenePanel',
	            style: {
	                height: 'calc(100% - 40px)'
	            },
	            children: [
	                new ScenePanel({
	                    app: this.app
	                })
	            ]
	        }, {
	            xtype: 'div',
	            id: 'modelPanel',
	            style: {
	                height: 'calc(100% - 40px)'
	            },
	            children: [
	                new ModelPanel({
	                    app: this.app
	                })
	            ]
	        }, {
	            xtype: 'div',
	            id: 'mapPanel',
	            style: {
	                height: 'calc(100% - 40px)'
	            },
	            children: [
	                new MapPanel({
	                    app: this.app
	                })
	            ]
	        }, {
	            xtype: 'div',
	            id: 'materialPanel',
	            style: {
	                height: 'calc(100% - 40px)'
	            },
	            children: [
	                new MaterialPanel({
	                    app: this.app
	                })
	            ]
	        }, {
	            xtype: 'div',
	            id: 'audioPanel',
	            style: {
	                height: 'calc(100% - 40px)'
	            },
	            children: [
	                new AudioPanel({
	                    app: this.app
	                })
	            ]
	        }, {
	            xtype: 'div',
	            id: 'animationPanel',
	            style: {
	                height: 'calc(100% - 40px)'
	            },
	            children: [
	                new AnimationPanel$1({
	                    app: this.app
	                })
	            ]
	        }, {
	            xtype: 'div',
	            id: 'particlePanel',
	            style: {
	                height: 'calc(100% - 40px)'
	            },
	            children: [
	                new ParticlePanel({
	                    app: this.app
	                })
	            ]
	        }, {
	            xtype: 'div',
	            id: 'prefabPanel',
	            style: {
	                height: 'calc(100% - 40px)'
	            },
	            children: [
	                new PrefabPanel({
	                    app: this.app
	                })
	            ]
	        }, {
	            xtype: 'div',
	            id: 'characterPanel',
	            style: {
	                height: 'calc(100% - 40px)'
	            },
	            children: [
	                new CharacterPanel({
	                    app: this.app
	                })
	            ]
	        }, {
	            xtype: 'div',
	            id: 'logPanel',
	            style: {
	                height: 'calc(100% - 40px)'
	            },
	            children: [
	                new LogPanel({
	                    app: this.app
	                })
	            ]
	        }]
	    };

	    var control = UI.create(data);
	    control.render();

	    this.app.on(`appStarted.${this.id}`, () => {
	        this.selectTab('time');
	        this.updateAssetsInfo();
	    });

	    this.app.on(`selectBottomPanel.${this.id}`, this.onSelectPanel.bind(this));
	};

	BottomPanel.prototype.selectTab = function (tabName) {
	    this.app.call(`selectBottomPanel`, this, tabName);
	};

	BottomPanel.prototype.onSelectPanel = function (tabName) {
	    var timeTab = UI.get('timeTab');
	    var sceneTab = UI.get('sceneTab');
	    var modelTab = UI.get('modelTab');
	    var mapTab = UI.get('mapTab');
	    var materialTab = UI.get('materialTab');
	    var audioTab = UI.get('audioTab');
	    var animationTab = UI.get('animationTab');
	    var particleTab = UI.get('particleTab');
	    var prefabTab = UI.get('prefabTab');
	    var characterTab = UI.get('characterTab');
	    var logTab = UI.get('logTab');

	    var timePanel = UI.get('timePanel');
	    var scenePanel = UI.get('scenePanel');
	    var modelPanel = UI.get('modelPanel');
	    var mapPanel = UI.get('mapPanel');
	    var materialPanel = UI.get('materialPanel');
	    var audioPanel = UI.get('audioPanel');
	    var animationPanel = UI.get('animationPanel');
	    var particlePanel = UI.get('particlePanel');
	    var prefabPanel = UI.get('prefabPanel');
	    var characterPanel = UI.get('characterPanel');
	    var logPanel = UI.get('logPanel');

	    timeTab.dom.className = '';
	    sceneTab.dom.className = '';
	    modelTab.dom.className = '';
	    mapTab.dom.className = '';
	    materialTab.dom.className = '';
	    audioTab.dom.className = '';
	    animationTab.dom.className = '';
	    particleTab.dom.className = '';
	    prefabTab.dom.className = '';
	    characterTab.dom.className = '';
	    logTab.dom.className = '';

	    timePanel.dom.style.display = 'none';
	    scenePanel.dom.style.display = 'none';
	    modelPanel.dom.style.display = 'none';
	    mapPanel.dom.style.display = 'none';
	    materialPanel.dom.style.display = 'none';
	    audioPanel.dom.style.display = 'none';
	    animationPanel.dom.style.display = 'none';
	    particlePanel.dom.style.display = 'none';
	    prefabPanel.dom.style.display = 'none';
	    characterPanel.dom.style.display = 'none';
	    logPanel.dom.style.display = 'none';

	    switch (tabName) {
	        case 'time':
	            timeTab.dom.className = 'selected';
	            timePanel.dom.style.display = '';
	            break;
	        case 'scene':
	            sceneTab.dom.className = 'selected';
	            scenePanel.dom.style.display = '';
	            break;
	        case 'model':
	            modelTab.dom.className = 'selected';
	            modelPanel.dom.style.display = '';
	            break;
	        case 'map':
	            mapTab.dom.className = 'selected';
	            mapPanel.dom.style.display = '';
	            break;
	        case 'material':
	            materialTab.dom.className = 'selected';
	            materialPanel.dom.style.display = '';
	            break;
	        case 'audio':
	            audioTab.dom.className = 'selected';
	            audioPanel.dom.style.display = '';
	            break;
	        case 'animation':
	            animationTab.dom.className = 'selected';
	            animationPanel.dom.style.display = '';
	            break;
	        case 'particle':
	            particleTab.dom.className = 'selected';
	            particlePanel.dom.style.display = '';
	            break;
	        case 'prefab':
	            prefabTab.dom.className = 'selected';
	            prefabPanel.dom.style.display = '';
	            break;
	        case 'character':
	            characterTab.dom.className = 'selected';
	            characterPanel.dom.style.display = '';
	            break;
	        case 'log':
	            logTab.dom.className = 'selected';
	            logPanel.dom.style.display = '';
	            break;
	    }

	    this.app.call(`showBottomPanel`, this, tabName);
	};

	BottomPanel.prototype.updateAssetsInfo = function () {
	    var sceneTab = UI.get('sceneTab');
	    var modelTab = UI.get('modelTab');
	    var mapTab = UI.get('mapTab');
	    var materialTab = UI.get('materialTab');
	    var audioTab = UI.get('audioTab');
	    var animationTab = UI.get('animationTab');
	    var particleTab = UI.get('particleTab');
	    var prefabTab = UI.get('prefabTab');
	    var characterTab = UI.get('characterTab');

	    fetch(`${this.app.options.server}/api/Assets/List`).then(response => {
	        if (response.ok) {
	            response.json().then(json => {
	                sceneTab.setValue(`${L_SCENE}(${json.sceneCount})`);
	                modelTab.setValue(`${L_MODEL}(${json.meshCount})`);
	                mapTab.setValue(`${L_MAP}(${json.mapCount})`);
	                materialTab.setValue(`${L_MATERIAL}(${json.materialCount})`);
	                audioTab.setValue(`${L_AUDIO}(${json.audioCount})`);
	                animationTab.setValue(`${L_ANIMATION}(${json.animationCount})`);
	                particleTab.setValue(`${L_PARTICLE}(${json.particleCount})`);
	                prefabTab.setValue(`${L_PREFAB}(${json.prefabCount})`);
	                characterTab.setValue(`${L_CHARACTER}(${json.characterCount})`);
	            });
	        }
	    });
	};

	BottomPanel.prototype.onSort = function () {
	    UI.msg('排序');
	};

	BottomPanel.prototype.onMaximize = function () {
	    var bottomPanel = UI.get('bottomPanel', this.id);
	    var maximizeBtn = UI.get('maximizeBtn', this.id);
	    var collapseBtn = UI.get('collapseBtn', this.id);

	    if (this.isMaximized === undefined) { // 当前状态：正常
	        this.isMaximized = true;
	        maximizeBtn.setTitle('正常化');
	        maximizeBtn.setIcon('icon-minimize');
	        collapseBtn.hide();

	        this.oldLeft = bottomPanel.dom.style.left;
	        this.oldTop = bottomPanel.dom.style.top;
	        this.oldRight = bottomPanel.dom.style.right;
	        this.oldBottom = bottomPanel.dom.style.bottom;
	        this.oldHeight = bottomPanel.dom.style.height;
	        this.oldZIndex = bottomPanel.dom.style.zIndex;

	        Object.assign(bottomPanel.dom.style, {
	            left: 0,
	            top: 0,
	            right: 0,
	            bottom: 0,
	            height: '100%',
	            zIndex: 1000,
	        });
	    } else { // 当前状态：最大化
	        Object.assign(bottomPanel.dom.style, {
	            left: this.oldLeft,
	            top: this.oldTop,
	            right: this.oldRight,
	            bottom: this.oldBottom,
	            height: this.oldHeight,
	            zIndex: this.oldZIndex,
	        });

	        delete this.isMaximized;
	        delete this.oldLeft;
	        delete this.oldTop;
	        delete this.oldRight;
	        delete this.oldBottom;
	        delete this.oldHeight;
	        delete this.oldZIndex;
	        maximizeBtn.setTitle('最大化');
	        maximizeBtn.setIcon('icon-maximize');
	        collapseBtn.show();
	    }
	};

	BottomPanel.prototype.toggleShowPanel = function () {
	    var bottomPanel = UI.get('bottomPanel', this.id);
	    var collapseBtn = UI.get('collapseBtn', this.id);
	    var maximizeBtn = UI.get('maximizeBtn', this.id);
	    var viewport = UI.get('viewport');

	    if (this.isCollapsed === undefined) {
	        this.isCollapsed = true;
	        collapseBtn.setTitle('展开');
	        collapseBtn.setIcon('icon-up-arrow');
	        maximizeBtn.hide();

	        this.oldBottom = bottomPanel.dom.style.bottom;
	        this.oldViewportBottom = viewport.dom.style.bottom;

	        Object.assign(bottomPanel.dom.style, {
	            bottom: '-168px',
	        });

	        Object.assign(viewport.dom.style, {
	            bottom: '72px',
	        });
	    } else {
	        Object.assign(bottomPanel.dom.style, {
	            bottom: this.oldBottom,
	        });

	        Object.assign(viewport.dom.style, {
	            bottom: this.oldViewportBottom,
	        });

	        delete this.oldBottom;
	        delete this.oldViewportBottom;
	        delete this.isCollapsed;
	        collapseBtn.setTitle('折叠');
	        collapseBtn.setIcon('icon-down-arrow');
	        maximizeBtn.show();
	    }

	    this.app.call('resize', this);
	};

	/**
	 * 状态栏
	 * @author mrdoob / http://mrdoob.com/
	 * @author tengge / https://github.com/tengge1
	 */
	function StatusBar(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;
	}
	StatusBar.prototype = Object.create(UI$1.Control.prototype);
	StatusBar.prototype.constructor = StatusBar;

	StatusBar.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        cls: 'statusBar',
	        children: [{
	            xtype: 'label',
	            text: L_OBJECT_NUM
	        }, {
	            xtype: 'text',
	            id: 'objectsText',
	            scope: this.id,
	            text: '0' // 物体数
	        }, {
	            xtype: 'label',
	            text: L_VERTEX_NUM
	        }, {
	            xtype: 'text',
	            id: 'verticesText',
	            scope: this.id,
	            text: '0' // 顶点数
	        }, {
	            xtype: 'label',
	            text: L_TRIANGLE_NUM
	        }, {
	            xtype: 'text',
	            id: 'trianglesText',
	            scope: this.id,
	            text: '0' // 三角形数
	        }, {
	            xtype: 'label',
	            text: '|',
	            style: {
	                margin: '0 4px'
	            }
	        }, {
	            xtype: 'label',
	            text: L_THROW_BALL,
	        }, {
	            xtype: 'checkbox',
	            id: 'cbThrowBall',
	            onChange: this.onEnableThrowBall.bind(this)
	        }]
	    };

	    var control = UI$1.create(data);
	    control.render();

	    this.app.on('objectAdded.' + this.id, this.onUpdateInfo.bind(this));
	    this.app.on('objectRemoved.' + this.id, this.onUpdateInfo.bind(this));
	    this.app.on('geometryChanged.' + this.id, this.onUpdateInfo.bind(this));
	};

	StatusBar.prototype.onUpdateInfo = function () {
	    var editor = this.app.editor;

	    var scene = editor.scene;

	    var objects = 0,
	        vertices = 0,
	        triangles = 0;

	    for (var i = 0, l = scene.children.length; i < l; i++) {
	        var object = scene.children[i];

	        object.traverseVisible(function (object) {
	            objects++;

	            if (object instanceof THREE.Mesh) {
	                var geometry = object.geometry;

	                if (geometry instanceof THREE.Geometry) {
	                    vertices += geometry.vertices.length;
	                    triangles += geometry.faces.length;
	                } else if (geometry instanceof THREE.BufferGeometry) {
	                    if (geometry.index !== null) {
	                        vertices += geometry.index.count * 3;
	                        triangles += geometry.index.count;
	                    } else {
	                        vertices += geometry.attributes.position.count;
	                        triangles += geometry.attributes.position.count / 3;
	                    }
	                }
	            }
	        });
	    }

	    var objectsText = UI$1.get('objectsText', this.id);
	    var verticesText = UI$1.get('verticesText', this.id);
	    var trianglesText = UI$1.get('trianglesText', this.id);

	    objectsText.setValue(objects.format());
	    verticesText.setValue(vertices.format());
	    trianglesText.setValue(triangles.format());
	};

	StatusBar.prototype.onEnableThrowBall = function () {
	    var enabled = UI$1.get('cbThrowBall');
	    this.app.call('enableThrowBall', this, enabled.getValue());
	};

	/**
	 * 设置脚本值命令
	 * @author dforrer / https://github.com/dforrer
	 * Developed as part of a project at University of Applied Sciences and Arts Northwestern Switzerland (www.fhnw.ch)
	 * @param object THREE.Object3D
	 * @param script javascript object
	 * @param attributeName string
	 * @param newValue string, object
	 * @param cursorPosition javascript object with format {line: 2, ch: 3}
	 * @param scrollInfo javascript object with values {left, top, width, height, clientWidth, clientHeight}
	 * @constructor
	 */
	function SetScriptValueCommand(object, script, attributeName, newValue, cursorPosition, scrollInfo) {
		Command.call(this);

		this.type = 'SetScriptValueCommand';
		this.name = L_SET_SCRIPT + '.' + attributeName;
		this.updatable = true;

		this.object = object;
		this.script = script;

		this.attributeName = attributeName;
		this.oldValue = (script !== undefined) ? script[this.attributeName] : undefined;
		this.newValue = newValue;
		this.cursorPosition = cursorPosition;
		this.scrollInfo = scrollInfo;
	}
	SetScriptValueCommand.prototype = Object.create(Command.prototype);

	Object.assign(SetScriptValueCommand.prototype, {
		constructor: SetScriptValueCommand,

		execute: function () {
			this.script[this.attributeName] = this.newValue;

			this.editor.app.call('scriptChanged', this);
			this.editor.app.call('refreshScriptEditor', this, this.object, this.script, this.cursorPosition, this.scrollInfo);
		},

		undo: function () {
			this.script[this.attributeName] = this.oldValue;

			this.editor.app.call('scriptChanged', this);
			this.editor.app.call('refreshScriptEditor', this, this.object, this.script, this.cursorPosition, this.scrollInfo);
		},

		update: function (cmd) {
			this.cursorPosition = cmd.cursorPosition;
			this.scrollInfo = cmd.scrollInfo;
			this.newValue = cmd.newValue;
		},

		toJSON: function () {
			var output = Command.prototype.toJSON.call(this);

			output.objectUuid = this.object.uuid;
			output.index = this.editor.scripts[this.object.uuid].indexOf(this.script);
			output.attributeName = this.attributeName;
			output.oldValue = this.oldValue;
			output.newValue = this.newValue;
			output.cursorPosition = this.cursorPosition;
			output.scrollInfo = this.scrollInfo;

			return output;
		},

		fromJSON: function (json) {
			Command.prototype.fromJSON.call(this, json);

			this.oldValue = json.oldValue;
			this.newValue = json.newValue;
			this.attributeName = json.attributeName;
			this.object = this.editor.objectByUuid(json.objectUuid);
			this.script = this.editor.scripts[json.objectUuid][json.index];
			this.cursorPosition = json.cursorPosition;
			this.scrollInfo = json.scrollInfo;
		}
	});

	/**
	 * 脚本编辑器
	 * @author mrdoob / http://mrdoob.com/
	 * @author tengge / https://github.com/tengge1
	 */
	function ScriptEditor(options) {
	    UI$1.Control.call(this, options);
	    this.app = options.app;

	    this.codemirror = null;
	    this.server = null;
	    this.delay = null; // 代码校验延迟函数
	    this.delayTime = 1000; // 代码校验间隔时间（毫秒）

	    this.uuid = null;
	    this.name = null;
	    this.mode = null;
	    this.source = null;
	    this.title = null;

	    this.errorLines = []; // 代码错误行数
	    this.widgets = [];

	    this.callback = null;
	}
	ScriptEditor.prototype = Object.create(UI$1.Control.prototype);
	ScriptEditor.prototype.constructor = ScriptEditor;

	ScriptEditor.prototype.render = function () {
	    var data = {
	        xtype: 'div',
	        parent: this.parent,
	        id: 'scriptEditor',
	        cls: 'script',
	        style: {
	            backgroundColor: '#272822',
	            display: 'none'
	        },
	        children: [{
	            xtype: 'div',
	            style: {
	                padding: '10px'
	            },
	            children: [{
	                xtype: 'text',
	                id: 'scriptTitle',
	                style: {
	                    color: '#fff'
	                }
	            }, {
	                xtype: 'closebutton',
	                style: {
	                    position: 'absolute',
	                    top: '3px',
	                    right: '1px',
	                    cursor: 'pointer'
	                },
	                onClick: this.hide.bind(this)
	            }]
	        }]
	    };

	    var container = UI$1.create(data);
	    container.render();
	};

	/**
	 * 打开脚本文件
	 * @param {*} uuid 脚本uuid
	 * @param {*} name 名称
	 * @param {*} mode 类型 javascript、vertexShader、fragmentShader、json 默认：javascript
	 * @param {*} source 源码 文件初始代码 默认：空
	 * @param {*} title 标题 文件标题 默认：未命名.${文件类型}
	 * @param {*} callback 回调函数
	 */
	ScriptEditor.prototype.open = function (uuid, name, mode, source, title, callback) {
	    if (this.init === undefined) {
	        this.init = true;
	        this.app.require(['codemirror', 'codemirror-addon', 'esprima', 'jsonlint', 'glslprep', 'acorn', 'ternjs']).then(() => {
	            this._initCodeMirror();
	            this._openScript(uuid, name, mode, source, title, callback);
	        });
	    } else {
	        this._openScript(uuid, name, mode, source, title, callback);
	    }
	};


	ScriptEditor.prototype._initCodeMirror = function () {
	    var container = UI$1.get('scriptEditor');

	    var codemirror = CodeMirror(container.dom, {
	        value: '',
	        lineNumbers: true,
	        matchBrackets: true,
	        indentWithTabs: true,
	        tabSize: 4,
	        indentUnit: 4,
	        hintOptions: {
	            completeSingle: false
	        }
	    });

	    codemirror.setOption('theme', 'monokai');
	    codemirror.on('change', this.onCodeMirrorChange.bind(this));

	    // 防止回退键删除物体
	    var wrapper = codemirror.getWrapperElement();
	    wrapper.addEventListener('keydown', event => {
	        event.stopPropagation();
	    });

	    // tern js 自动完成
	    var server = new CodeMirror.TernServer({
	        caseInsensitive: true,
	        plugins: { threejs: null }
	    });

	    // 快捷键
	    codemirror.setOption('extraKeys', {
	        'Ctrl-Space': cm => { server.complete(cm); },
	        'Ctrl-I': cm => { server.showType(cm); },
	        'Ctrl-O': cm => { server.showDocs(cm); },
	        'Alt-.': cm => { server.jumpToDef(cm); },
	        'Alt-,': cm => { server.jumpBack(cm); },
	        'Ctrl-Q': cm => { server.rename(cm); },
	        'Ctrl-.': cm => { server.selectName(cm); }
	    });

	    codemirror.on('cursorActivity', cm => {
	        if (this.mode !== 'javascript') {
	            return;
	        }
	        server.updateArgHints(cm);
	    });

	    codemirror.on('keypress', (cm, kb) => {
	        if (this.mode !== 'javascript') {
	            return;
	        }
	        var typed = String.fromCharCode(kb.which || kb.keyCode);
	        if (/[\w\.]/.exec(typed)) {
	            server.complete(cm);
	        }
	    });

	    this.codemirror = codemirror;
	    this.server = server;
	};

	ScriptEditor.prototype._openScript = function (uuid, name, mode, source, title, callback) {
	    var scriptTitle = UI$1.get('scriptTitle');

	    // 连续打开脚本时，自动保存上次打开的文件
	    if (this.uuid != null) {
	        this.save();
	        this.uuid = null;
	        this.name = null;
	        this.mode = null;
	        this.source = null;
	        this.title = null;
	    }

	    // 打开新文件
	    name = name || L_NO_NAME;
	    mode = mode || 'javascript';
	    source = source || '';
	    title = title || L_NO_NAME;
	    title = `${title}.${(mode === 'vertexShader' || mode === 'fragmentShader') ? '.glsl' : (mode === 'json' ? '.json' : '.js')}`;

	    this.uuid = uuid;
	    this.name = name;
	    this.mode = mode;
	    this.source = source;
	    this.title = title;
	    this.callback = callback;

	    this.show();

	    scriptTitle.setValue(title);

	    this.codemirror.setValue(source);

	    // 设置codemirror模式
	    if (mode === 'json') {
	        this.codemirror.setOption('mode', {
	            name: 'javascript',
	            json: true
	        });
	    } if (mode === 'vertexShader' || mode === 'fragmentShader') {
	        this.codemirror.setOption('mode', 'glsl');
	    } else {
	        this.codemirror.setOption('mode', mode);
	    }
	    this.codemirror.focus();
	    this.codemirror.setCursor({
	        line: 0,
	        ch: 0
	    });
	};

	/**
	 * 显示脚本编辑器
	 */
	ScriptEditor.prototype.show = function () {
	    var container = UI$1.get('scriptEditor');

	    container.dom.style.display = 'block';
	};

	/**
	 * 隐藏脚本编辑器
	 */
	ScriptEditor.prototype.hide = function () {
	    var container = UI$1.get('scriptEditor');

	    this.save();
	    container.dom.style.display = 'none';

	    this.uuid = null;
	    this.name = null;
	    this.mode = null;
	    this.source = null;
	    this.title = null;
	};

	/**
	 * 保存脚本
	 */
	ScriptEditor.prototype.save = function () {
	    var value = this.codemirror.getValue();

	    if (typeof (this.callback) === 'function') {
	        this.callback.call(this, value);
	    }

	    this.app.log(`${this.uuid} ${L_SCRIPT_SAVED_SUCCESS}`);
	};

	/**
	 * 刷新脚本编辑器
	 * @param {*} title 标题
	 * @param {*} source 代码
	 * @param {*} cursorPosition 光标位置
	 * @param {*} scrollInfo 滚动信息
	 */
	ScriptEditor.prototype.refresh = function (title, source, cursorPosition, scrollInfo) {
	    var container = UI$1.get('scriptEditor');
	    var title = UI$1.get('scriptTitle');

	    // 复制codemirror的历史记录，因为"codemirror.setValue(...)"函数会改变它的历史。
	    var history = this.codemirror.getHistory();
	    title.setValue(title);
	    this.codemirror.setValue(source);

	    if (cursorPosition !== undefined) {
	        this.codemirror.setCursor(cursorPosition);
	        this.codemirror.scrollTo(scrollInfo.left, scrollInfo.top);
	    }

	    this.codemirror.setHistory(history); // 设置历史到先前状态
	};

	/**
	 * 代码修改事件
	 */
	ScriptEditor.prototype.onCodeMirrorChange = function () {
	    if (this.codemirror.state.focused === false) {
	        return;
	    }

	    if (this.delay) {
	        clearTimeout(this.delay);
	    }

	    this.delay = setTimeout(() => {
	        var code = this.codemirror.getValue();
	        this.validate(code);
	    }, this.delayTime);
	};

	/**
	 * 校验编辑器中代码正确性
	 * @param {*} string 
	 */
	ScriptEditor.prototype.validate = function (string) {
	    var codemirror = this.codemirror;
	    var mode = this.mode;

	    var errorLines = this.errorLines;
	    var widgets = this.widgets;

	    var errors = [];

	    return codemirror.operation(() => {
	        while (errorLines.length > 0) {
	            codemirror.removeLineClass(errorLines.shift(), 'background', 'errorLine');
	        }

	        while (widgets.length > 0) {
	            codemirror.removeLineWidget(widgets.shift());
	        }

	        switch (mode) {
	            case 'javascript':
	                try {
	                    var syntax = esprima.parse(string, { tolerant: true });
	                    errors = syntax.errors;
	                } catch (error) {
	                    errors.push({
	                        lineNumber: error.lineNumber - 1,
	                        message: error.message
	                    });
	                }

	                for (var i = 0; i < errors.length; i++) {
	                    var error = errors[i];
	                    error.message = error.message.replace(/Line [0-9]+: /, '');
	                }
	                break;
	            case 'json':
	                jsonlint.parseError = (message, info) => {
	                    message = message.split('\n')[3];
	                    errors.push({
	                        lineNumber: info.loc.first_line - 1,
	                        message: message
	                    });
	                };

	                try {
	                    jsonlint.parse(string);
	                } catch (error) {
	                    // ignore failed error recovery
	                }
	                break;
	            case 'vertexShader':
	            case 'fragmentShader':
	                try {
	                    var shaderType = mode === 'vertexShader' ? glslprep.Shader.VERTEX : glslprep.Shader.FRAGMENT;
	                    glslprep.parseGlsl(string, shaderType);
	                } catch (error) {
	                    if (error instanceof glslprep.SyntaxError) {
	                        errors.push({
	                            lineNumber: error.line,
	                            message: "Syntax Error: " + error.message
	                        });
	                    } else {
	                        console.error(error.stack || error);
	                    }
	                }
	        }

	        for (var i = 0; i < errors.length; i++) {
	            var error = errors[i];

	            var message = document.createElement('div');
	            message.className = 'esprima-error';
	            message.textContent = error.message;

	            var lineNumber = Math.max(error.lineNumber, 0);
	            errorLines.push(lineNumber);

	            codemirror.addLineClass(lineNumber, 'background', 'errorLine');

	            var widget = codemirror.addLineWidget(lineNumber, message);
	            widgets.push(widget);
	        }

	        return errors.length === 0;
	    });
	};

	/**
	 * 历史记录
	 * @author dforrer / https://github.com/dforrer
	 * Developed as part of a project at University of Applied Sciences and Arts Northwestern Switzerland (www.fhnw.ch)
	 */
	function History(editor) {
	    this.app = editor.app;

	    this.editor = editor;
	    this.undos = [];
	    this.redos = [];
	    this.lastCmdTime = new Date();
	    this.idCounter = 0;

	    Command.call(this, editor);
	}
	History.prototype = Object.create(Command.prototype);

	Object.assign(History.prototype, {

	    constructor: History,

	    execute: function (cmd, optionalName) {

	        var lastCmd = this.undos[this.undos.length - 1];
	        var timeDifference = new Date().getTime() - this.lastCmdTime.getTime();

	        var isUpdatableCmd = lastCmd &&
	            lastCmd.updatable &&
	            cmd.updatable &&
	            lastCmd.object === cmd.object &&
	            lastCmd.type === cmd.type &&
	            lastCmd.script === cmd.script &&
	            lastCmd.attributeName === cmd.attributeName;

	        if (isUpdatableCmd && cmd.type === "SetScriptValueCommand") {

	            // When the cmd.type is "SetScriptValueCommand" the timeDifference is ignored

	            lastCmd.update(cmd);
	            cmd = lastCmd;

	        } else if (isUpdatableCmd && timeDifference < 500) {

	            lastCmd.update(cmd);
	            cmd = lastCmd;

	        } else {

	            // the command is not updatable and is added as a new part of the history

	            this.undos.push(cmd);
	            cmd.id = ++this.idCounter;

	        }
	        cmd.name = (optionalName !== undefined) ? optionalName : cmd.name;
	        cmd.execute();
	        cmd.inMemory = true;

	        this.lastCmdTime = new Date();

	        // clearing all the redo-commands

	        this.redos = [];
	        this.app.call('historyChanged', this, cmd);

	    },

	    undo: function () {
	        var cmd = undefined;

	        if (this.undos.length > 0) {
	            cmd = this.undos.pop();

	            if (cmd.inMemory === false) {
	                cmd.fromJSON(cmd.json);
	            }
	        }

	        if (cmd !== undefined) {
	            cmd.undo();
	            this.redos.push(cmd);
	            this.app.call('historyChanged', this, cmd);
	        }

	        return cmd;
	    },

	    redo: function () {
	        var cmd = undefined;

	        if (this.redos.length > 0) {
	            cmd = this.redos.pop();

	            if (cmd.inMemory === false) {
	                cmd.fromJSON(cmd.json);
	            }
	        }

	        if (cmd !== undefined) {
	            cmd.execute();
	            this.undos.push(cmd);
	            this.app.call('historyChanged', this, cmd);
	        }

	        return cmd;
	    },

	    toJSON: function () {
	        var history = {};
	        history.undos = [];
	        history.redos = [];

	        // Append Undos to History
	        for (var i = 0; i < this.undos.length; i++) {
	            if (this.undos[i].hasOwnProperty("json")) {
	                history.undos.push(this.undos[i].json);
	            }
	        }

	        // Append Redos to History
	        for (var i = 0; i < this.redos.length; i++) {
	            if (this.redos[i].hasOwnProperty("json")) {
	                history.redos.push(this.redos[i].json);
	            }
	        }

	        return history;
	    },

	    fromJSON: function (json) {
	        if (json === undefined) return;

	        for (var i = 0; i < json.undos.length; i++) {
	            var cmdJSON = json.undos[i];
	            var cmd = new window[cmdJSON.type](); // creates a new object of type "json.type"
	            cmd.json = cmdJSON;
	            cmd.id = cmdJSON.id;
	            cmd.name = cmdJSON.name;
	            this.undos.push(cmd);
	            this.idCounter = (cmdJSON.id > this.idCounter) ? cmdJSON.id : this.idCounter; // set last used idCounter
	        }

	        for (var i = 0; i < json.redos.length; i++) {
	            var cmdJSON = json.redos[i];
	            var cmd = new window[cmdJSON.type](); // creates a new object of type "json.type"
	            cmd.json = cmdJSON;
	            cmd.id = cmdJSON.id;
	            cmd.name = cmdJSON.name;
	            this.redos.push(cmd);
	            this.idCounter = (cmdJSON.id > this.idCounter) ? cmdJSON.id : this.idCounter; // set last used idCounter
	        }

	        // Select the last executed undo-command
	        this.app.call('historyChanged', this, this.undos[this.undos.length - 1]);
	    },

	    clear: function () {
	        this.undos = [];
	        this.redos = [];
	        this.idCounter = 0;

	        this.app.call('historyChanged', this);
	    },

	    goToState: function (id) {
	        var cmd = this.undos.length > 0 ? this.undos[this.undos.length - 1] : undefined; // next cmd to pop

	        if (cmd === undefined || id > cmd.id) {
	            cmd = this.redo();
	            while (cmd !== undefined && id > cmd.id) {
	                cmd = this.redo();
	            }
	        } else {
	            while (true) {
	                cmd = this.undos[this.undos.length - 1]; // next cmd to pop
	                if (cmd === undefined || id === cmd.id) break;
	                cmd = this.undo();
	            }
	        }

	        this.editor.app.call('sceneGraphChanged', this);
	        this.editor.app.call('historyChanged', this, cmd);
	    },

	    enableSerialization: function (id) {

	        /**
	         * because there might be commands in this.undos and this.redos
	         * which have not been serialized with .toJSON() we go back
	         * to the oldest command and redo one command after the other
	         * while also calling .toJSON() on them.
	         */

	        this.goToState(-1);

	        var cmd = this.redo();
	        while (cmd !== undefined) {
	            if (!cmd.hasOwnProperty("json")) {
	                cmd.json = cmd.toJSON();
	            }
	            cmd = this.redo();
	        }

	        this.goToState(id);
	    }
	});

	/**
	 * 网格帮助器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} app 
	 */
	function GridHelper(app) {
	    BaseHelper.call(this, app);
	}

	GridHelper.prototype = Object.create(BaseHelper.prototype);
	GridHelper.prototype.constructor = GridHelper;

	GridHelper.prototype.start = function () {
	    this.app.on(`storageChanged.${this.id}`, this.onStorageChanged.bind(this));
	    this.update();
	};

	GridHelper.prototype.stop = function () {
	    this.app.on(`appStarted.${this.id}`, null);

	    if (this.helper) {
	        var scene = this.app.editor.sceneHelpers;
	        scene.remove(this.helper);
	        delete this.helper;
	    }
	};

	GridHelper.prototype.update = function () {
	    var showGrid = this.app.storage.get('showGrid');

	    if (!this.helper) {
	        this.helper = new THREE.GridHelper(30, 30, 0x444444, 0x888888);
	    }

	    var scene = this.app.editor.sceneHelpers;

	    if (showGrid && this.helper.parent !== scene) {
	        scene.add(this.helper);
	    } else if (!showGrid && this.helper.parent === scene) {
	        scene.remove(this.helper);
	    }
	};

	GridHelper.prototype.onStorageChanged = function (key, value) {
	    if (key === 'showGrid') {
	        this.update();
	    }
	};

	/**
	 * 相机帮助器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} app 
	 */
	function CameraHelper(app) {
	    BaseHelper.call(this, app);
	}

	CameraHelper.prototype = Object.create(BaseHelper.prototype);
	CameraHelper.prototype.constructor = CameraHelper;

	CameraHelper.prototype.start = function () {
	    this.app.on(`storageChanged.${this.id}`, this.onStorageChanged.bind(this));
	    this.update();
	};

	CameraHelper.prototype.stop = function () {
	    this.app.on(`appStarted.${this.id}`, null);

	    if (this.helper) {
	        var scene = this.app.editor.sceneHelpers;
	        scene.remove(this.helper);
	        delete this.helper;
	    }
	};

	CameraHelper.prototype.update = function () {
	    var showCamera = this.app.storage.get('showCamera');

	    if (!this.helper) {
	        this.helper = new THREE.CameraHelper(this.app.editor.camera);
	    }

	    var scene = this.app.editor.sceneHelpers;

	    if (showCamera && this.helper.parent !== scene) {
	        scene.add(this.helper);
	    } else if (!showCamera && this.helper.parent === scene) {
	        scene.remove(this.helper);
	    }
	};

	CameraHelper.prototype.onStorageChanged = function (key, value) {
	    if (key === 'showCamera') {
	        this.update();
	    }
	};

	/**
	 * 具有一定体积的点光源帮助器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} light 
	 * @param {*} sphereSize 
	 * @param {*} color 
	 */
	function VolumePointLightHelper(light, sphereSize, color) {
	    THREE.PointLightHelper.call(this, light, sphereSize, color);

	    var geometry = new THREE.SphereBufferGeometry(2, 4, 2);
	    var material = new THREE.MeshBasicMaterial({
	        color: 0xff0000,
	        visible: false
	    });

	    this.picker = new THREE.Mesh(geometry, material);
	    this.picker.name = 'picker';
	    this.add(this.picker);
	}

	VolumePointLightHelper.prototype = Object.create(THREE.PointLightHelper.prototype);
	VolumePointLightHelper.prototype.constructor = VolumePointLightHelper;

	VolumePointLightHelper.prototype.raycast = function (raycaster, intersects) {
	    var intersect = raycaster.intersectObject(this.picker)[0];
	    if (intersect) {
	        intersect.object = this.light;
	        intersects.push(intersect);
	    }
	};

	VolumePointLightHelper.prototype.dispose = function () {
	    this.remove(this.picker);

	    this.picker.geometry.dispose();
	    this.picker.material.dispose();
	    delete this.picker;

	    THREE.PointLightHelper.prototype.dispose.call(this);
	};

	/**
	 * 点光源帮助器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} app 
	 */
	function PointLightHelpers(app) {
	    BaseHelper.call(this, app);

	    this.helpers = [];
	}

	PointLightHelpers.prototype = Object.create(BaseHelper.prototype);
	PointLightHelpers.prototype.constructor = PointLightHelpers;

	PointLightHelpers.prototype.start = function () {
	    this.app.on(`objectAdded.${this.id}`, this.onObjectAdded.bind(this));
	    this.app.on(`objectRemoved.${this.id}`, this.onObjectRemoved.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	    this.app.on(`storageChanged.${this.id}`, this.onStorageChanged.bind(this));
	};

	PointLightHelpers.prototype.stop = function () {
	    this.app.on(`objectAdded.${this.id}`, null);
	    this.app.on(`objectRemoved.${this.id}`, null);
	    this.app.on(`objectChanged.${this.id}`, null);
	    this.app.on(`storageChanged.${this.id}`, null);
	};

	PointLightHelpers.prototype.onObjectAdded = function (object) {
	    if (!object.isPointLight) {
	        return;
	    }

	    var helper = new VolumePointLightHelper(object, 1);

	    helper.visible = this.app.storage.get('showPointLight');

	    this.helpers.push(helper);

	    this.app.editor.sceneHelpers.add(helper);
	};

	PointLightHelpers.prototype.onObjectRemoved = function (object) {
	    if (!object.isPointLight) {
	        return;
	    }

	    var index = this.helpers.findIndex(n => {
	        return n.light === object;
	    });

	    if (index === -1) {
	        return;
	    }

	    this.app.editor.sceneHelpers.remove(this.helpers[index]);

	    this.helpers[index].dispose();

	    this.helpers.splice(index, 1);
	};

	PointLightHelpers.prototype.onObjectChanged = function (object) {
	    if (!object.isPointLight) {
	        return;
	    }

	    var index = this.helpers.findIndex(n => {
	        return n.light === object;
	    });

	    if (index === -1) {
	        return;
	    }

	    this.helpers[index].update();
	};

	PointLightHelpers.prototype.onStorageChanged = function (key, value) {
	    if (key !== 'showPointLight') {
	        return;
	    }

	    this.helpers.forEach(n => {
	        n.visible = value;
	    });
	};

	/**
	 * 具有一定体积的平行光帮助器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} light 
	 * @param {*} size 
	 * @param {*} color 
	 */
	function VolumeDirectionalLightHelper(light, size, color) {
	    THREE.DirectionalLightHelper.call(this, light, size, color);

	    var geometry = new THREE.SphereBufferGeometry(2, 4, 2);
	    var material = new THREE.MeshBasicMaterial({
	        color: 0xff0000,
	        visible: false
	    });

	    this.picker = new THREE.Mesh(geometry, material);
	    this.picker.name = 'picker';
	    this.add(this.picker);
	}

	VolumeDirectionalLightHelper.prototype = Object.create(THREE.DirectionalLightHelper.prototype);
	VolumeDirectionalLightHelper.prototype.constructor = VolumeDirectionalLightHelper;

	VolumeDirectionalLightHelper.prototype.raycast = function (raycaster, intersects) {
	    var intersect = raycaster.intersectObject(this.picker)[0];
	    if (intersect) {
	        intersect.object = this.light;
	        intersects.push(intersect);
	    }
	};

	VolumeDirectionalLightHelper.prototype.dispose = function () {
	    this.remove(this.picker);

	    this.picker.geometry.dispose();
	    this.picker.material.dispose();
	    delete this.picker;

	    THREE.DirectionalLightHelper.prototype.dispose.call(this);
	};

	/**
	 * 平行光帮助器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} app 
	 */
	function DirectionalLightHelpers(app) {
	    BaseHelper.call(this, app);

	    this.helpers = [];
	}

	DirectionalLightHelpers.prototype = Object.create(BaseHelper.prototype);
	DirectionalLightHelpers.prototype.constructor = DirectionalLightHelpers;

	DirectionalLightHelpers.prototype.start = function () {
	    this.app.on(`objectAdded.${this.id}`, this.onObjectAdded.bind(this));
	    this.app.on(`objectRemoved.${this.id}`, this.onObjectRemoved.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	    this.app.on(`storageChanged.${this.id}`, this.onStorageChanged.bind(this));
	};

	DirectionalLightHelpers.prototype.stop = function () {
	    this.app.on(`objectAdded.${this.id}`, null);
	    this.app.on(`objectRemoved.${this.id}`, null);
	    this.app.on(`objectChanged.${this.id}`, null);
	    this.app.on(`storageChanged.${this.id}`, null);
	};

	DirectionalLightHelpers.prototype.onObjectAdded = function (object) {
	    if (!object.isDirectionalLight) {
	        return;
	    }

	    var helper = new VolumeDirectionalLightHelper(object, 1);

	    helper.visible = this.app.storage.get('showDirectionalLight');
	    
	    this.helpers.push(helper);

	    this.app.editor.sceneHelpers.add(helper);
	};

	DirectionalLightHelpers.prototype.onObjectRemoved = function (object) {
	    if (!object.isDirectionalLight) {
	        return;
	    }

	    var index = this.helpers.findIndex(n => {
	        return n.light === object;
	    });

	    if (index === -1) {
	        return;
	    }

	    this.app.editor.sceneHelpers.remove(this.helpers[index]);
	    this.helpers[index].dispose();

	    this.helpers.splice(index, 1);
	};

	DirectionalLightHelpers.prototype.onObjectChanged = function (object) {
	    if (!object.isDirectionalLight) {
	        return;
	    }

	    var index = this.helpers.findIndex(n => {
	        return n.light === object;
	    });

	    if (index === -1) {
	        return;
	    }

	    this.helpers[index].update();
	};

	DirectionalLightHelpers.prototype.onStorageChanged = function (key, value) {
	    if (key !== 'showDirectionalLight') {
	        return;
	    }

	    this.helpers.forEach(n => {
	        n.visible = value;
	    });
	};

	/**
	 * 具有一定体积的半球光帮助器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} light 
	 * @param {*} size 
	 * @param {*} color 
	 */
	function VolumeHemisphereLightHelper(light, size, color) {
	    THREE.HemisphereLightHelper.call(this, light, size, color);

	    var geometry = new THREE.SphereBufferGeometry(2, 4, 2);
	    var material = new THREE.MeshBasicMaterial({
	        color: 0xff0000,
	        visible: false
	    });

	    this.picker = new THREE.Mesh(geometry, material);
	    this.picker.name = 'picker';
	    this.add(this.picker);
	}

	VolumeHemisphereLightHelper.prototype = Object.create(THREE.HemisphereLightHelper.prototype);
	VolumeHemisphereLightHelper.prototype.constructor = VolumeHemisphereLightHelper;

	VolumeHemisphereLightHelper.prototype.raycast = function (raycaster, intersects) {
	    var intersect = raycaster.intersectObject(this.picker)[0];
	    if (intersect) {
	        intersect.object = this.light;
	        intersects.push(intersect);
	    }
	};

	VolumeHemisphereLightHelper.prototype.dispose = function () {
	    this.remove(this.picker);

	    this.picker.geometry.dispose();
	    this.picker.material.dispose();
	    delete this.picker;

	    THREE.HemisphereLightHelper.prototype.dispose.call(this);
	};

	/**
	 * 半球光帮助器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} app 
	 */
	function HemisphereLightHelpers(app) {
	    BaseHelper.call(this, app);

	    this.helpers = [];
	}

	HemisphereLightHelpers.prototype = Object.create(BaseHelper.prototype);
	HemisphereLightHelpers.prototype.constructor = HemisphereLightHelpers;

	HemisphereLightHelpers.prototype.start = function () {
	    this.app.on(`objectAdded.${this.id}`, this.onObjectAdded.bind(this));
	    this.app.on(`objectRemoved.${this.id}`, this.onObjectRemoved.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	    this.app.on(`storageChanged.${this.id}`, this.onStorageChanged.bind(this));
	};

	HemisphereLightHelpers.prototype.stop = function () {
	    this.app.on(`objectAdded.${this.id}`, null);
	    this.app.on(`objectRemoved.${this.id}`, null);
	    this.app.on(`objectChanged.${this.id}`, null);
	    this.app.on(`storageChanged.${this.id}`, null);
	};

	HemisphereLightHelpers.prototype.onObjectAdded = function (object) {
	    if (!object.isHemisphereLight) {
	        return;
	    }

	    var helper = new VolumeHemisphereLightHelper(object, 1);

	    helper.visible = this.app.storage.get('showHemisphereLight');

	    this.helpers.push(helper);

	    this.app.editor.sceneHelpers.add(helper);
	};

	HemisphereLightHelpers.prototype.onObjectRemoved = function (object) {
	    if (!object.isHemisphereLight) {
	        return;
	    }

	    var index = this.helpers.findIndex(n => {
	        return n.light === object;
	    });

	    if (index === -1) {
	        return;
	    }

	    this.app.editor.sceneHelpers.remove(this.helpers[index]);
	    this.helpers[index].dispose();

	    this.helpers.splice(index, 1);
	};

	HemisphereLightHelpers.prototype.onObjectChanged = function (object) {
	    if (!object.isHemisphereLight) {
	        return;
	    }

	    var index = this.helpers.findIndex(n => {
	        return n.light === object;
	    });

	    if (index === -1) {
	        return;
	    }

	    this.helpers[index].update();
	};

	HemisphereLightHelpers.prototype.onStorageChanged = function (key, value) {
	    if (key !== 'showHemisphereLight') {
	        return;
	    }

	    this.helpers.forEach(n => {
	        n.visible = value;
	    });
	};

	/**
	 * 具有一定体积的矩形光帮助器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} light 
	 * @param {*} color 
	 */
	function VolumeRectAreaLightHelper(light, color) {
	    THREE.RectAreaLightHelper.call(this, light, color);

	    // TODO: three.js bugs： 未设置矩形光帮助器矩阵
	    this.matrix = light.matrixWorld;
	    this.matrixAutoUpdate = false;

	    var geometry = new THREE.SphereBufferGeometry(2, 4, 2);
	    var material = new THREE.MeshBasicMaterial({
	        color: 0xff0000,
	        visible: false
	    });

	    this.picker = new THREE.Mesh(geometry, material);
	    this.picker.name = 'picker';
	    this.add(this.picker);
	}

	VolumeRectAreaLightHelper.prototype = Object.create(THREE.RectAreaLightHelper.prototype);
	VolumeRectAreaLightHelper.prototype.constructor = VolumeRectAreaLightHelper;

	VolumeRectAreaLightHelper.prototype.raycast = function (raycaster, intersects) {
	    var intersect = raycaster.intersectObject(this.picker)[0];
	    if (intersect) {
	        intersect.object = this.light;
	        intersects.push(intersect);
	    }
	};

	VolumeRectAreaLightHelper.prototype.dispose = function () {
	    this.remove(this.picker);

	    this.picker.geometry.dispose();
	    this.picker.material.dispose();
	    delete this.picker;

	    THREE.RectAreaLightHelper.prototype.dispose.call(this);
	};

	/**
	 * 矩形光帮助器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} app 
	 */
	function RectAreaLightHelpers(app) {
	    BaseHelper.call(this, app);

	    this.helpers = [];
	}

	RectAreaLightHelpers.prototype = Object.create(BaseHelper.prototype);
	RectAreaLightHelpers.prototype.constructor = RectAreaLightHelpers;

	RectAreaLightHelpers.prototype.start = function () {
	    this.app.on(`objectAdded.${this.id}`, this.onObjectAdded.bind(this));
	    this.app.on(`objectRemoved.${this.id}`, this.onObjectRemoved.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	    this.app.on(`storageChanged.${this.id}`, this.onStorageChanged.bind(this));
	};

	RectAreaLightHelpers.prototype.stop = function () {
	    this.app.on(`objectAdded.${this.id}`, null);
	    this.app.on(`objectRemoved.${this.id}`, null);
	    this.app.on(`objectChanged.${this.id}`, null);
	    this.app.on(`storageChanged.${this.id}`, null);
	};

	RectAreaLightHelpers.prototype.onObjectAdded = function (object) {
	    if (!object.isRectAreaLight) {
	        return;
	    }

	    var helper = new VolumeRectAreaLightHelper(object, 0xffffff);

	    helper.visible = this.app.storage.get('showRectAreaLight');

	    this.helpers.push(helper);

	    this.app.editor.sceneHelpers.add(helper);
	};

	RectAreaLightHelpers.prototype.onObjectRemoved = function (object) {
	    if (!object.isRectAreaLight) {
	        return;
	    }

	    var index = this.helpers.findIndex(n => {
	        return n.light === object;
	    });

	    if (index === -1) {
	        return;
	    }

	    this.app.editor.sceneHelpers.remove(this.helpers[index]);

	    this.helpers[index].dispose();

	    this.helpers.splice(index, 1);
	};

	RectAreaLightHelpers.prototype.onObjectChanged = function (object) {
	    if (!object.isRectAreaLight) {
	        return;
	    }

	    var index = this.helpers.findIndex(n => {
	        return n.light === object;
	    });

	    if (index === -1) {
	        return;
	    }

	    this.helpers[index].update();
	};

	RectAreaLightHelpers.prototype.onStorageChanged = function (key, value) {
	    if (key !== 'showRectAreaLight') {
	        return;
	    }

	    this.helpers.forEach(n => {
	        n.visible = value;
	    });
	};

	/**
	 * 具有一定体积的聚光灯帮助器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} light 
	 * @param {*} color 
	 */
	function VolumeSpotLightHelper(light, color) {
	    THREE.SpotLightHelper.call(this, light, color);

	    var geometry = new THREE.SphereBufferGeometry(2, 4, 2);
	    var material = new THREE.MeshBasicMaterial({
	        color: 0xff0000,
	        visible: false
	    });

	    this.picker = new THREE.Mesh(geometry, material);
	    this.picker.name = 'picker';
	    this.add(this.picker);
	}

	VolumeSpotLightHelper.prototype = Object.create(THREE.SpotLightHelper.prototype);
	VolumeSpotLightHelper.prototype.constructor = VolumeSpotLightHelper;

	VolumeSpotLightHelper.prototype.raycast = function (raycaster, intersects) {
	    var intersect = raycaster.intersectObject(this.picker)[0];
	    if (intersect) {
	        intersect.object = this.light;
	        intersects.push(intersect);
	    }
	};

	VolumeSpotLightHelper.prototype.dispose = function () {
	    this.remove(this.picker);

	    this.picker.geometry.dispose();
	    this.picker.material.dispose();
	    delete this.picker;

	    THREE.SpotLightHelper.prototype.dispose.call(this);
	};

	/**
	 * 聚光灯帮助器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} app 
	 */
	function SpotLightHelpers(app) {
	    BaseHelper.call(this, app);

	    this.helpers = [];
	}

	SpotLightHelpers.prototype = Object.create(BaseHelper.prototype);
	SpotLightHelpers.prototype.constructor = SpotLightHelpers;

	SpotLightHelpers.prototype.start = function () {
	    this.app.on(`objectAdded.${this.id}`, this.onObjectAdded.bind(this));
	    this.app.on(`objectRemoved.${this.id}`, this.onObjectRemoved.bind(this));
	    this.app.on(`objectChanged.${this.id}`, this.onObjectChanged.bind(this));
	    this.app.on(`storageChanged.${this.id}`, this.onStorageChanged.bind(this));
	};

	SpotLightHelpers.prototype.stop = function () {
	    this.app.on(`objectAdded.${this.id}`, null);
	    this.app.on(`objectRemoved.${this.id}`, null);
	    this.app.on(`objectChanged.${this.id}`, null);
	    this.app.on(`storageChanged.${this.id}`, null);
	};

	SpotLightHelpers.prototype.onObjectAdded = function (object) {
	    if (!object.isSpotLight) {
	        return;
	    }

	    var helper = new VolumeSpotLightHelper(object, 0xffffff);

	    helper.visible = this.app.storage.get('showSpotLight');

	    this.helpers.push(helper);

	    this.app.editor.sceneHelpers.add(helper);
	};

	SpotLightHelpers.prototype.onObjectRemoved = function (object) {
	    if (!object.isSpotLight) {
	        return;
	    }

	    var index = this.helpers.findIndex(n => {
	        return n.light === object;
	    });

	    if (index === -1) {
	        return;
	    }

	    this.app.editor.sceneHelpers.remove(this.helpers[index]);

	    this.helpers[index].dispose();

	    this.helpers.splice(index, 1);
	};

	SpotLightHelpers.prototype.onObjectChanged = function (object) {
	    if (!object.isSpotLight) {
	        return;
	    }

	    var index = this.helpers.findIndex(n => {
	        return n.light === object;
	    });

	    if (index === -1) {
	        return;
	    }

	    this.helpers[index].update();
	};

	SpotLightHelpers.prototype.onStorageChanged = function (key, value) {
	    if (key !== 'showSpotLight') {
	        return;
	    }

	    this.helpers.forEach(n => {
	        n.visible = value;
	    });
	};

	var ArrowVertex = "precision highp float;\r\nprecision highp int;\r\n\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n\r\nuniform mat4 modelViewMatrix;\r\nuniform mat4 projectionMatrix;\r\nuniform mat3 normalMatrix;\r\n\r\nuniform float domWidth;\r\nuniform float domHeight;\r\nuniform float size;\r\nuniform float z;\r\n\r\nvarying vec3 vPosition;\r\nvarying vec3 vNormal;\r\n\r\nvoid main() {\r\n    mat4 translateMatrix = mat4(\r\n        1.0, 0.0, 0.0, 0.0,\r\n        0.0, 1.0, 0.0, 0.0,\r\n        0.0, 0.0, 1.0, 0.0,\r\n        1.0 - size / domWidth, 1.0 - size / domHeight, 0.0, 1.0\r\n    );\r\n\r\n    mat4 _modelViewMatrix = modelViewMatrix;\r\n    _modelViewMatrix[3][0] = 0.0;\r\n    _modelViewMatrix[3][1] = 0.0;\r\n    _modelViewMatrix[3][2] = -z;\r\n    \r\n    vec4 mvPosition = _modelViewMatrix * vec4(position, 1.0);\r\n\r\n    gl_Position = translateMatrix * projectionMatrix * mvPosition;\r\n    \r\n    vPosition = vec3(mvPosition);\r\n    vNormal = normalize(normalMatrix * normal);\r\n}";

	var ArrowFragment = "precision highp float;\r\nprecision highp int;\r\n\r\nuniform mat4 viewMatrix;\r\n\r\nuniform vec3 color;\r\nuniform vec3 ambientColor;\r\nuniform vec3 lightPosition;\r\nuniform vec3 diffuseColor;\r\nuniform float shininess;\r\n\r\nvarying vec3 vPosition;\r\nvarying vec3 vNormal;\r\n\r\nvoid main() {\r\n    vec3 ambient = ambientColor * color;\r\n    \r\n    vec3 normal = normalize(vNormal);\r\n    vec3 vLightPosition = vec3(0.0, 0.0, 1.0);\r\n    vec3 lightDirection = normalize(vLightPosition - vPosition);\r\n    float dotL = max(dot(lightDirection, normal), 0.0);\r\n    vec3 diffuse = diffuseColor * dotL * color;\r\n\r\n    vec3 eyeDirection = normalize(- vPosition);\r\n    vec3 reflectionDirection = reflect(-lightDirection, normal);\r\n    float specularLightWeight = pow(max(dot(reflectionDirection, eyeDirection), 0.0), shininess);\r\n    vec3 specular = color * specularLightWeight;\r\n\r\n    gl_FragColor = vec4(ambient + diffuse + specular, 1.0);\r\n}";

	/**
	 * 视角帮助器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} app 
	 */
	function ViewHelper(app) {
	    BaseHelper.call(this, app);
	}

	ViewHelper.prototype = Object.create(BaseHelper.prototype);
	ViewHelper.prototype.constructor = ViewHelper;

	ViewHelper.prototype.start = function () {
	    this.scene = new THREE.Scene();

	    this.mesh = this.createMesh();
	    this.scene.add(this.mesh);

	    this.app.on(`afterRender.${this.id}`, this.onAfterRender.bind(this));
	    this.app.on(`mousedown.${this.id}`, this.onMouseDown.bind(this));
	    this.app.on(`resize.${this.id}`, this.onResize.bind(this));
	};

	ViewHelper.prototype.stop = function () {
	    this.scene.remove(this.mesh);
	    delete this.scene;
	    delete this.mesh;
	    this.app.on(`afterRender.${this.id}`, null);
	    this.app.on(`mousedown.${this.id}`, null);
	    this.app.on(`resize.${this.id}`, null);
	};

	ViewHelper.prototype.createMesh = function () {
	    var geometry = new THREE.ConeBufferGeometry(0.25, 1.0, 16, 16);
	    geometry.computeBoundingBox();
	    geometry.translate(0, geometry.boundingBox.min.y, 0);

	    var geometryPX = geometry.clone();
	    geometryPX.rotateZ(Math.PI / 2);

	    var geometryNX = geometry.clone();
	    geometryNX.rotateZ(-Math.PI / 2);

	    var geometryPY = geometry.clone();
	    geometryPY.rotateX(Math.PI);

	    var geometryNY = geometry.clone();

	    var geometryPZ = geometry.clone();
	    geometryPZ.rotateX(-Math.PI / 2);

	    var geometryNZ = geometry.clone();
	    geometryNZ.rotateX(Math.PI / 2);

	    geometry = THREE.BufferGeometryUtils.mergeBufferGeometries([
	        geometryPX,
	        geometryNX,
	        geometryPY,
	        geometryNY,
	        geometryPZ,
	        geometryNZ
	    ], true);

	    var domElement = this.app.editor.renderer.domElement;
	    var domWidth = domElement.clientWidth;
	    var domHeight = domElement.clientHeight;
	    this.z = 16; // 控件中心到相机距离，越远越小

	    var fov = this.app.editor.camera.fov;
	    var top = this.z * Math.tan(fov * Math.PI / 180 * 0.5); // 到相机垂直距离为z的地方屏幕高度一半
	    this.size = (domHeight / (2 * top) + 12) * 2; // 12为留白

	    var uniforms = {
	        domWidth: {
	            type: 'f',
	            value: domWidth
	        },
	        domHeight: {
	            type: 'f',
	            value: domHeight
	        },
	        size: {
	            type: 'f',
	            value: this.size
	        },
	        z: {
	            type: 'f',
	            value: this.z
	        },
	        color: {
	            type: 'v3',
	            value: new THREE.Vector3(1.0, 0.0, 0.0)
	        },
	        ambientColor: {
	            type: 'v3',
	            value: new THREE.Vector3(0.4, 0.4, 0.4)
	        },
	        lightPosition: {
	            type: 'v3',
	            value: new THREE.Vector3(10, 10, 10)
	        },
	        diffuseColor: {
	            type: 'v3',
	            value: new THREE.Vector3(1.0, 1.0, 1.0)
	        },
	        shininess: {
	            type: 'float',
	            value: 30
	        }
	    };

	    var material1 = new THREE.RawShaderMaterial({
	        uniforms: THREE.UniformsUtils.clone(uniforms),
	        vertexShader: ArrowVertex,
	        fragmentShader: ArrowFragment
	    });

	    var material2 = material1.clone();
	    material2.uniforms.color.value = new THREE.Vector3(0.5, 0.5, 0.5);

	    var material3 = material1.clone();
	    material3.uniforms.color.value = new THREE.Vector3(0.0, 1.0, 0.0);

	    var material4 = material1.clone();
	    material4.uniforms.color.value = new THREE.Vector3(0.5, 0.5, 0.5);

	    var material5 = material1.clone();
	    material5.uniforms.color.value = new THREE.Vector3(0.0, 0.0, 1.0);

	    var material6 = material1.clone();
	    material6.uniforms.color.value = new THREE.Vector3(0.5, 0.5, 0.5);

	    return new THREE.Mesh(geometry, [
	        material1,
	        material2,
	        material3,
	        material4,
	        material5,
	        material6
	    ]);
	};

	ViewHelper.prototype.onAfterRender = function () {
	    if (!this.app.editor.showViewHelper) {
	        return;
	    }

	    var renderer = this.app.editor.renderer;

	    // 最后绘制而且清空深度缓冲，保证视角控件不会被其他物体遮挡
	    renderer.clearDepth();
	    renderer.render(this.scene, this.app.editor.camera);
	};

	ViewHelper.prototype.onMouseDown = function (event) {
	    if (this.mouse === undefined) {
	        this.mouse = new THREE.Vector3();
	    }
	    if (this.raycaster === undefined) {
	        this.raycaster = new THREE.Raycaster();
	    }

	    var domElement = this.app.editor.renderer.domElement;

	    this.mouse.set(
	        event.offsetX / domElement.clientWidth * 2 - 1, -event.offsetY / domElement.clientHeight * 2 + 1
	    );
	    this.raycaster.setFromCamera(this.mouse, this.app.editor.camera);

	    // 设置几何体矩阵，将其转换到左上角
	    if (this.matrix === undefined) {
	        this.matrix = new THREE.Matrix4();
	    }

	    this.matrix.copy(this.mesh.matrixWorld);

	    // 旧：projectionMatrix * modelViewMatrix
	    // 新：translateMatrix * projectionMatrix * _modelViewMatrix
	    // matrixWorld = 

	    if (this.screenXY === undefined) {
	        this.screenXY = new THREE.Vector3();
	    }
	    this.screenXY.set(
	        (domElement.clientWidth - this.size / 2) / domElement.clientWidth * 2 - 1, -this.size / 2 / domElement.clientHeight * 2 + 1, -this.z
	    );

	    this.screenXY.unproject(this.app.editor.camera);

	    var obj = this.raycaster.intersectObject(this.mesh)[0];

	    this.mesh.matrixWorld.copy(this.matrix);

	    if (obj) {
	        var materialIndex = obj.face.materialIndex;
	    }
	};

	ViewHelper.prototype.onResize = function () {
	    var materials = this.mesh.material;
	    var width = this.app.editor.renderer.domElement.width;
	    var height = this.app.editor.renderer.domElement.height;
	    var fov = this.app.editor.camera.fov;
	    var top = this.z * Math.tan(fov * Math.PI / 180 * 0.5); // 到相机垂直距离为z的地方屏幕高度一半
	    this.size = (height / (2 * top) + 12) * 2; // 12为留白

	    materials.forEach(n => {
	        n.uniforms.domWidth.value = width;
	        n.uniforms.domHeight.value = height;
	        n.uniforms.size.value = this.size;
	    });
	};

	var OutlineVertex = "uniform float thickness;\r\n\r\n// Modified from http://forum.unity3d.com/threads/toon-outline-but-with-diffuse-surface.24668/\r\n\r\nvoid main() {\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n\r\n    vec3 norm = normalMatrix * normal;\r\n\r\n    norm.x *= projectionMatrix[0][0];\r\n    norm.y *= projectionMatrix[1][1];\r\n\r\n    gl_Position.xy += norm.xy * gl_Position.z * thickness;\r\n}";

	var OutlineFragment = "uniform vec3 color;\r\n\r\nvoid main() {\r\n    gl_FragColor = vec4(color, 1.0);\r\n}";

	/**
	 * 选择帮助器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} app 
	 */
	function SelectHelper(app) {
	    BaseHelper.call(this, app);
	}

	SelectHelper.prototype = Object.create(BaseHelper.prototype);
	SelectHelper.prototype.constructor = SelectHelper;

	SelectHelper.prototype.start = function () {
	    this.app.on(`objectSelected.${this.id}`, this.onObjectSelected.bind(this));
	    this.app.on(`objectRemoved.${this.id}`, this.onObjectRemoved.bind(this));
	    this.app.on(`afterRender.${this.id}`, this.onAfterRender.bind(this));
	};

	SelectHelper.prototype.stop = function () {
	    this.app.on(`objectSelected.${this.id}`, null);
	    this.app.on(`afterRender.${this.id}`, null);
	};

	SelectHelper.prototype.onObjectSelected = function (obj) {
	    if (!obj) {
	        this.unselect();
	        return;
	    }

	    // 进制选中场景和相机
	    if (obj === this.app.editor.scene || obj === this.app.editor.camera) {
	        return;
	    }

	    if (this.scene === undefined) {
	        this.scene = new THREE.Scene();
	    }

	    // 用于绘制模板的材质，尽量简单，不能使用原材质的原因如下：
	    // 由于两个场景光源不一样，使用原材质会不断更新材质，造成严重性能损耗。
	    if (this.basicMaterial === undefined) {
	        this.basicMaterial = new THREE.MeshBasicMaterial({
	            depthTest: false
	        });
	    }

	    // 用于绘制边框的材质
	    if (this.outlineMaterial === undefined) {
	        this.outlineMaterial = new THREE.ShaderMaterial({
	            vertexShader: OutlineVertex,
	            fragmentShader: OutlineFragment,
	            uniforms: {
	                thickness: { // 边界宽度
	                    type: 'f',
	                    value: 0.005
	                },
	                color: { // 边界颜色
	                    type: 'v3',
	                    value: new THREE.Vector3(1.0, 1.0, 1.0),
	                },
	            },
	            depthTest: false
	        });
	    }

	    this.object = obj;
	};

	SelectHelper.prototype.onObjectRemoved = function (object) {
	    if (object === this.object) {
	        this.unselect();
	    }
	};

	SelectHelper.prototype.unselect = function () {
	    if (this.object) {
	        delete this.object;
	    }
	};

	SelectHelper.prototype.onAfterRender = function () {
	    if (!this.object || !this.object.parent) {
	        // TODO: this.object.parent为null时表示该物体被移除
	        return;
	    }

	    var scene = this.scene;
	    var camera = this.app.editor.camera;
	    var renderer = this.app.editor.renderer;
	    var state = renderer.state;
	    var context = renderer.context;

	    // 将物体添加到当前场景
	    var parent = this.object.parent;
	    var index = parent.children.indexOf(this.object);
	    this.scene.add(this.object);

	    // 绘制模板
	    state.disable(context.DEPTH_TEST);

	    state.buffers.color.setMask(false);
	    state.buffers.depth.setMask(false);
	    state.buffers.stencil.setMask(true);

	    state.buffers.color.setLocked(true);
	    state.buffers.depth.setLocked(true);
	    state.buffers.stencil.setLocked(true);

	    state.buffers.stencil.setTest(true);
	    state.buffers.stencil.setClear(0x00);
	    renderer.clearStencil();
	    state.buffers.stencil.setFunc(context.ALWAYS, 1, 0xff);

	    this.scene.overrideMaterial = this.basicMaterial;
	    renderer.render(scene, camera);

	    // 绘制描边
	    state.buffers.color.setLocked(false);
	    state.buffers.stencil.setLocked(false);

	    state.buffers.color.setMask(true);
	    state.buffers.stencil.setMask(false);

	    state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.REPLACE);
	    state.buffers.stencil.setFunc(context.NOTEQUAL, 1, 0xff);

	    this.scene.overrideMaterial = this.outlineMaterial;
	    renderer.render(scene, camera);

	    // 还原原始状态
	    state.buffers.depth.setLocked(false);
	    state.buffers.depth.setMask(true);

	    state.enable(context.DEPTH_TEST);
	    state.buffers.stencil.setTest(false);

	    // 将物体放回原场景
	    this.scene.remove(this.object);
	    this.object.parent = parent;
	    parent.children.splice(index, 0, this.object);
	};

	/**
	 * 所有帮助器
	 * @author tengge / https://github.com/tengge1
	 * @param {*} app 
	 */
	function Helpers(app) {
	    BaseHelper.call(this, app);

	    this.helpers = [
	        new GridHelper(app),
	        new CameraHelper(app),
	        new PointLightHelpers(app),
	        new DirectionalLightHelpers(app),
	        new HemisphereLightHelpers(app),
	        new RectAreaLightHelpers(app),
	        new SpotLightHelpers(app),

	        new SelectHelper(app),
	        new ViewHelper(app),
	        new SplineHelper(app),
	    ];
	}

	Helpers.prototype = Object.create(BaseHelper.prototype);
	Helpers.prototype.constructor = Helpers;

	Helpers.prototype.start = function () {
	    this.helpers.forEach(n => {
	        n.start();
	    });
	};

	Helpers.prototype.stop = function () {
	    this.helpers.forEach(n => {
	        n.stop();
	    });
	};

	/**
	 * 编辑器
	 * @author mrdoob / http://mrdoob.com/
	 * @author tengge / https://github.com/tengge1
	 */
	function Editor(app) {
	    this.app = app;
	    this.app.editor = this;

	    // 基础
	    this.history = new History(this);

	    // 场景
	    this.scene = new THREE.Scene();
	    this.scene.name = L_SCENE;
	    this.scene.background = new THREE.Color(0xaaaaaa);

	    this.sceneHelpers = new THREE.Scene();

	    this.sceneID = null; // 当前场景ID
	    this.sceneName = null; // 当前场景名称

	    var width = this.app.viewport.container.dom.clientWidth;
	    var height = this.app.viewport.container.dom.clientHeight;

	    // 相机
	    this.DEFAULT_CAMERA = new THREE.PerspectiveCamera(50, width / height, 0.1, 10000);
	    this.DEFAULT_CAMERA.name = L_DEFAULT_CAMERA;
	    this.DEFAULT_CAMERA.userData.isDefault = true;
	    this.DEFAULT_CAMERA.userData.control = 'OrbitControls'; // 场景控制类型
	    this.DEFAULT_CAMERA.position.set(20, 10, 20);
	    this.DEFAULT_CAMERA.lookAt(new THREE.Vector3());

	    this.camera = this.DEFAULT_CAMERA.clone();

	    // 渲染器
	    this.renderer = new THREE.WebGLRenderer({
	        antialias: true
	    });
	    this.renderer.gammaInput = false;
	    this.renderer.gammaOutput = false;
	    this.renderer.shadowMap.enabled = true;
	    this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
	    this.renderer.autoClear = false;
	    this.renderer.autoUpdateScene = false;
	    this.renderer.setPixelRatio(window.devicePixelRatio);

	    this.app.viewport.container.dom.appendChild(this.renderer.domElement);
	    this.renderer.setSize(width, height);

	    // 音频监听器
	    this.audioListener = new THREE.AudioListener();
	    this.audioListener.name = L_AUDIO_LISTENER;

	    // 物体
	    this.objects = [];

	    // 脚本 格式：{ uuid: { id: 'MongoDB _id', name: 'Script Name', type: 'Script Type', source: 'Source Code', uuid: 'uuid' }}
	    // 其中，uuid是创建脚本时自动生成，不可改变，关联时使用，id是mongo数据库ID字段；name：随便填写；type：javascript，vertexShader, fragmentShader, json；source：源码。
	    this.scripts = {};

	    // 动画格式：[{ id: 'MongoDB _id', uuid: 'uuid', layer: '动画层序号', layerName: '动画层名称', animations: '动画' }, ...]
	    // 其中，动画：[{ id: 'MongoDB _id', uuid: 'uuid', name: '动画名称', target: '动画对象uuid', type: '动画类型', beginTime: '开始时间(s)', endTime: '结束时间(s)', data: '动画参数' }, ...]
	    // 其中，uuid是创建脚本时自动生成，不可改变，关联时使用。
	    // 动画层序号：在时间面板显示位置，从0开始计算。
	    // 动画类型：Tween-补间动画，Skeletal-骨骼动画，Audio-音频播放，Shader-着色器动画，Filter-滤镜动画，Particle-粒子动画
	    // 动画参数：是一个字典，根据动画类型不同，参数也不同
	    this.animations = [];

	    // 当前选中物体
	    this.selected = null;

	    // 平移旋转缩放控件
	    this.transformControls = new THREE.TransformControls(this.camera, this.app.viewport.container.dom);
	    this.sceneHelpers.add(this.transformControls);

	    // 编辑器控件
	    this.controls = new THREE.EditorControls(this.camera, this.app.viewport.container.dom);

	    // 碰撞检测
	    this.raycaster = new THREE.Raycaster();
	    this.mouse = new THREE.Vector2();

	    // 帮助器场景灯光
	    var light = new THREE.DirectionalLight(0xffffff, 1.0);
	    light.position.z = 10;
	    this.sceneHelpers.add(light);

	    this.showViewHelper = true;

	    // 事件
	    this.app.on(`appStarted.${this.id}`, this.onAppStarted.bind(this));

	    this.app.on(`mousedown.${this.id}`, this.onMouseDown.bind(this));
	    this.app.on(`mousemove.${this.id}`, this.onMouseMove.bind(this));

	    // 帮助器
	    this.helpers = new Helpers(this.app);
	}
	Editor.prototype.onAppStarted = function () {
	    this.helpers.start();
	    this.clear();
	};

	// -------------------- 场景 --------------------------

	Editor.prototype.setScene = function (scene) { // 设置场景
	    // 移除原有物体
	    var objects = this.scene.children;
	    while (objects.length > 0) {
	        this.removeObject(objects[0]);
	    }

	    // 添加新物体
	    var children = scene.children.slice();
	    scene.children.length = 0;
	    this.scene = scene;

	    children.forEach(n => {
	        this.addObject(n);
	    });

	    this.app.call('sceneGraphChanged', this);
	};

	Editor.prototype.clear = function (addObject = true) { // 清空场景
	    this.history.clear();

	    this.camera.copy(this.DEFAULT_CAMERA);

	    if (this.camera.children.findIndex(o => o instanceof THREE.AudioListener) === -1) {
	        this.camera.add(this.audioListener);
	    }

	    if (this.scene.background instanceof THREE.Texture) {
	        this.scene.background = new THREE.Color(0xaaaaaa);
	    } else if (this.scene.background instanceof THREE.Color) {
	        this.scene.background.setHex(0xaaaaaa);
	    }

	    this.scene.fog = null;

	    this.deselect();

	    // 移除场景物体
	    var objects = this.scene.children;

	    while (objects.length > 0) {
	        this.removeObject(objects[0]);
	    }

	    this.scripts = {};

	    this.animations = [{
	        id: null,
	        uuid: THREE.Math.generateUUID(),
	        layer: 0,
	        layerName: L_ANIMATION_LAYER_1,
	        animations: []
	    }, {
	        id: null,
	        uuid: THREE.Math.generateUUID(),
	        layer: 1,
	        layerName: L_ANIMATION_LAYER_2,
	        animations: []
	    }, {
	        id: null,
	        uuid: THREE.Math.generateUUID(),
	        layer: 2,
	        layerName: L_ANIMATION_LAYER_3,
	        animations: []
	    }];

	    // 添加默认元素
	    if (addObject) {
	        var light1 = new THREE.AmbientLight(0xffffff, 0.24);
	        light1.name = L_AMBIENT;
	        this.addObject(light1);

	        var light2 = new THREE.DirectionalLight(0xffffff, 0.56);
	        light2.name = L_DIRECTIONAL;
	        light2.castShadow = true;
	        light2.position.set(5, 10, 7.5);
	        light2.shadow.radius = 0;
	        light2.shadow.mapSize.x = 2048;
	        light2.shadow.mapSize.y = 2048;
	        light2.shadow.camera.left = -20;
	        light2.shadow.camera.right = 20;
	        light2.shadow.camera.top = 20;
	        light2.shadow.camera.bottom = -20;
	        light2.shadow.camera.near = 0.1;
	        light2.shadow.camera.far = 500;

	        this.addObject(light2);
	    }

	    this.app.call('editorCleared', this);
	    this.app.call('scriptChanged', this);
	    this.app.call('animationChanged', this);
	};

	// ---------------------- 物体 ---------------------------

	Editor.prototype.objectByUuid = function (uuid) { // 根据uuid获取物体
	    return this.scene.getObjectByProperty('uuid', uuid, true);
	};

	Editor.prototype.addObject = function (object) { // 添加物体
	    this.scene.add(object);
	    this.app.call('objectAdded', this, object);
	    this.app.call('sceneGraphChanged', this);
	};

	Editor.prototype.moveObject = function (object, parent, before) { // 移动物体
	    if (parent === undefined) {
	        parent = this.scene;
	    }

	    parent.add(object);

	    // sort children array
	    if (before !== undefined) {
	        var index = parent.children.indexOf(before);
	        parent.children.splice(index, 0, object);
	        parent.children.pop();
	    }

	    this.app.call('sceneGraphChanged', this);
	};

	Editor.prototype.removeObject = function (object) { // 移除物体
	    if (object.parent === null) { // 避免删除相机或场景
	        return;
	    }

	    object.parent.remove(object);

	    this.app.call('objectRemoved', this, object);
	    this.app.call('sceneGraphChanged', this);
	};

	// ------------------------- 帮助 ------------------------------

	Editor.prototype.addPhysicsHelper = function (helper) {
	    var geometry = new THREE.SphereBufferGeometry(2, 4, 2);
	    var material = new THREE.MeshBasicMaterial({
	        color: 0xff0000,
	        visible: false
	    });

	    var picker = new THREE.Mesh(geometry, material);
	    picker.name = 'picker';
	    picker.userData.object = helper.object;
	    helper.add(picker);

	    this.sceneHelpers.add(helper);
	    this.helpers[helper.object.id] = helper;
	    this.objects.push(picker);
	};

	Editor.prototype.removePhysicsHelper = function (helper) {
	    if (this.helpers[helper.object.id] !== undefined) {
	        var helper = this.helpers[helper.object.id];
	        helper.parent.remove(helper);
	        delete this.helpers[helper.object.id];

	        var objects = this.objects;
	        objects.splice(objects.indexOf(helper.getObjectByName('picker')), 1);
	    }
	};

	// ------------------------ 脚本 ----------------------------

	Editor.prototype.addScript = function (object, script) { // 添加脚本
	    if (this.scripts[object.uuid] === undefined) {
	        this.scripts[object.uuid] = [];
	    }

	    this.scripts[object.uuid].push(script);

	    this.app.call('scriptAdded', this, script);
	};

	Editor.prototype.removeScript = function (object, script) { // 移除脚本
	    if (this.scripts[object.uuid] === undefined) {
	        return;
	    }

	    var index = this.scripts[object.uuid].indexOf(script);

	    if (index !== -1) {
	        this.scripts[object.uuid].splice(index, 1);
	    }

	    this.app.call('scriptRemoved', this);
	};

	// ------------------------ 选中事件 --------------------------------

	Editor.prototype.select = function (object) { // 选中物体
	    if (this.selected === object) {
	        return;
	    }

	    this.selected = object;

	    this.app.call('objectSelected', this, object);
	};

	Editor.prototype.selectById = function (id) { // 根据id选中物体
	    if (id === this.camera.id) {
	        this.select(this.camera);
	        return;
	    }

	    this.select(this.scene.getObjectById(id, true));
	};

	Editor.prototype.selectByUuid = function (uuid) { // 根据uuid选中物体
	    if (uuid === this.camera.uuid) {
	        this.select(this.camera);
	        return;
	    }

	    this.scene.traverse(child => {
	        if (child.uuid === uuid) {
	            this.select(child);
	        }
	    });
	};

	Editor.prototype.deselect = function () { // 取消选中物体
	    this.select(null);
	};

	// ---------------------- 焦点事件 --------------------------

	Editor.prototype.focus = function (object) { // 设置焦点
	    this.app.call('objectFocused', this, object);
	};

	Editor.prototype.focusById = function (id) { // 根据id设置交点
	    var obj = this.scene.getObjectById(id, true);
	    if (obj) {
	        this.focus(obj);
	    }
	};

	Editor.prototype.focusByUUID = function (uuid) { // 根据uuid设置焦点
	    if (uuid === this.camera.uuid) {
	        this.focus(this.camera);
	        return;
	    }

	    this.scene.traverse(child => {
	        if (child.uuid === uuid) {
	            this.focus(child);
	        }
	    });
	};

	// ----------------------- 命令事件 --------------------------

	Editor.prototype.execute = function (cmd, optionalName) { // 执行事件
	    this.history.execute(cmd, optionalName);
	};

	Editor.prototype.undo = function () { // 撤销事件
	    this.history.undo();
	};

	Editor.prototype.redo = function () { // 重做事件
	    this.history.redo();
	};

	// ---------------------- 碰撞检测 -----------------------------

	Editor.prototype.onMouseDown = function (event) {
	    this.raycaster.setFromCamera(this.mouse, this.camera);
	    var intersect = this.raycaster.intersectObjects(this.scene.children, true)[0];

	    if (intersect) {
	        this.app.call(`intersect`, this, intersect, event);
	    }
	};

	Editor.prototype.onMouseMove = function (event) {
	    this.mouse.x = (event.offsetX / this.renderer.domElement.clientWidth) * 2 - 1;
	    this.mouse.y = -(event.offsetY / this.renderer.domElement.clientHeight) * 2 + 1;
	};

	/**
	 * 应用程序
	 * @author mrdoob / http://mrdoob.com/
	 * @author tengge / https://github.com/tengge1
	 */
	function Application(container, options) {

	    // 容器
	    this.container = container;
	    this.width = this.container.clientWidth;
	    this.height = this.container.clientHeight;

	    // 配置
	    this.options = new Options(options);

	    // 存储
	    this.storage = new Storage();
	    this.initStorage();

	    // 包管理器
	    this.packageManager = new PackageManager();
	    this.require = this.packageManager.require.bind(this.packageManager);

	    // 事件
	    this.event = new EventDispatcher(this);
	    this.call = this.event.call.bind(this.event);
	    this.on = this.event.on.bind(this.event);

	    var params = {
	        app: this
	    };

	    // 用户界面
	    this.ui = UI$1;
	    this.menubar = new Menubar(params); // 菜单栏
	    this.toolbar = new Toolbar(params); // 工具栏
	    this.viewport = new Viewport(params); // 场景编辑区
	    this.sidebar = new Sidebar(params); // 侧边栏
	    this.sidebar2 = new Sidebar$1(params); // 侧边栏2
	    this.bottomPanel = new BottomPanel(params); // 底部面板
	    this.statusBar = new StatusBar(params); // 状态栏
	    this.script = new ScriptEditor(params); // 脚本编辑器面板
	    this.player = new Player({
	        server: this.options.server,
	        enableThrowBall: false,
	        showStats: true,
	    }); // 播放器面板

	    UI$1.create({
	        xtype: 'container',
	        parent: this.container,
	        children: [
	            this.menubar, // 菜单栏
	            this.toolbar, // 工具栏
	            this.viewport, // 场景编辑区
	            this.sidebar, // 侧边栏
	            this.sidebar2, // 侧边栏2
	            this.bottomPanel, // 底部面板
	            this.statusBar, // 状态栏
	            this.script, // 脚本编辑器面板
	            this.player, // 播放器面板
	        ]
	    }).render();

	    // 编辑器
	    this.editor = new Editor(this);
	}

	Application.prototype.initStorage = function () {
	    if (this.storage.get('showGrid') === undefined) {
	        this.storage.set('showGrid', true);
	    }

	    if (this.storage.get('showCamera') === undefined) {
	        this.storage.set('showCamera', false);
	    }

	    if (this.storage.get('showPointLight') === undefined) {
	        this.storage.set('showPointLight', true);
	    }

	    if (this.storage.get('showDirectionalLight') === undefined) {
	        this.storage.set('showDirectionalLight', true);
	    }

	    if (this.storage.get('showSpotLight') === undefined) {
	        this.storage.set('showSpotLight', true);
	    }

	    if (this.storage.get('showHemisphereLight') === undefined) {
	        this.storage.set('showHemisphereLight', true);
	    }

	    if (this.storage.get('showRectAreaLight') === undefined) {
	        this.storage.set('showRectAreaLight', true);
	    }

	    if (this.storage.get('showSkeleton') === undefined) {
	        this.storage.set('showSkeleton', false);
	    }
	};

	// ------------------------- 程序控制 -------------------------------

	Application.prototype.start = function () {
	    // 启动事件 - 事件要在ui创建完成后启动
	    this.event.start();

	    this.call('appStart', this);
	    this.call('appStarted', this);

	    this.call('resize', this);

	    this.log('程序启动成功。');
	};

	Application.prototype.stop = function () {
	    this.call('appStop', this);
	    this.call('appStoped', this);

	    this.log('程序已经停止');

	    this.event.stop();
	};

	// ----------------------- 记录日志  --------------------------------

	Application.prototype.log = function (content) { // 普通日志
	    this.call('log', this, content);
	};

	Application.prototype.warn = function (content) { // 警告日志
	    this.call('log', this, content, 'warn');
	};

	Application.prototype.error = function (content) { // 错误日志
	    this.call('log', this, content, 'error');
	};

	exports.Options = Options;
	exports.Control = Control;
	exports.SvgControl = SvgControl;
	exports.Alert = Alert;
	exports.Boolean = Boolean;
	exports.Break = Break;
	exports.Button = Button;
	exports.Canvas = Canvas;
	exports.Category = Category;
	exports.Checkbox = Checkbox;
	exports.CloseButton = CloseButton;
	exports.Color = Color;
	exports.Confirm = Confirm;
	exports.Container = Container;
	exports.DataTable = DataTable;
	exports.Div = Div;
	exports.HorizontalRule = HorizontalRule;
	exports.Html = Html;
	exports.IconButton = IconButton;
	exports.Image = Image$1;
	exports.ImageList = ImageList;
	exports.ImageUploader = ImageUploader;
	exports.Input = Input;
	exports.Integer = Integer;
	exports.Label = Label;
	exports.LinkButton = LinkButton;
	exports.MessageBox = MessageBox;
	exports.Modal = Modal;
	exports.Number = Number$1;
	exports.Prompt = Prompt;
	exports.Row = Row;
	exports.SearchField = SearchField;
	exports.Select = Select;
	exports.Span = Span;
	exports.Text = Text;
	exports.TextArea = TextArea;
	exports.Texture = Texture;
	exports.Timeline = Timeline;
	exports.ToolbarFiller = ToolbarFiller;
	exports.Window = Window;
	exports.UI = UI$1;
	exports.Player = Player;
	exports.GeoUtils = GeoUtils;
	exports.Application = Application;

	Object.defineProperty(exports, '__esModule', { value: true });

})));
